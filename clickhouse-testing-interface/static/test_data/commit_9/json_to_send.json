{"commits": {"leftCommit": {"commit": "faeab5f6496e4875ae9b66a97a60229bbca8acdf", "merge": "73f978cb 2d08c8e4", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Mon Apr 20 22:47:12 2020 +0300", "info": "Merge pull request #10370 from amosbird/clang-10\nclang-10 fix"}, "rightCommit": {"commit": "ba7047e9ca98fb8b8fdb685d7f907ebc9b386738 (pr/merge)", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Mon Apr 20 21:14:23 2020 +0000", "info": "Fix error\nReal tested commit is:\nMerge a0d56997de1e736f6b2b09797be5e7b4e73adbe7 into 8c2839d3c9fcb671492356b12af3366ff0601c91", "merge": "8c2839d3 a0d56997"}}, "changes": [{"oldTime": 0.1979, "newTime": 0.2429, "relativeDifference": 0.227, "quantiles": [0.142, 0.161, 0.205, 0.222], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 0.1435, "newTime": 0.121, "relativeDifference": -0.157, "quantiles": [0.0, 0.054, 0.119, 0.136], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}], "unstableQueries": [{"oldTime": 0.0892, "newTime": 0.0762, "relativeDifference": -0.146, "quantiles": [0.011, 0.044, 0.24, 0.306], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.098, "newTime": 0.1018, "relativeDifference": 0.038, "quantiles": [0.034, 0.038, 0.191, 0.202], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.059, "newTime": 0.0591, "relativeDifference": 0.001, "quantiles": [0.001, 0.046, 0.189, 0.211], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0436, "newTime": 0.0444, "relativeDifference": 0.018, "quantiles": [0.0, 0.009, 0.187, 0.195], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionDepth)) SETTINGS max_threads = 1"}, {"oldTime": 0.167, "newTime": 0.1612, "relativeDifference": -0.035, "quantiles": [0.004, 0.03, 0.16, 0.171], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.052, "newTime": 0.0561, "relativeDifference": 0.078, "quantiles": [0.006, 0.056, 0.152, 0.189], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionWidth)) SETTINGS max_threads = 1"}, {"oldTime": 0.1207, "newTime": 0.1152, "relativeDifference": -0.046, "quantiles": [0.008, 0.057, 0.151, 0.169], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1033, "newTime": 0.1008, "relativeDifference": -0.025, "quantiles": [0.024, 0.037, 0.133, 0.147], "testName": "trim_whitespace", "query": "SELECT replaceRegexpAll(value, \\'^ *| *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.2489, "newTime": 0.267, "relativeDifference": 0.072, "quantiles": [0.072, 0.101, 0.13, 0.172], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.5544, "newTime": 0.5538, "relativeDifference": -0.002, "quantiles": [0.001, 0.022, 0.129, 0.136], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.0932, "newTime": 0.0851, "relativeDifference": -0.087, "quantiles": [0.029, 0.047, 0.128, 0.147], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_11111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.1221, "newTime": 0.1229, "relativeDifference": 0.006, "quantiles": [0.002, 0.009, 0.122, 0.153], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2009, "newTime": 0.1992, "relativeDifference": -0.009, "quantiles": [0.003, 0.068, 0.121, 0.13], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_LZ4 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.3936, "newTime": 0.3879, "relativeDifference": -0.015, "quantiles": [0.002, 0.006, 0.116, 0.121], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'\\' SETTINGS max_threads = 2"}, {"oldTime": 0.7877, "newTime": 0.773, "relativeDifference": -0.019, "quantiles": [0.003, 0.03, 0.112, 0.122], "testName": "empty_string_serialization", "query": "INSERT INTO empty_strings SELECT \\'\\' FROM zeros(100000000);"}, {"oldTime": 0.1306, "newTime": 0.1194, "relativeDifference": -0.086, "quantiles": [0.006, 0.05, 0.109, 0.12], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0631, "newTime": 0.0619, "relativeDifference": -0.02, "quantiles": [0.0, 0.019, 0.104, 0.131], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionHeight)) SETTINGS max_threads = 1"}, {"oldTime": 0.1435, "newTime": 0.139, "relativeDifference": -0.032, "quantiles": [0.03, 0.034, 0.101, 0.112], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_T64 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0283, "newTime": 0.0301, "relativeDifference": 0.063, "quantiles": [0.023, 0.038, 0.1, 0.103], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_ZSTD (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.6164, "newTime": 0.6081, "relativeDifference": -0.014, "quantiles": [0.003, 0.046, 0.1, 0.105], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_128(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.8503, "newTime": 0.8746, "relativeDifference": 0.028, "quantiles": [0.001, 0.028, 0.093, 0.123], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"}, {"oldTime": 0.144, "newTime": 0.1339, "relativeDifference": -0.071, "quantiles": [0.005, 0.022, 0.091, 0.108], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.6959, "newTime": 0.7788, "relativeDifference": 0.119, "quantiles": [0.008, 0.055, 0.089, 0.106], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 0.1958, "newTime": 0.1927, "relativeDifference": -0.016, "quantiles": [0.001, 0.016, 0.086, 0.152], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_1111111_key_value\\n         group by key format Null;\\n    "}, {"oldTime": 0.1213, "newTime": 0.1192, "relativeDifference": -0.018, "quantiles": [0.01, 0.024, 0.085, 0.118], "testName": "cpu_synthetic", "query": "SELECT uniqExact(UserID) FROM hits_10m_single"}, {"oldTime": 0.0545, "newTime": 0.057, "relativeDifference": 0.045, "quantiles": [0.003, 0.032, 0.084, 0.12], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel"}, {"oldTime": 0.0815, "newTime": 0.0797, "relativeDifference": -0.023, "quantiles": [0.015, 0.034, 0.082, 0.102], "testName": "distributed_aggregation", "query": "select count() from (select sipHash64(zero) from zeros_mt(100000000) union all select sipHash64(zero) from zeros_mt(100000000))"}, {"oldTime": 0.1212, "newTime": 0.1124, "relativeDifference": -0.073, "quantiles": [0.006, 0.028, 0.079, 0.104], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_NONE (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0489, "newTime": 0.0509, "relativeDifference": 0.04, "quantiles": [0.002, 0.024, 0.067, 0.126], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], []][number % 2 + 2])"}, {"oldTime": 0.0322, "newTime": 0.0326, "relativeDifference": 0.012, "quantiles": [0.003, 0.007, 0.02, 0.348], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    "}], "runErrors": [], "skipped": [{"testName": "IPv4", "reason": "Marked as broken (see compare.sh)"}, {"testName": "IPv6", "reason": "Marked as broken (see compare.sh)"}, {"testName": "modulo", "reason": "Marked as broken (see compare.sh)"}, {"testName": "parse_engine_file", "reason": "Marked as broken (see compare.sh)"}, {"testName": "number_formatting_formats", "reason": "Marked as broken (see compare.sh)"}, {"testName": "select_format", "reason": "Marked as broken (see compare.sh)"}, {"testName": "arithmetic", "reason": "Marked as broken (see compare.sh)"}, {"testName": "cryptographic_hashes", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_medium", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_small", "reason": "Marked as broken (see compare.sh)"}, {"testName": "agg_functions_min_max_any", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "columns_hashing", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "date_time", "reason": "Test is tagged as long."}, {"testName": "float_formatting", "reason": "Test is tagged as long."}, {"testName": "float_parsing", "reason": "Test is tagged as long."}, {"testName": "if_to_multiif", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "insert_values_with_expressions", "reason": "clickhouse_driver.errors.ServerException: Code: 107."}, {"testName": "leftpad", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "nyc_taxi", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "set", "reason": "Test is tagged as long."}], "badTests": [{"testName": "codecs_int_insert", "unstable": 9.0, "changedPerf": 1.0, "total": 10.0}, {"testName": "mingroupby-orderbylimit1", "unstable": 4.0, "changedPerf": 0.0, "total": 4.0}, {"testName": "int_parsing", "unstable": 3.0, "changedPerf": 0.0, "total": 3.0}, {"testName": "general_purpose_hashes", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "visit_param_extract_raw", "unstable": 1.0, "changedPerf": 1.0, "total": 2.0}, {"testName": "website", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "if_array_string", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "array_element", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "cpu_synthetic", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "base64_hits", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "trim_whitespace", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "json_extract_simdjson", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "codecs_float_insert", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "distributed_aggregation", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "empty_string_serialization", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "constant_column_comparison", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}], "testTimes": [{"testName": "materialized_view_parallel_insert", "wallClockTime": 28.75, "clientTime": 25.743, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 25.743, "avgWallClockTime": 28.75, "shortestQuery": 25.743}, {"testName": "parallel_insert", "wallClockTime": 28.691, "clientTime": 25.789, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 25.789, "avgWallClockTime": 28.69, "shortestQuery": 25.789}, {"testName": "simple_join_query", "wallClockTime": 79.251, "clientTime": 51.585, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.04, "avgWallClockTime": 19.812, "shortestQuery": 12.785}, {"testName": "general_purpose_hashes", "wallClockTime": 1447.994, "clientTime": 1326.697, "total": 78.0, "ignoredQueries": 0.0, "longestQuery": 37.661, "avgWallClockTime": 18.564, "shortestQuery": 3.48}, {"testName": "empty_string_serialization", "wallClockTime": 18.229, "clientTime": 16.614, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 16.614, "avgWallClockTime": 18.229, "shortestQuery": 16.614}, {"testName": "trim_urls", "wallClockTime": 106.42, "clientTime": 97.4, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 42.372, "avgWallClockTime": 17.736, "shortestQuery": 8.119}, {"testName": "array_fill", "wallClockTime": 103.232, "clientTime": 94.469, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 26.338, "avgWallClockTime": 17.205, "shortestQuery": 7.26}, {"testName": "group_array_moving_sum", "wallClockTime": 200.478, "clientTime": 148.242, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 20.173, "avgWallClockTime": 16.706, "shortestQuery": 6.777}, {"testName": "prewhere", "wallClockTime": 16.614, "clientTime": 15.11, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 15.11, "avgWallClockTime": 16.614, "shortestQuery": 15.11}, {"testName": "first_significant_subdomain", "wallClockTime": 15.941, "clientTime": 14.509, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.509, "avgWallClockTime": 15.94, "shortestQuery": 14.509}, {"testName": "constant_column_search", "wallClockTime": 406.162, "clientTime": 371.621, "total": 28.0, "ignoredQueries": 0.0, "longestQuery": 35.1, "avgWallClockTime": 14.505, "shortestQuery": 4.895}, {"testName": "and_function", "wallClockTime": 26.777, "clientTime": 24.455, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 22.423, "avgWallClockTime": 13.388, "shortestQuery": 2.032}, {"testName": "trim_numbers", "wallClockTime": 79.879, "clientTime": 73.106, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 30.124, "avgWallClockTime": 13.313, "shortestQuery": 2.557}, {"testName": "string_sort", "wallClockTime": 1104.098, "clientTime": 1013.052, "total": 84.0, "ignoredQueries": 0.0, "longestQuery": 34.781, "avgWallClockTime": 13.144, "shortestQuery": 0.589}, {"testName": "merge_tree_many_partitions_2", "wallClockTime": 12.073, "clientTime": 4.386, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 4.386, "avgWallClockTime": 12.072, "shortestQuery": 4.386}, {"testName": "constant_column_comparison", "wallClockTime": 221.25, "clientTime": 202.708, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 14.434, "avgWallClockTime": 10.535, "shortestQuery": 3.848}, {"testName": "json_extract_rapidjson", "wallClockTime": 133.742, "clientTime": 122.458, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 18.325, "avgWallClockTime": 10.287, "shortestQuery": 3.537}, {"testName": "bloom_filter", "wallClockTime": 9.815, "clientTime": 8.821, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 8.821, "avgWallClockTime": 9.814, "shortestQuery": 8.821}, {"testName": "url_hits", "wallClockTime": 191.615, "clientTime": 182.773, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 21.97, "avgWallClockTime": 9.58, "shortestQuery": 5.889}, {"testName": "joins_in_memory", "wallClockTime": 324.655, "clientTime": 444.783, "total": 34.0, "ignoredQueries": 10.0, "longestQuery": 21.447, "avgWallClockTime": 9.548, "shortestQuery": 17.259}, {"testName": "array_reduce", "wallClockTime": 56.872, "clientTime": 52.017, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 13.262, "avgWallClockTime": 9.478, "shortestQuery": 3.765}, {"testName": "general_purpose_hashes_on_UUID", "wallClockTime": 612.526, "clientTime": 561.694, "total": 66.0, "ignoredQueries": 11.0, "longestQuery": 27.937, "avgWallClockTime": 9.28, "shortestQuery": 0.874}, {"testName": "base64_hits", "wallClockTime": 108.935, "clientTime": 99.722, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 17.622, "avgWallClockTime": 9.077, "shortestQuery": 0.83}, {"testName": "sum_map", "wallClockTime": 34.988, "clientTime": 29.784, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.527, "avgWallClockTime": 8.746, "shortestQuery": 1.386}, {"testName": "if_array_string", "wallClockTime": 51.585, "clientTime": 47.213, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 19.278, "avgWallClockTime": 8.597, "shortestQuery": 4.149}, {"testName": "logical_functions_large", "wallClockTime": 85.796, "clientTime": 78.522, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 20.34, "avgWallClockTime": 8.579, "shortestQuery": 3.845}, {"testName": "string_join", "wallClockTime": 25.621, "clientTime": 19.402, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 8.156, "avgWallClockTime": 8.54, "shortestQuery": 4.365}, {"testName": "visit_param_extract_raw", "wallClockTime": 25.326, "clientTime": 23.183, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 16.287, "avgWallClockTime": 8.442, "shortestQuery": 2.055}, {"testName": "synthetic_hardware_benchmark", "wallClockTime": 209.823, "clientTime": 192.134, "total": 26.0, "ignoredQueries": 0.0, "longestQuery": 37.388, "avgWallClockTime": 8.07, "shortestQuery": 0.891}, {"testName": "column_column_comparison", "wallClockTime": 141.799, "clientTime": 129.965, "total": 19.0, "ignoredQueries": 7.0, "longestQuery": 26.383, "avgWallClockTime": 7.463, "shortestQuery": 5.207}, {"testName": "math", "wallClockTime": 442.254, "clientTime": 405.371, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 19.639, "avgWallClockTime": 7.37, "shortestQuery": 2.268}, {"testName": "round_down", "wallClockTime": 35.767, "clientTime": 32.691, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 25.987, "avgWallClockTime": 7.153, "shortestQuery": 1.296}, {"testName": "right", "wallClockTime": 13.931, "clientTime": 12.684, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 6.63, "avgWallClockTime": 6.965, "shortestQuery": 6.053}, {"testName": "array_join", "wallClockTime": 41.609, "clientTime": 38.007, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 8.976, "avgWallClockTime": 6.934, "shortestQuery": 2.266}, {"testName": "random_printable_ascii", "wallClockTime": 48.527, "clientTime": 44.206, "total": 7.0, "ignoredQueries": 1.0, "longestQuery": 15.033, "avgWallClockTime": 6.932, "shortestQuery": 2.985}, {"testName": "cpu_synthetic", "wallClockTime": 322.925, "clientTime": 309.176, "total": 47.0, "ignoredQueries": 7.0, "longestQuery": 42.234, "avgWallClockTime": 6.87, "shortestQuery": 1.042}, {"testName": "ngram_distance", "wallClockTime": 109.514, "clientTime": 100.31, "total": 16.0, "ignoredQueries": 0.0, "longestQuery": 11.012, "avgWallClockTime": 6.844, "shortestQuery": 4.065}, {"testName": "vectorize_aggregation_combinators", "wallClockTime": 33.551, "clientTime": 26.92, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 11.179, "avgWallClockTime": 6.71, "shortestQuery": 0.588}, {"testName": "sort", "wallClockTime": 67.004, "clientTime": 60.419, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 12.978, "avgWallClockTime": 6.7, "shortestQuery": 3.587}, {"testName": "merge_tree_many_partitions", "wallClockTime": 6.516, "clientTime": 0.028, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.515, "shortestQuery": 0.0}, {"testName": "collations", "wallClockTime": 12.931, "clientTime": 11.762, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 10.626, "avgWallClockTime": 6.465, "shortestQuery": 1.136}, {"testName": "merge_tree_simple_select", "wallClockTime": 6.368, "clientTime": 0.014, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.368, "shortestQuery": 0.0}, {"testName": "uniq", "wallClockTime": 508.307, "clientTime": 465.274, "total": 80.0, "ignoredQueries": 6.0, "longestQuery": 43.5, "avgWallClockTime": 6.353, "shortestQuery": 0.892}, {"testName": "string_set", "wallClockTime": 42.721, "clientTime": 35.025, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 7.828, "avgWallClockTime": 6.103, "shortestQuery": 3.049}, {"testName": "base64", "wallClockTime": 49.834, "clientTime": 45.536, "total": 9.0, "ignoredQueries": 0.0, "longestQuery": 8.823, "avgWallClockTime": 5.537, "shortestQuery": 2.021}, {"testName": "json_extract_simdjson", "wallClockTime": 71.348, "clientTime": 65.328, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 12.11, "avgWallClockTime": 5.488, "shortestQuery": 2.704}, {"testName": "merge_tree_huge_pk", "wallClockTime": 21.885, "clientTime": 1.843, "total": 4.0, "ignoredQueries": 3.0, "longestQuery": 1.336, "avgWallClockTime": 5.471, "shortestQuery": 1.336}, {"testName": "website", "wallClockTime": 380.247, "clientTime": 353.727, "total": 73.0, "ignoredQueries": 18.0, "longestQuery": 38.089, "avgWallClockTime": 5.208, "shortestQuery": 0.687}, {"testName": "read_hits_with_aio", "wallClockTime": 19.534, "clientTime": 17.802, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 5.849, "avgWallClockTime": 4.883, "shortestQuery": 2.764}, {"testName": "order_by_single_column", "wallClockTime": 33.479, "clientTime": 30.637, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 9.679, "avgWallClockTime": 4.782, "shortestQuery": 1.209}, {"testName": "range", "wallClockTime": 9.456, "clientTime": 8.576, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.845, "avgWallClockTime": 4.728, "shortestQuery": 2.731}, {"testName": "inserts_arrays_lowcardinality", "wallClockTime": 9.419, "clientTime": 7.345, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.686, "avgWallClockTime": 4.709, "shortestQuery": 1.659}, {"testName": "codecs_int_insert", "wallClockTime": 93.59, "clientTime": 80.495, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 7.526, "avgWallClockTime": 4.456, "shortestQuery": 1.301}, {"testName": "mingroupby-orderbylimit1", "wallClockTime": 35.02, "clientTime": 30.574, "total": 8.0, "ignoredQueries": 1.0, "longestQuery": 9.433, "avgWallClockTime": 4.377, "shortestQuery": 0.799}, {"testName": "entropy", "wallClockTime": 37.717, "clientTime": 34.416, "total": 9.0, "ignoredQueries": 3.0, "longestQuery": 14.658, "avgWallClockTime": 4.19, "shortestQuery": 0.737}, {"testName": "trim_whitespace", "wallClockTime": 24.249, "clientTime": 11.681, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.389, "avgWallClockTime": 4.041, "shortestQuery": 0.941}, {"testName": "linear_regression", "wallClockTime": 20.157, "clientTime": 18.317, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 8.548, "avgWallClockTime": 4.031, "shortestQuery": 0.725}, {"testName": "scalar", "wallClockTime": 3.96, "clientTime": 1.376, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.376, "avgWallClockTime": 3.96, "shortestQuery": 1.376}, {"testName": "order_by_read_in_order", "wallClockTime": 19.79, "clientTime": 17.758, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 9.01, "avgWallClockTime": 3.958, "shortestQuery": 1.43}, {"testName": "set_hits", "wallClockTime": 22.844, "clientTime": 20.821, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 7.106, "avgWallClockTime": 3.807, "shortestQuery": 0.991}, {"testName": "array_auc", "wallClockTime": 3.609, "clientTime": 3.195, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 3.195, "avgWallClockTime": 3.608, "shortestQuery": 3.195}, {"testName": "functions_geo", "wallClockTime": 20.359, "clientTime": 18.564, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 5.657, "avgWallClockTime": 3.393, "shortestQuery": 1.737}, {"testName": "set_index", "wallClockTime": 15.635, "clientTime": 4.608, "total": 5.0, "ignoredQueries": 2.0, "longestQuery": 2.135, "avgWallClockTime": 3.127, "shortestQuery": 0.653}, {"testName": "if_array_num", "wallClockTime": 17.522, "clientTime": 15.961, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.512, "avgWallClockTime": 2.92, "shortestQuery": 1.843}, {"testName": "bitCount", "wallClockTime": 16.586, "clientTime": 15.093, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.711, "avgWallClockTime": 2.764, "shortestQuery": 1.684}, {"testName": "decimal_aggregates", "wallClockTime": 56.727, "clientTime": 51.777, "total": 21.0, "ignoredQueries": 6.0, "longestQuery": 5.366, "avgWallClockTime": 2.701, "shortestQuery": 0.869}, {"testName": "h3", "wallClockTime": 2.598, "clientTime": 2.285, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.285, "avgWallClockTime": 2.598, "shortestQuery": 2.285}, {"testName": "date_time_64", "wallClockTime": 42.823, "clientTime": 31.963, "total": 18.0, "ignoredQueries": 5.0, "longestQuery": 7.308, "avgWallClockTime": 2.379, "shortestQuery": 0.558}, {"testName": "empty_string_deserialization", "wallClockTime": 2.225, "clientTime": 0.407, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 2.224, "shortestQuery": 0.0}, {"testName": "least_greatest_hits", "wallClockTime": 6.42, "clientTime": 5.804, "total": 3.0, "ignoredQueries": 1.0, "longestQuery": 3.487, "avgWallClockTime": 2.14, "shortestQuery": 2.095}, {"testName": "distributed_aggregation", "wallClockTime": 7.627, "clientTime": 6.888, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 1.778, "avgWallClockTime": 1.906, "shortestQuery": 1.685}, {"testName": "jit_large_requests", "wallClockTime": 3.516, "clientTime": 1.509, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.961, "avgWallClockTime": 1.758, "shortestQuery": 0.961}, {"testName": "merge_table_streams", "wallClockTime": 1.747, "clientTime": 1.389, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.389, "avgWallClockTime": 1.746, "shortestQuery": 1.389}, {"testName": "order_by_decimals", "wallClockTime": 8.547, "clientTime": 7.74, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 2.327, "avgWallClockTime": 1.709, "shortestQuery": 0.813}, {"testName": "pre_limit_no_sorting", "wallClockTime": 1.641, "clientTime": 1.393, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.393, "avgWallClockTime": 1.641, "shortestQuery": 1.393}, {"testName": "array_element", "wallClockTime": 4.506, "clientTime": 4.043, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 1.491, "avgWallClockTime": 1.502, "shortestQuery": 1.072}, {"testName": "int_parsing", "wallClockTime": 102.28, "clientTime": 93.69, "total": 83.0, "ignoredQueries": 0.0, "longestQuery": 4.026, "avgWallClockTime": 1.232, "shortestQuery": 0.612}, {"testName": "basename", "wallClockTime": 2.231, "clientTime": 1.943, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 1.046, "avgWallClockTime": 1.115, "shortestQuery": 0.897}, {"testName": "if_string_hits", "wallClockTime": 4.25, "clientTime": 3.803, "total": 4.0, "ignoredQueries": 2.0, "longestQuery": 2.055, "avgWallClockTime": 1.062, "shortestQuery": 1.045}, {"testName": "concat_hits", "wallClockTime": 23.731, "clientTime": 21.648, "total": 26.0, "ignoredQueries": 14.0, "longestQuery": 1.772, "avgWallClockTime": 0.912, "shortestQuery": 1.168}, {"testName": "bit_operations_fixed_string_numbers", "wallClockTime": 1.817, "clientTime": 1.565, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.944, "avgWallClockTime": 0.908, "shortestQuery": 0.62}, {"testName": "great_circle_dist", "wallClockTime": 1.753, "clientTime": 1.51, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.968, "avgWallClockTime": 0.876, "shortestQuery": 0.968}, {"testName": "joins_in_memory_pmj", "wallClockTime": 20.492, "clientTime": 37.368, "total": 24.0, "ignoredQueries": 8.0, "longestQuery": 2.734, "avgWallClockTime": 0.853, "shortestQuery": 2.066}, {"testName": "information_value", "wallClockTime": 1.696, "clientTime": 1.452, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.916, "avgWallClockTime": 0.847, "shortestQuery": 0.916}, {"testName": "jit_small_requests", "wallClockTime": 2.351, "clientTime": 1.98, "total": 3.0, "ignoredQueries": 2.0, "longestQuery": 1.279, "avgWallClockTime": 0.783, "shortestQuery": 1.279}, {"testName": "count", "wallClockTime": 0.762, "clientTime": 0.017, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.762, "shortestQuery": 0.0}, {"testName": "codecs_float_insert", "wallClockTime": 11.012, "clientTime": 9.198, "total": 15.0, "ignoredQueries": 5.0, "longestQuery": 0.953, "avgWallClockTime": 0.734, "shortestQuery": 0.572}, {"testName": "slices_hits", "wallClockTime": 1.442, "clientTime": 1.216, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.945, "avgWallClockTime": 0.721, "shortestQuery": 0.945}, {"testName": "analyze_array_tuples", "wallClockTime": 0.647, "clientTime": 0.491, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.647, "shortestQuery": 0.0}, {"testName": "format_date_time", "wallClockTime": 3.504, "clientTime": 3.119, "total": 6.0, "ignoredQueries": 2.0, "longestQuery": 0.662, "avgWallClockTime": 0.583, "shortestQuery": 0.564}, {"testName": "complex_array_creation", "wallClockTime": 1.162, "clientTime": 0.971, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.58, "shortestQuery": 0.0}, {"testName": "consistent_hashes", "wallClockTime": 3.474, "clientTime": 3.089, "total": 7.0, "ignoredQueries": 5.0, "longestQuery": 1.492, "avgWallClockTime": 0.496, "shortestQuery": 1.001}, {"testName": "date_parsing", "wallClockTime": 0.48, "clientTime": 0.339, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.479, "shortestQuery": 0.0}, {"testName": "conditional", "wallClockTime": 3.703, "clientTime": 3.299, "total": 8.0, "ignoredQueries": 6.0, "longestQuery": 0.717, "avgWallClockTime": 0.462, "shortestQuery": 0.62}, {"testName": "early_constant_folding", "wallClockTime": 0.421, "clientTime": 0.288, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.421, "shortestQuery": 0.0}, {"testName": "fixed_string16", "wallClockTime": 0.398, "clientTime": 0.26, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.398, "shortestQuery": 0.0}, {"testName": "generate_table_function", "wallClockTime": 6.766, "clientTime": 6.081, "total": 19.0, "ignoredQueries": 17.0, "longestQuery": 1.261, "avgWallClockTime": 0.356, "shortestQuery": 0.653}, {"testName": "cidr", "wallClockTime": 0.709, "clientTime": 0.55, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.354, "shortestQuery": 0.0}, {"testName": "bit_operations_fixed_string", "wallClockTime": 1.333, "clientTime": 1.115, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.333, "shortestQuery": 0.0}, {"testName": "codecs_float_select", "wallClockTime": 4.718, "clientTime": 3.368, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.314, "shortestQuery": 0.0}, {"testName": "codecs_int_select", "wallClockTime": 5.739, "clientTime": 4.228, "total": 21.0, "ignoredQueries": 21.0, "longestQuery": 0.0, "avgWallClockTime": 0.273, "shortestQuery": 0.0}, {"testName": "functions_coding", "wallClockTime": 1.038, "clientTime": 0.855, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.259, "shortestQuery": 0.0}, {"testName": "if_string_const", "wallClockTime": 0.987, "clientTime": 0.808, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.246, "shortestQuery": 0.0}, {"testName": "round_methods", "wallClockTime": 2.77, "clientTime": 2.442, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.184, "shortestQuery": 0.0}, {"testName": "bounding_ratio", "wallClockTime": 0.357, "clientTime": 0.233, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.178, "shortestQuery": 0.0}], "slowOnClient": [], "allQueries": 1234, "timePerformance": {"analyze_array_tuples": {"difference": [0.0], "newTime": [0.0218]}, "and_function": {"difference": [-0.0005, 0.0025], "newTime": [0.0895, 1.0215]}, "array_auc": {"difference": [-0.0042], "newTime": [0.145]}, "array_element": {"difference": [0.004, 0.0007, 0.002], "newTime": [0.0686, 0.0685, 0.0509]}, "array_fill": {"difference": [-0.0075, -0.0004, 0.0073, 0.0053, 0.0025, 0.0059], "newTime": [0.4265, 0.3313, 0.3712, 1.2026, 0.9247, 1.043]}, "array_join": {"difference": [-0.0004, -0.0036, -0.0027, 0.0002, -0.0007, -0.0067], "newTime": [0.405, 0.4025, 0.1014, 0.3064, 0.1946, 0.3014]}, "array_reduce": {"difference": [0.0017, 0.0025, 0.0005, -0.0005, 0.0021, -0.0079], "newTime": [0.1724, 0.2081, 0.3915, 0.5908, 0.3974, 0.5991]}, "base64": {"difference": [0.0003, -0.0038, 0.0016, -0.0012, 0.005, 0.0033, -0.0031, -0.0051, -0.003], "newTime": [0.0923, 0.1837, 0.133, 0.198, 0.4028, 0.2316, 0.194, 0.3974, 0.2283]}, "base64_hits": {"difference": [0.0015, 0.0019, 0.006, -0.0172, 0.0007, 0.0009, 0.0077, -0.0137, 0.0025, 0.0028, -0.0155, 0.0116], "newTime": [0.0373, 0.0831, 0.4295, 0.4412, 0.0537, 0.1361, 0.7867, 0.7739, 0.057, 0.1389, 0.7686, 0.809]}, "basename": {"difference": [-0.0015, 0.0], "newTime": [0.0393, 0.0471]}, "bitCount": {"difference": [0.0004, 0.0003, -0.0018, 0.0014, 0.0018, 0.0022], "newTime": [0.076, 0.1443, 0.099, 0.1695, 0.1007, 0.0956]}, "bit_operations_fixed_string": {"difference": [-0.0003, 0.0, -0.0005, -0.0006], "newTime": [0.0118, 0.0105, 0.0119, 0.0121]}, "bit_operations_fixed_string_numbers": {"difference": [0.0, -0.0012], "newTime": [0.0427, 0.0276]}, "bloom_filter": {"difference": [0.0008], "newTime": [0.4019]}, "bounding_ratio": {"difference": [-0.0003, -0.0011], "newTime": [0.0047, 0.0046]}, "cidr": {"difference": [-0.0001, 0.0002], "newTime": [0.0089, 0.0144]}, "codecs_float_insert": {"difference": [0.0, -0.0001, 0.0005, -0.0009, 0.0004, -0.0007, 0.0, -0.0011, -0.0005, 0.0005, -0.0003, 0.0005, 0.0, 0.0001, 0.0018], "newTime": [0.0424, 0.0414, 0.0386, 0.0297, 0.0421, 0.0277, 0.0289, 0.015, 0.0152, 0.0284, 0.0137, 0.0263, 0.0181, 0.0171, 0.0301]}, "codecs_float_select": {"difference": [0.0002, 0.0002, -0.0008, -0.0003, 0.0, 0.0001, 0.0, -0.0005, -0.0001, -0.0005, -0.0002, -0.0001, -0.0006, -0.0003, -0.0001], "newTime": [0.0163, 0.0133, 0.0062, 0.0047, 0.0123, 0.016, 0.0145, 0.0048, 0.0047, 0.0123, 0.0078, 0.0128, 0.0045, 0.0047, 0.0127]}, "codecs_int_insert": {"difference": [-0.0101, -0.004, 0.0099, -0.0017, -0.0225, -0.0058, 0.0006, 0.0008, 0.0064, 0.0143, -0.0112, -0.0088, -0.0012, 0.0069, 0.0044, 0.0001, 0.0018, 0.0001, -0.0055, -0.0045, 0.0027], "newTime": [0.1339, 0.2173, 0.2236, 0.1992, 0.121, 0.1612, 0.3387, 0.1229, 0.2425, 0.2629, 0.1194, 0.1124, 0.1532, 0.1631, 0.1105, 0.0591, 0.1821, 0.1769, 0.1152, 0.139, 0.2719]}, "codecs_int_select": {"difference": [-0.0009, -0.0004, -0.0007, -0.0005, 0.0, -0.0007, -0.0005, -0.0008, -0.0006, -0.0004, -0.0005, -0.0003, -0.0005, -0.0011, -0.0004, -0.0002, -0.0003, -0.0005, -0.0002, -0.0005, -0.0004], "newTime": [0.0038, 0.0117, 0.0096, 0.0109, 0.0051, 0.0109, 0.0154, 0.0044, 0.0156, 0.014, 0.0045, 0.0046, 0.0081, 0.0044, 0.0046, 0.0057, 0.0085, 0.0109, 0.0047, 0.0105, 0.015]}, "collations": {"difference": [-0.0135, 0.0014], "newTime": [0.4728, 0.051]}, "column_column_comparison": {"difference": [0.0, -0.0045, 0.0021, 0.0001, 0.0005, -0.0087, 0.0, -0.0001, -0.0006, 0.0002, -0.0129, 0.0014, 0.0002, 0.0002, -0.0118, 0.0046, -0.0069, -0.0004, 0.0056], "newTime": [0.0011, 0.61, 0.2373, 0.0013, 0.2553, 0.9059, 0.0011, 0.2827, 0.249, 0.0013, 0.6259, 0.2664, 0.0018, 0.0015, 0.6639, 0.2589, 1.1934, 0.0013, 0.3138]}, "complex_array_creation": {"difference": [0.0002, -0.0007], "newTime": [0.0227, 0.0203]}, "concat_hits": {"difference": [-0.0009, -0.0002, 0.0002, -0.001, -0.0004, 0.0002, 0.0016, 0.0003, 0.0012, -0.0006, 0.0023, 0.0003, -0.0008, 0.0, -0.0002, 0.0013, 0.0003, -0.0001, 0.0, 0.0007, -0.0001, 0.0007, -0.0002, -0.0006, -0.0008, 0.0017], "newTime": [0.0151, 0.0144, 0.0126, 0.0106, 0.0152, 0.0167, 0.013, 0.0529, 0.068, 0.0563, 0.0641, 0.0645, 0.0794, 0.0158, 0.0147, 0.0141, 0.0108, 0.0536, 0.0162, 0.0699, 0.0118, 0.0179, 0.0579, 0.0671, 0.061, 0.08]}, "conditional": {"difference": [0.0003, -0.0002, 0.0004, 0.0014, 0.0004, 0.0006, -0.0001, -0.0007], "newTime": [0.0154, 0.0278, 0.009, 0.0154, 0.0194, 0.0323, 0.0118, 0.0168]}, "consistent_hashes": {"difference": [0.001, -0.0006, -0.0011, -0.0004, 0.0001, 0.0004, 0.0004], "newTime": [0.0052, 0.0672, 0.0448, 0.0052, 0.0052, 0.0056, 0.0053]}, "constant_column_comparison": {"difference": [-0.0112, -0.0109, -0.0179, -0.0057, -0.0042, 0.0025, -0.0019, -0.0002, -0.0006, -0.0005, -0.0026, -0.0001, -0.0024, 0.0041, -0.0003, -0.0134, -0.0158, -0.0151, -0.0059, -0.0071, -0.0034], "newTime": [0.4605, 0.4924, 0.4928, 0.3879, 0.4466, 0.4507, 0.4939, 0.5542, 0.5556, 0.1752, 0.2112, 0.2119, 0.1954, 0.2276, 0.2299, 0.535, 0.6052, 0.6148, 0.5271, 0.6033, 0.6529]}, "constant_column_search": {"difference": [0.0006, 0.0091, 0.0017, -0.0001, -0.0841, -0.0193, -0.0024, -0.0025, -0.0005, -0.0118, -0.0054, -0.0212, 0.0011, -0.0075, -0.0028, 0.0001, -0.0061, -0.0005, -0.074, 0.0007, -0.0658, -0.0033, 0.0002, 0.0065, 0.0032, 0.0032, 0.0082, -0.0021], "newTime": [0.2215, 0.2351, 0.8989, 1.0589, 1.5519, 1.0476, 0.4652, 0.5696, 0.5236, 0.8658, 0.6032, 0.988, 0.426, 0.3197, 0.3395, 0.4941, 0.3651, 0.4657, 1.1651, 0.3736, 1.0712, 0.4335, 0.4752, 0.4503, 0.3258, 0.2489, 0.3254, 0.3945]}, "count": {"difference": [0.0002], "newTime": [0.0008]}, "cpu_synthetic": {"difference": [0.0015, 0.0052, 0.0076, 0.0046, 0.0386, -0.0006, 0.0005, -0.0006, -0.0005, -0.0002, 0.0009, -0.0004, 0.0019, 0.0004, -0.0028, 0.0008, 0.0348, 0.0035, 0.0009, -0.0001, 0.0062, -0.0187, 0.0038, -0.0013, 0.0017, -0.0013, -0.001, 0.0003, 0.0029, 0.0019, 0.008, -0.0017, -0.0003, -0.0001, -0.0006, 0.0005, 0.0003, -0.0002, 0.0001, 0.001, 0.0029, 0.0008, -0.0013, -0.0021, -0.0038], "newTime": [0.1759, 0.2704, 0.4798, 1.067, 0.9751, 0.0464, 0.0656, 0.2681, 0.34, 0.0657, 0.0775, 0.1218, 0.4308, 0.2588, 0.2626, 0.2831, 1.9314, 0.126, 1.1265, 0.0967, 0.1631, 0.4518, 0.6209, 0.1619, 0.1978, 0.3256, 0.8418, 0.0499, 0.4362, 0.4394, 0.4766, 0.101, 0.0176, 0.021, 0.0182, 0.0238, 0.0199, 0.0172, 0.0168, 0.0705, 0.074, 0.0724, 0.1151, 0.1192, 0.1504]}, "date_parsing": {"difference": [-0.0005], "newTime": [0.0144]}, "date_time_64": {"difference": [-0.0001, 0.0007, -0.0002, 0.0006, -0.0009, -0.0002, 0.0021, -0.0004, 0.0015, -0.0014, 0.0023, 0.0045, -0.0001, 0.0009, 0.0013, 0.0065, 0.0007, 0.0002], "newTime": [0.0189, 0.034, 0.0503, 0.0209, 0.0242, 0.025, 0.1182, 0.1383, 0.0624, 0.0649, 0.0707, 0.2167, 0.0181, 0.0343, 0.1654, 0.3323, 0.0199, 0.036]}, "decimal_aggregates": {"difference": [-0.0004, 0.0001, -0.0005, 0.0009, 0.001, 0.0008, -0.0001, 0.0, -0.0001, -0.0008, -0.0001, -0.0025, -0.001, 0.0003, -0.0031, 0.0022, -0.0026, 0.0, -0.0005, -0.0001, -0.0001], "newTime": [0.006, 0.0028, 0.0032, 0.2399, 0.16, 0.1588, 0.0081, 0.0045, 0.0053, 0.2447, 0.1535, 0.1564, 0.2355, 0.1498, 0.1543, 0.1631, 0.1498, 0.1578, 0.086, 0.0391, 0.0653]}, "distributed_aggregation": {"difference": [-0.0018, 0.0011, -0.0004, 0.0005], "newTime": [0.0797, 0.0745, 0.0754, 0.0749]}, "early_constant_folding": {"difference": [-0.0004], "newTime": [0.0122]}, "empty_string_deserialization": {"difference": [-0.0006], "newTime": [0.017]}, "empty_string_serialization": {"difference": [-0.0147], "newTime": [0.773]}, "entropy": {"difference": [0.0008, -0.0008, 0.0, -0.0002, 0.0, -0.0008, 0.0051, 0.0204, 0.0002], "newTime": [0.0504, 0.0734, 0.0165, 0.0085, 0.006, 0.0548, 0.6595, 0.6768, 0.0334]}, "first_significant_subdomain": {"difference": [-0.0099], "newTime": [0.6507]}, "fixed_string16": {"difference": [0.0001], "newTime": [0.0113]}, "format_date_time": {"difference": [-0.0005, 0.0002, -0.0003, 0.0003, 0.0002, -0.0002], "newTime": [0.0248, 0.0187, 0.0283, 0.0286, 0.0088, 0.0293]}, "functions_coding": {"difference": [0.0004, -0.0004, 0.0, -0.0002], "newTime": [0.0075, 0.0122, 0.0078, 0.01]}, "functions_geo": {"difference": [0.0008, 0.0001, -0.0106, 0.002, 0.0021, 0.0012], "newTime": [0.079, 0.0835, 0.2519, 0.1504, 0.1274, 0.148]}, "general_purpose_hashes": {"difference": [0.0285, -0.0083, 0.0319, -0.0014, 0.0018, 0.0062, -0.0019, -0.0236, 0.0023, 0.0129, 0.0045, 0.0159, -0.0023, -0.0188, -0.0209, -0.0007, 0.0086, 0.0076, 0.0017, -0.021, 0.0009, -0.0039, -0.0005, -0.0062, 0.0009, -0.0111, 0.0081, -0.0044, 0.0081, 0.0032, -0.0014, -0.0003, -0.0003, -0.0123, 0.0001, 0.0187, -0.0001, 0.0018, -0.0009, 0.0049, -0.0068, -0.0008, 0.0018, -0.0029, 0.0011, 0.0114, -0.0061, -0.0027, -0.0013, 0.0031, -0.0011, -0.0115, 0.0419, -0.0099, 0.0053, -0.0097, 0.0114, -0.0117, -0.0423, -0.0006, -0.0083, 0.0447, -0.0107, -0.0536, -0.0134, 0.0096, 0.0129, -0.0006, 0.0179, 0.0158, 0.0083, 0.0221, -0.0018, -0.0064, 0.0095, 0.0123, 0.0257, 0.0084], "newTime": [0.5464, 1.4495, 0.5827, 1.0133, 0.5838, 1.0569, 0.3827, 1.2987, 0.3635, 1.3271, 0.7531, 1.2567, 0.5383, 1.165, 0.5921, 1.1375, 0.804, 1.6682, 0.6535, 1.4084, 0.8345, 1.7022, 0.5575, 1.1864, 0.6909, 1.291, 0.2229, 0.5414, 0.2327, 0.4089, 0.2311, 0.3967, 0.1622, 0.481, 0.1567, 0.4976, 0.2987, 0.4643, 0.2228, 0.4432, 0.2373, 0.4373, 0.3316, 0.6617, 0.2564, 0.5319, 0.3225, 0.6201, 0.2305, 0.4558, 0.2895, 0.4919, 1.1746, 0.5987, 0.5036, 1.229, 1.2901, 0.4915, 0.7029, 0.5538, 0.6081, 0.8079, 0.612, 0.5676, 0.5169, 1.3413, 1.1725, 1.1938, 1.3746, 1.3769, 1.2041, 1.2062, 1.1971, 1.2154, 1.2173, 1.2117, 1.2357, 1.2229]}, "general_purpose_hashes_on_UUID": {"difference": [-0.0007, -0.0005, -0.001, -0.0002, 0.0002, -0.0002, 0.0001, -0.0011, 0.0011, -0.0005, 0.0003, -0.0021, 0.0002, -0.0001, 0.0, -0.0003, -0.002, 0.0001, -0.003, -0.001, 0.0002, -0.0005, 0.0133, -0.0019, 0.0242, -0.0028, 0.0071, 0.0081, 0.1362, 0.0616, 0.0137, 0.052, 0.0151, 0.0165, 0.0034, 0.0195, -0.0069, -0.0122, 0.0075, 0.0339, 0.0113, 0.0408, 0.0327, 0.0128, -0.0066, 0.0008, -0.0005, 0.0021, 0.0048, 0.0039, 0.0329, 0.0461, 0.0133, 0.0093, -0.0018, 0.0033, 0.0025, -0.001, 0.0031, -0.0002, -0.0018, -0.0009, 0.0086, 0.0011, 0.0086, 0.0021], "newTime": [0.0392, 0.0394, 0.0458, 0.046, 0.0428, 0.0416, 0.041, 0.0434, 0.0441, 0.0414, 0.0421, 0.0177, 0.0182, 0.0202, 0.0201, 0.0186, 0.0186, 0.0187, 0.0194, 0.0204, 0.0196, 0.0208, 0.5948, 0.4347, 0.6579, 0.4873, 1.2541, 1.086, 1.3313, 1.1399, 0.8756, 0.7522, 0.7927, 0.6569, 0.7213, 0.5863, 1.0391, 0.8754, 0.9973, 0.8483, 0.8665, 0.7238, 0.8721, 0.6999, 0.2399, 0.1816, 0.2485, 0.1901, 0.4514, 0.3864, 0.4723, 0.4226, 0.3261, 0.269, 0.3073, 0.2383, 0.2802, 0.2204, 0.3764, 0.3162, 0.3684, 0.3124, 0.3203, 0.26, 0.3363, 0.2706]}, "generate_table_function": {"difference": [0.0002, -0.0001, 0.0006, -0.0001, -0.0001, 0.0003, -0.0001, -0.0003, -0.0011, 0.0002, -0.0002, -0.0006, 0.0002, 0.0002, 0.0, 0.0002, -0.0002, 0.0005, -0.0002], "newTime": [0.0063, 0.0087, 0.0172, 0.0056, 0.0082, 0.0229, 0.0167, 0.0287, 0.0563, 0.0054, 0.0045, 0.0063, 0.0155, 0.0139, 0.0157, 0.0062, 0.0063, 0.0112, 0.0105]}, "great_circle_dist": {"difference": [-0.0007, -0.0008], "newTime": [0.0428, 0.0233]}, "group_array_moving_sum": {"difference": [-0.0076, 0.0046, -0.0145, -0.0137, -0.0036, -0.0007, 0.0092, -0.0037, 0.0058, 0.0035, -0.0027, -0.001], "newTime": [0.9136, 0.4247, 0.9122, 0.4085, 0.9102, 0.419, 0.6046, 0.3113, 0.6209, 0.3132, 0.6129, 0.3128]}, "h3": {"difference": [0.0035], "newTime": [0.1047]}, "if_array_num": {"difference": [-0.0008, 0.0011, 0.0015, 0.0011, 0.0064, -0.0015], "newTime": [0.0817, 0.0881, 0.114, 0.1272, 0.1549, 0.1578]}, "if_array_string": {"difference": [-0.0018, -0.002, 0.0036, 0.0015, -0.0078, 0.0243], "newTime": [0.1858, 0.263, 0.2214, 0.2594, 0.329, 0.8746]}, "if_string_const": {"difference": [0.0001, 0.0, 0.0002, -0.0001], "newTime": [0.0092, 0.0094, 0.0101, 0.0073]}, "if_string_hits": {"difference": [-0.0002, 0.0015, 0.0013, 0.0032], "newTime": [0.0133, 0.0186, 0.0474, 0.0927]}, "information_value": {"difference": [-0.0004, 0.0006], "newTime": [0.041, 0.0245]}, "inserts_arrays_lowcardinality": {"difference": [0.0006, -0.0011], "newTime": [0.0754, 0.2572]}, "int_parsing": {"difference": [0.0002, 0.0004, 0.0002, 0.0032, 0.0, 0.0013, 0.0, 0.0002, -0.0004, -0.0005, 0.0, 0.0004, 0.0004, 0.0017, 0.0008, -0.0006, 0.0004, 0.0008, 0.0009, -0.0002, -0.0006, 0.0018, 0.0007, -0.0001, 0.0006, 0.0025, 0.0001, 0.0009, 0.0009, 0.0005, 0.0005, 0.0009, 0.0006, 0.0003, 0.0003, 0.0004, -0.0005, 0.0022, 0.0001, 0.0008, -0.0018, 0.0003, 0.0017, 0.0002, 0.0004, 0.0013, 0.0004, -0.0002, -0.0004, 0.0001, 0.0005, -0.0017, 0.001, -0.0006, -0.0013, 0.0, 0.0, 0.0008, -0.0012, 0.0041, 0.0012, 0.0007, 0.0003, 0.0005, 0.0001, 0.0011, 0.0005, -0.0002, 0.0009, -0.0001, 0.0003, -0.0004, -0.0004, -0.0024, -0.0003, 0.0011, -0.0011, 0.0027, -0.0008, 0.001, -0.0008, 0.0011, -0.0009], "newTime": [0.0291, 0.0371, 0.0346, 0.0794, 0.0517, 0.0498, 0.0641, 0.0284, 0.0337, 0.0579, 0.057, 0.06, 0.0705, 0.0781, 0.0364, 0.1149, 0.0654, 0.0628, 0.0346, 0.0311, 0.0336, 0.0884, 0.0301, 0.0283, 0.0442, 0.0723, 0.033, 0.0477, 0.0359, 0.029, 0.0283, 0.0317, 0.0312, 0.0349, 0.0279, 0.0293, 0.0289, 0.0335, 0.0282, 0.0521, 0.0581, 0.0307, 0.0741, 0.0293, 0.0289, 0.0386, 0.0364, 0.0299, 0.0383, 0.0338, 0.0565, 0.1704, 0.0314, 0.0614, 0.073, 0.0608, 0.0356, 0.0444, 0.0619, 0.0561, 0.0831, 0.0827, 0.034, 0.036, 0.0522, 0.0625, 0.0328, 0.0321, 0.0326, 0.0479, 0.0301, 0.0287, 0.0416, 0.1812, 0.0367, 0.0413, 0.1419, 0.1419, 0.0502, 0.055, 0.0581, 0.029, 0.0326]}, "jit_large_requests": {"difference": [-0.0002, -0.0003], "newTime": [0.0436, 0.0233]}, "jit_small_requests": {"difference": [-0.0003, 0.0012, -0.0002], "newTime": [0.0173, 0.0586, 0.0122]}, "joins_in_memory": {"difference": [0.0001, 0.0, -0.0001, 0.0, 0.0001, 0.008, -0.0028, 0.0044, -0.0007, 0.0365, 0.0287, 0.0349, 0.0239, 0.0562, 0.0438, 0.0413, 0.0513, 0.0389, 0.0282, 0.0311, 0.0295], "newTime": [0.0025, 0.0024, 0.0024, 0.0042, 0.0025, 0.8236, 0.818, 0.8504, 0.9746, 0.8046, 0.8013, 0.8309, 0.9563, 0.8238, 0.8138, 0.8394, 0.9741, 0.8087, 0.8031, 0.8353, 0.9653]}, "joins_in_memory_pmj": {"difference": [0.0, 0.0004, 0.0006, 0.0002, 0.0022, 0.0005, 0.0026, 0.0027, 0.0001, 0.003, 0.0025, 0.0025], "newTime": [0.003, 0.0043, 0.0037, 0.0053, 0.0947, 0.0946, 0.1039, 0.1245, 0.0933, 0.0956, 0.1066, 0.126]}, "json_extract_rapidjson": {"difference": [-0.0051, -0.0072, -0.017, -0.0107, -0.0285, -0.0027, -0.0008, -0.003, -0.0006, -0.0149, -0.0033, -0.0131, -0.0126], "newTime": [0.1646, 0.8247, 0.5431, 0.5731, 0.5505, 0.1582, 0.16, 0.1605, 0.162, 0.5523, 0.5758, 0.5367, 0.5376]}, "json_extract_simdjson": {"difference": [0.0018, -0.0033, -0.0082, 0.0035, -0.0003, -0.0022, -0.0031, -0.0031, -0.0039, 0.0049, 0.0009, 0.0181, 0.0004], "newTime": [0.13, 0.55, 0.2405, 0.285, 0.2543, 0.1222, 0.1257, 0.1268, 0.126, 0.2418, 0.2487, 0.267, 0.2367]}, "least_greatest_hits": {"difference": [-0.0003, -0.0029, 0.0031], "newTime": [0.0094, 0.1559, 0.0965]}, "linear_regression": {"difference": [-0.0016, -0.0015, 0.0055, 0.0075, -0.0003], "newTime": [0.032, 0.0318, 0.2769, 0.392, 0.097]}, "logical_functions_large": {"difference": [0.0184, 0.0018, -0.0018, -0.0003, 0.0024, -0.0022, -0.0001, -0.0001, 0.0035, -0.0007], "newTime": [0.2726, 0.1871, 0.9195, 0.2186, 0.3948, 0.3398, 0.3572, 0.3682, 0.3432, 0.1733]}, "materialized_view_parallel_insert": {"difference": [-0.0034], "newTime": [1.1689]}, "math": {"difference": [0.0014, 0.0, 0.0038, 0.0001, -0.0022, 0.002, -0.0002, -0.0009, -0.0008, -0.0012, 0.0031, 0.0012, 0.0025, -0.0007, 0.0003, -0.0003, -0.0006, -0.0012, 0.0009, 0.0022, -0.0003, -0.0008, 0.0031, -0.002, -0.0163, 0.0304, -0.0217, -0.0296, 0.0361, -0.0256, 0.0311, -0.0171, 0.0316, 0.0008, -0.0091, -0.0006, 0.0025, 0.0016, 0.0037, 0.0076, 0.0362, 0.0322, -0.0024, -0.0472, -0.0008, -0.0036, -0.0023, 0.0003, -0.0033, 0.0107, 0.0009, 0.0073, 0.0028, 0.0009, -0.0008, 0.0023, 0.0021, 0.0003, 0.0018, 0.0049], "newTime": [0.1045, 0.1063, 0.1042, 0.1884, 0.1931, 0.1967, 0.1553, 0.159, 0.16, 0.1428, 0.1468, 0.1455, 0.1961, 0.1995, 0.1911, 0.1577, 0.1603, 0.1586, 0.3373, 0.3405, 0.3361, 0.1075, 0.1185, 0.1154, 0.4988, 0.5725, 0.5532, 0.5397, 0.6434, 0.6087, 0.4154, 0.4132, 0.448, 0.3672, 0.434, 0.4414, 0.2354, 0.165, 0.233, 0.3966, 0.4948, 0.4776, 0.3485, 0.3971, 0.437, 0.2304, 0.1658, 0.2261, 0.8725, 0.9, 0.8285, 0.2086, 0.1572, 0.2023, 0.203, 0.2695, 0.2686, 0.2117, 0.16, 0.206]}, "merge_table_streams": {"difference": [0.0007], "newTime": [0.0633]}, "merge_tree_huge_pk": {"difference": [0.0001, 0.0004, 0.0002, -0.0002], "newTime": [0.0028, 0.061, 0.0102, 0.005]}, "merge_tree_many_partitions": {"difference": [0.0003], "newTime": [0.0012]}, "merge_tree_many_partitions_2": {"difference": [-0.001], "newTime": [0.1988]}, "merge_tree_simple_select": {"difference": [0.0], "newTime": [0.0006]}, "mingroupby-orderbylimit1": {"difference": [-0.0031, -0.0009, 0.0005, 0.0004, 0.0038, -0.0022, -0.0081, 0.0027], "newTime": [0.1927, 0.1976, 0.0202, 0.0326, 0.1018, 0.2987, 0.0851, 0.4282]}, "ngram_distance": {"difference": [0.006, 0.0071, 0.0065, -0.0068, -0.0086, 0.0006, -0.0006, -0.0007, 0.0016, 0.0044, -0.0017, 0.0014, -0.0017, -0.0017, 0.0021, -0.0012], "newTime": [0.1868, 0.1878, 0.1902, 0.1998, 0.2498, 0.1959, 0.1941, 0.192, 0.3483, 0.3643, 0.3669, 0.3306, 0.3516, 0.4989, 0.3525, 0.3492]}, "order_by_decimals": {"difference": [0.0, -0.0003, -0.0009, -0.0003, -0.0004], "newTime": [0.105, 0.0703, 0.0663, 0.0711, 0.0364]}, "order_by_read_in_order": {"difference": [0.0039, 0.0017, -0.0166, -0.0001, 0.0009], "newTime": [0.1346, 0.1234, 0.3968, 0.0698, 0.064]}, "order_by_single_column": {"difference": [-0.0008, -0.0007, -0.0007, -0.0013, -0.0016, 0.0036, -0.0014], "newTime": [0.1022, 0.0548, 0.1195, 0.1353, 0.1832, 0.3555, 0.4403]}, "parallel_insert": {"difference": [0.0074], "newTime": [1.1723]}, "pre_limit_no_sorting": {"difference": [0.0009], "newTime": [0.063]}, "prewhere": {"difference": [0.0001], "newTime": [0.6873]}, "random_printable_ascii": {"difference": [-0.0066, 0.0106, 0.0005, 0.0056, -0.0162, -0.004, -0.0018], "newTime": [0.1789, 0.2059, 0.0194, 0.1392, 0.6228, 0.1409, 0.6816]}, "range": {"difference": [0.0186, -0.0012], "newTime": [0.2736, 0.1168]}, "read_hits_with_aio": {"difference": [-0.0002, -0.0016, -0.0007, -0.0006], "newTime": [0.1249, 0.1674, 0.269, 0.2479]}, "right": {"difference": [0.0013, -0.0008], "newTime": [0.2757, 0.2995]}, "round_down": {"difference": [0.0299, 0.0001, -0.0016, -0.0004, 0.0006], "newTime": [1.1982, 0.0599, 0.0934, 0.0905, 0.0592]}, "round_methods": {"difference": [-0.0002, 0.0001, 0.0, 0.0, -0.0002, 0.0, 0.0001, 0.0002, -0.0001, 0.0002, -0.0002, -0.0001, -0.0001, 0.0002, -0.0001], "newTime": [0.0147, 0.003, 0.0036, 0.0143, 0.0028, 0.0037, 0.0151, 0.0032, 0.0034, 0.0163, 0.0029, 0.0037, 0.0141, 0.003, 0.0032]}, "scalar": {"difference": [0.0016], "newTime": [0.0626]}, "set_hits": {"difference": [0.0, -0.0007, -0.0024, -0.001, 0.0001, 0.0012], "newTime": [0.0686, 0.0445, 0.2741, 0.0896, 0.3221, 0.1445]}, "set_index": {"difference": [-0.0011, 0.0001, 0.0014, 0.0006, 0.001], "newTime": [0.0193, 0.0065, 0.0967, 0.0294, 0.0522]}, "simple_join_query": {"difference": [0.0104, -0.0092, -0.009, -0.0274], "newTime": [0.5851, 0.5871, 0.5805, 0.5702]}, "slices_hits": {"difference": [-0.0003, -0.0009], "newTime": [0.0109, 0.0426]}, "sort": {"difference": [0.001, 0.0024, 0.0048, -0.0019, 0.0035, -0.0034, -0.0008, 0.0043, -0.0002, -0.0001], "newTime": [0.2045, 0.2221, 0.2788, 0.1652, 0.1633, 0.2166, 0.2054, 0.5302, 0.5897, 0.1659]}, "string_join": {"difference": [-0.0076, -0.0057, 0.0016], "newTime": [0.3703, 0.3086, 0.1985]}, "string_set": {"difference": [0.0034, -0.0046, -0.0042, 0.0005, -0.0008, 0.0023, 0.0032], "newTime": [0.2787, 0.2129, 0.3527, 0.2586, 0.1585, 0.193, 0.1381]}, "string_sort": {"difference": [-0.0005, -0.0022, -0.0007, 0.0012, -0.0022, 0.0061, -0.0014, 0.0153, -0.0006, 0.0013, -0.0005, 0.0341, -0.0031, 0.0497, -0.0008, 0.0032, 0.0027, 0.0009, -0.001, 0.0047, 0.0049, 0.0237, -0.0013, 0.0167, -0.0055, -0.0411, 0.0011, 0.0048, 0.0008, 0.0003, -0.0029, -0.0017, -0.0005, -0.021, -0.0012, -0.0098, 0.001, -0.0018, 0.0051, 0.0089, -0.0045, -0.0221, -0.0003, -0.003, 0.0014, -0.0023, 0.0001, -0.0081, -0.0003, -0.0076, -0.001, 0.0069, -0.0007, -0.0181, 0.0007, 0.0053, 0.0018, 0.002, -0.0106, -0.0376, 0.0031, -0.0095, -0.0045, 0.0335, -0.0005, -0.021, -0.0016, -0.0464, 0.0117, -0.0046, 0.003, 0.0191, 0.0011, 0.0383, -0.0034, -0.0054, 0.0006, 0.0052, 0.0044, 0.0136, 0.003, 0.0164, -0.0009, 0.0051], "newTime": [0.0262, 0.1435, 0.0267, 0.1448, 0.0907, 0.4448, 0.2149, 1.0856, 0.108, 0.5612, 0.2465, 1.0085, 0.2709, 1.0195, 0.0425, 0.2345, 0.0863, 0.4624, 0.0434, 0.2364, 0.231, 1.1032, 0.1141, 0.6886, 0.2589, 1.0395, 0.281, 1.0318, 0.1567, 0.7929, 0.2121, 1.0052, 0.2214, 1.0394, 0.1578, 0.8072, 0.2378, 1.0826, 0.4576, 1.5696, 0.4661, 1.4612, 0.0536, 0.2857, 0.1104, 0.4997, 0.1218, 0.6089, 0.2521, 0.9716, 0.0555, 0.2941, 0.2897, 1.0408, 0.2992, 1.0286, 0.1865, 0.7548, 0.2326, 0.9455, 0.2547, 0.9876, 0.4785, 1.5701, 0.2671, 1.0455, 0.1894, 0.7624, 0.5435, 1.4926, 0.2162, 0.713, 0.258, 0.9425, 0.2717, 0.915, 0.4672, 1.387, 0.2846, 0.9835, 0.5319, 1.3795, 0.2162, 0.7076]}, "sum_map": {"difference": [0.0039, 0.0405, -0.0034, -0.0021], "newTime": [0.0643, 0.6324, 0.0608, 0.6034]}, "synthetic_hardware_benchmark": {"difference": [0.0005, 0.0009, -0.0008, 0.0006, 0.008, 0.0008, 0.0055, 0.0007, 0.0013, 0.0134, 0.0006, 0.0012, 0.0014, 0.0017, -0.0014, 0.003, 0.0067, -0.0033, 0.0005, -0.001, 0.0036, -0.0033, 0.004, -0.0623, -0.0117, 0.0169], "newTime": [0.0519, 0.0414, 0.0596, 0.0405, 0.1755, 0.1504, 0.1394, 0.1624, 0.1465, 0.6977, 0.1003, 0.0901, 0.0859, 0.0984, 0.0906, 0.4078, 0.3123, 0.34, 0.2005, 0.0995, 0.1694, 0.3624, 0.4928, 1.6475, 0.8371, 1.6857]}, "trim_numbers": {"difference": [0.0031, 0.0045, -0.0247, 0.0112, -0.0738, 0.0025], "newTime": [0.1189, 0.119, 1.3557, 0.5277, 1.0312, 0.1296]}, "trim_urls": {"difference": [-0.0095, 0.0047, -0.1115, -0.0034, -0.0245, -0.0043], "newTime": [0.3698, 0.386, 1.86, 0.5463, 0.8119, 0.3637]}, "trim_whitespace": {"difference": [-0.0025, 0.0003, -0.0007, 0.0008, -0.0015, 0.0011], "newTime": [0.1008, 0.0644, 0.0419, 0.1074, 0.1016, 0.105]}, "uniq": {"difference": [0.0007, 0.0019, -0.0003, -0.0001, 0.0006, 0.0005, -0.0013, 0.0021, -0.0001, 0.0029, -0.0012, -0.0021, -0.0009, -0.0007, -0.0021, 0.0005, 0.0056, 0.0029, 0.0039, 0.008, 0.0078, 0.0037, 0.0102, 0.0049, -0.0059, 0.0184, 0.0066, 0.007, 0.0373, 0.0066, 0.0093, 0.0055, -0.0004, 0.0, 0.0004, 0.0009, -0.0018, -0.0004, -0.0001, 0.0012, 0.0013, -0.0014, -0.0005, -0.0013, 0.002, 0.0008, 0.0003, 0.0006, 0.0001, 0.0003, 0.0003, -0.0017, -0.0031, -0.0017, -0.0068, 0.0056, 0.0078, -0.0003, 0.0009, -0.0004, -0.0003, 0.0002, 0.0004, 0.0003, 0.0035, -0.0028, -0.0002, -0.003, -0.0002, 0.0028, 0.0022, 0.0006, -0.0075, 0.013, 0.0049, -0.0025, 0.0152, -0.001, 0.0037, -0.0028], "newTime": [0.0205, 0.0733, 0.0495, 0.0484, 0.051, 0.0551, 0.0587, 0.0749, 0.0999, 1.9714, 0.0427, 0.0208, 0.0227, 0.0215, 0.0206, 0.0213, 0.2745, 0.4165, 0.3849, 0.3885, 0.4026, 0.383, 0.3857, 0.3832, 0.3846, 0.5115, 0.4373, 0.3334, 1.0199, 0.4099, 0.3069, 0.3106, 0.0586, 0.1756, 0.11, 0.1189, 0.1287, 0.1417, 0.1548, 0.1656, 0.1894, 0.3782, 0.1137, 0.0581, 0.0697, 0.0609, 0.0575, 0.0583, 0.042, 0.2275, 0.0803, 0.0884, 0.1026, 0.1207, 0.1429, 0.1964, 0.2725, 1.8093, 0.0855, 0.0399, 0.0408, 0.041, 0.0409, 0.0404, 0.282, 0.3418, 0.3352, 0.3331, 0.3366, 0.338, 0.3352, 0.3358, 0.3403, 1.2965, 0.3532, 0.2945, 0.5328, 0.3155, 0.2825, 0.281]}, "url_hits": {"difference": [-0.063, 0.0108, 0.0012, 0.0022, 0.0043, -0.0001, -0.01, -0.0025, 0.0011, 0.0017, -0.0043, -0.0024, 0.008, 0.0048, 0.0055, 0.0055, 0.0015, -0.0042, 0.0088], "newTime": [0.9569, 0.7463, 0.3428, 0.32, 0.3939, 0.4185, 0.3898, 0.3128, 0.3558, 0.4343, 0.4549, 0.3822, 0.3126, 0.3206, 0.4357, 0.2692, 0.3754, 0.3879, 0.3129]}, "vectorize_aggregation_combinators": {"difference": [0.001, -0.0004, 0.0005, -0.0023, -0.0003], "newTime": [0.507, 0.0318, 0.027, 0.3372, 0.3175]}, "visit_param_extract_raw": {"difference": [0.0018, 0.0829, 0.045], "newTime": [0.0944, 0.7788, 0.2429]}, "website": {"difference": [0.0033, 0.0006, 0.0095, -0.0028, 0.0001, 0.0006, -0.0021, 0.0004, 0.0002, 0.0015, -0.0011, 0.0014, 0.0001, 0.002, -0.0004, 0.0013, 0.003, 0.0026, 0.0012, 0.0009, -0.001, 0.004, -0.0003, -0.0017, -0.0036, 0.0013, -0.0006, -0.0003, -0.0005, -0.0014, 0.0046, -0.013, 0.0002, 0.0028, -0.0014, 0.0172, 0.0041, 0.0002, -0.0007, 0.0084, 0.0056, -0.0015, 0.0001, 0.0008, -0.0012, 0.0243, 0.0024, 0.005, 0.0034, -0.0011, -0.0002, -0.0001, 0.0051, -0.0001, 0.0003, -0.0016, -0.0095, -0.0008, 0.0001, -0.0002, -0.0001, 0.0001, 0.0034, -0.006, 0.0007, 0.0, 0.0, 0.0007, -0.0006, 0.0004, 0.0015, 0.0005], "newTime": [0.4422, 0.206, 1.3436, 0.1555, 0.006, 0.4755, 0.3561, 0.0464, 0.0852, 0.0244, 0.0757, 0.2, 0.0367, 0.1736, 0.0321, 0.2714, 0.3469, 0.056, 0.0985, 0.1006, 0.0765, 0.7489, 0.1222, 0.3011, 0.2573, 0.337, 0.0522, 0.0309, 0.0456, 0.1556, 0.1945, 0.0762, 0.0248, 0.0926, 0.03, 1.3429, 0.1573, 0.0101, 0.0119, 0.6063, 1.0262, 0.0547, 0.0947, 0.4102, 0.0428, 1.738, 0.1928, 0.3945, 0.2425, 0.0632, 0.0082, 0.0009, 0.2719, 0.0009, 0.0063, 0.0173, 0.4523, 0.0846, 0.0105, 0.0045, 0.0161, 0.0074, 0.9246, 0.17, 0.0195, 0.0063, 0.0027, 0.0103, 0.1237, 0.0419, 0.071, 0.0423]}}, "reportErrors": []}
