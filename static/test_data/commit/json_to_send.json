{"commits": {"leftCommit": {"commit": "29bb9f666565129587846f1507c9a4a5dad8a24e", "author": "Alexander Kuzmenkov <akuzm@yandex-team.ru>", "date": "Tue Apr 14 00:15:58 2020 +0300", "info": "simple backport script"}, "rightCommit": {"commit": "b8be58559598ec31450d14c8cf526ee79dc571ac", "merge": "9de981d8 d480707c", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Tue Apr 14 01:32:38 2020 +0300", "info": "Merge pull request #10237 from ClickHouse/akz/mutations-to-correctly-handle-lambdas\nALTER UPDATE/DELETE on Replicated* storages: Fixed \"Unknown function lambda.\" error"}}, "changes": [], "unstableQueries": [{"oldTime": 0.0388, "newTime": 0.0379, "relativeDifference": -0.024, "quantiles": [0.022, 0.246, 0.37, 0.38], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A", "allRunTimes": [0.8904793, 0.8575804, 0.7492492, 0.7556386, 0.8967073, 0.73988914, 0.790009, 0.7570114, 0.86101294, 0.75254345, 0.8845043, 0.75251555, 0.87819934]}, {"oldTime": 0.0449, "newTime": 0.0478, "relativeDifference": 0.064, "quantiles": [0.064, 0.091, 0.349, 0.404], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    ", "allRunTimes": []}, {"oldTime": 0.0464, "newTime": 0.0439, "relativeDifference": -0.054, "quantiles": [0.0, 0.014, 0.229, 0.248], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A", "allRunTimes": [0.7647753, 0.75836563, 0.7616248, 0.75485253, 0.75908947, 0.75012565, 0.91191053, 0.9127486, 0.8014755, 0.795773, 0.7499206, 0.7888093, 0.76106286]}, {"oldTime": 0.0565, "newTime": 0.0542, "relativeDifference": -0.041, "quantiles": [0.04, 0.101, 0.227, 0.291], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.038245678, 0.037847042, 0.058310986, 0.04818082, 0.0390718, 0.040106058, 0.06856942, 0.06833887, 0.040112734, 0.04674864, 0.04712081, 0.0396235, 0.06559014]}, {"oldTime": 0.0855, "newTime": 0.085, "relativeDifference": -0.006, "quantiles": [0.005, 0.023, 0.177, 0.213], "testName": "string_sort", "query": "SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10", "allRunTimes": [0.13780594, 0.096315145, 0.10216355, 0.09465575, 0.10630894, 0.09991431, 0.14958572, 0.08992529, 0.105389595, 0.095867395, 0.09318948, 0.10000086, 0.10277486]}, {"oldTime": 0.1423, "newTime": 0.1561, "relativeDifference": 0.096, "quantiles": [0.017, 0.083, 0.174, 0.179], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.16856027, 0.14685631, 0.17404842, 0.17943478, 0.13621044, 0.15043664, 0.14378285, 0.17126131, 0.15154648, 0.16055846, 0.13600779, 0.16501117, 0.17399311]}, {"oldTime": 0.0596, "newTime": 0.0593, "relativeDifference": -0.006, "quantiles": [0.005, 0.102, 0.166, 0.186], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel", "allRunTimes": [0.076014996, 0.057664156, 0.0758822, 0.07543802, 0.06677723, 0.0659821, 0.07110906, 0.057119846, 0.060848236, 0.07044053, 0.07407546, 0.056908607, 0.05771041]}, {"oldTime": 0.7069, "newTime": 0.7732, "relativeDifference": 0.093, "quantiles": [0.08, 0.093, 0.161, 0.171], "testName": "empty_string_serialization", "query": "INSERT INTO empty_strings SELECT \\'\\' FROM zeros(100000000);", "allRunTimes": []}, {"oldTime": 0.1644, "newTime": 0.1803, "relativeDifference": 0.096, "quantiles": [0.044, 0.066, 0.149, 0.158], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.16985631, 0.19443607, 0.19221067, 0.1894362, 0.16206264, 0.15124893, 0.17334294, 0.18621612, 0.17227697, 0.17254972, 0.19134021, 0.17415333, 0.17534852]}, {"oldTime": 0.1946, "newTime": 0.1935, "relativeDifference": -0.006, "quantiles": [0.004, 0.013, 0.146, 0.156], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "allRunTimes": []}, {"oldTime": 0.0463, "newTime": 0.0438, "relativeDifference": -0.054, "quantiles": [0.031, 0.048, 0.141, 0.152], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A", "allRunTimes": [0.78141594, 0.9091592, 0.73658156, 0.78586197, 0.75124, 0.74615836, 0.9248681, 0.7534435, 0.8239348, 0.929662, 0.8437445, 0.74559903, 0.92475796]}, {"oldTime": 0.0318, "newTime": 0.0323, "relativeDifference": 0.015, "quantiles": [0.008, 0.009, 0.141, 0.147], "testName": "vectorize_aggregation_combinators", "query": "SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null", "allRunTimes": [0.031893253, 0.03327036, 0.03750229, 0.037252665, 0.03288555, 0.031957388, 0.033340693, 0.03389573, 0.03175068, 0.03156352, 0.032218456, 0.032198906, 0.031497955]}, {"oldTime": 0.0884, "newTime": 0.0936, "relativeDifference": 0.058, "quantiles": [0.02, 0.059, 0.132, 0.149], "testName": "string_sort", "query": "SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10", "allRunTimes": [0.1072104, 0.108680725, 0.101882935, 0.10170126, 0.111691475, 0.10598755, 0.10737252, 0.09893894, 0.09783101, 0.16746807, 0.1024909, 0.10743213, 0.12156439]}, {"oldTime": 0.1157, "newTime": 0.1119, "relativeDifference": -0.033, "quantiles": [0.033, 0.075, 0.129, 0.14], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.13430858, 0.114988565, 0.11666274, 0.12509632, 0.1129632, 0.110755205, 0.11313939, 0.10251069, 0.11824012, 0.116029024, 0.114995, 0.12201309, 0.10208845]}, {"oldTime": 0.1362, "newTime": 0.1244, "relativeDifference": -0.087, "quantiles": [0.011, 0.086, 0.128, 0.133], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.13216496, 0.12456632, 0.12816978, 0.13884807, 0.14830685, 0.16048312, 0.14128447, 0.15303731, 0.16265488, 0.12867475, 0.11705303, 0.14673519, 0.12136197]}, {"oldTime": 0.0279, "newTime": 0.0272, "relativeDifference": -0.026, "quantiles": [0.023, 0.067, 0.127, 0.135], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "allRunTimes": [0.025683403, 0.025056362, 0.025384903, 0.025843382, 0.02607131, 0.025640965, 0.026147842, 0.025943518, 0.029271841, 0.02696681, 0.027184248, 0.027378082, 0.024824142]}, {"oldTime": 0.0361, "newTime": 0.034, "relativeDifference": -0.059, "quantiles": [0.004, 0.041, 0.119, 0.128], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'break\\'", "allRunTimes": []}, {"oldTime": 0.1153, "newTime": 0.1158, "relativeDifference": 0.004, "quantiles": [0.004, 0.025, 0.119, 0.163], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.12210202, 0.12497187, 0.11543226, 0.11308956, 0.119763136, 0.1280384, 0.11805296, 0.11099625, 0.121341705, 0.115442276, 0.12885499, 0.12233019, 0.12409997]}, {"oldTime": 0.066, "newTime": 0.0666, "relativeDifference": 0.009, "quantiles": [0.008, 0.04, 0.117, 0.136], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])", "allRunTimes": [0.06747675, 0.066339016, 0.06601477, 0.076231, 0.069033146, 0.074316025, 0.06865692, 0.068604946, 0.06961846, 0.07536435, 0.0709815, 0.07161713, 0.068428755]}, {"oldTime": 0.0417, "newTime": 0.0384, "relativeDifference": -0.08, "quantiles": [0.063, 0.08, 0.116, 0.131], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1", "allRunTimes": [0.046390295, 0.040791035, 0.037729025, 0.03740263, 0.038826942, 0.04113078, 0.037656307, 0.0386734, 0.037762165, 0.039361477, 0.040260077, 0.03777814, 0.041814566]}, {"oldTime": 0.1302, "newTime": 0.1264, "relativeDifference": -0.03, "quantiles": [0.028, 0.057, 0.115, 0.121], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "allRunTimes": [0.14323115, 0.13546205, 0.1465981, 0.13804913, 0.1288817, 0.14432383, 0.15687132, 0.12549448, 0.14475226, 0.13120055, 0.12097025, 0.12316561, 0.118531466]}, {"oldTime": 0.1547, "newTime": 0.1571, "relativeDifference": 0.015, "quantiles": [0.005, 0.015, 0.114, 0.125], "testName": "array_auc", "query": "SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)", "allRunTimes": [0.15988278, 0.1681745, 0.15696692, 0.15805721, 0.15674663, 0.16074657, 0.15469813, 0.15924, 0.1552794, 0.15866828, 0.15174699, 0.15530586, 0.16507196]}, {"oldTime": 0.0824, "newTime": 0.0806, "relativeDifference": -0.022, "quantiles": [0.008, 0.02, 0.111, 0.138], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10", "allRunTimes": []}, {"oldTime": 0.0415, "newTime": 0.0435, "relativeDifference": 0.048, "quantiles": [0.039, 0.06, 0.109, 0.12], "testName": "website", "query": "SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null", "allRunTimes": [0.049872637, 0.04598427, 0.04654789, 0.046345234, 0.047876596, 0.043070316, 0.04587841, 0.043302536, 0.041694403, 0.040858507, 0.04755807, 0.045547962, 0.044386387]}, {"oldTime": 0.1058, "newTime": 0.0999, "relativeDifference": -0.056, "quantiles": [0.055, 0.064, 0.107, 0.107], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single", "allRunTimes": [0.11617088, 0.108786345, 0.1170392, 0.12004042, 0.10622239, 0.11365056, 0.12735987, 0.099841595, 0.09662509, 0.10633683, 0.11918616, 0.11249995, 0.08566046]}, {"oldTime": 0.2412, "newTime": 0.2508, "relativeDifference": 0.039, "quantiles": [0.016, 0.039, 0.104, 0.124], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Momentum\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null", "allRunTimes": []}, {"oldTime": 0.9258, "newTime": 0.9358, "relativeDifference": 0.01, "quantiles": [0.01, 0.059, 0.101, 0.11], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))", "allRunTimes": [1.1451662, 1.0800633, 1.1962306, 1.0664084, 1.1631064, 1.206712, 1.1832931, 1.1167848, 1.0068543, 1.0621929, 1.0221837, 1.0886579, 1.098252]}, {"oldTime": 0.0643, "newTime": 0.0645, "relativeDifference": 0.003, "quantiles": [0.002, 0.059, 0.1, 0.12], "testName": "trim_whitespace", "query": "SELECT replaceRegexpOne(value, \\' *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null", "allRunTimes": []}], "runErrors": [{"testName": "./distributed_aggregation-err.log", "error": "clickhouse_driver.errors.ServerException: Code: 279."}, {"testName": "./distributed_aggregation-err.log", "error": "DB::Exception: All connection tries failed. Log: "}], "skipped": [{"testName": "IPv4", "reason": "Marked as broken (see compare.sh)"}, {"testName": "IPv6", "reason": "Marked as broken (see compare.sh)"}, {"testName": "modulo", "reason": "Marked as broken (see compare.sh)"}, {"testName": "parse_engine_file", "reason": "Marked as broken (see compare.sh)"}, {"testName": "number_formatting_formats", "reason": "Marked as broken (see compare.sh)"}, {"testName": "select_format", "reason": "Marked as broken (see compare.sh)"}, {"testName": "arithmetic", "reason": "Marked as broken (see compare.sh)"}, {"testName": "cryptographic_hashes", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_medium", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_small", "reason": "Marked as broken (see compare.sh)"}, {"testName": "agg_functions_min_max_any", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "columns_hashing", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "date_time", "reason": "Test is tagged as long."}, {"testName": "float_formatting", "reason": "Test is tagged as long."}, {"testName": "float_parsing", "reason": "Test is tagged as long."}, {"testName": "if_to_multiif", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "insert_values_with_expressions", "reason": "clickhouse_driver.errors.ServerException: Code: 107."}, {"testName": "leftpad", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "nyc_taxi", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "set", "reason": "Test is tagged as long."}], "badTests": [{"testName": "codecs_int_insert", "unstable": 7.0, "changedPerf": 0.0, "total": 7.0}, {"testName": "simple_join_query", "unstable": 3.0, "changedPerf": 0.0, "total": 3.0}, {"testName": "website", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "cpu_synthetic", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "string_sort", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "array_element", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "array_auc", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "base64_hits", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "int_parsing", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "set_index", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "trim_whitespace", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "mingroupby-orderbylimit1", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "codecs_float_insert", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "linear_regression", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "empty_string_serialization", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "vectorize_aggregation_combinators", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "general_purpose_hashes_on_UUID", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}], "testTimes": [{"testName": "array_fill", "wallClockTime": 234.083, "clientTime": 204.667, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 59.728, "avgWallClockTime": 39.013, "shortestQuery": 13.353}, {"testName": "parallel_insert", "wallClockTime": 19.796, "clientTime": 16.941, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 16.941, "avgWallClockTime": 19.795, "shortestQuery": 16.941}, {"testName": "group_array_moving_sum", "wallClockTime": 151.791, "clientTime": 98.181, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 13.399, "avgWallClockTime": 12.649, "shortestQuery": 4.519}, {"testName": "general_purpose_hashes", "wallClockTime": 970.423, "clientTime": 849.848, "total": 78.0, "ignoredQueries": 0.0, "longestQuery": 24.172, "avgWallClockTime": 12.441, "shortestQuery": 2.153}, {"testName": "trim_urls", "wallClockTime": 71.87, "clientTime": 62.697, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 27.311, "avgWallClockTime": 11.978, "shortestQuery": 5.244}, {"testName": "empty_string_serialization", "wallClockTime": 11.911, "clientTime": 10.249, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 10.249, "avgWallClockTime": 11.911, "shortestQuery": 10.249}, {"testName": "prewhere", "wallClockTime": 11.144, "clientTime": 9.644, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 9.644, "avgWallClockTime": 11.144, "shortestQuery": 9.644}, {"testName": "merge_tree_many_partitions_2", "wallClockTime": 10.725, "clientTime": 2.878, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.878, "avgWallClockTime": 10.725, "shortestQuery": 2.878}, {"testName": "first_significant_subdomain", "wallClockTime": 10.384, "clientTime": 8.961, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 8.961, "avgWallClockTime": 10.383, "shortestQuery": 8.961}, {"testName": "constant_column_search", "wallClockTime": 273.879, "clientTime": 239.152, "total": 28.0, "ignoredQueries": 0.0, "longestQuery": 22.956, "avgWallClockTime": 9.781, "shortestQuery": 3.044}, {"testName": "and_function", "wallClockTime": 18.04, "clientTime": 15.667, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 14.438, "avgWallClockTime": 9.02, "shortestQuery": 1.229}, {"testName": "trim_numbers", "wallClockTime": 53.425, "clientTime": 46.709, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 19.195, "avgWallClockTime": 8.904, "shortestQuery": 1.62}, {"testName": "string_sort", "wallClockTime": 738.852, "clientTime": 645.938, "total": 84.0, "ignoredQueries": 0.0, "longestQuery": 22.018, "avgWallClockTime": 8.795, "shortestQuery": 0.369}, {"testName": "merge_tree_simple_select", "wallClockTime": 7.548, "clientTime": 0.01, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 7.547, "shortestQuery": 0.0}, {"testName": "constant_column_comparison", "wallClockTime": 147.245, "clientTime": 128.701, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 9.226, "avgWallClockTime": 7.011, "shortestQuery": 2.394}, {"testName": "json_extract_rapidjson", "wallClockTime": 89.332, "clientTime": 78.189, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 11.413, "avgWallClockTime": 6.871, "shortestQuery": 2.215}, {"testName": "array_reduce", "wallClockTime": 40.52, "clientTime": 35.333, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 9.353, "avgWallClockTime": 6.753, "shortestQuery": 2.549}, {"testName": "bloom_filter", "wallClockTime": 6.655, "clientTime": 5.695, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 5.695, "avgWallClockTime": 6.655, "shortestQuery": 5.695}, {"testName": "joins_in_memory", "wallClockTime": 220.244, "clientTime": 286.817, "total": 34.0, "ignoredQueries": 10.0, "longestQuery": 14.037, "avgWallClockTime": 6.477, "shortestQuery": 11.036}, {"testName": "url_hits", "wallClockTime": 129.076, "clientTime": 117.598, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 14.457, "avgWallClockTime": 6.453, "shortestQuery": 3.752}, {"testName": "string_join", "wallClockTime": 19.031, "clientTime": 12.552, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 5.21, "avgWallClockTime": 6.343, "shortestQuery": 2.779}, {"testName": "general_purpose_hashes_on_UUID", "wallClockTime": 410.548, "clientTime": 359.27, "total": 66.0, "ignoredQueries": 11.0, "longestQuery": 17.926, "avgWallClockTime": 6.22, "shortestQuery": 0.549}, {"testName": "merge_tree_many_partitions", "wallClockTime": 6.108, "clientTime": 0.014, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.107, "shortestQuery": 0.0}, {"testName": "base64_hits", "wallClockTime": 73.18, "clientTime": 63.934, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 11.278, "avgWallClockTime": 6.098, "shortestQuery": 0.53}, {"testName": "sum_map", "wallClockTime": 23.882, "clientTime": 18.859, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 8.766, "avgWallClockTime": 5.97, "shortestQuery": 0.867}, {"testName": "if_array_string", "wallClockTime": 35.489, "clientTime": 31.104, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 13.388, "avgWallClockTime": 5.914, "shortestQuery": 2.629}, {"testName": "logical_functions_large", "wallClockTime": 56.986, "clientTime": 49.746, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 12.989, "avgWallClockTime": 5.698, "shortestQuery": 2.448}, {"testName": "synthetic_hardware_benchmark", "wallClockTime": 141.376, "clientTime": 123.259, "total": 26.0, "ignoredQueries": 0.0, "longestQuery": 24.073, "avgWallClockTime": 5.437, "shortestQuery": 0.562}, {"testName": "merge_tree_huge_pk", "wallClockTime": 21.565, "clientTime": 1.058, "total": 4.0, "ignoredQueries": 3.0, "longestQuery": 0.804, "avgWallClockTime": 5.391, "shortestQuery": 0.804}, {"testName": "visit_param_extract_raw", "wallClockTime": 15.889, "clientTime": 13.797, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 9.699, "avgWallClockTime": 5.296, "shortestQuery": 1.327}, {"testName": "column_column_comparison", "wallClockTime": 94.238, "clientTime": 82.336, "total": 19.0, "ignoredQueries": 7.0, "longestQuery": 17.038, "avgWallClockTime": 4.959, "shortestQuery": 3.396}, {"testName": "math", "wallClockTime": 295.251, "clientTime": 258.305, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 12.47, "avgWallClockTime": 4.92, "shortestQuery": 1.423}, {"testName": "round_down", "wallClockTime": 24.0, "clientTime": 20.926, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 16.619, "avgWallClockTime": 4.8, "shortestQuery": 0.824}, {"testName": "vectorize_aggregation_combinators", "wallClockTime": 23.903, "clientTime": 17.364, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 7.231, "avgWallClockTime": 4.78, "shortestQuery": 0.365}, {"testName": "random_printable_ascii", "wallClockTime": 32.825, "clientTime": 28.813, "total": 7.0, "ignoredQueries": 1.0, "longestQuery": 9.594, "avgWallClockTime": 4.689, "shortestQuery": 1.884}, {"testName": "right", "wallClockTime": 9.375, "clientTime": 8.129, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 4.332, "avgWallClockTime": 4.687, "shortestQuery": 3.797}, {"testName": "array_join", "wallClockTime": 28.006, "clientTime": 24.404, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 5.791, "avgWallClockTime": 4.667, "shortestQuery": 1.49}, {"testName": "cpu_synthetic", "wallClockTime": 215.944, "clientTime": 197.204, "total": 47.0, "ignoredQueries": 7.0, "longestQuery": 27.451, "avgWallClockTime": 4.594, "shortestQuery": 0.671}, {"testName": "ngram_distance", "wallClockTime": 73.103, "clientTime": 63.859, "total": 16.0, "ignoredQueries": 0.0, "longestQuery": 7.004, "avgWallClockTime": 4.568, "shortestQuery": 2.539}, {"testName": "sort", "wallClockTime": 45.468, "clientTime": 38.837, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 8.454, "avgWallClockTime": 4.546, "shortestQuery": 2.257}, {"testName": "string_set", "wallClockTime": 30.651, "clientTime": 22.83, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 4.926, "avgWallClockTime": 4.378, "shortestQuery": 2.019}, {"testName": "collations", "wallClockTime": 8.753, "clientTime": 7.552, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 6.849, "avgWallClockTime": 4.376, "shortestQuery": 0.703}, {"testName": "uniq", "wallClockTime": 338.714, "clientTime": 296.113, "total": 80.0, "ignoredQueries": 6.0, "longestQuery": 27.877, "avgWallClockTime": 4.233, "shortestQuery": 0.562}, {"testName": "base64", "wallClockTime": 33.763, "clientTime": 29.413, "total": 9.0, "ignoredQueries": 0.0, "longestQuery": 5.72, "avgWallClockTime": 3.751, "shortestQuery": 1.308}, {"testName": "json_extract_simdjson", "wallClockTime": 47.503, "clientTime": 41.608, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 7.843, "avgWallClockTime": 3.654, "shortestQuery": 1.739}, {"testName": "scalar", "wallClockTime": 3.507, "clientTime": 0.875, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 0.875, "avgWallClockTime": 3.506, "shortestQuery": 0.875}, {"testName": "website", "wallClockTime": 254.168, "clientTime": 225.745, "total": 73.0, "ignoredQueries": 18.0, "longestQuery": 24.225, "avgWallClockTime": 3.481, "shortestQuery": 0.423}, {"testName": "read_hits_with_aio", "wallClockTime": 13.505, "clientTime": 11.726, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 3.859, "avgWallClockTime": 3.376, "shortestQuery": 1.874}, {"testName": "trim_whitespace", "wallClockTime": 19.761, "clientTime": 7.413, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 1.469, "avgWallClockTime": 3.293, "shortestQuery": 0.667}, {"testName": "inserts_arrays_lowcardinality", "wallClockTime": 6.5, "clientTime": 4.681, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 3.622, "avgWallClockTime": 3.25, "shortestQuery": 1.059}, {"testName": "order_by_single_column", "wallClockTime": 22.218, "clientTime": 19.323, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 6.014, "avgWallClockTime": 3.174, "shortestQuery": 0.807}, {"testName": "codecs_int_insert", "wallClockTime": 64.429, "clientTime": 51.21, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 4.744, "avgWallClockTime": 3.068, "shortestQuery": 0.826}, {"testName": "range", "wallClockTime": 6.034, "clientTime": 5.185, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 3.555, "avgWallClockTime": 3.016, "shortestQuery": 1.629}, {"testName": "set_index", "wallClockTime": 14.456, "clientTime": 3.116, "total": 5.0, "ignoredQueries": 2.0, "longestQuery": 1.466, "avgWallClockTime": 2.891, "shortestQuery": 0.48}, {"testName": "entropy", "wallClockTime": 25.385, "clientTime": 22.061, "total": 9.0, "ignoredQueries": 3.0, "longestQuery": 9.401, "avgWallClockTime": 2.82, "shortestQuery": 0.46}, {"testName": "order_by_read_in_order", "wallClockTime": 13.086, "clientTime": 11.039, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 5.564, "avgWallClockTime": 2.617, "shortestQuery": 0.892}, {"testName": "array_auc", "wallClockTime": 2.563, "clientTime": 2.133, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.133, "avgWallClockTime": 2.562, "shortestQuery": 2.133}, {"testName": "set_hits", "wallClockTime": 15.291, "clientTime": 13.283, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 4.562, "avgWallClockTime": 2.548, "shortestQuery": 0.626}, {"testName": "linear_regression", "wallClockTime": 12.718, "clientTime": 10.934, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 5.13, "avgWallClockTime": 2.543, "shortestQuery": 0.47}, {"testName": "functions_geo", "wallClockTime": 13.525, "clientTime": 11.736, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.617, "avgWallClockTime": 2.254, "shortestQuery": 1.049}, {"testName": "mingroupby-orderbylimit1", "wallClockTime": 17.565, "clientTime": 14.344, "total": 8.0, "ignoredQueries": 2.0, "longestQuery": 6.059, "avgWallClockTime": 2.195, "shortestQuery": 0.386}, {"testName": "if_array_num", "wallClockTime": 11.779, "clientTime": 10.23, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.225, "avgWallClockTime": 1.963, "shortestQuery": 1.213}, {"testName": "empty_string_deserialization", "wallClockTime": 1.943, "clientTime": 0.26, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 1.942, "shortestQuery": 0.0}, {"testName": "decimal_aggregates", "wallClockTime": 38.882, "clientTime": 33.825, "total": 21.0, "ignoredQueries": 6.0, "longestQuery": 3.616, "avgWallClockTime": 1.851, "shortestQuery": 0.536}, {"testName": "bitCount", "wallClockTime": 10.917, "clientTime": 9.44, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.342, "avgWallClockTime": 1.819, "shortestQuery": 1.05}, {"testName": "h3", "wallClockTime": 1.813, "clientTime": 1.497, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.497, "avgWallClockTime": 1.812, "shortestQuery": 1.497}, {"testName": "date_time_64", "wallClockTime": 30.936, "clientTime": 20.1, "total": 18.0, "ignoredQueries": 4.0, "longestQuery": 4.369, "avgWallClockTime": 1.718, "shortestQuery": 0.355}, {"testName": "jit_large_requests", "wallClockTime": 2.987, "clientTime": 0.988, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.628, "avgWallClockTime": 1.493, "shortestQuery": 0.628}, {"testName": "simple_join_query", "wallClockTime": 5.512, "clientTime": 2.453, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 0.68, "avgWallClockTime": 1.378, "shortestQuery": 0.567}, {"testName": "merge_table_streams", "wallClockTime": 1.281, "clientTime": 0.916, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 0.916, "avgWallClockTime": 1.281, "shortestQuery": 0.916}, {"testName": "pre_limit_no_sorting", "wallClockTime": 1.173, "clientTime": 0.912, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 0.912, "avgWallClockTime": 1.172, "shortestQuery": 0.912}, {"testName": "order_by_decimals", "wallClockTime": 5.685, "clientTime": 4.88, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 1.473, "avgWallClockTime": 1.136, "shortestQuery": 0.531}, {"testName": "array_element", "wallClockTime": 2.996, "clientTime": 2.528, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 0.933, "avgWallClockTime": 0.998, "shortestQuery": 0.672}, {"testName": "int_parsing", "wallClockTime": 67.989, "clientTime": 59.364, "total": 83.0, "ignoredQueries": 0.0, "longestQuery": 2.632, "avgWallClockTime": 0.819, "shortestQuery": 0.39}, {"testName": "basename", "wallClockTime": 1.542, "clientTime": 1.254, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.673, "avgWallClockTime": 0.771, "shortestQuery": 0.58}, {"testName": "count", "wallClockTime": 0.725, "clientTime": 0.009, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.725, "shortestQuery": 0.0}, {"testName": "if_string_hits", "wallClockTime": 2.88, "clientTime": 2.425, "total": 4.0, "ignoredQueries": 2.0, "longestQuery": 1.319, "avgWallClockTime": 0.72, "shortestQuery": 0.658}, {"testName": "bit_operations_fixed_string_numbers", "wallClockTime": 1.242, "clientTime": 0.995, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.599, "avgWallClockTime": 0.62, "shortestQuery": 0.395}, {"testName": "concat_hits", "wallClockTime": 15.712, "clientTime": 13.642, "total": 26.0, "ignoredQueries": 14.0, "longestQuery": 1.11, "avgWallClockTime": 0.604, "shortestQuery": 0.738}, {"testName": "great_circle_dist", "wallClockTime": 1.209, "clientTime": 0.967, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.625, "avgWallClockTime": 0.604, "shortestQuery": 0.625}, {"testName": "information_value", "wallClockTime": 1.18, "clientTime": 0.937, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.599, "avgWallClockTime": 0.589, "shortestQuery": 0.599}, {"testName": "joins_in_memory_pmj", "wallClockTime": 13.775, "clientTime": 23.907, "total": 24.0, "ignoredQueries": 8.0, "longestQuery": 1.715, "avgWallClockTime": 0.573, "shortestQuery": 1.321}, {"testName": "jit_small_requests", "wallClockTime": 1.604, "clientTime": 1.236, "total": 3.0, "ignoredQueries": 2.0, "longestQuery": 0.802, "avgWallClockTime": 0.534, "shortestQuery": 0.802}, {"testName": "slices_hits", "wallClockTime": 1.022, "clientTime": 0.782, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.613, "avgWallClockTime": 0.51, "shortestQuery": 0.613}, {"testName": "codecs_float_insert", "wallClockTime": 7.464, "clientTime": 5.963, "total": 15.0, "ignoredQueries": 5.0, "longestQuery": 0.606, "avgWallClockTime": 0.497, "shortestQuery": 0.391}, {"testName": "analyze_array_tuples", "wallClockTime": 0.494, "clientTime": 0.33, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.493, "shortestQuery": 0.0}, {"testName": "complex_array_creation", "wallClockTime": 0.808, "clientTime": 0.602, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.404, "shortestQuery": 0.0}, {"testName": "format_date_time", "wallClockTime": 2.325, "clientTime": 1.941, "total": 6.0, "ignoredQueries": 2.0, "longestQuery": 0.41, "avgWallClockTime": 0.387, "shortestQuery": 0.351}, {"testName": "date_parsing", "wallClockTime": 0.344, "clientTime": 0.2, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.344, "shortestQuery": 0.0}, {"testName": "consistent_hashes", "wallClockTime": 2.323, "clientTime": 1.935, "total": 7.0, "ignoredQueries": 5.0, "longestQuery": 0.949, "avgWallClockTime": 0.331, "shortestQuery": 0.634}, {"testName": "early_constant_folding", "wallClockTime": 0.33, "clientTime": 0.195, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.33, "shortestQuery": 0.0}, {"testName": "conditional", "wallClockTime": 2.498, "clientTime": 2.097, "total": 8.0, "ignoredQueries": 6.0, "longestQuery": 0.442, "avgWallClockTime": 0.312, "shortestQuery": 0.404}, {"testName": "fixed_string16", "wallClockTime": 0.308, "clientTime": 0.175, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.307, "shortestQuery": 0.0}, {"testName": "cidr", "wallClockTime": 0.505, "clientTime": 0.34, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.252, "shortestQuery": 0.0}, {"testName": "generate_table_function", "wallClockTime": 4.542, "clientTime": 3.863, "total": 19.0, "ignoredQueries": 17.0, "longestQuery": 0.813, "avgWallClockTime": 0.239, "shortestQuery": 0.405}, {"testName": "codecs_float_select", "wallClockTime": 3.459, "clientTime": 2.104, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.23, "shortestQuery": 0.0}, {"testName": "bit_operations_fixed_string", "wallClockTime": 0.918, "clientTime": 0.698, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.229, "shortestQuery": 0.0}, {"testName": "codecs_int_select", "wallClockTime": 4.077, "clientTime": 2.628, "total": 21.0, "ignoredQueries": 21.0, "longestQuery": 0.0, "avgWallClockTime": 0.194, "shortestQuery": 0.0}, {"testName": "functions_coding", "wallClockTime": 0.75, "clientTime": 0.563, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.187, "shortestQuery": 0.0}, {"testName": "if_string_const", "wallClockTime": 0.703, "clientTime": 0.524, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.175, "shortestQuery": 0.0}, {"testName": "bounding_ratio", "wallClockTime": 0.273, "clientTime": 0.141, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.136, "shortestQuery": 0.0}, {"testName": "round_methods", "wallClockTime": 1.83, "clientTime": 1.503, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.122, "shortestQuery": 0.0}], "slowOnClient": [], "allQueries": [{"oldTime": 0.0227, "newTime": 0.0222, "relativeDifference": -0.023, "timeSpeed": 1.022, "quantiles": [0.011, 0.018, 0.045, 0.048], "testName": "analyze_array_tuples", "query": "\\nSELECT [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199), (200, 200), (201, 201), (202, 202), (203, 203), (204, 204), (205, 205), (206, 206), (207, 207), (208, 208), (209, 209), (210, 210), (211, 211), (212, 212), (213, 213), (214, 214), (215, 215), (216, 216), (217, 217), (218, 218), (219, 219), (220, 220), (221, 221), (222, 222), (223, 223), (224, 224), (225, 225), (226, 226), (227, 227), (228, 228), (229, 229), (230, 230), (231, 231), (232, 232), (233, 233), (234, 234), (235, 235), (236, 236), (237, 237), (238, 238), (239, 239), (240, 240), (241, 241), (242, 242), (243, 243), (244, 244), (245, 245), (246, 246), (247, 247), (248, 248), (249, 249), (250, 250), (251, 251), (252, 252), (253, 253), (254, 254), (255, 255), (256, 256), (257, 257), (258, 258), (259, 259), (260, 260), (261, 261), (262, 262), (263, 263), (264, 264), (265, 265), (266, 266), (267, 267), (268, 268), (269, 269), (270, 270), (271, 271), (272, 272), (273, 273), (274, 274), (275, 275), (276, 276), (277, 277), (278, 278), (279, 279), (280, 280), (281, 281), (282, 282), (283, 283), (284, 284), (285, 285), (286, 286), (287, 287), (288, 288), (289, 289), (290, 290), (291, 291), (292, 292), (293, 293), (294, 294), (295, 295), (296, 296), (297, 297), (298, 298), (299, 299), (300, 300), (301, 301), (302, 302), (303, 303), (304, 304), (305, 305), (306, 306), (307, 307), (308, 308), (309, 309), (310, 310), (311, 311), (312, 312), (313, 313), (314, 314), (315, 315), (316, 316), (317, 317), (318, 318), (319, 319), (320, 320), (321, 321), (322, 322), (323, 323), (324, 324), (325, 325), (326, 326), (327, 327), (328, 328), (329, 329), (330, 330), (331, 331), (332, 332), (333, 333), (334, 334), (335, 335), (336, 336), (337, 337), (338, 338), (339, 339), (340, 340), (341, 341), (342, 342), (343, 343), (344, 344), (345, 345), (346, 346), (347, 347), (348, 348), (349, 349), (350, 350), (351, 351), (352, 352), (353, 353), (354, 354), (355, 355), (356, 356), (357, 357), (358, 358), (359, 359), (360, 360), (361, 361), (362, 362), (363, 363), (364, 364), (365, 365), (366, 366), (367, 367), (368, 368), (369, 369), (370, 370), (371, 371), (372, 372), (373, 373), (374, 374), (375, 375), (376, 376), (377, 377), (378, 378), (379, 379), (380, 380), (381, 381), (382, 382), (383, 383), (384, 384), (385, 385), (386, 386), (387, 387), (388, 388), (389, 389), (390, 390), (391, 391), (392, 392), (393, 393), (394, 394), (395, 395), (396, 396), (397, 397), (398, 398), (399, 399), (400, 400), (401, 401), (402, 402), (403, 403), (404, 404), (405, 405), (406, 406), (407, 407), (408, 408), (409, 409), (410, 410), (411, 411), (412, 412), (413, 413), (414, 414), (415, 415), (416, 416), (417, 417), (418, 418), (419, 419), (420, 420), (421, 421), (422, 422), (423, 423), (424, 424), (425, 425), (426, 426), (427, 427), (428, 428), (429, 429), (430, 430), (431, 431), (432, 432), (433, 433), (434, 434), (435, 435), (436, 436), (437, 437), (438, 438), (439, 439), (440, 440), (441, 441), (442, 442), (443, 443), (444, 444), (445, 445), (446, 446), (447, 447), (448, 448), (449, 449), (450, 450), (451, 451), (452, 452), (453, 453), (454, 454), (455, 455), (456, 456), (457, 457), (458, 458), (459, 459), (460, 460), (461, 461), (462, 462), (463, 463), (464, 464), (465, 465), (466, 466), (467, 467), (468, 468), (469, 469), (470, 470), (471, 471), (472, 472), (473, 473), (474, 474), (475, 475), (476, 476), (477, 477), (478, 478), (479, 479), (480, 480), (481, 481), (482, 482), (483, 483), (484, 484), (485, 485), (486, 486), (487, 487), (488, 488), (489, 489), (490, 490), (491, 491), (492, 492), (493, 493), (494, 494), (495, 495), (496, 496), (497, 497), (498, 498), (499, 499), (500, 500), (501, 501), (502, 502), (503, 503), (504, 504), (505, 505), (506, 506), (507, 507), (508, 508), (509, 509), (510, 510), (511, 511), (512, 512), (513, 513), (514, 514), (515, 515), (516, 516), (517, 517), (518, 518), (519, 519), (520, 520), (521, 521), (522, 522), (523, 523), (524, 524), (525, 525), (526, 526), (527, 527), (528, 528), (529, 529), (530, 530), (531, 531), (532, 532), (533, 533), (534, 534), (535, 535), (536, 536), (537, 537), (538, 538), (539, 539), (540, 540), (541, 541), (542, 542), (543, 543), (544, 544), (545, 545), (546, 546), (547, 547), (548, 548), (549, 549), (550, 550), (551, 551), (552, 552), (553, 553), (554, 554), (555, 555), (556, 556), (557, 557), (558, 558), (559, 559), (560, 560), (561, 561), (562, 562), (563, 563), (564, 564), (565, 565), (566, 566), (567, 567), (568, 568), (569, 569), (570, 570), (571, 571), (572, 572), (573, 573), (574, 574), (575, 575), (576, 576), (577, 577), (578, 578), (579, 579), (580, 580), (581, 581), (582, 582), (583, 583), (584, 584), (585, 585), (586, 586), (587, 587), (588, 588), (589, 589), (590, 590), (591, 591), (592, 592), (593, 593), (594, 594), (595, 595), (596, 596), (597, 597), (598, 598), (599, 599), (600, 600), (601, 601), (602, 602), (603, 603), (604, 604), (605, 605), (606, 606), (607, 607), (608, 608), (609, 609), (610, 610), (611, 611), (612, 612), (613, 613), (614, 614), (615, 615), (616, 616), (617, 617), (618, 618), (619, 619), (620, 620), (621, 621), (622, 622), (623, 623), (624, 624), (625, 625), (626, 626), (627, 627), (628, 628), (629, 629), (630, 630), (631, 631), (632, 632), (633, 633), (634, 634), (635, 635), (636, 636), (637, 637), (638, 638), (639, 639), (640, 640), (641, 641), (642, 642), (643, 643), (644, 644), (645, 645), (646, 646), (647, 647), (648, 648), (649, 649), (650, 650), (651, 651), (652, 652), (653, 653), (654, 654), (655, 655), (656, 656), (657, 657), (658, 658), (659, 659), (660, 660), (661, 661), (662, 662), (663, 663), (664, 664), (665, 665), (666, 666), (667, 667), (668, 668), (669, 669), (670, 670), (671, 671), (672, 672), (673, 673), (674, 674), (675, 675), (676, 676), (677, 677), (678, 678), (679, 679), (680, 680), (681, 681), (682, 682), (683, 683), (684, 684), (685, 685), (686, 686), (687, 687), (688, 688), (689, 689), (690, 690), (691, 691), (692, 692), (693, 693), (694, 694), (695, 695), (696, 696), (697, 697), (698, 698), (699, 699), (700, 700), (701, 701), (702, 702), (703, 703), (704, 704), (705, 705), (706, 706), (707, 707), (708, 708), (709, 709), (710, 710), (711, 711), (712, 712), (713, 713), (714, 714), (715, 715), (716, 716), (717, 717), (718, 718), (719, 719), (720, 720), (721, 721), (722, 722), (723, 723), (724, 724), (725, 725), (726, 726), (727, 727), (728, 728), (729, 729), (730, 730), (731, 731), (732, 732), (733, 733), (734, 734), (735, 735), (736, 736), (737, 737), (738, 738), (739, 739), (740, 740), (741, 741), (742, 742), (743, 743), (744, 744), (745, 745), (746, 746), (747, 747), (748, 748), (749, 749), (750, 750), (751, 751), (752, 752), (753, 753), (754, 754), (755, 755), (756, 756), (757, 757), (758, 758), (759, 759), (760, 760), (761, 761), (762, 762), (763, 763), (764, 764), (765, 765), (766, 766), (767, 767), (768, 768), (769, 769), (770, 770), (771, 771), (772, 772), (773, 773), (774, 774), (775, 775), (776, 776), (777, 777), (778, 778), (779, 779), (780, 780), (781, 781), (782, 782), (783, 783), (784, 784), (785, 785), (786, 786), (787, 787), (788, 788), (789, 789), (790, 790), (791, 791), (792, 792), (793, 793), (794, 794), (795, 795), (796, 796), (797, 797), (798, 798), (799, 799), (800, 800), (801, 801), (802, 802), (803, 803), (804, 804), (805, 805), (806, 806), (807, 807), (808, 808), (809, 809), (810, 810), (811, 811), (812, 812), (813, 813), (814, 814), (815, 815), (816, 816), (817, 817), (818, 818), (819, 819), (820, 820), (821, 821), (822, 822), (823, 823), (824, 824), (825, 825), (826, 826), (827, 827), (828, 828), (829, 829), (830, 830), (831, 831), (832, 832), (833, 833), (834, 834), (835, 835), (836, 836), (837, 837), (838, 838), (839, 839), (840, 840), (841, 841), (842, 842), (843, 843), (844, 844), (845, 845), (846, 846), (847, 847), (848, 848), (849, 849), (850, 850), (851, 851), (852, 852), (853, 853), (854, 854), (855, 855), (856, 856), (857, 857), (858, 858), (859, 859), (860, 860), (861, 861), (862, 862), (863, 863), (864, 864), (865, 865), (866, 866), (867, 867), (868, 868), (869, 869), (870, 870), (871, 871), (872, 872), (873, 873), (874, 874), (875, 875), (876, 876), (877, 877), (878, 878), (879, 879), (880, 880), (881, 881), (882, 882), (883, 883), (884, 884), (885, 885), (886, 886), (887, 887), (888, 888), (889, 889), (890, 890), (891, 891), (892, 892), (893, 893), (894, 894), (895, 895), (896, 896), (897, 897), (898, 898), (899, 899), (900, 900), (901, 901), (902, 902), (903, 903), (904, 904), (905, 905), (906, 906), (907, 907), (908, 908), (909, 909), (910, 910), (911, 911), (912, 912), (913, 913), (914, 914), (915, 915), (916, 916), (917, 917), (918, 918), (919, 919), (920, 920), (921, 921), (922, 922), (923, 923), (924, 924), (925, 925), (926, 926), (927, 927), (928, 928), (929, 929), (930, 930), (931, 931), (932, 932), (933, 933), (934, 934), (935, 935), (936, 936), (937, 937), (938, 938), (939, 939), (940, 940), (941, 941), (942, 942), (943, 943), (944, 944), (945, 945), (946, 946), (947, 947), (948, 948), (949, 949), (950, 950), (951, 951), (952, 952), (953, 953), (954, 954), (955, 955), (956, 956), (957, 957), (958, 958), (959, 959), (960, 960), (961, 961), (962, 962), (963, 963), (964, 964), (965, 965), (966, 966), (967, 967), (968, 968), (969, 969), (970, 970), (971, 971), (972, 972), (973, 973), (974, 974), (975, 975), (976, 976), (977, 977), (978, 978), (979, 979), (980, 980), (981, 981), (982, 982), (983, 983), (984, 984), (985, 985), (986, 986), (987, 987), (988, 988), (989, 989), (990, 990), (991, 991), (992, 992), (993, 993), (994, 994), (995, 995), (996, 996), (997, 997), (998, 998), (999, 999), (1000, 1000)] AS x FORMAT Null\\n"}, {"oldTime": 0.0872, "newTime": 0.0866, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.005, 0.017, 0.023, 0.025], "testName": "and_function", "query": "select count() from numbers(10000000) where number != 96594 AND number != 18511 AND number != 98085 AND number != 84177 AND number != 70314 AND number != 28083 AND number != 54202 AND number != 66522 AND number != 66939 AND number != 99469"}, {"oldTime": 1.0317, "newTime": 1.0268, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.002, 0.004, 0.01, 0.012], "testName": "and_function", "query": "select count() from numbers(10000000) where number != 96594 AND number != 18511 AND number != 98085 AND number != 84177 AND number != 70314 AND number != 28083 AND number != 54202 AND number != 66522 AND number != 66939 AND number != 99469 AND number != 65776 AND number != 22876 AND number != 42151 AND number != 19924 AND number != 66681 AND number != 63022 AND number != 17487 AND number != 83914 AND number != 59754 AND number != 968 AND number != 73334 AND number != 68569 AND number != 49853 AND number != 33155 AND number != 31777 AND number != 99698 AND number != 26708 AND number != 76409 AND number != 42191 AND number != 55397 AND number != 25724 AND number != 39170 AND number != 22728 AND number != 98238 AND number != 86052 AND number != 12756 AND number != 13948 AND number != 57774 AND number != 82511 AND number != 11337 AND number != 23506 AND number != 11875 AND number != 58536 AND number != 56919 AND number != 25986 AND number != 80710 AND number != 61797 AND number != 99244 AND number != 11665 AND number != 15758 AND number != 82899 AND number != 63150 AND number != 7198 AND number != 40071 AND number != 46310 AND number != 78488 AND number != 9273 AND number != 91878 AND number != 57904 AND number != 53941 AND number != 75675 AND number != 12093 AND number != 50090 AND number != 59675 AND number != 41632 AND number != 81448 AND number != 46821 AND number != 51919 AND number != 49028 AND number != 71059 AND number != 15673 AND number != 6132 AND number != 15473 AND number != 32527 AND number != 63842 AND number != 33121 AND number != 53271 AND number != 86033 AND number != 96807 AND number != 4791 AND number != 80089 AND number != 51616 AND number != 46311 AND number != 82844 AND number != 59353 AND number != 63538 AND number != 64857 AND number != 58471 AND number != 29870 AND number != 80209 AND number != 61000 AND number != 75991 AND number != 44506 AND number != 11283 AND number != 6335 AND number != 73502 AND number != 22354 AND number != 72816 AND number != 66399 AND number != 61703"}, {"oldTime": 0.1547, "newTime": 0.1571, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.005, 0.015, 0.114, 0.125], "testName": "array_auc", "query": "SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)"}, {"oldTime": 0.066, "newTime": 0.0666, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.008, 0.04, 0.117, 0.136], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])"}, {"oldTime": 0.0674, "newTime": 0.0647, "relativeDifference": -0.041, "timeSpeed": 1.041, "quantiles": [0.014, 0.031, 0.089, 0.098], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], [2]][number % 2 + 2])"}, {"oldTime": 0.0482, "newTime": 0.0445, "relativeDifference": -0.077, "timeSpeed": 1.083, "quantiles": [0.015, 0.025, 0.079, 0.108], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], []][number % 2 + 2])"}, {"oldTime": 4.2904, "newTime": 4.2039, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.003, 0.008, 0.025, 0.029], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> (((x.1) % 2) = 0), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null"}, {"oldTime": 3.3648, "newTime": 3.3331, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.0, 0.001, 0.006, 0.009], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> (((x.1) % 2) >= 0), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null"}, {"oldTime": 3.756, "newTime": 3.7723, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.006, 0.019, 0.025], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> (((x.1) % 2) >= 2), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null"}, {"oldTime": 1.2253, "newTime": 1.1946, "relativeDifference": -0.026, "timeSpeed": 1.025, "quantiles": [0.006, 0.015, 0.026, 0.031], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> ((x % 2) = 0), range(100000000)), 1, 10) FORMAT Null"}, {"oldTime": 0.967, "newTime": 0.9387, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.003, 0.006, 0.024, 0.029], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> ((x % 2) >= 0), range(100000000)), 1, 10) FORMAT Null"}, {"oldTime": 1.0697, "newTime": 1.047, "relativeDifference": -0.022, "timeSpeed": 1.021, "quantiles": [0.0, 0.007, 0.02, 0.023], "testName": "array_fill", "query": "SELECT arraySlice(arrayFill(x -> ((x % 2) >= 2), range(100000000)), 1, 10) FORMAT Null"}, {"oldTime": 0.4096, "newTime": 0.4206, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.005, 0.012, 0.024, 0.028], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2, number] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1"}, {"oldTime": 0.4154, "newTime": 0.4072, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.003, 0.006, 0.025, 0.029], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2, number] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1"}, {"oldTime": 0.1074, "newTime": 0.1074, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.007, 0.041, 0.043], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b)"}, {"oldTime": 0.3125, "newTime": 0.3158, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.008, 0.019, 0.031, 0.033], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1"}, {"oldTime": 0.1916, "newTime": 0.1977, "relativeDifference": 0.031, "timeSpeed": 1.031, "quantiles": [0.007, 0.009, 0.034, 0.035], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b)"}, {"oldTime": 0.3012, "newTime": 0.3097, "relativeDifference": 0.028, "timeSpeed": 1.028, "quantiles": [0.005, 0.012, 0.032, 0.032], "testName": "array_join", "query": "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1"}, {"oldTime": 0.1878, "newTime": 0.1758, "relativeDifference": -0.064, "timeSpeed": 1.068, "quantiles": [0.054, 0.057, 0.063, 0.064], "testName": "array_reduce", "query": "SELECT arrayReduce(\\'count\\', range(100000000))"}, {"oldTime": 0.2224, "newTime": 0.2111, "relativeDifference": -0.051, "timeSpeed": 1.053, "quantiles": [0.03, 0.038, 0.048, 0.05], "testName": "array_reduce", "query": "SELECT arrayReduce(\\'sum\\', range(100000000))"}, {"oldTime": 0.4071, "newTime": 0.3943, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.003, 0.011, 0.024, 0.031], "testName": "array_reduce", "query": "SELECT arrayReduceInRanges(\\'count\\', [(1, 100000000)], range(100000000))"}, {"oldTime": 0.6236, "newTime": 0.6243, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.006, 0.014, 0.018], "testName": "array_reduce", "query": "SELECT arrayReduceInRanges(\\'count\\', arrayZip(range(1000000), range(1000000)), range(100000000))[123456]"}, {"oldTime": 0.4343, "newTime": 0.4231, "relativeDifference": -0.026, "timeSpeed": 1.026, "quantiles": [0.007, 0.012, 0.027, 0.038], "testName": "array_reduce", "query": "SELECT arrayReduceInRanges(\\'sum\\', [(1, 100000000)], range(100000000))"}, {"oldTime": 0.6637, "newTime": 0.6748, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.0, 0.005, 0.016, 0.018], "testName": "array_reduce", "query": "SELECT arrayReduceInRanges(\\'sum\\', arrayZip(range(1000000), range(1000000)), range(100000000))[123456]"}, {"oldTime": 0.0941, "newTime": 0.0902, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.002, 0.032, 0.044, 0.05], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(materialize(\\'Hello, world!\\')))"}, {"oldTime": 0.1882, "newTime": 0.1893, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.0, 0.003, 0.008, 0.008], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')))"}, {"oldTime": 0.1327, "newTime": 0.1335, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.006, 0.031, 0.036], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(toString(number)))"}, {"oldTime": 0.2022, "newTime": 0.1977, "relativeDifference": -0.023, "timeSpeed": 1.022, "quantiles": [0.0, 0.008, 0.024, 0.029], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(materialize(\\'Hello, world!\\'))) != materialize(\\'Hello, world!\\')"}, {"oldTime": 0.4109, "newTime": 0.406, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.001, 0.006, 0.031, 0.033], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\'))) != materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')"}, {"oldTime": 0.2357, "newTime": 0.2321, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.0, 0.008, 0.015, 0.019], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(toString(number))) != toString(number)"}, {"oldTime": 0.2018, "newTime": 0.1993, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.001, 0.006, 0.015, 0.019], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(materialize(\\'Hello, world!\\'))) != materialize(\\'Hello, world!\\')"}, {"oldTime": 0.4061, "newTime": 0.4091, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.007, 0.012, 0.025, 0.029], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\'))) != materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')"}, {"oldTime": 0.2337, "newTime": 0.23, "relativeDifference": -0.016, "timeSpeed": 1.016, "quantiles": [0.003, 0.016, 0.038, 0.045], "testName": "base64", "query": "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(toString(number))) != toString(number)"}, {"oldTime": 0.0371, "newTime": 0.0372, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.012, 0.041, 0.049], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(MobilePhoneModel))"}, {"oldTime": 0.0843, "newTime": 0.0842, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.006, 0.014, 0.014], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(SearchPhrase))"}, {"oldTime": 0.4446, "newTime": 0.439, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.003, 0.012, 0.028, 0.033], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(Title))"}, {"oldTime": 0.4582, "newTime": 0.4774, "relativeDifference": 0.041, "timeSpeed": 1.041, "quantiles": [0.014, 0.016, 0.046, 0.05], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(URL))"}, {"oldTime": 0.0596, "newTime": 0.0593, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.102, 0.166, 0.186], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel"}, {"oldTime": 0.1384, "newTime": 0.1422, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.009, 0.014, 0.037, 0.04], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(SearchPhrase)) != SearchPhrase"}, {"oldTime": 0.7504, "newTime": 0.7689, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.006, 0.023, 0.038, 0.045], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(Title)) != Title"}, {"oldTime": 0.8094, "newTime": 0.7953, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.0, 0.006, 0.017, 0.019], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(URL)) != URL"}, {"oldTime": 0.0507, "newTime": 0.0499, "relativeDifference": -0.016, "timeSpeed": 1.016, "quantiles": [0.006, 0.014, 0.025, 0.028], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel"}, {"oldTime": 0.1329, "newTime": 0.1322, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.001, 0.002, 0.011, 0.019], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(SearchPhrase)) != SearchPhrase"}, {"oldTime": 0.7853, "newTime": 0.7681, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.014, 0.021, 0.038, 0.039], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(Title)) != Title"}, {"oldTime": 0.7878, "newTime": 0.7999, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.005, 0.011, 0.024, 0.025], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(URL)) != URL"}, {"oldTime": 0.0391, "newTime": 0.0429, "relativeDifference": 0.097, "timeSpeed": 1.097, "quantiles": [0.023, 0.054, 0.092, 0.097], "testName": "basename", "query": "SELECT count() FROM test.hits WHERE NOT ignore(basename(Referer))"}, {"oldTime": 0.0472, "newTime": 0.0478, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.002, 0.009, 0.039, 0.062], "testName": "basename", "query": "SELECT count() FROM test.hits WHERE NOT ignore(basename(URL))"}, {"oldTime": 0.0747, "newTime": 0.0746, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.01, 0.032, 0.033], "testName": "bitCount", "query": "SELECT bitCount(number) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.1418, "newTime": 0.141, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.005, 0.014, 0.015], "testName": "bitCount", "query": "SELECT bitCount(toFloat64(number)) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.0955, "newTime": 0.0962, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.007, 0.027, 0.029], "testName": "bitCount", "query": "SELECT bitCount(toInt32(number)) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.1648, "newTime": 0.1665, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.001, 0.007, 0.015, 0.019], "testName": "bitCount", "query": "SELECT bitCount(toUInt16(number)) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.0995, "newTime": 0.0996, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.009, 0.023, 0.026], "testName": "bitCount", "query": "SELECT bitCount(toUInt32(number)) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.0947, "newTime": 0.0931, "relativeDifference": -0.017, "timeSpeed": 1.017, "quantiles": [0.004, 0.009, 0.03, 0.04], "testName": "bitCount", "query": "SELECT bitCount(toUInt8(number)) FROM numbers(100000000) FORMAT Null"}, {"oldTime": 0.0121, "newTime": 0.0119, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.01, 0.052, 0.128, 0.141], "testName": "bit_operations_fixed_string", "query": "SELECT count() FROM test.hits WHERE NOT ignore(bitAnd(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))"}, {"oldTime": 0.0101, "newTime": 0.0105, "relativeDifference": 0.039, "timeSpeed": 1.039, "quantiles": [0.004, 0.019, 0.049, 0.054], "testName": "bit_operations_fixed_string", "query": "SELECT count() FROM test.hits WHERE NOT ignore(bitNot(toFixedString(ClientIP6, 16)))"}, {"oldTime": 0.0121, "newTime": 0.012, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.01, 0.02, 0.091, 0.132], "testName": "bit_operations_fixed_string", "query": "SELECT count() FROM test.hits WHERE NOT ignore(bitOr(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))"}, {"oldTime": 0.0125, "newTime": 0.0122, "relativeDifference": -0.025, "timeSpeed": 1.024, "quantiles": [0.025, 0.038, 0.091, 0.103], "testName": "bit_operations_fixed_string", "query": "SELECT count() FROM test.hits WHERE NOT ignore(bitXor(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))"}, {"oldTime": 0.0421, "newTime": 0.0424, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.0, 0.01, 0.017], "testName": "bit_operations_fixed_string_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(bitXor(reinterpretAsFixedString(number), reinterpretAsFixedString(0xabcd0123cdef4567)))"}, {"oldTime": 0.0279, "newTime": 0.028, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.005, 0.023, 0.032], "testName": "bit_operations_fixed_string_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(bitXor(reinterpretAsFixedString(number), reinterpretAsFixedString(number + 1)))"}, {"oldTime": 0.4053, "newTime": 0.4107, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.003, 0.02, 0.022], "testName": "bloom_filter", "query": "INSERT INTO test_bf SELECT number AS id, [CAST(id, \\'String\\'), CAST(id + 1, \\'String\\'), CAST(id + 2, \\'String\\')] FROM numbers(1000000)"}, {"oldTime": 0.0044, "newTime": 0.0045, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.002, 0.023, 0.06, 0.072], "testName": "bounding_ratio", "query": "SELECT (argMax(number, number) - argMin(number, number)) / (max(number) - min(number)) FROM numbers(1000000)"}, {"oldTime": 0.0049, "newTime": 0.0054, "relativeDifference": 0.102, "timeSpeed": 1.102, "quantiles": [0.027, 0.035, 0.089, 0.105], "testName": "bounding_ratio", "query": "SELECT boundingRatio(number, number) FROM numbers(1000000)"}, {"oldTime": 0.0086, "newTime": 0.0098, "relativeDifference": 0.139, "timeSpeed": 1.139, "quantiles": [0.004, 0.114, 0.178, 0.184], "testName": "cidr", "query": "SELECT count() FROM test.hits WHERE NOT ignore(IPv4CIDRToRange(ClientIP, rand() % 33))"}, {"oldTime": 0.0138, "newTime": 0.0147, "relativeDifference": 0.065, "timeSpeed": 1.065, "quantiles": [0.005, 0.012, 0.071, 0.091], "testName": "cidr", "query": "SELECT count() FROM test.hits WHERE NOT ignore(IPv6CIDRToRange(ClientIP6, rand() % 33))"}, {"oldTime": 0.0422, "newTime": 0.0419, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.003, 0.005, 0.011, 0.013], "testName": "codecs_float_insert", "query": "INSERT INTO codec_mon_Float64_DoubleDelta (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.042, "newTime": 0.0417, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.001, 0.005, 0.011, 0.013], "testName": "codecs_float_insert", "query": "INSERT INTO codec_mon_Float64_Gorilla (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0376, "newTime": 0.0384, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.005, 0.008, 0.046, 0.064], "testName": "codecs_float_insert", "query": "INSERT INTO codec_mon_Float64_LZ4 (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0313, "newTime": 0.0297, "relativeDifference": -0.052, "timeSpeed": 1.053, "quantiles": [0.024, 0.037, 0.065, 0.078], "testName": "codecs_float_insert", "query": "INSERT INTO codec_mon_Float64_NONE (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0432, "newTime": 0.0428, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.003, 0.013, 0.058, 0.061], "testName": "codecs_float_insert", "query": "INSERT INTO codec_mon_Float64_ZSTD (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0289, "newTime": 0.0283, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.011, 0.013, 0.034, 0.042], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_DoubleDelta (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0298, "newTime": 0.0296, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.003, 0.009, 0.05, 0.054], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_Gorilla (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0157, "newTime": 0.0158, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.014, 0.078, 0.082], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_LZ4 (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0149, "newTime": 0.0162, "relativeDifference": 0.087, "timeSpeed": 1.087, "quantiles": [0.053, 0.091, 0.117, 0.128], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_NONE (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0271, "newTime": 0.0284, "relativeDifference": 0.047, "timeSpeed": 1.047, "quantiles": [0.011, 0.037, 0.049, 0.051], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_ZSTD (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0181, "newTime": 0.0176, "relativeDifference": -0.028, "timeSpeed": 1.028, "quantiles": [0.009, 0.015, 0.048, 0.061], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_DoubleDelta (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0279, "newTime": 0.0272, "relativeDifference": -0.026, "timeSpeed": 1.025, "quantiles": [0.023, 0.067, 0.127, 0.135], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0186, "newTime": 0.0187, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.003, 0.015, 0.139, 0.16], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_LZ4 (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0181, "newTime": 0.0173, "relativeDifference": -0.045, "timeSpeed": 1.046, "quantiles": [0.033, 0.069, 0.211, 0.235], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_NONE (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0302, "newTime": 0.0303, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.001, 0.005, 0.017, 0.026], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_ZSTD (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0164, "newTime": 0.0159, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.007, 0.019, 0.03, 0.034], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_mon_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.013, "newTime": 0.013, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.012, 0.039, 0.046], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_mon_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.006, "newTime": 0.0061, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.001, 0.016, 0.073, 0.081], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_mon_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0043, "newTime": 0.0041, "relativeDifference": -0.047, "timeSpeed": 1.048, "quantiles": [0.025, 0.035, 0.07, 0.089], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_mon_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0126, "newTime": 0.012, "relativeDifference": -0.048, "timeSpeed": 1.049, "quantiles": [0.006, 0.014, 0.05, 0.053], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_mon_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0161, "newTime": 0.0162, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.001, 0.011, 0.036, 0.045], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_rnd_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0148, "newTime": 0.0145, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.013, 0.023, 0.039, 0.041], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_rnd_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0047, "newTime": 0.0045, "relativeDifference": -0.043, "timeSpeed": 1.044, "quantiles": [0.032, 0.076, 0.113, 0.133], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_rnd_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0045, "newTime": 0.0039, "relativeDifference": -0.134, "timeSpeed": 1.153, "quantiles": [0.025, 0.075, 0.169, 0.195], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_rnd_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0127, "newTime": 0.013, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.003, 0.005, 0.03, 0.049], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_rnd_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0079, "newTime": 0.0078, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.01, 0.023, 0.069, 0.078], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_seq_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.013, "newTime": 0.0129, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.004, 0.028, 0.029], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_seq_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.005, "newTime": 0.0043, "relativeDifference": -0.14, "timeSpeed": 1.162, "quantiles": [0.039, 0.085, 0.174, 0.192], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_seq_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0046, "newTime": 0.0048, "relativeDifference": 0.043, "timeSpeed": 1.043, "quantiles": [0.008, 0.048, 0.167, 0.178], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_seq_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0127, "newTime": 0.0124, "relativeDifference": -0.024, "timeSpeed": 1.024, "quantiles": [0.005, 0.014, 0.028, 0.029], "testName": "codecs_float_select", "query": "SELECT count(n) FROM codec_seq_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.1362, "newTime": 0.1244, "relativeDifference": -0.087, "timeSpeed": 1.094, "quantiles": [0.011, 0.086, 0.128, 0.133], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.228, "newTime": 0.2212, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.029, 0.044, 0.065, 0.066], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_DoubleDelta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2116, "newTime": 0.2192, "relativeDifference": 0.035, "timeSpeed": 1.035, "quantiles": [0.007, 0.035, 0.073, 0.082], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Gorilla (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2096, "newTime": 0.212, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.011, 0.029, 0.089, 0.115], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_LZ4 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1302, "newTime": 0.1264, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.028, 0.057, 0.115, 0.121], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1865, "newTime": 0.178, "relativeDifference": -0.046, "timeSpeed": 1.047, "quantiles": [0.005, 0.036, 0.075, 0.095], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.3453, "newTime": 0.3319, "relativeDifference": -0.039, "timeSpeed": 1.04, "quantiles": [0.004, 0.033, 0.046, 0.053], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_ZSTD (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.121, "newTime": 0.1158, "relativeDifference": -0.043, "timeSpeed": 1.044, "quantiles": [0.023, 0.041, 0.096, 0.132], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2498, "newTime": 0.2483, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.002, 0.024, 0.045, 0.057], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_DoubleDelta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2704, "newTime": 0.2611, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.0, 0.006, 0.053, 0.067], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Gorilla (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1243, "newTime": 0.1081, "relativeDifference": -0.131, "timeSpeed": 1.149, "quantiles": [0.001, 0.045, 0.12, 0.148], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1222, "newTime": 0.1049, "relativeDifference": -0.142, "timeSpeed": 1.164, "quantiles": [0.06, 0.093, 0.131, 0.142], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_NONE (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1423, "newTime": 0.1561, "relativeDifference": 0.096, "timeSpeed": 1.096, "quantiles": [0.017, 0.083, 0.174, 0.179], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1638, "newTime": 0.1669, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.009, 0.018, 0.032, 0.044], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_ZSTD (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1157, "newTime": 0.1119, "relativeDifference": -0.033, "timeSpeed": 1.033, "quantiles": [0.033, 0.075, 0.129, 0.14], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0565, "newTime": 0.0542, "relativeDifference": -0.041, "timeSpeed": 1.042, "quantiles": [0.04, 0.101, 0.227, 0.291], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1822, "newTime": 0.1788, "relativeDifference": -0.019, "timeSpeed": 1.019, "quantiles": [0.017, 0.018, 0.044, 0.05], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Gorilla (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1644, "newTime": 0.1803, "relativeDifference": 0.096, "timeSpeed": 1.096, "quantiles": [0.044, 0.066, 0.149, 0.158], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1153, "newTime": 0.1158, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.025, 0.119, 0.163], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.152, "newTime": 0.1506, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.0, 0.035, 0.079, 0.096], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_T64 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2606, "newTime": 0.2578, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.005, 0.01, 0.042, 0.064], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_ZSTD (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0042, "newTime": 0.0041, "relativeDifference": -0.024, "timeSpeed": 1.024, "quantiles": [0.022, 0.067, 0.109, 0.119], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0117, "newTime": 0.0117, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.005, 0.01, 0.043, 0.058], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0097, "newTime": 0.0097, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.007, 0.068, 0.077], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0115, "newTime": 0.0109, "relativeDifference": -0.053, "timeSpeed": 1.055, "quantiles": [0.009, 0.025, 0.064, 0.074], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0043, "newTime": 0.0046, "relativeDifference": 0.069, "timeSpeed": 1.069, "quantiles": [0.0, 0.02, 0.144, 0.204], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0108, "newTime": 0.011, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.002, 0.008, 0.035, 0.046], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0151, "newTime": 0.0152, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.007, 0.01, 0.023, 0.025], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_mon_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0044, "newTime": 0.0046, "relativeDifference": 0.045, "timeSpeed": 1.045, "quantiles": [0.046, 0.063, 0.198, 0.237], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0157, "newTime": 0.0151, "relativeDifference": -0.039, "timeSpeed": 1.039, "quantiles": [0.0, 0.013, 0.035, 0.042], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0143, "newTime": 0.0144, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.01, 0.051, 0.069], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0045, "newTime": 0.0053, "relativeDifference": 0.177, "timeSpeed": 1.177, "quantiles": [0.013, 0.047, 0.153, 0.182], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0045, "newTime": 0.0044, "relativeDifference": -0.023, "timeSpeed": 1.022, "quantiles": [0.041, 0.049, 0.18, 0.205], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0084, "newTime": 0.0086, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.012, 0.015, 0.048, 0.063], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0048, "newTime": 0.0045, "relativeDifference": -0.063, "timeSpeed": 1.066, "quantiles": [0.011, 0.059, 0.122, 0.155], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_rnd_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0047, "newTime": 0.004, "relativeDifference": -0.149, "timeSpeed": 1.174, "quantiles": [0.02, 0.072, 0.136, 0.148], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0054, "newTime": 0.0056, "relativeDifference": 0.037, "timeSpeed": 1.037, "quantiles": [0.007, 0.01, 0.074, 0.085], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0087, "newTime": 0.0084, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.003, 0.026, 0.067, 0.073], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0109, "newTime": 0.0111, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.002, 0.015, 0.03, 0.037], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0044, "newTime": 0.0049, "relativeDifference": 0.113, "timeSpeed": 1.113, "quantiles": [0.01, 0.082, 0.127, 0.135], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0104, "newTime": 0.0099, "relativeDifference": -0.049, "timeSpeed": 1.05, "quantiles": [0.004, 0.014, 0.045, 0.05], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0155, "newTime": 0.0156, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.004, 0.024, 0.041, 0.045], "testName": "codecs_int_select", "query": "SELECT count(n) FROM codec_seq_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.4801, "newTime": 0.4844, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.0, 0.003, 0.02, 0.028], "testName": "collations", "query": "SELECT Title FROM test.hits ORDER BY Title DESC COLLATE \\'tr\\' LIMIT 1000, 10"}, {"oldTime": 0.0502, "newTime": 0.0498, "relativeDifference": -0.008, "timeSpeed": 1.008, "quantiles": [0.007, 0.018, 0.039, 0.04], "testName": "collations", "query": "SELECT Title FROM test.hits ORDER BY Title DESC LIMIT 1000, 10"}, {"oldTime": 0.0013, "newTime": 0.0015, "relativeDifference": 0.153, "timeSpeed": 1.153, "quantiles": [0.066, 0.214, 0.372, 0.386], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1"}, {"oldTime": 0.6089, "newTime": 0.604, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.007, 0.016, 0.018], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < PageCharset SETTINGS max_threads = 2"}, {"oldTime": 0.2472, "newTime": 0.2377, "relativeDifference": -0.039, "timeSpeed": 1.039, "quantiles": [0.005, 0.031, 0.04, 0.042], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < URL"}, {"oldTime": 0.0011, "newTime": 0.001, "relativeDifference": -0.091, "timeSpeed": 1.099, "quantiles": [0.067, 0.232, 0.313, 0.336], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < PageCharset SETTINGS max_threads = 2"}, {"oldTime": 0.255, "newTime": 0.2489, "relativeDifference": -0.024, "timeSpeed": 1.024, "quantiles": [0.002, 0.007, 0.025, 0.035], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < URL"}, {"oldTime": 0.909, "newTime": 0.9113, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.002, 0.012, 0.018], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < PageCharset SETTINGS max_threads = 2"}, {"oldTime": 0.0014, "newTime": 0.0011, "relativeDifference": -0.215, "timeSpeed": 1.272, "quantiles": [0.036, 0.132, 0.243, 0.263], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < SearchPhrase SETTINGS max_threads = 2"}, {"oldTime": 0.2764, "newTime": 0.2686, "relativeDifference": -0.029, "timeSpeed": 1.029, "quantiles": [0.002, 0.009, 0.029, 0.038], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < URL"}, {"oldTime": 0.2533, "newTime": 0.2551, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.001, 0.007, 0.026, 0.033], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < PageCharset"}, {"oldTime": 0.0015, "newTime": 0.0016, "relativeDifference": 0.066, "timeSpeed": 1.066, "quantiles": [0.029, 0.055, 0.195, 0.316], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < Title"}, {"oldTime": 0.6141, "newTime": 0.621, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.004, 0.018, 0.042, 0.045], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < URL"}, {"oldTime": 0.2639, "newTime": 0.2594, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.002, 0.004, 0.019, 0.021], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE URL < PageCharset"}, {"oldTime": 0.0012, "newTime": 0.0013, "relativeDifference": 0.083, "timeSpeed": 1.083, "quantiles": [0.072, 0.136, 0.173, 0.19], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE URL < URL"}, {"oldTime": 0.0017, "newTime": 0.0011, "relativeDifference": -0.353, "timeSpeed": 1.545, "quantiles": [0.013, 0.117, 0.288, 0.33], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1"}, {"oldTime": 0.6638, "newTime": 0.6608, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.006, 0.01, 0.012], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < PageCharset SETTINGS max_threads = 2"}, {"oldTime": 0.2468, "newTime": 0.2518, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.004, 0.019, 0.025, 0.025], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < URL"}, {"oldTime": 1.2246, "newTime": 1.2148, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.002, 0.007, 0.015, 0.015], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < PageCharset SETTINGS max_threads = 2"}, {"oldTime": 0.0011, "newTime": 0.0011, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.025, 0.095, 0.235, 0.247], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < SearchPhrase SETTINGS max_threads = 2"}, {"oldTime": 0.3129, "newTime": 0.312, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.008, 0.05, 0.053], "testName": "column_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < URL"}, {"oldTime": 0.0223, "newTime": 0.022, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.013, 0.019, 0.034, 0.04], "testName": "complex_array_creation", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore([[], [zero]])"}, {"oldTime": 0.0207, "newTime": 0.0201, "relativeDifference": -0.029, "timeSpeed": 1.029, "quantiles": [0.0, 0.011, 0.026, 0.031], "testName": "complex_array_creation", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore([[zero], [zero]])"}, {"oldTime": 0.015, "newTime": 0.0147, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.008, 0.018, 0.059, 0.064], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'Hello\\', SearchPhrase, \\'World\\'))"}, {"oldTime": 0.0151, "newTime": 0.0147, "relativeDifference": -0.027, "timeSpeed": 1.027, "quantiles": [0.016, 0.026, 0.069, 0.092], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'World\\', SearchPhrase))"}, {"oldTime": 0.0144, "newTime": 0.0138, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.014, 0.045, 0.164, 0.227], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'a\\', PageCharset, \\'b\\'))"}, {"oldTime": 0.0101, "newTime": 0.0112, "relativeDifference": 0.108, "timeSpeed": 1.108, "quantiles": [0.012, 0.044, 0.127, 0.165], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, \\'Hello\\'))"}, {"oldTime": 0.0156, "newTime": 0.0159, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.015, 0.03, 0.061, 0.082], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, \\'Hello\\', PageCharset))"}, {"oldTime": 0.0171, "newTime": 0.0169, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.012, 0.033, 0.09, 0.108], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, SearchPhrase))"}, {"oldTime": 0.0115, "newTime": 0.0118, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.007, 0.012, 0.059, 0.076], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(PageCharset, \\'a\\'))"}, {"oldTime": 0.0543, "newTime": 0.0516, "relativeDifference": -0.05, "timeSpeed": 1.052, "quantiles": [0.001, 0.01, 0.042, 0.049], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, \\'Hello\\'))"}, {"oldTime": 0.0683, "newTime": 0.0686, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.014, 0.039, 0.041], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, \\'Hello\\', URL))"}, {"oldTime": 0.0567, "newTime": 0.0575, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.01, 0.018, 0.031, 0.034], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, SearchPhrase))"}, {"oldTime": 0.0597, "newTime": 0.0612, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.001, 0.011, 0.023, 0.026], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, SearchPhrase, MobilePhoneModel))"}, {"oldTime": 0.0627, "newTime": 0.0634, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.01, 0.013, 0.035, 0.044], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, URL))"}, {"oldTime": 0.0774, "newTime": 0.0806, "relativeDifference": 0.041, "timeSpeed": 1.041, "quantiles": [0.005, 0.016, 0.04, 0.042], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, URL, URL))"}, {"oldTime": 0.0147, "newTime": 0.0149, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.002, 0.011, 0.022, 0.023], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'Hello{}World\\', SearchPhrase))"}, {"oldTime": 0.0156, "newTime": 0.0145, "relativeDifference": -0.071, "timeSpeed": 1.075, "quantiles": [0.054, 0.079, 0.115, 0.128], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'World{}\\', SearchPhrase))"}, {"oldTime": 0.0114, "newTime": 0.0165, "relativeDifference": 0.447, "timeSpeed": 1.447, "quantiles": [0.023, 0.12, 0.386, 0.452], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'a{}b\\', PageCharset))"}, {"oldTime": 0.01, "newTime": 0.0102, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.011, 0.018, 0.064, 0.088], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello\\', MobilePhoneModel))"}, {"oldTime": 0.055, "newTime": 0.0529, "relativeDifference": -0.039, "timeSpeed": 1.039, "quantiles": [0.005, 0.019, 0.038, 0.048], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello\\', URL))"}, {"oldTime": 0.0166, "newTime": 0.0152, "relativeDifference": -0.085, "timeSpeed": 1.092, "quantiles": [0.002, 0.05, 0.082, 0.083], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello{}\\', MobilePhoneModel, PageCharset))"}, {"oldTime": 0.0706, "newTime": 0.067, "relativeDifference": -0.051, "timeSpeed": 1.053, "quantiles": [0.0, 0.015, 0.04, 0.05], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello{}\\', URL, URL))"}, {"oldTime": 0.0123, "newTime": 0.0108, "relativeDifference": -0.122, "timeSpeed": 1.138, "quantiles": [0.031, 0.121, 0.241, 0.252], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}a\\', PageCharset))"}, {"oldTime": 0.0164, "newTime": 0.0174, "relativeDifference": 0.06, "timeSpeed": 1.06, "quantiles": [0.008, 0.035, 0.054, 0.057], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', MobilePhoneModel, SearchPhrase))"}, {"oldTime": 0.0564, "newTime": 0.0578, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.001, 0.013, 0.029, 0.032], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', URL, SearchPhrase))"}, {"oldTime": 0.0662, "newTime": 0.0666, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.007, 0.029, 0.032], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', URL, URL))"}, {"oldTime": 0.0604, "newTime": 0.0598, "relativeDifference": -0.01, "timeSpeed": 1.01, "quantiles": [0.009, 0.019, 0.026, 0.028], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}{}\\', URL, SearchPhrase, MobilePhoneModel))"}, {"oldTime": 0.0795, "newTime": 0.0798, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.004, 0.006, 0.031, 0.039], "testName": "concat_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}{}\\', URL, URL, URL))"}, {"oldTime": 0.0151, "newTime": 0.0155, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.01, 0.02, 0.05, 0.057], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, [toDateTime(\\'2019-02-04 01:24:31\\')], [toDate(\\'2019-02-04\\')]))"}, {"oldTime": 0.0284, "newTime": 0.0275, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.006, 0.022, 0.051, 0.059], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, [toDateTime(rand())], [toDate(rand())]))"}, {"oldTime": 0.0093, "newTime": 0.0093, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.046, 0.058], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, toDateTime(\\'2019-02-04 01:24:31\\'), toDate(\\'2019-02-04\\')))"}, {"oldTime": 0.0151, "newTime": 0.0154, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.012, 0.024, 0.048, 0.049], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, toDateTime(rand()), toDate(rand())))"}, {"oldTime": 0.0191, "newTime": 0.019, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.016, 0.047, 0.055], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, [toDateTime(\\'2019-02-04 01:24:31\\')], [toDate(\\'2019-02-04\\')]))"}, {"oldTime": 0.0312, "newTime": 0.0311, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.004, 0.012, 0.037, 0.048], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, [toDateTime(rand())], [toDate(rand())]))"}, {"oldTime": 0.0119, "newTime": 0.0119, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.004, 0.01, 0.021, 0.025], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, toDateTime(\\'2019-02-04 01:24:31\\'), toDate(\\'2019-02-04\\')))"}, {"oldTime": 0.0173, "newTime": 0.0172, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.006, 0.012, 0.024, 0.026], "testName": "conditional", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, toDateTime(rand()), toDate(rand())))"}, {"oldTime": 0.0043, "newTime": 0.0044, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.014, 0.025, 0.096, 0.112], "testName": "consistent_hashes", "query": "SELECT jumpConsistentHash(number, 2) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0679, "newTime": 0.0674, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.006, 0.02, 0.023], "testName": "consistent_hashes", "query": "SELECT jumpConsistentHash(number, 32768) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0458, "newTime": 0.0451, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.004, 0.006, 0.017, 0.023], "testName": "consistent_hashes", "query": "SELECT jumpConsistentHash(number, 500) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0053, "newTime": 0.0052, "relativeDifference": -0.019, "timeSpeed": 1.019, "quantiles": [0.001, 0.004, 0.037, 0.045], "testName": "consistent_hashes", "query": "SELECT sumburConsistentHash(toUInt32(number), 2) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0048, "newTime": 0.005, "relativeDifference": 0.041, "timeSpeed": 1.041, "quantiles": [0.022, 0.038, 0.099, 0.104], "testName": "consistent_hashes", "query": "SELECT yandexConsistentHash(number, 2) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0049, "newTime": 0.005, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.003, 0.034, 0.067, 0.072], "testName": "consistent_hashes", "query": "SELECT yandexConsistentHash(number, 32768) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.005, "newTime": 0.0049, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.015, 0.037, 0.055, 0.07], "testName": "consistent_hashes", "query": "SELECT yandexConsistentHash(number, 500) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.4651, "newTime": 0.4636, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.002, 0.012, 0.014], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'\\' SETTINGS max_threads = 1"}, {"oldTime": 0.4932, "newTime": 0.4918, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.009, 0.012], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'model\\' SETTINGS max_threads = 1"}, {"oldTime": 0.4922, "newTime": 0.4953, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.005, 0.014, 0.02], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 1"}, {"oldTime": 0.384, "newTime": 0.3839, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.002, 0.008, 0.012], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'\\' SETTINGS max_threads = 2"}, {"oldTime": 0.4517, "newTime": 0.453, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.005, 0.011, 0.012], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'utf-8\\' SETTINGS max_threads = 2"}, {"oldTime": 0.4478, "newTime": 0.4484, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.01, 0.011], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2"}, {"oldTime": 0.4988, "newTime": 0.5003, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.002, 0.008, 0.013], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'\\' SETTINGS max_threads = 2"}, {"oldTime": 0.5557, "newTime": 0.5546, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.001, 0.008, 0.01], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2"}, {"oldTime": 0.5636, "newTime": 0.563, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.005, 0.015, 0.017], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0430\u044f \u0444\u0440\u0430\u0437\u0430\\' SETTINGS max_threads = 2"}, {"oldTime": 0.1681, "newTime": 0.1705, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.0, 0.014, 0.04, 0.042], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < \\'\\'"}, {"oldTime": 0.206, "newTime": 0.2061, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.015, 0.02], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\'"}, {"oldTime": 0.2049, "newTime": 0.206, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.003, 0.004, 0.014, 0.017], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE Title < \\'\u041a\u0430\u043a\u043e\u0439-\u0442\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\\'"}, {"oldTime": 0.1917, "newTime": 0.1923, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.002, 0.029, 0.034], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE URL < \\'\\'"}, {"oldTime": 0.2413, "newTime": 0.2338, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.002, 0.009, 0.025, 0.031], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE URL < \\'http://some_url\\'"}, {"oldTime": 0.2397, "newTime": 0.2346, "relativeDifference": -0.022, "timeSpeed": 1.021, "quantiles": [0.001, 0.019, 0.027, 0.029], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE URL < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\'"}, {"oldTime": 0.5372, "newTime": 0.5334, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.001, 0.004, 0.011, 0.015], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'\\' SETTINGS max_threads = 1"}, {"oldTime": 0.6126, "newTime": 0.6147, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.005, 0.01, 0.01], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'model\\' SETTINGS max_threads = 1"}, {"oldTime": 0.6225, "newTime": 0.6255, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.002, 0.014, 0.015], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 1"}, {"oldTime": 0.537, "newTime": 0.5442, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.005, 0.019, 0.023], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'\\' SETTINGS max_threads = 2"}, {"oldTime": 0.6113, "newTime": 0.6096, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.011, 0.011], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2"}, {"oldTime": 0.6644, "newTime": 0.6566, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.006, 0.011, 0.018, 0.02], "testName": "constant_column_comparison", "query": "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0430\u044f \u0444\u0440\u0430\u0437\u0430\\' SETTINGS max_threads = 2"}, {"oldTime": 0.217, "newTime": 0.2165, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.003, 0.015, 0.017], "testName": "constant_column_search", "query": "SELECT DISTINCT Title, multiFuzzyMatchAny(Title, 2, [\\'^metrika\\\\\\\\.ry$\\']) AS distance FROM hits_100m_single WHERE distance = 1"}, {"oldTime": 0.2291, "newTime": 0.2327, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.002, 0.009, 0.021, 0.027], "testName": "constant_column_search", "query": "SELECT DISTINCT Title, multiFuzzyMatchAny(Title, 5, [\\'^metrika\\\\\\\\.ry$\\']) AS distance FROM hits_100m_single WHERE distance = 1"}, {"oldTime": 0.9049, "newTime": 0.9031, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.002, 0.008, 0.012], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE match(URL, \\' *tranio\\\\\\\\.ru/spain/*/commercial/*\\') settings max_threads=5"}, {"oldTime": 1.0371, "newTime": 1.0438, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.006, 0.008, 0.008], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE match(URL, \\'about/address|for_woman|^https?://lm-company.ruy/$|ultimateguitar.com\\')"}, {"oldTime": 1.6287, "newTime": 1.6399, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.002, 0.015, 0.018], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE match(URL, \\'chelyabinsk.74.ru|doctor.74.ru|transport.74.ru|m.74.ru|//74.ru/|chel.74.ru|afisha.74.ru|diplom.74.ru|chelfin.ru|//chel.ru|chelyabinsk.ru|cheldoctor.ru|//mychel.ru|cheldiplom.ru|74.ru/video|market|poll|mail|conference|consult|contest|tags|feedback|pages|text\\')"}, {"oldTime": 1.0907, "newTime": 1.0878, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.015, 0.041, 0.043], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE multiFuzzyMatchAny(URL, 2, [\\'about/address\\', \\'for_woman\\', \\'^https?://lm-company.ruy/$\\', \\'ultimateguitar.com\\'])"}, {"oldTime": 0.4615, "newTime": 0.4593, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.003, 0.011, 0.019, 0.022], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'about/address\\', \\'for_woman\\', \\'^https?://lm-company.ruy/$\\', \\'ultimateguitar.com\\'])"}, {"oldTime": 0.5702, "newTime": 0.5794, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.012, 0.015, 0.024, 0.027], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'chelyabinsk.74.ru\\', \\'doctor.74.ru\\', \\'transport.74.ru\\', \\'m.74.ru\\', \\'//74.ru/\\', \\'chel.74.ru\\', \\'afisha.74.ru\\', \\'diplom.74.ru\\', \\'chelfin.ru\\', \\'//chel.ru\\', \\'chelyabinsk.ru\\', \\'cheldoctor.ru\\', \\'//mychel.ru\\', \\'cheldiplom.ru\\', \\'74.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])"}, {"oldTime": 0.5433, "newTime": 0.5358, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.003, 0.009, 0.028, 0.031], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'chelyabinsk\\\\\\\\.74\\\\\\\\.ru\\', \\'doctor\\\\\\\\.74\\\\\\\\.ru\\', \\'transport\\\\\\\\.74\\\\\\\\.ru\\', \\'m\\\\\\\\.74\\\\\\\\.ru\\', \\'//74\\\\\\\\.ru/\\', \\'chel\\\\\\\\.74\\\\\\\\.ru\\', \\'afisha\\\\\\\\.74\\\\\\\\.ru\\', \\'diplom\\\\\\\\.74\\\\\\\\.ru\\', \\'chelfin\\\\\\\\.ru\\', \\'//chel\\\\\\\\.ru\\', \\'chelyabinsk\\\\\\\\.ru\\', \\'cheldoctor\\\\\\\\.ru\\', \\'//mychel\\\\\\\\.ru\\', \\'cheldiplom\\\\\\\\.ru\\', \\'74\\\\\\\\.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])"}, {"oldTime": 0.8576, "newTime": 0.8703, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.003, 0.008, 0.022, 0.023], "testName": "constant_column_search", "query": "SELECT count() FROM hits_100m_single WHERE multiSearchAny(URL, [\\'chelyabinsk.74.ru\\', \\'doctor.74.ru\\', \\'transport.74.ru\\', \\'m.74.ru\\', \\'//74.ru/\\', \\'chel.74.ru\\', \\'afisha.74.ru\\', \\'diplom.74.ru\\', \\'chelfin.ru\\', \\'//chel.ru\\', \\'chelyabinsk.ru\\', \\'cheldoctor.ru\\', \\'//mychel.ru\\', \\'cheldiplom.ru\\', \\'74.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])"}, {"oldTime": 0.6113, "newTime": 0.5994, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.002, 0.005, 0.019, 0.02], "testName": "constant_column_search", "query": "SELECT sum(multiFuzzyMatchAny(Title, 3, [\\'hello$\\', \\'world$\\', \\'^hello\\'])) FROM hits_100m_single"}, {"oldTime": 1.0132, "newTime": 1.0086, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.001, 0.002, 0.006, 0.008], "testName": "constant_column_search", "query": "select count(match(URL, \\'yandex|google\\')) FROM hits_100m_single"}, {"oldTime": 0.4334, "newTime": 0.4373, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.001, 0.004, 0.016, 0.019], "testName": "constant_column_search", "query": "select count(multiMatchAny(URL, [\\'yandex\\', \\'google\\'])) FROM hits_100m_single"}, {"oldTime": 0.322, "newTime": 0.324, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.006, 0.014, 0.015], "testName": "constant_column_search", "query": "select count(multiSearchAllPositions(URL, [\\'yandex\\', \\'google\\'])) FROM hits_100m_single"}, {"oldTime": 0.3408, "newTime": 0.3411, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.002, 0.008, 0.01], "testName": "constant_column_search", "query": "select count(position(URL, \\'yandex\\')), count(position(URL, \\'google\\')) FROM hits_100m_single"}, {"oldTime": 0.4974, "newTime": 0.4919, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.006, 0.007, 0.015, 0.017], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'facebook\\')), sum(match(URL, \\'wikipedia\\')), sum(match(URL, \\'reddit\\')) FROM hits_100m_single"}, {"oldTime": 0.3691, "newTime": 0.3713, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.005, 0.027, 0.04], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'http\\')) FROM hits_100m_single"}, {"oldTime": 0.4736, "newTime": 0.4726, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.008, 0.009], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'yahoo\\')), sum(match(URL, \\'pikabu\\')) FROM hits_100m_single"}, {"oldTime": 1.2397, "newTime": 1.2353, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.006, 0.031, 0.033], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex|google|facebook|wikipedia|reddit\\')) FROM hits_100m_single"}, {"oldTime": 0.3759, "newTime": 0.373, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.002, 0.007, 0.016, 0.019], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex|google|http\\')) FROM hits_100m_single"}, {"oldTime": 1.1497, "newTime": 1.1409, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.001, 0.009, 0.01], "testName": "constant_column_search", "query": "select sum(match(URL, \\'yandex|google|yahoo|pikabu\\')) FROM hits_100m_single"}, {"oldTime": 0.4326, "newTime": 0.4303, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.005, 0.008, 0.008], "testName": "constant_column_search", "query": "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'facebook\\', \\'wikipedia\\', \\'reddit\\'])) from hits_100m_single"}, {"oldTime": 0.4926, "newTime": 0.4907, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.005, 0.012, 0.016], "testName": "constant_column_search", "query": "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'http\\'])) from hits_100m_single"}, {"oldTime": 0.4414, "newTime": 0.4424, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.014, 0.022], "testName": "constant_column_search", "query": "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'yahoo\\', \\'pikabu\\'])) from hits_100m_single"}, {"oldTime": 0.3212, "newTime": 0.3252, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.0, 0.011, 0.021, 0.022], "testName": "constant_column_search", "query": "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'facebook\\', \\'wikipedia\\', \\'reddit\\'])) from hits_100m_single"}, {"oldTime": 0.2552, "newTime": 0.2547, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.006, 0.028, 0.037], "testName": "constant_column_search", "query": "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'http\\'])) from hits_100m_single"}, {"oldTime": 0.3248, "newTime": 0.3262, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.0, 0.001, 0.006, 0.008], "testName": "constant_column_search", "query": "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'yahoo\\', \\'pikabu\\'])) from hits_100m_single"}, {"oldTime": 0.3947, "newTime": 0.3931, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.003, 0.007, 0.013, 0.016], "testName": "constant_column_search", "query": "select sum(multiSearchFirstIndex(URL, [\\'yandex\\', \\'google\\', \\'http\\', \\'facebook\\', \\'google\\'])) from hits_100m_single"}, {"oldTime": 0.0006, "newTime": 0.0006, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.037, 0.056, 0.1, 0.118], "testName": "count", "query": "SELECT count() FROM data"}, {"oldTime": 0.1758, "newTime": 0.1764, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.015, 0.015], "testName": "cpu_synthetic", "query": "SELECT RegionID, uniq(UserID) FROM hits_100m_single GROUP BY RegionID"}, {"oldTime": 0.2643, "newTime": 0.2702, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.007, 0.021, 0.036, 0.044], "testName": "cpu_synthetic", "query": "SELECT RegionID, uniq(UserID) FROM hits_10m_single GROUP BY RegionID SETTINGS max_threads = 1"}, {"oldTime": 0.463, "newTime": 0.4752, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.006, 0.018, 0.033, 0.034], "testName": "cpu_synthetic", "query": "SELECT SearchEngineID, SearchPhrase, RegionID FROM hits_100m_single GROUP BY SearchEngineID, SearchPhrase, RegionID ORDER BY count() DESC LIMIT 10"}, {"oldTime": 1.0669, "newTime": 1.0684, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.006, 0.018, 0.022], "testName": "cpu_synthetic", "query": "SELECT SearchEngineID, SearchPhrase, RegionID FROM hits_10m_single GROUP BY SearchEngineID, SearchPhrase, RegionID ORDER BY count() DESC LIMIT 10 SETTINGS max_threads = 1"}, {"oldTime": 0.9258, "newTime": 0.9358, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.01, 0.059, 0.101, 0.11], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))"}, {"oldTime": 0.0475, "newTime": 0.0483, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.004, 0.019, 0.04, 0.049], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(PageCharset))"}, {"oldTime": 0.0656, "newTime": 0.0659, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.0, 0.014, 0.029, 0.03], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(SearchPhrase))"}, {"oldTime": 0.2826, "newTime": 0.2812, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.013, 0.06, 0.082], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(URL))"}, {"oldTime": 0.3435, "newTime": 0.3404, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.014, 0.026, 0.026], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryString(URL))"}, {"oldTime": 0.0648, "newTime": 0.0655, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.002, 0.009, 0.014], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(farmHash64(SearchPhrase))"}, {"oldTime": 0.0778, "newTime": 0.0767, "relativeDifference": -0.015, "timeSpeed": 1.014, "quantiles": [0.0, 0.007, 0.015, 0.016], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(metroHash64(SearchPhrase))"}, {"oldTime": 0.1223, "newTime": 0.1234, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.004, 0.008, 0.017, 0.02], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(sipHash64(SearchPhrase))"}, {"oldTime": 0.4354, "newTime": 0.44, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.001, 0.01, 0.016, 0.017], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(sipHash64(URL))"}, {"oldTime": 0.2594, "newTime": 0.2545, "relativeDifference": -0.019, "timeSpeed": 1.019, "quantiles": [0.002, 0.003, 0.011, 0.018], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\'"}, {"oldTime": 0.259, "newTime": 0.2581, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.003, 0.01, 0.011], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE match(URL, \\'^https?://(?:www\\\\\\\\.)?metri[kc]a\\\\\\\\.yandex\\\\\\\\.(?:ru|com|com\\\\\\\\.tr|ua|by|kz)/.+?2014\\')"}, {"oldTime": 0.278, "newTime": 0.2754, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.002, 0.005, 0.012, 0.014], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_100m_single WHERE positionCaseInsensitiveUTF8(URL, \\'\u043d\u043e\u0432\u043e\u0441\u0442\u0438\\') != 0"}, {"oldTime": 1.9491, "newTime": 1.9797, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.015, 0.02, 0.038, 0.046], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(MD5(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.1194, "newTime": 0.1242, "relativeDifference": 0.04, "timeSpeed": 1.04, "quantiles": [0.004, 0.026, 0.044, 0.049], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(Referer, URL, Title)"}, {"oldTime": 1.133, "newTime": 1.1144, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.001, 0.01, 0.035, 0.043], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(Referer, URL, Title) SETTINGS max_threads = 1"}, {"oldTime": 0.0947, "newTime": 0.0952, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.002, 0.004, 0.015, 0.02], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(PageCharset)) SETTINGS max_threads = 1"}, {"oldTime": 0.1622, "newTime": 0.1604, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.007, 0.011, 0.023, 0.027], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.4707, "newTime": 0.4697, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.003, 0.019, 0.021], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(URL)) SETTINGS max_threads = 1"}, {"oldTime": 0.6275, "newTime": 0.6245, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.04, 0.051, 0.051], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(cutQueryString(URL)) SETTINGS max_threads = 1"}, {"oldTime": 0.1613, "newTime": 0.1659, "relativeDifference": 0.028, "timeSpeed": 1.028, "quantiles": [0.003, 0.019, 0.03, 0.034], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(farmHash64(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.2, "newTime": 0.1994, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.006, 0.009, 0.011], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(metroHash64(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.3319, "newTime": 0.3288, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.003, 0.006, 0.016, 0.02], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(sipHash64(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.8518, "newTime": 0.8471, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.005, 0.006, 0.007], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(sipHash64(URL)) SETTINGS max_threads = 1"}, {"oldTime": 0.0503, "newTime": 0.052, "relativeDifference": 0.033, "timeSpeed": 1.033, "quantiles": [0.015, 0.032, 0.069, 0.081], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE NOT ignore(toMonday(EventTime)) SETTINGS max_threads = 1"}, {"oldTime": 0.4307, "newTime": 0.4411, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.013, 0.024, 0.036, 0.038], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE URL LIKE \\'%metrika%\\' SETTINGS max_threads = 1"}, {"oldTime": 0.4307, "newTime": 0.432, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.002, 0.009, 0.01], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE match(URL, \\'^https?://(?:www\\\\\\\\.)?metri[kc]a\\\\\\\\.yandex\\\\\\\\.(?:ru|com|com\\\\\\\\.tr|ua|by|kz)/.+?2014\\') SETTINGS max_threads = 1"}, {"oldTime": 0.478, "newTime": 0.4746, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.004, 0.01, 0.017, 0.022], "testName": "cpu_synthetic", "query": "SELECT count() FROM hits_10m_single WHERE positionCaseInsensitiveUTF8(URL, \\'\u043d\u043e\u0432\u043e\u0441\u0442\u0438\\') != 0 SETTINGS max_threads = 1"}, {"oldTime": 0.1058, "newTime": 0.0999, "relativeDifference": -0.056, "timeSpeed": 1.059, "quantiles": [0.055, 0.064, 0.107, 0.107], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.0179, "newTime": 0.0178, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.008, 0.011, 0.021, 0.023], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0216, "newTime": 0.0212, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.001, 0.011, 0.028, 0.033], "testName": "cpu_synthetic", "query": "SELECT quantilesIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.0183, "newTime": 0.0179, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.003, 0.01, 0.023, 0.032], "testName": "cpu_synthetic", "query": "SELECT quantilesIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0237, "newTime": 0.0238, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.003, 0.004, 0.009, 0.009], "testName": "cpu_synthetic", "query": "SELECT quantilesTDigestIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.0196, "newTime": 0.019, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.005, 0.017, 0.042, 0.046], "testName": "cpu_synthetic", "query": "SELECT quantilesTDigestIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0174, "newTime": 0.0171, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.016, 0.024, 0.044, 0.055], "testName": "cpu_synthetic", "query": "SELECT quantilesTimingIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.0169, "newTime": 0.0172, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.0, 0.002, 0.016, 0.018], "testName": "cpu_synthetic", "query": "SELECT quantilesTimingIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0702, "newTime": 0.0704, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.003, 0.008, 0.016, 0.02], "testName": "cpu_synthetic", "query": "SELECT uniq(UserID) FROM hits_100m_single"}, {"oldTime": 0.0721, "newTime": 0.0725, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.006, 0.012, 0.022, 0.028], "testName": "cpu_synthetic", "query": "SELECT uniq(UserID) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0715, "newTime": 0.0709, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.002, 0.004, 0.008, 0.008], "testName": "cpu_synthetic", "query": "SELECT uniqCombined(17)(UserID) FROM hits_100m_single"}, {"oldTime": 0.1181, "newTime": 0.1177, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.007, 0.01, 0.011], "testName": "cpu_synthetic", "query": "SELECT uniqCombined(17)(UserID) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.1207, "newTime": 0.1183, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.015, 0.02, 0.045, 0.053], "testName": "cpu_synthetic", "query": "SELECT uniqExact(UserID) FROM hits_10m_single"}, {"oldTime": 0.1556, "newTime": 0.1541, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.018, 0.035, 0.038], "testName": "cpu_synthetic", "query": "SELECT uniqExact(UserID) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.0131, "newTime": 0.0136, "relativeDifference": 0.038, "timeSpeed": 1.038, "quantiles": [0.026, 0.04, 0.24, 0.254], "testName": "date_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toDate(toString(EventDate)))"}, {"oldTime": 0.0209, "newTime": 0.0199, "relativeDifference": -0.048, "timeSpeed": 1.05, "quantiles": [0.008, 0.01, 0.056, 0.064], "testName": "date_time_64", "query": "SELECT count() FROM dt where not ignore(x)"}, {"oldTime": 0.0354, "newTime": 0.0353, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.003, 0.013, 0.092, 0.1], "testName": "date_time_64", "query": "SELECT count() FROM dt64 where not ignore(x)"}, {"oldTime": 0.05, "newTime": 0.0497, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.001, 0.003, 0.017, 0.027], "testName": "date_time_64", "query": "SELECT count() from dt where not ignore(addDays(x, 1))"}, {"oldTime": 0.0214, "newTime": 0.0209, "relativeDifference": -0.024, "timeSpeed": 1.023, "quantiles": [0.014, 0.021, 0.037, 0.038], "testName": "date_time_64", "query": "SELECT count() from dt where not ignore(toRelativeMinuteNum(x))"}, {"oldTime": 0.0258, "newTime": 0.0257, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.005, 0.019, 0.027], "testName": "date_time_64", "query": "SELECT count() from dt where not ignore(toStartOfDay(x))"}, {"oldTime": 0.0256, "newTime": 0.0253, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.009, 0.01, 0.021, 0.027], "testName": "date_time_64", "query": "SELECT count() from dt where not ignore(toStartOfWeek(x))"}, {"oldTime": 0.1167, "newTime": 0.1164, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.001, 0.004, 0.006], "testName": "date_time_64", "query": "SELECT count() from dt where not ignore(toString(x))"}, {"oldTime": 0.1392, "newTime": 0.139, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.01, 0.014], "testName": "date_time_64", "query": "SELECT count() from dt64 where not ignore(addDays(x, 1))"}, {"oldTime": 0.0599, "newTime": 0.0601, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.001, 0.002, 0.053, 0.059], "testName": "date_time_64", "query": "SELECT count() from dt64 where not ignore(toRelativeMinuteNum(x))"}, {"oldTime": 0.0675, "newTime": 0.068, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.004, 0.018, 0.041, 0.045], "testName": "date_time_64", "query": "SELECT count() from dt64 where not ignore(toStartOfDay(x))"}, {"oldTime": 0.0673, "newTime": 0.0659, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.002, 0.004, 0.025, 0.026], "testName": "date_time_64", "query": "SELECT count() from dt64 where not ignore(toStartOfWeek(x))"}, {"oldTime": 0.2192, "newTime": 0.2167, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.0, 0.01, 0.017, 0.018], "testName": "date_time_64", "query": "SELECT count() from dt64 where not ignore(toString(x))"}, {"oldTime": 0.0194, "newTime": 0.0191, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.003, 0.018, 0.029, 0.034], "testName": "date_time_64", "query": "SELECT max(x) FROM dt"}, {"oldTime": 0.0332, "newTime": 0.034, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.01, 0.014, 0.045, 0.053], "testName": "date_time_64", "query": "SELECT max(x) FROM dt64"}, {"oldTime": 0.1639, "newTime": 0.1642, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.02, 0.024, 0.025], "testName": "date_time_64", "query": "SELECT sum(toDateTime(toString(x)) != x) FROM dt"}, {"oldTime": 0.3149, "newTime": 0.3137, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.008, 0.021, 0.023], "testName": "date_time_64", "query": "SELECT sum(toDateTime64(toString(x), 3) != x) FROM dt64"}, {"oldTime": 0.0205, "newTime": 0.0199, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.008, 0.012, 0.027, 0.033], "testName": "date_time_64", "query": "SELECT sum(x = x) FROM dt"}, {"oldTime": 0.0339, "newTime": 0.0349, "relativeDifference": 0.029, "timeSpeed": 1.029, "quantiles": [0.001, 0.003, 0.026, 0.034], "testName": "date_time_64", "query": "SELECT sum(x = x) FROM dt64"}, {"oldTime": 0.0062, "newTime": 0.0052, "relativeDifference": -0.162, "timeSpeed": 1.192, "quantiles": [0.043, 0.056, 0.204, 0.218], "testName": "decimal_aggregates", "query": "SELECT avg(d128), sum(d128), sumWithOverflow(d128) FROM t"}, {"oldTime": 0.0028, "newTime": 0.003, "relativeDifference": 0.071, "timeSpeed": 1.071, "quantiles": [0.016, 0.024, 0.096, 0.127], "testName": "decimal_aggregates", "query": "SELECT avg(d32), sum(d32), sumWithOverflow(d32) FROM t"}, {"oldTime": 0.0032, "newTime": 0.0027, "relativeDifference": -0.157, "timeSpeed": 1.185, "quantiles": [0.022, 0.044, 0.137, 0.155], "testName": "decimal_aggregates", "query": "SELECT avg(d64), sum(d64), sumWithOverflow(d64) FROM t"}, {"oldTime": 0.2439, "newTime": 0.2419, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.004, 0.008, 0.024, 0.027], "testName": "decimal_aggregates", "query": "SELECT median(d128), medianExact(d128), medianExactWeighted(d128, 2) FROM t"}, {"oldTime": 0.1651, "newTime": 0.163, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.012, 0.022, 0.03, 0.033], "testName": "decimal_aggregates", "query": "SELECT median(d32), medianExact(d32), medianExactWeighted(d32, 2) FROM t"}, {"oldTime": 0.172, "newTime": 0.1702, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.004, 0.006, 0.018, 0.022], "testName": "decimal_aggregates", "query": "SELECT median(d64), medianExact(d64), medianExactWeighted(d64, 2) FROM t"}, {"oldTime": 0.0093, "newTime": 0.0079, "relativeDifference": -0.151, "timeSpeed": 1.177, "quantiles": [0.02, 0.079, 0.211, 0.248], "testName": "decimal_aggregates", "query": "SELECT min(d128), max(d128), argMin(x, d128), argMax(x, d128) FROM t"}, {"oldTime": 0.0046, "newTime": 0.0043, "relativeDifference": -0.066, "timeSpeed": 1.069, "quantiles": [0.057, 0.079, 0.156, 0.169], "testName": "decimal_aggregates", "query": "SELECT min(d32), max(d32), argMin(x, d32), argMax(x, d32) FROM t"}, {"oldTime": 0.0052, "newTime": 0.0051, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.012, 0.056, 0.124, 0.127], "testName": "decimal_aggregates", "query": "SELECT min(d64), max(d64), argMin(x, d64), argMax(x, d64) FROM t"}, {"oldTime": 0.2592, "newTime": 0.2588, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.017, 0.028, 0.028], "testName": "decimal_aggregates", "query": "SELECT quantile(d128), quantileExact(d128), quantileExactWeighted(d128, 2) FROM t"}, {"oldTime": 0.1555, "newTime": 0.1561, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.002, 0.01, 0.012], "testName": "decimal_aggregates", "query": "SELECT quantile(d32), quantileExact(d32), quantileExactWeighted(d32, 2) FROM t"}, {"oldTime": 0.1601, "newTime": 0.1611, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.005, 0.007, 0.018, 0.018], "testName": "decimal_aggregates", "query": "SELECT quantile(d64), quantileExact(d64), quantileExactWeighted(d64, 2) FROM t"}, {"oldTime": 0.2402, "newTime": 0.2384, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.007, 0.015, 0.06, 0.065], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d128), quantilesExactWeighted(0.1, 0.9)(d128, 2) FROM t"}, {"oldTime": 0.1572, "newTime": 0.1544, "relativeDifference": -0.018, "timeSpeed": 1.018, "quantiles": [0.003, 0.006, 0.019, 0.026], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d32), quantilesExactWeighted(0.1, 0.9)(d32, 2) FROM t"}, {"oldTime": 0.1554, "newTime": 0.1568, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.008, 0.018, 0.031, 0.036], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d64), quantilesExactWeighted(0.1, 0.9)(d64, 2) FROM t"}, {"oldTime": 0.167, "newTime": 0.1661, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.002, 0.013, 0.037, 0.042], "testName": "decimal_aggregates", "query": "SELECT uniq(d128), uniqCombined(d128), uniqExact(d128), uniqHLL12(d128) FROM t"}, {"oldTime": 0.1521, "newTime": 0.1536, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.0, 0.009, 0.026, 0.027], "testName": "decimal_aggregates", "query": "SELECT uniq(d32), uniqCombined(d32), uniqExact(d32), uniqHLL12(d32) FROM t"}, {"oldTime": 0.1618, "newTime": 0.1603, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.016, 0.04, 0.048], "testName": "decimal_aggregates", "query": "SELECT uniq(d64), uniqCombined(d64), uniqExact(d64), uniqHLL12(d64) FROM t"}, {"oldTime": 0.0851, "newTime": 0.0867, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.009, 0.017, 0.028, 0.032], "testName": "decimal_aggregates", "query": "SELECT varPop(d128), varSamp(d128), stddevPop(d128) FROM t"}, {"oldTime": 0.0382, "newTime": 0.0382, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.006, 0.017, 0.019], "testName": "decimal_aggregates", "query": "SELECT varPop(d32), varSamp(d32), stddevPop(d32) FROM t"}, {"oldTime": 0.0665, "newTime": 0.0662, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.005, 0.009, 0.011], "testName": "decimal_aggregates", "query": "SELECT varPop(d64), varSamp(d64), stddevPop(d64) FROM t"}, {"oldTime": 0.0121, "newTime": 0.0128, "relativeDifference": 0.057, "timeSpeed": 1.057, "quantiles": [0.003, 0.011, 0.279, 0.307], "testName": "early_constant_folding", "query": "SELECT count(JavaEnable) FROM default.hits_100m_single WHERE WatchID = 1 OR Title = \\'next\\' OR URL = \\'prev\\' OR OriginalURL = \\'???\\' OR 1"}, {"oldTime": 0.0192, "newTime": 0.0181, "relativeDifference": -0.058, "timeSpeed": 1.06, "quantiles": [0.014, 0.032, 0.061, 0.08], "testName": "empty_string_deserialization", "query": "SELECT count() FROM empty_strings"}, {"oldTime": 0.7069, "newTime": 0.7732, "relativeDifference": 0.093, "timeSpeed": 1.093, "quantiles": [0.08, 0.093, 0.161, 0.171], "testName": "empty_string_serialization", "query": "INSERT INTO empty_strings SELECT \\'\\' FROM zeros(100000000);"}, {"oldTime": 0.0502, "newTime": 0.0506, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.005, 0.011, 0.044, 0.058], "testName": "entropy", "query": "SELECT entropy(ClientIP) FROM test.hits"}, {"oldTime": 0.0739, "newTime": 0.0744, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.006, 0.008, 0.033, 0.04], "testName": "entropy", "query": "SELECT entropy(ClientIP, RegionID) FROM test.hits"}, {"oldTime": 0.0161, "newTime": 0.0168, "relativeDifference": 0.043, "timeSpeed": 1.043, "quantiles": [0.026, 0.04, 0.159, 0.169], "testName": "entropy", "query": "SELECT entropy(MobilePhoneModel) FROM test.hits"}, {"oldTime": 0.0095, "newTime": 0.0091, "relativeDifference": -0.043, "timeSpeed": 1.043, "quantiles": [0.018, 0.059, 0.113, 0.116], "testName": "entropy", "query": "SELECT entropy(RegionID) FROM test.hits"}, {"oldTime": 0.0063, "newTime": 0.0059, "relativeDifference": -0.064, "timeSpeed": 1.067, "quantiles": [0.008, 0.027, 0.119, 0.134], "testName": "entropy", "query": "SELECT entropy(SearchEngineID) FROM test.hits"}, {"oldTime": 0.0558, "newTime": 0.0567, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.0, 0.009, 0.041, 0.046], "testName": "entropy", "query": "SELECT entropy(SearchPhrase) FROM test.hits"}, {"oldTime": 0.6597, "newTime": 0.6511, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.001, 0.007, 0.013, 0.014], "testName": "entropy", "query": "SELECT entropy(URL) FROM test.hits"}, {"oldTime": 0.6778, "newTime": 0.6697, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.0, 0.011, 0.02, 0.023], "testName": "entropy", "query": "SELECT entropy(URL, URLDomain) FROM test.hits"}, {"oldTime": 0.032, "newTime": 0.0333, "relativeDifference": 0.04, "timeSpeed": 1.04, "quantiles": [0.015, 0.031, 0.056, 0.064], "testName": "entropy", "query": "SELECT entropy(URLDomain) FROM test.hits"}, {"oldTime": 0.6388, "newTime": 0.6302, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.003, 0.013, 0.045, 0.051], "testName": "first_significant_subdomain", "query": "SELECT count() FROM test.hits WHERE NOT ignore(firstSignificantSubdomain(URL))"}, {"oldTime": 0.0109, "newTime": 0.0128, "relativeDifference": 0.174, "timeSpeed": 1.174, "quantiles": [0.03, 0.108, 0.216, 0.24], "testName": "fixed_string16", "query": "SELECT count() FROM test.hits WHERE ClientIP6 < RemoteIP6"}, {"oldTime": 0.0251, "newTime": 0.0251, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.004, 0.022, 0.034], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%F %T\\'))"}, {"oldTime": 0.0181, "newTime": 0.0181, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.003, 0.019, 0.046, 0.048], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%H:%M:%S\\'))"}, {"oldTime": 0.0284, "newTime": 0.0276, "relativeDifference": -0.029, "timeSpeed": 1.028, "quantiles": [0.001, 0.009, 0.04, 0.046], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%Y-%m-%d %H:%M:%S\\'))"}, {"oldTime": 0.0281, "newTime": 0.0282, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.004, 0.004, 0.018, 0.023], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%m/%d/%Y %H:%M:%S\\'))"}, {"oldTime": 0.0081, "newTime": 0.0087, "relativeDifference": 0.074, "timeSpeed": 1.074, "quantiles": [0.015, 0.063, 0.094, 0.107], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'Hello\\'))"}, {"oldTime": 0.0296, "newTime": 0.0285, "relativeDifference": -0.038, "timeSpeed": 1.038, "quantiles": [0.004, 0.012, 0.036, 0.042], "testName": "format_date_time", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'The current time is: %I:%M %p\\'))"}, {"oldTime": 0.0073, "newTime": 0.0069, "relativeDifference": -0.055, "timeSpeed": 1.057, "quantiles": [0.009, 0.041, 0.065, 0.082], "testName": "functions_coding", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(MACNumToString(number))"}, {"oldTime": 0.0121, "newTime": 0.0115, "relativeDifference": -0.05, "timeSpeed": 1.052, "quantiles": [0.023, 0.035, 0.053, 0.058], "testName": "functions_coding", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(MACStringToNum(MACNumToString(number)))"}, {"oldTime": 0.009, "newTime": 0.0091, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.013, 0.036, 0.106, 0.155], "testName": "functions_coding", "query": "SELECT count() FROM zeros_mt(10000000) WHERE NOT ignore(MACNumToString(rand64()))"}, {"oldTime": 0.0102, "newTime": 0.0119, "relativeDifference": 0.166, "timeSpeed": 1.166, "quantiles": [0.08, 0.115, 0.169, 0.189], "testName": "functions_coding", "query": "SELECT count() FROM zeros_mt(10000000) WHERE NOT ignore(MACStringToNum(MACNumToString(rand64())))"}, {"oldTime": 0.0748, "newTime": 0.075, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.015, 0.018], "testName": "functions_geo", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashDecode(hex(number)))"}, {"oldTime": 0.084, "newTime": 0.0836, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.005, 0.009, 0.011], "testName": "functions_geo", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashDecode(toString(number % 1000000)))"}, {"oldTime": 0.2576, "newTime": 0.2589, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.002, 0.008, 0.011], "testName": "functions_geo", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashEncode((number % 150)*1.1 - 75, (number * 3.14 % 300)*1.1 - 150))"}, {"oldTime": 0.1465, "newTime": 0.1452, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.002, 0.014, 0.017], "testName": "functions_geo", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashEncode(number + 91.0, number + 181.0))"}, {"oldTime": 0.1271, "newTime": 0.1261, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.001, 0.005, 0.009, 0.01], "testName": "functions_geo", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(geohashDecode(toString(rand() % 1000000)))"}, {"oldTime": 0.1472, "newTime": 0.148, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.003, 0.006, 0.012, 0.014], "testName": "functions_geo", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(geohashEncode(1.0/rand(), 2.0/rand()))"}, {"oldTime": 0.5548, "newTime": 0.5551, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.004, 0.01, 0.011], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(CRC32(materialize(\\'\\')))"}, {"oldTime": 1.4516, "newTime": 1.4438, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.002, 0.006, 0.009], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(CRC32(toString(1000000000+number)))"}, {"oldTime": 0.564, "newTime": 0.5538, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.002, 0.018, 0.025, 0.03], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(cityHash64(materialize(\\'\\')))"}, {"oldTime": 0.9959, "newTime": 1.0409, "relativeDifference": 0.045, "timeSpeed": 1.045, "quantiles": [0.009, 0.033, 0.048, 0.05], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(cityHash64(toString(1000000000+number)))"}, {"oldTime": 0.5469, "newTime": 0.5543, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.003, 0.01, 0.018, 0.021], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(farmHash64(materialize(\\'\\')))"}, {"oldTime": 1.0495, "newTime": 1.0417, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.002, 0.004, 0.009, 0.012], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(farmHash64(toString(1000000000+number)))"}, {"oldTime": 0.3955, "newTime": 0.3825, "relativeDifference": -0.033, "timeSpeed": 1.033, "quantiles": [0.0, 0.004, 0.033, 0.037], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(hiveHash(materialize(\\'\\')))"}, {"oldTime": 1.3107, "newTime": 1.2907, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.007, 0.015, 0.038, 0.046], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(hiveHash(toString(1000000000+number)))"}, {"oldTime": 0.372, "newTime": 0.3662, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.0, 0.006, 0.027, 0.031], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(javaHash(materialize(\\'\\')))"}, {"oldTime": 1.302, "newTime": 1.2948, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.006, 0.037, 0.042], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(javaHash(toString(1000000000+number)))"}, {"oldTime": 0.7531, "newTime": 0.7528, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.004, 0.009, 0.01], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(metroHash64(materialize(\\'\\')))"}, {"oldTime": 1.2214, "newTime": 1.2437, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.018, 0.029, 0.042, 0.045], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(metroHash64(toString(1000000000+number)))"}, {"oldTime": 0.5804, "newTime": 0.5676, "relativeDifference": -0.023, "timeSpeed": 1.022, "quantiles": [0.014, 0.022, 0.037, 0.037], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash2_32(materialize(\\'\\')))"}, {"oldTime": 1.152, "newTime": 1.1657, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.001, 0.007, 0.024, 0.029], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash2_32(toString(1000000000+number)))"}, {"oldTime": 0.5789, "newTime": 0.5748, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.003, 0.013, 0.041, 0.056], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash2_64(materialize(\\'\\')))"}, {"oldTime": 1.1524, "newTime": 1.1047, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.002, 0.036, 0.049, 0.05], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash2_64(toString(1000000000+number)))"}, {"oldTime": 0.7663, "newTime": 0.772, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.007, 0.017, 0.061, 0.064], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_128(materialize(\\'\\')))"}, {"oldTime": 1.6293, "newTime": 1.6937, "relativeDifference": 0.039, "timeSpeed": 1.039, "quantiles": [0.014, 0.025, 0.041, 0.05], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_128(toString(1000000000+number)))"}, {"oldTime": 0.6636, "newTime": 0.6607, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.003, 0.009, 0.013], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_32(materialize(\\'\\')))"}, {"oldTime": 1.4194, "newTime": 1.4192, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.003, 0.009, 0.012], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_32(toString(1000000000+number)))"}, {"oldTime": 0.8344, "newTime": 0.8417, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.001, 0.007, 0.018, 0.019], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_64(materialize(\\'\\')))"}, {"oldTime": 1.7294, "newTime": 1.7315, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.009, 0.052, 0.058], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(murmurHash3_64(toString(1000000000+number)))"}, {"oldTime": 0.5612, "newTime": 0.5567, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.001, 0.005, 0.034, 0.044], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(xxHash32(materialize(\\'\\')))"}, {"oldTime": 1.1799, "newTime": 1.189, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.006, 0.008, 0.025, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(xxHash32(toString(1000000000+number)))"}, {"oldTime": 0.6953, "newTime": 0.6875, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.0, 0.008, 0.022, 0.026], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(xxHash64(materialize(\\'\\')))"}, {"oldTime": 1.2783, "newTime": 1.3233, "relativeDifference": 0.035, "timeSpeed": 1.035, "quantiles": [0.016, 0.024, 0.045, 0.053], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(xxHash64(toString(1000000000+number)))"}, {"oldTime": 0.2126, "newTime": 0.2144, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.008, 0.012, 0.062, 0.085], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(CRC32(materialize(\\'\\')))"}, {"oldTime": 0.5299, "newTime": 0.5372, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.008, 0.028, 0.031], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(CRC32(toString(1000000000+number)))"}, {"oldTime": 0.2234, "newTime": 0.2242, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.054, 0.092, 0.11], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(cityHash64(materialize(\\'\\')))"}, {"oldTime": 0.3892, "newTime": 0.3932, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.008, 0.039, 0.04], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(cityHash64(toString(1000000000+number)))"}, {"oldTime": 0.2166, "newTime": 0.2221, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.02, 0.036, 0.046, 0.051], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(farmHash64(materialize(\\'\\')))"}, {"oldTime": 0.4121, "newTime": 0.4179, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.013, 0.019, 0.05, 0.057], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(farmHash64(toString(1000000000+number)))"}, {"oldTime": 0.1525, "newTime": 0.1549, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.015, 0.018, 0.051, 0.059], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(hiveHash(materialize(\\'\\')))"}, {"oldTime": 0.4882, "newTime": 0.4823, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.008, 0.01, 0.043, 0.046], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(hiveHash(toString(1000000000+number)))"}, {"oldTime": 0.1507, "newTime": 0.1468, "relativeDifference": -0.026, "timeSpeed": 1.026, "quantiles": [0.011, 0.025, 0.095, 0.098], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(javaHash(materialize(\\'\\')))"}, {"oldTime": 0.4713, "newTime": 0.4815, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.013, 0.021, 0.034, 0.039], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(javaHash(toString(1000000000+number)))"}, {"oldTime": 0.2914, "newTime": 0.2889, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.008, 0.011, 0.041, 0.049], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(metroHash64(materialize(\\'\\')))"}, {"oldTime": 0.4612, "newTime": 0.4615, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.004, 0.008, 0.008], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(metroHash64(toString(1000000000+number)))"}, {"oldTime": 0.2253, "newTime": 0.225, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.011, 0.036, 0.037], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_32(materialize(\\'\\')))"}, {"oldTime": 0.4241, "newTime": 0.4348, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.013, 0.024, 0.032, 0.035], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_32(toString(1000000000+number)))"}, {"oldTime": 0.2326, "newTime": 0.2357, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.008, 0.019, 0.044, 0.049], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_64(materialize(\\'\\')))"}, {"oldTime": 0.4171, "newTime": 0.4192, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.003, 0.007, 0.01], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_64(toString(1000000000+number)))"}, {"oldTime": 0.3241, "newTime": 0.32, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.012, 0.014, 0.023, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_128(materialize(\\'\\')))"}, {"oldTime": 0.633, "newTime": 0.6227, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.007, 0.011, 0.028, 0.035], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_128(toString(1000000000+number)))"}, {"oldTime": 0.2569, "newTime": 0.2467, "relativeDifference": -0.04, "timeSpeed": 1.041, "quantiles": [0.011, 0.019, 0.06, 0.063], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_32(materialize(\\'\\')))"}, {"oldTime": 0.513, "newTime": 0.5232, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.0, 0.012, 0.022, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_32(toString(1000000000+number)))"}, {"oldTime": 0.3342, "newTime": 0.3186, "relativeDifference": -0.047, "timeSpeed": 1.048, "quantiles": [0.022, 0.038, 0.052, 0.053], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_64(materialize(\\'\\')))"}, {"oldTime": 0.622, "newTime": 0.6275, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.003, 0.008, 0.057, 0.06], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_64(toString(1000000000+number)))"}, {"oldTime": 0.2219, "newTime": 0.223, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.002, 0.004, 0.021, 0.025], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash32(materialize(\\'\\')))"}, {"oldTime": 0.4374, "newTime": 0.4359, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.005, 0.022, 0.026], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash32(toString(1000000000+number)))"}, {"oldTime": 0.2735, "newTime": 0.2741, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.002, 0.02, 0.022], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash64(materialize(\\'\\')))"}, {"oldTime": 0.4818, "newTime": 0.4828, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.016, 0.03, 0.033], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash64(toString(1000000000+number)))"}, {"oldTime": 1.1399, "newTime": 1.1341, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.006, 0.018, 0.02], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(CRC32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.6225, "newTime": 0.6139, "relativeDifference": -0.014, "timeSpeed": 1.014, "quantiles": [0.013, 0.017, 0.032, 0.041], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(cityHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5154, "newTime": 0.5051, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.006, 0.012, 0.032, 0.043], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2596, "newTime": 1.2743, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.006, 0.015, 0.026, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(hiveHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2631, "newTime": 1.2553, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.002, 0.008, 0.01], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(javaHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5242, "newTime": 0.5159, "relativeDifference": -0.016, "timeSpeed": 1.016, "quantiles": [0.001, 0.006, 0.016, 0.017], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.7176, "newTime": 0.7076, "relativeDifference": -0.014, "timeSpeed": 1.014, "quantiles": [0.0, 0.008, 0.021, 0.025], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5857, "newTime": 0.5752, "relativeDifference": -0.018, "timeSpeed": 1.018, "quantiles": [0.0, 0.013, 0.022, 0.025], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5809, "newTime": 0.602, "relativeDifference": 0.036, "timeSpeed": 1.036, "quantiles": [0.008, 0.024, 0.068, 0.077], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_128(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.7738, "newTime": 0.7672, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.004, 0.011, 0.021, 0.022], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5858, "newTime": 0.5809, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.004, 0.008, 0.025, 0.029], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5922, "newTime": 0.578, "relativeDifference": -0.024, "timeSpeed": 1.024, "quantiles": [0.001, 0.004, 0.018, 0.024], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(xxHash32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5357, "newTime": 0.5368, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.016, 0.035, 0.04], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(xxHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.3681, "newTime": 1.3602, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.001, 0.004, 0.01, 0.013], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(CRC32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2315, "newTime": 1.2492, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.002, 0.005, 0.014, 0.015], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(cityHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2477, "newTime": 1.2679, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.0, 0.006, 0.022, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.4098, "newTime": 1.3973, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.004, 0.016, 0.017], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(hiveHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.4058, "newTime": 1.3965, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.003, 0.01, 0.015, 0.018], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(javaHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2053, "newTime": 1.2511, "relativeDifference": 0.037, "timeSpeed": 1.037, "quantiles": [0.001, 0.007, 0.038, 0.046], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2299, "newTime": 1.2414, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.002, 0.006, 0.009, 0.01], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2316, "newTime": 1.2568, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.0, 0.002, 0.018, 0.02], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2536, "newTime": 1.2883, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.002, 0.011, 0.023, 0.027], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_128(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2363, "newTime": 1.2432, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.004, 0.012, 0.014], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2462, "newTime": 1.2556, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.003, 0.012, 0.016], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2348, "newTime": 1.267, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.009, 0.013, 0.026, 0.028], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(xxHash32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.2453, "newTime": 1.2545, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.001, 0.005, 0.018, 0.022], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros_mt(10000000) where not ignore(xxHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.0376, "newTime": 0.0394, "relativeDifference": 0.047, "timeSpeed": 1.047, "quantiles": [0.008, 0.026, 0.054, 0.065], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(cityHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0403, "newTime": 0.0402, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.001, 0.048, 0.053], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(farmHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0442, "newTime": 0.0466, "relativeDifference": 0.054, "timeSpeed": 1.054, "quantiles": [0.003, 0.034, 0.046, 0.053], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(hiveHash(toDecimal128(number, 23)))"}, {"oldTime": 0.0452, "newTime": 0.0458, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.0, 0.009, 0.026, 0.032], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(javaHash(toDecimal128(number, 23)))"}, {"oldTime": 0.0424, "newTime": 0.0433, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.001, 0.004, 0.02, 0.03], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(metroHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0404, "newTime": 0.0409, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.0, 0.006, 0.026, 0.037], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(murmurHash2_32(toDecimal128(number, 23)))"}, {"oldTime": 0.041, "newTime": 0.0397, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.016, 0.027, 0.043, 0.048], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(murmurHash2_64(toDecimal128(number, 23)))"}, {"oldTime": 0.0425, "newTime": 0.0427, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.006, 0.019, 0.032, 0.033], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(murmurHash3_32(toDecimal128(number, 23)))"}, {"oldTime": 0.0431, "newTime": 0.0417, "relativeDifference": -0.033, "timeSpeed": 1.033, "quantiles": [0.006, 0.021, 0.04, 0.044], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(murmurHash3_64(toDecimal128(number, 23)))"}, {"oldTime": 0.0426, "newTime": 0.0417, "relativeDifference": -0.022, "timeSpeed": 1.021, "quantiles": [0.007, 0.017, 0.027, 0.033], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(xxHash32(toDecimal128(number, 23)))"}, {"oldTime": 0.0422, "newTime": 0.0421, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.027, 0.057, 0.061], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers(1000000) where not ignore(xxHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0197, "newTime": 0.021, "relativeDifference": 0.065, "timeSpeed": 1.065, "quantiles": [0.012, 0.091, 0.257, 0.265], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(cityHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0185, "newTime": 0.0177, "relativeDifference": -0.044, "timeSpeed": 1.045, "quantiles": [0.003, 0.073, 0.132, 0.14], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(farmHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0206, "newTime": 0.0202, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.0, 0.004, 0.014, 0.018], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(hiveHash(toDecimal128(number, 23)))"}, {"oldTime": 0.0209, "newTime": 0.0201, "relativeDifference": -0.039, "timeSpeed": 1.039, "quantiles": [0.039, 0.046, 0.083, 0.1], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(javaHash(toDecimal128(number, 23)))"}, {"oldTime": 0.0186, "newTime": 0.0187, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.002, 0.011, 0.019, 0.021], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(metroHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.0234, "newTime": 0.0188, "relativeDifference": -0.197, "timeSpeed": 1.244, "quantiles": [0.001, 0.021, 0.2, 0.221], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash2_32(toDecimal128(number, 23)))"}, {"oldTime": 0.0181, "newTime": 0.0182, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.0, 0.006, 0.128, 0.14], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash2_64(toDecimal128(number, 23)))"}, {"oldTime": 0.0193, "newTime": 0.0217, "relativeDifference": 0.124, "timeSpeed": 1.124, "quantiles": [0.019, 0.062, 0.258, 0.267], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash3_32(toDecimal128(number, 23)))"}, {"oldTime": 0.0187, "newTime": 0.0196, "relativeDifference": 0.048, "timeSpeed": 1.048, "quantiles": [0.002, 0.011, 0.046, 0.05], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash3_64(toDecimal128(number, 23)))"}, {"oldTime": 0.0191, "newTime": 0.019, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.007, 0.099, 0.124], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(xxHash32(toDecimal128(number, 23)))"}, {"oldTime": 0.0193, "newTime": 0.0191, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.014, 0.127, 0.255, 0.256], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from numbers_mt(10000000) where not ignore(xxHash64(toDecimal128(number, 23)))"}, {"oldTime": 0.6551, "newTime": 0.6444, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.003, 0.011, 0.037, 0.043], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(cityHash64(generateUUIDv4()))"}, {"oldTime": 0.484, "newTime": 0.4608, "relativeDifference": -0.048, "timeSpeed": 1.05, "quantiles": [0.001, 0.015, 0.076, 0.077], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(cityHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.643, "newTime": 0.6163, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.001, 0.014, 0.044, 0.049], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(farmHash64(generateUUIDv4()))"}, {"oldTime": 0.4595, "newTime": 0.4453, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.006, 0.01, 0.031, 0.037], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(farmHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 1.2437, "newTime": 1.3079, "relativeDifference": 0.051, "timeSpeed": 1.051, "quantiles": [0.051, 0.054, 0.058, 0.059], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(hiveHash(generateUUIDv4()))"}, {"oldTime": 1.0921, "newTime": 1.1338, "relativeDifference": 0.038, "timeSpeed": 1.038, "quantiles": [0.004, 0.01, 0.041, 0.045], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(hiveHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 1.2433, "newTime": 1.2397, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.002, 0.015, 0.019], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(javaHash(generateUUIDv4()))"}, {"oldTime": 1.0848, "newTime": 1.0721, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.011, 0.018, 0.041, 0.048], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(javaHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.8806, "newTime": 0.8571, "relativeDifference": -0.027, "timeSpeed": 1.027, "quantiles": [0.012, 0.026, 0.055, 0.059], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(metroHash64(generateUUIDv4()))"}, {"oldTime": 0.7169, "newTime": 0.7166, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.007, 0.039, 0.045], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(metroHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.85, "newTime": 0.8439, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.005, 0.005, 0.012, 0.013], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash2_32(generateUUIDv4()))"}, {"oldTime": 0.6844, "newTime": 0.6772, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.008, 0.01, 0.015, 0.017], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash2_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.742, "newTime": 0.7278, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.002, 0.012, 0.019, 0.024], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash2_64(generateUUIDv4()))"}, {"oldTime": 0.5921, "newTime": 0.6, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.013, 0.016, 0.037, 0.043], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash2_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 1.0223, "newTime": 1.036, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.003, 0.01, 0.019, 0.02], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash3_32(generateUUIDv4()))"}, {"oldTime": 0.8751, "newTime": 0.8934, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.008, 0.018, 0.031, 0.036], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash3_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 1.0127, "newTime": 0.9727, "relativeDifference": -0.04, "timeSpeed": 1.041, "quantiles": [0.028, 0.043, 0.064, 0.074], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash3_64(generateUUIDv4()))"}, {"oldTime": 0.8087, "newTime": 0.8251, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.014, 0.02, 0.044, 0.059], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(murmurHash3_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.8277, "newTime": 0.8332, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.006, 0.062, 0.063], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(xxHash32(generateUUIDv4()))"}, {"oldTime": 0.7031, "newTime": 0.7064, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.002, 0.009, 0.035, 0.037], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(xxHash32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.8669, "newTime": 0.8463, "relativeDifference": -0.024, "timeSpeed": 1.024, "quantiles": [0.013, 0.035, 0.053, 0.061], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(xxHash64(generateUUIDv4()))"}, {"oldTime": 0.7085, "newTime": 0.7042, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.003, 0.006, 0.017, 0.025], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros(100000000) where not ignore(xxHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.2501, "newTime": 0.2471, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.012, 0.024, 0.046, 0.049], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(generateUUIDv4()))"}, {"oldTime": 0.1946, "newTime": 0.1935, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.004, 0.013, 0.146, 0.156], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.2397, "newTime": 0.2356, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.006, 0.01, 0.024, 0.027], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(farmHash64(generateUUIDv4()))"}, {"oldTime": 0.1709, "newTime": 0.1843, "relativeDifference": 0.078, "timeSpeed": 1.078, "quantiles": [0.0, 0.019, 0.083, 0.095], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(farmHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.4805, "newTime": 0.4709, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.0, 0.017, 0.032, 0.033], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(hiveHash(generateUUIDv4()))"}, {"oldTime": 0.3989, "newTime": 0.404, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.007, 0.01, 0.027, 0.038], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(hiveHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.4454, "newTime": 0.444, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.009, 0.03, 0.034], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(javaHash(generateUUIDv4()))"}, {"oldTime": 0.3794, "newTime": 0.3858, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.008, 0.016, 0.034, 0.042], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(javaHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3116, "newTime": 0.3134, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.005, 0.007, 0.015, 0.017], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(metroHash64(generateUUIDv4()))"}, {"oldTime": 0.255, "newTime": 0.2619, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.009, 0.027, 0.066, 0.068], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(metroHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3219, "newTime": 0.3204, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.02, 0.036, 0.043], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_32(generateUUIDv4()))"}, {"oldTime": 0.268, "newTime": 0.2795, "relativeDifference": 0.042, "timeSpeed": 1.042, "quantiles": [0.006, 0.023, 0.084, 0.102], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.2767, "newTime": 0.2711, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.009, 0.019, 0.034, 0.034], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_64(generateUUIDv4()))"}, {"oldTime": 0.2213, "newTime": 0.2247, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.006, 0.015, 0.051, 0.064], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3884, "newTime": 0.3804, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.011, 0.023, 0.055, 0.066], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_32(generateUUIDv4()))"}, {"oldTime": 0.3224, "newTime": 0.3063, "relativeDifference": -0.05, "timeSpeed": 1.052, "quantiles": [0.012, 0.015, 0.038, 0.049], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3628, "newTime": 0.3597, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.008, 0.012, 0.028, 0.036], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_64(generateUUIDv4()))"}, {"oldTime": 0.3079, "newTime": 0.3101, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.003, 0.053, 0.054], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3095, "newTime": 0.3143, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.006, 0.009, 0.036, 0.049], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash32(generateUUIDv4()))"}, {"oldTime": 0.2728, "newTime": 0.2782, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.013, 0.021, 0.041, 0.043], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.3243, "newTime": 0.3244, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.008, 0.043, 0.053], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash64(generateUUIDv4()))"}, {"oldTime": 0.265, "newTime": 0.2671, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.003, 0.006, 0.024, 0.026], "testName": "general_purpose_hashes_on_UUID", "query": "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"}, {"oldTime": 0.0063, "newTime": 0.0063, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.002, 0.013, 0.067, 0.075], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'d Date, dt DateTime, dtm DateTime(\\\\\\'Europe/Moscow\\\\\\')\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.009, "newTime": 0.0089, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.009, 0.017, 0.046, 0.069], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0169, "newTime": 0.0164, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.001, 0.008, 0.028, 0.037], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'dt64 DateTime64, dts64 DateTime64(6), dtms64 DateTime64(6 ,\\\\\\'Europe/Moscow\\\\\\')\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0062, "newTime": 0.0061, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.006, 0.01, 0.036, 0.038], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'f32 Float32, f64 Float64\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0086, "newTime": 0.0084, "relativeDifference": -0.024, "timeSpeed": 1.023, "quantiles": [0.011, 0.023, 0.045, 0.054], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Int8)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.023, "newTime": 0.0227, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.006, 0.011, 0.071, 0.085], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(Enum8(\\\\\\'hello\\\\\\' = 1, \\\\\\'world\\\\\\' = 5)))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0168, "newTime": 0.017, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.002, 0.01, 0.021, 0.022], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(Int32))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0279, "newTime": 0.0279, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.002, 0.031, 0.041], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(UUID))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0574, "newTime": 0.0569, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.01, 0.028, 0.03], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(String)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.005, "newTime": 0.0051, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.005, 0.009, 0.046, 0.068], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Enum8(\\\\\\'hello\\\\\\' = 1, \\\\\\'world\\\\\\' = 5)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0045, "newTime": 0.0047, "relativeDifference": 0.044, "timeSpeed": 1.044, "quantiles": [0.052, 0.063, 0.13, 0.152], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i FixedString(4)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0064, "newTime": 0.0067, "relativeDifference": 0.046, "timeSpeed": 1.046, "quantiles": [0.021, 0.039, 0.062, 0.069], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Nullable(Enum16(\\\\\\'h\\\\\\' = 1, \\\\\\'w\\\\\\' = 5 , \\\\\\'o\\\\\\' = -200)))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0152, "newTime": 0.0155, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.016, 0.024, 0.051, 0.058], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Nullable(String)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0139, "newTime": 0.0141, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.011, 0.028, 0.055, 0.07], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i String\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0159, "newTime": 0.016, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.008, 0.034, 0.055], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Tuple(Int32, Array(Int64))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0058, "newTime": 0.006, "relativeDifference": 0.034, "timeSpeed": 1.034, "quantiles": [0.014, 0.018, 0.043, 0.049], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Tuple(Int32, Int64)\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0068, "newTime": 0.0062, "relativeDifference": -0.089, "timeSpeed": 1.096, "quantiles": [0.028, 0.065, 0.31, 0.324], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i UUID\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0103, "newTime": 0.0108, "relativeDifference": 0.048, "timeSpeed": 1.048, "quantiles": [0.006, 0.041, 0.063, 0.068], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8\\') LIMIT 10000000);"}, {"oldTime": 0.0106, "newTime": 0.0105, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.005, 0.025, 0.045, 0.057], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.0441, "newTime": 0.0438, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.001, 0.004, 0.019, 0.031], "testName": "great_circle_dist", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(greatCircleDistance((rand(1) % 360) * 1. - 180, (number % 150) * 1.2 - 90, (number % 360) + toFloat64(rand(2)) / 4294967296 - 180, (rand(3) % 180) * 1. - 90))"}, {"oldTime": 0.0234, "newTime": 0.0239, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.005, 0.015, 0.029, 0.029], "testName": "great_circle_dist", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(greatCircleDistance(55. + toFloat64(rand(1)) / 4294967296, 37. + toFloat64(rand(2)) / 4294967296, 55. + toFloat64(rand(3)) / 4294967296, 37. + toFloat64(rand(4)) / 4294967296))"}, {"oldTime": 0.9452, "newTime": 0.9338, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.012, 0.02, 0.043, 0.052], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.4399, "newTime": 0.4407, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.006, 0.025, 0.032], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.9436, "newTime": 0.9462, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.004, 0.023, 0.028], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.4557, "newTime": 0.4463, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.006, 0.012, 0.06, 0.071], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.9511, "newTime": 0.956, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.005, 0.022, 0.034], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.4306, "newTime": 0.4532, "relativeDifference": 0.052, "timeSpeed": 1.052, "quantiles": [0.015, 0.044, 0.065, 0.075], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.6316, "newTime": 0.6138, "relativeDifference": -0.029, "timeSpeed": 1.028, "quantiles": [0.002, 0.028, 0.066, 0.073], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 0.3346, "newTime": 0.3387, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.006, 0.012, 0.022, 0.025], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.6378, "newTime": 0.6302, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.003, 0.012, 0.032, 0.035], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(1000)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 0.3253, "newTime": 0.3311, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.011, 0.014, 0.04, 0.045], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(1000)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.6384, "newTime": 0.659, "relativeDifference": 0.032, "timeSpeed": 1.032, "quantiles": [0.005, 0.01, 0.035, 0.037], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10000)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 0.3241, "newTime": 0.3395, "relativeDifference": 0.047, "timeSpeed": 1.047, "quantiles": [0.005, 0.018, 0.053, 0.065], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10000)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.106, "newTime": 0.1045, "relativeDifference": -0.015, "timeSpeed": 1.014, "quantiles": [0.001, 0.013, 0.056, 0.057], "testName": "h3", "query": "SELECT count() FROM zeros(100000) WHERE NOT ignore(geoToH3(37.62 + rand(1) / 0x100000000, 55.75 + rand(2) / 0x100000000, 15))"}, {"oldTime": 0.0818, "newTime": 0.0874, "relativeDifference": 0.068, "timeSpeed": 1.068, "quantiles": [0.001, 0.013, 0.068, 0.069], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : [4, 5])"}, {"oldTime": 0.0905, "newTime": 0.0894, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.0, 0.002, 0.012, 0.012], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : [400, 500])"}, {"oldTime": 0.1123, "newTime": 0.1145, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.002, 0.01, 0.019, 0.022], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : materialize([4, 5]))"}, {"oldTime": 0.1279, "newTime": 0.1274, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.004, 0.015, 0.016], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : materialize([400, 500]))"}, {"oldTime": 0.1528, "newTime": 0.1531, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.016, 0.029, 0.036], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([1, 2, 3]) : materialize([4, 5]))"}, {"oldTime": 0.1569, "newTime": 0.1604, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.0, 0.019, 0.026, 0.03], "testName": "if_array_num", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([1, 2, 3]) : materialize([400, 500]))"}, {"oldTime": 0.1866, "newTime": 0.1857, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.009, 0.045, 0.064], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [\\'Hello\\', \\'World\\'] : [\\'a\\', \\'b\\', \\'c\\'])"}, {"oldTime": 0.2671, "newTime": 0.2634, "relativeDifference": -0.014, "timeSpeed": 1.014, "quantiles": [0.006, 0.012, 0.03, 0.037], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [\\'Hello\\', \\'World\\'] : materialize([\\'a\\', \\'b\\', \\'c\\']))"}, {"oldTime": 0.2185, "newTime": 0.2163, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.009, 0.017, 0.036, 0.04], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'\\', \\'\\']) : emptyArrayString())"}, {"oldTime": 0.2596, "newTime": 0.2656, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.006, 0.017, 0.037, 0.038], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'Hello\\', \\'World\\']) : [\\'a\\', \\'b\\', \\'c\\'])"}, {"oldTime": 0.3342, "newTime": 0.3323, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.002, 0.005, 0.019, 0.024], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'Hello\\', \\'World\\']) : materialize([\\'a\\', \\'b\\', \\'c\\']))"}, {"oldTime": 0.8462, "newTime": 0.9981, "relativeDifference": 0.179, "timeSpeed": 1.179, "quantiles": [0.035, 0.167, 0.338, 0.365], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"}, {"oldTime": 0.0092, "newTime": 0.0098, "relativeDifference": 0.065, "timeSpeed": 1.065, "quantiles": [0.02, 0.031, 0.076, 0.086], "testName": "if_string_const", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'\\' : toFixedString(\\'world\\', 5))"}, {"oldTime": 0.0096, "newTime": 0.0102, "relativeDifference": 0.062, "timeSpeed": 1.062, "quantiles": [0.007, 0.013, 0.058, 0.07], "testName": "if_string_const", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'hello\\' : \\'\\')"}, {"oldTime": 0.0099, "newTime": 0.0102, "relativeDifference": 0.03, "timeSpeed": 1.03, "quantiles": [0.001, 0.013, 0.036, 0.04], "testName": "if_string_const", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'hello\\' : \\'world\\')"}, {"oldTime": 0.0074, "newTime": 0.0077, "relativeDifference": 0.04, "timeSpeed": 1.04, "quantiles": [0.005, 0.024, 0.055, 0.065], "testName": "if_string_const", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? toFixedString(\\'hello\\', 5) : toFixedString(\\'world\\', 5))"}, {"oldTime": 0.0121, "newTime": 0.0119, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.009, 0.021, 0.058, 0.066], "testName": "if_string_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? \\'\\' : PageCharset)"}, {"oldTime": 0.0182, "newTime": 0.0193, "relativeDifference": 0.06, "timeSpeed": 1.06, "quantiles": [0.034, 0.057, 0.085, 0.106], "testName": "if_string_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? SearchPhrase : MobilePhoneModel)"}, {"oldTime": 0.0461, "newTime": 0.0467, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.013, 0.032, 0.048, 0.057], "testName": "if_string_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? URL : \\'\\')"}, {"oldTime": 0.0929, "newTime": 0.0944, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.012, 0.024, 0.041, 0.048], "testName": "if_string_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? URL : Referer)"}, {"oldTime": 0.0415, "newTime": 0.0421, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.001, 0.01, 0.02, 0.023], "testName": "information_value", "query": "SELECT categoricalInformationValue(Age < 15, Age >= 15 and Age < 30, Age >= 30 and Age < 45, Age >= 45 and Age < 60, Age >= 60, IsMobile) from hits_100m_single"}, {"oldTime": 0.0236, "newTime": 0.0236, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.001, 0.006, 0.009], "testName": "information_value", "query": "SELECT categoricalInformationValue(Age < 15, IsMobile) from hits_100m_single"}, {"oldTime": 0.0752, "newTime": 0.0758, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.001, 0.007, 0.021, 0.028], "testName": "inserts_arrays_lowcardinality", "query": "INSERT INTO lot_of_string_arrays_dst SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src"}, {"oldTime": 0.2585, "newTime": 0.2578, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.004, 0.011, 0.012], "testName": "inserts_arrays_lowcardinality", "query": "INSERT INTO lot_of_string_arrays_dst_lowcardinality SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src"}, {"oldTime": 0.0283, "newTime": 0.0287, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.001, 0.009, 0.041, 0.053], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(AdvEngineID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0368, "newTime": 0.0369, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.004, 0.011, 0.026, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Age)) SETTINGS max_threads = 1"}, {"oldTime": 0.0342, "newTime": 0.0344, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.005, 0.007, 0.011, 0.014], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(CLID)) SETTINGS max_threads = 1"}, {"oldTime": 0.077, "newTime": 0.0752, "relativeDifference": -0.024, "timeSpeed": 1.023, "quantiles": [0.006, 0.017, 0.036, 0.045], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ClientIP)) SETTINGS max_threads = 1"}, {"oldTime": 0.0527, "newTime": 0.0504, "relativeDifference": -0.044, "timeSpeed": 1.045, "quantiles": [0.001, 0.011, 0.047, 0.05], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ClientTimeZone)) SETTINGS max_threads = 1"}, {"oldTime": 0.0483, "newTime": 0.0491, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.01, 0.018, 0.04, 0.049], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(CodeVersion)) SETTINGS max_threads = 1"}, {"oldTime": 0.0638, "newTime": 0.064, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.001, 0.003, 0.015, 0.02], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ConnectTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0284, "newTime": 0.0276, "relativeDifference": -0.029, "timeSpeed": 1.028, "quantiles": [0.003, 0.01, 0.032, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(CookieEnable)) SETTINGS max_threads = 1"}, {"oldTime": 0.0338, "newTime": 0.0338, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.01, 0.028, 0.042], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(CounterClass)) SETTINGS max_threads = 1"}, {"oldTime": 0.0574, "newTime": 0.0574, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.029, 0.081, 0.1], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(CounterID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0567, "newTime": 0.0575, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.002, 0.012, 0.017, 0.019], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(DNSTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0583, "newTime": 0.0587, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.007, 0.031, 0.033], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMCompleteTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0708, "newTime": 0.0691, "relativeDifference": -0.025, "timeSpeed": 1.024, "quantiles": [0.009, 0.014, 0.024, 0.029], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMContentLoadedTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0778, "newTime": 0.0778, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.015, 0.02], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMInteractiveTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0358, "newTime": 0.0368, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.001, 0.01, 0.03, 0.035], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(DontCountHits)) SETTINGS max_threads = 1"}, {"oldTime": 0.1163, "newTime": 0.1142, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.01, 0.018, 0.035, 0.041], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(FUniqID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0651, "newTime": 0.0655, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.004, 0.015, 0.028, 0.029], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(FetchTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0657, "newTime": 0.0637, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.0, 0.03, 0.041, 0.044], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(FirstPaintTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.034, "newTime": 0.0344, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.006, 0.019, 0.034, 0.039], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(FlashMajor)) SETTINGS max_threads = 1"}, {"oldTime": 0.0317, "newTime": 0.0316, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.012, 0.017, 0.019], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(FlashMinor)) SETTINGS max_threads = 1"}, {"oldTime": 0.0343, "newTime": 0.0336, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.008, 0.015, 0.024, 0.025], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(GoodEvent)) SETTINGS max_threads = 1"}, {"oldTime": 0.0864, "newTime": 0.0876, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.009, 0.017, 0.046, 0.051], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(HID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0304, "newTime": 0.0303, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.006, 0.02, 0.025], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(HTTPError)) SETTINGS max_threads = 1"}, {"oldTime": 0.0277, "newTime": 0.0276, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.013, 0.03, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(HasGCLID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0442, "newTime": 0.0439, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.003, 0.011, 0.014], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(HistoryLength)) SETTINGS max_threads = 1"}, {"oldTime": 0.0678, "newTime": 0.069, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.007, 0.017, 0.032, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IPNetworkID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0332, "newTime": 0.0326, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.006, 0.011, 0.021, 0.022], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Income)) SETTINGS max_threads = 1"}, {"oldTime": 0.0474, "newTime": 0.0468, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.004, 0.011, 0.035, 0.042], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Interests)) SETTINGS max_threads = 1"}, {"oldTime": 0.0347, "newTime": 0.0351, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.01, 0.016, 0.087, 0.1], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsArtifical)) SETTINGS max_threads = 1"}, {"oldTime": 0.0283, "newTime": 0.0285, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.005, 0.012, 0.033, 0.039], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsDownload)) SETTINGS max_threads = 1"}, {"oldTime": 0.0285, "newTime": 0.0281, "relativeDifference": -0.015, "timeSpeed": 1.014, "quantiles": [0.0, 0.006, 0.016, 0.02], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsEvent)) SETTINGS max_threads = 1"}, {"oldTime": 0.0308, "newTime": 0.0308, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.002, 0.013, 0.017], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsLink)) SETTINGS max_threads = 1"}, {"oldTime": 0.03, "newTime": 0.0307, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.003, 0.008, 0.038, 0.044], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsMobile)) SETTINGS max_threads = 1"}, {"oldTime": 0.0343, "newTime": 0.0343, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.003, 0.012, 0.015], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsNotBounce)) SETTINGS max_threads = 1"}, {"oldTime": 0.0283, "newTime": 0.028, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.0, 0.002, 0.011, 0.011], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsOldCounter)) SETTINGS max_threads = 1"}, {"oldTime": 0.0292, "newTime": 0.0294, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.008, 0.016, 0.018], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsParameter)) SETTINGS max_threads = 1"}, {"oldTime": 0.0285, "newTime": 0.0288, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.006, 0.017, 0.023], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsRobot)) SETTINGS max_threads = 1"}, {"oldTime": 0.0328, "newTime": 0.0328, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.008, 0.029, 0.032], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(JavaEnable)) SETTINGS max_threads = 1"}, {"oldTime": 0.0275, "newTime": 0.0279, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.004, 0.012, 0.017, 0.019], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(JavascriptEnable)) SETTINGS max_threads = 1"}, {"oldTime": 0.0524, "newTime": 0.0525, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.002, 0.009, 0.011], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(LoadEventEndTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0599, "newTime": 0.0601, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.017, 0.046, 0.05], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(LoadEventStartTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0305, "newTime": 0.0306, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.004, 0.017, 0.024], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(MobilePhone)) SETTINGS max_threads = 1"}, {"oldTime": 0.0739, "newTime": 0.076, "relativeDifference": 0.028, "timeSpeed": 1.028, "quantiles": [0.0, 0.014, 0.039, 0.045], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(NSToDOMContentLoadedTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0289, "newTime": 0.0289, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.01, 0.028, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(NetMajor)) SETTINGS max_threads = 1"}, {"oldTime": 0.0301, "newTime": 0.0295, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.0, 0.019, 0.044, 0.054], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(NetMinor)) SETTINGS max_threads = 1"}, {"oldTime": 0.0394, "newTime": 0.0414, "relativeDifference": 0.05, "timeSpeed": 1.05, "quantiles": [0.049, 0.057, 0.076, 0.077], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(OS)) SETTINGS max_threads = 1"}, {"oldTime": 0.0357, "newTime": 0.0354, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.006, 0.011, 0.011], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(OpenerName)) SETTINGS max_threads = 1"}, {"oldTime": 0.029, "newTime": 0.0305, "relativeDifference": 0.051, "timeSpeed": 1.051, "quantiles": [0.041, 0.047, 0.052, 0.053], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ParamCurrencyID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0393, "newTime": 0.04, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.003, 0.018, 0.037, 0.043], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ParamPrice)) SETTINGS max_threads = 1"}, {"oldTime": 0.0333, "newTime": 0.0332, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.001, 0.01, 0.015], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RedirectCount)) SETTINGS max_threads = 1"}, {"oldTime": 0.0562, "newTime": 0.0553, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.001, 0.011, 0.03, 0.032], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RedirectTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.1728, "newTime": 0.1718, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.008, 0.02, 0.028], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RefererHash)) SETTINGS max_threads = 1"}, {"oldTime": 0.0306, "newTime": 0.0302, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.0, 0.003, 0.011, 0.013], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Refresh)) SETTINGS max_threads = 1"}, {"oldTime": 0.0568, "newTime": 0.0575, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.009, 0.014, 0.035, 0.046], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RegionID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0774, "newTime": 0.0744, "relativeDifference": -0.039, "timeSpeed": 1.04, "quantiles": [0.0, 0.009, 0.038, 0.049], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RemoteIP)) SETTINGS max_threads = 1"}, {"oldTime": 0.0633, "newTime": 0.0609, "relativeDifference": -0.038, "timeSpeed": 1.039, "quantiles": [0.001, 0.008, 0.037, 0.043], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RequestNum)) SETTINGS max_threads = 1"}, {"oldTime": 0.0356, "newTime": 0.0354, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.008, 0.02, 0.024], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(RequestTry)) SETTINGS max_threads = 1"}, {"oldTime": 0.0348, "newTime": 0.0351, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.0, 0.007, 0.016, 0.017], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionDepth)) SETTINGS max_threads = 1"}, {"oldTime": 0.0496, "newTime": 0.0497, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.025, 0.038, 0.04], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionHeight)) SETTINGS max_threads = 1"}, {"oldTime": 0.0501, "newTime": 0.0502, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.039, 0.042], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionWidth)) SETTINGS max_threads = 1"}, {"oldTime": 0.085, "newTime": 0.0827, "relativeDifference": -0.028, "timeSpeed": 1.027, "quantiles": [0.01, 0.02, 0.041, 0.044], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResponseEndTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0812, "newTime": 0.0817, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.006, 0.009, 0.016, 0.018], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResponseStartTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0343, "newTime": 0.0337, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.011, 0.015, 0.022, 0.027], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Robotness)) SETTINGS max_threads = 1"}, {"oldTime": 0.0351, "newTime": 0.0354, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.0, 0.009, 0.015, 0.019], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SearchEngineID)) SETTINGS max_threads = 1"}, {"oldTime": 0.051, "newTime": 0.0512, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.006, 0.019, 0.024], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SearchPhrase)) SETTINGS max_threads = 1"}, {"oldTime": 0.0617, "newTime": 0.062, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.005, 0.012, 0.026, 0.033], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SendTiming)) SETTINGS max_threads = 1"}, {"oldTime": 0.0339, "newTime": 0.0337, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.004, 0.006, 0.025, 0.032], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(Sex)) SETTINGS max_threads = 1"}, {"oldTime": 0.0326, "newTime": 0.0323, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.015, 0.03, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion1)) SETTINGS max_threads = 1"}, {"oldTime": 0.0315, "newTime": 0.0318, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.001, 0.006, 0.012, 0.014], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion2)) SETTINGS max_threads = 1"}, {"oldTime": 0.0482, "newTime": 0.048, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.002, 0.006, 0.025, 0.04], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion3)) SETTINGS max_threads = 1"}, {"oldTime": 0.0298, "newTime": 0.0293, "relativeDifference": -0.017, "timeSpeed": 1.017, "quantiles": [0.006, 0.009, 0.017, 0.019], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion4)) SETTINGS max_threads = 1"}, {"oldTime": 0.0291, "newTime": 0.029, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.001, 0.007, 0.007], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(SocialSourceNetworkID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0415, "newTime": 0.0407, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.007, 0.014, 0.019, 0.02], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(TraficSourceID)) SETTINGS max_threads = 1"}, {"oldTime": 0.1899, "newTime": 0.1874, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.007, 0.013, 0.024, 0.028], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(URLHash)) SETTINGS max_threads = 1"}, {"oldTime": 0.0417, "newTime": 0.0384, "relativeDifference": -0.08, "timeSpeed": 1.085, "quantiles": [0.063, 0.08, 0.116, 0.131], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1"}, {"oldTime": 0.0408, "newTime": 0.0408, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.014, 0.05, 0.056], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgentMajor)) SETTINGS max_threads = 1"}, {"oldTime": 0.1346, "newTime": 0.1334, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.009, 0.017, 0.045, 0.05], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserID)) SETTINGS max_threads = 1"}, {"oldTime": 0.1402, "newTime": 0.1385, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.006, 0.02, 0.037, 0.039], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(WatchID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0517, "newTime": 0.0511, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.01, 0.017, 0.031, 0.032], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowClientHeight)) SETTINGS max_threads = 1"}, {"oldTime": 0.0532, "newTime": 0.0535, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.005, 0.013, 0.032, 0.034], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowClientWidth)) SETTINGS max_threads = 1"}, {"oldTime": 0.0582, "newTime": 0.059, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.007, 0.013, 0.029, 0.04], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowName)) SETTINGS max_threads = 1"}, {"oldTime": 0.0288, "newTime": 0.0285, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.002, 0.009, 0.024, 0.03], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(WithHash)) SETTINGS max_threads = 1"}, {"oldTime": 0.0327, "newTime": 0.0332, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.003, 0.007, 0.026, 0.029], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(YCLID)) SETTINGS max_threads = 1"}, {"oldTime": 0.0473, "newTime": 0.0438, "relativeDifference": -0.074, "timeSpeed": 1.079, "quantiles": [0.0, 0.022, 0.067, 0.079], "testName": "jit_large_requests", "query": "\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 0;\\n    "}, {"oldTime": 0.0227, "newTime": 0.0242, "relativeDifference": 0.066, "timeSpeed": 1.066, "quantiles": [0.001, 0.031, 0.085, 0.1], "testName": "jit_large_requests", "query": "\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 1,\\n            min_count_to_compile_expression = 1\\n    "}, {"oldTime": 0.0165, "newTime": 0.0167, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.001, 0.006, 0.04, 0.045], "testName": "jit_small_requests", "query": "\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(intHash64(number))\\n    "}, {"oldTime": 0.0574, "newTime": 0.0568, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.001, 0.006, 0.018, 0.02], "testName": "jit_small_requests", "query": "\\n        WITH\\n            bitXor(number, 0x4CF2D2BAAE6DA887) AS x0,\\n            bitXor(x0, bitShiftRight(x0, 33)) AS x1,\\n            x1 * 0xff51afd7ed558ccd AS x2,\\n            bitXor(x2, bitShiftRight(x2, 33)) AS x3,\\n            x3 * 0xc4ceb9fe1a85ec53 AS x4,\\n            bitXor(x4, bitShiftRight(x4, 33)) AS x5\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(x5)\\n        SETTINGS\\n            compile_expressions = 0\\n    "}, {"oldTime": 0.012, "newTime": 0.0126, "relativeDifference": 0.049, "timeSpeed": 1.049, "quantiles": [0.017, 0.037, 0.117, 0.13], "testName": "jit_small_requests", "query": "\\n        WITH\\n            bitXor(number, 0x4CF2D2BAAE6DA887) AS x0,\\n            bitXor(x0, bitShiftRight(x0, 33)) AS x1,\\n            x1 * 0xff51afd7ed558ccd AS x2,\\n            bitXor(x2, bitShiftRight(x2, 33)) AS x3,\\n            x3 * 0xc4ceb9fe1a85ec53 AS x4,\\n            bitXor(x4, bitShiftRight(x4, 33)) AS x5\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(x5)\\n        SETTINGS\\n            compile_expressions = 1,\\n            min_count_to_compile_expression = 1\\n    "}, {"oldTime": 0.003, "newTime": 0.0024, "relativeDifference": -0.2, "timeSpeed": 1.249, "quantiles": [0.05, 0.075, 0.228, 0.26], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.0029, "newTime": 0.0025, "relativeDifference": -0.138, "timeSpeed": 1.16, "quantiles": [0.03, 0.094, 0.244, 0.253], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.0024, "newTime": 0.0026, "relativeDifference": 0.083, "timeSpeed": 1.083, "quantiles": [0.051, 0.116, 0.185, 0.191], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.0043, "newTime": 0.0038, "relativeDifference": -0.117, "timeSpeed": 1.131, "quantiles": [0.058, 0.087, 0.099, 0.102], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.002, "newTime": 0.0019, "relativeDifference": -0.051, "timeSpeed": 1.052, "quantiles": [0.009, 0.035, 0.163, 0.194], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l CROSS JOIN (SELECT number as i64 FROM numbers(4)) r WHERE i32 = 42"}, {"oldTime": 0.8321, "newTime": 0.8474, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.016, 0.018, 0.03, 0.037], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.8282, "newTime": 0.848, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.023, 0.027, 0.035, 0.037], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.8738, "newTime": 0.8797, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.001, 0.007, 0.035, 0.039], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.9891, "newTime": 1.0146, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.016, 0.023, 0.031, 0.033], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.806, "newTime": 0.7806, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.031, 0.034, 0.039, 0.042], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.8056, "newTime": 0.8069, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.024, 0.041, 0.044], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.8054, "newTime": 0.8105, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.006, 0.013, 0.035, 0.036], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.9403, "newTime": 0.9755, "relativeDifference": 0.037, "timeSpeed": 1.037, "quantiles": [0.02, 0.029, 0.037, 0.038], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.7844, "newTime": 0.8058, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.019, 0.024, 0.034, 0.035], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.7786, "newTime": 0.7848, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.007, 0.008, 0.029, 0.033], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.8075, "newTime": 0.8099, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.005, 0.029, 0.034], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.9734, "newTime": 0.9464, "relativeDifference": -0.028, "timeSpeed": 1.028, "quantiles": [0.001, 0.011, 0.035, 0.04], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.7959, "newTime": 0.8253, "relativeDifference": 0.036, "timeSpeed": 1.036, "quantiles": [0.028, 0.033, 0.045, 0.046], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.8004, "newTime": 0.8047, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.002, 0.015, 0.038, 0.041], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.855, "newTime": 0.8559, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.007, 0.036, 0.039], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.9979, "newTime": 0.9958, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.002, 0.036, 0.038], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.0031, "newTime": 0.0034, "relativeDifference": 0.096, "timeSpeed": 1.096, "quantiles": [0.077, 0.112, 0.185, 0.189], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.0033, "newTime": 0.0029, "relativeDifference": -0.122, "timeSpeed": 1.137, "quantiles": [0.014, 0.044, 0.137, 0.157], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.0034, "newTime": 0.0034, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.071, 0.186, 0.275], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.0048, "newTime": 0.0046, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.004, 0.059, 0.232, 0.249], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.0949, "newTime": 0.0959, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.002, 0.006, 0.015, 0.02], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.0931, "newTime": 0.0953, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.003, 0.01, 0.022, 0.025], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.1066, "newTime": 0.1044, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.008, 0.014, 0.026, 0.03], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.1215, "newTime": 0.1232, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.009, 0.014, 0.032, 0.035], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.0933, "newTime": 0.0945, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.008, 0.012, 0.022, 0.023], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.0928, "newTime": 0.0954, "relativeDifference": 0.028, "timeSpeed": 1.028, "quantiles": [0.0, 0.01, 0.031, 0.038], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.1022, "newTime": 0.1022, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.011, 0.034, 0.038], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.121, "newTime": 0.1218, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.001, 0.007, 0.038, 0.042], "testName": "joins_in_memory_pmj", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.1636, "newTime": 0.1606, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.012, 0.019, 0.056, 0.057], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-1\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\'))"}, {"oldTime": 0.8083, "newTime": 0.8175, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.0, 0.009, 0.028, 0.034], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-10\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractRaw(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))"}, {"oldTime": 0.5594, "newTime": 0.5559, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.006, 0.019, 0.055, 0.058], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-11\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))"}, {"oldTime": 0.5467, "newTime": 0.5811, "relativeDifference": 0.062, "timeSpeed": 1.062, "quantiles": [0.018, 0.042, 0.066, 0.07], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-12\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\', \\'nested_2\\', -2))"}, {"oldTime": 0.5643, "newTime": 0.5566, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.001, 0.007, 0.018, 0.025], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-13\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractBool(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'bparam\\'))"}, {"oldTime": 0.1589, "newTime": 0.1579, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.001, 0.006, 0.017, 0.024], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-2\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\', \\'nested_1\\'))"}, {"oldTime": 0.158, "newTime": 0.1548, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.0, 0.006, 0.029, 0.041], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-3\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))"}, {"oldTime": 0.1589, "newTime": 0.1595, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.013, 0.022, 0.028], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-4\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))"}, {"oldTime": 0.161, "newTime": 0.1557, "relativeDifference": -0.033, "timeSpeed": 1.034, "quantiles": [0.0, 0.009, 0.033, 0.042], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-5\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'fparam\\'))"}, {"oldTime": 0.5474, "newTime": 0.591, "relativeDifference": 0.079, "timeSpeed": 1.079, "quantiles": [0.002, 0.021, 0.053, 0.079], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-6\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\'))"}, {"oldTime": 0.5704, "newTime": 0.5818, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.017, 0.022, 0.076, 0.097], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-7\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\', \\'nested_1\\'))"}, {"oldTime": 0.5796, "newTime": 0.561, "relativeDifference": -0.033, "timeSpeed": 1.033, "quantiles": [0.003, 0.023, 0.046, 0.061], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.5361, "newTime": 0.5426, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.005, 0.024, 0.052, 0.061], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-9\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.1259, "newTime": 0.1284, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.005, 0.022, 0.048, 0.053], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-1\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\'))"}, {"oldTime": 0.5631, "newTime": 0.549, "relativeDifference": -0.026, "timeSpeed": 1.025, "quantiles": [0.0, 0.014, 0.026, 0.033], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-10\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractRaw(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))"}, {"oldTime": 0.2467, "newTime": 0.2467, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.004, 0.012, 0.014], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-11\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))"}, {"oldTime": 0.2874, "newTime": 0.2787, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.001, 0.007, 0.036, 0.04], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-12\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\', \\'nested_2\\', -2))"}, {"oldTime": 0.2572, "newTime": 0.2552, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.007, 0.02, 0.029], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-13\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractBool(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'bparam\\'))"}, {"oldTime": 0.123, "newTime": 0.1257, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.009, 0.018, 0.049, 0.051], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-2\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\', \\'nested_1\\'))"}, {"oldTime": 0.1329, "newTime": 0.1289, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.0, 0.029, 0.06, 0.07], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-3\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))"}, {"oldTime": 0.1309, "newTime": 0.1334, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.002, 0.017, 0.039, 0.049], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-4\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))"}, {"oldTime": 0.1317, "newTime": 0.1276, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.0, 0.019, 0.038, 0.044], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-5\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'fparam\\'))"}, {"oldTime": 0.2415, "newTime": 0.2451, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.01, 0.018, 0.062, 0.066], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-6\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\'))"}, {"oldTime": 0.2551, "newTime": 0.2542, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.019, 0.021], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-7\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\', \\'nested_1\\'))"}, {"oldTime": 0.2466, "newTime": 0.2418, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.001, 0.011, 0.026, 0.033], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.241, "newTime": 0.2356, "relativeDifference": -0.023, "timeSpeed": 1.022, "quantiles": [0.003, 0.009, 0.027, 0.036], "testName": "json_extract_simdjson", "query": "SELECT \\'simdjson-9\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.0317, "newTime": 0.035, "relativeDifference": 0.104, "timeSpeed": 1.104, "quantiles": [0.0, 0.024, 0.104, 0.113], "testName": "linear_regression", "query": "SELECT stochasticLinearRegression(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null"}, {"oldTime": 0.0344, "newTime": 0.0359, "relativeDifference": 0.043, "timeSpeed": 1.043, "quantiles": [0.002, 0.018, 0.081, 0.124], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15)(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null"}, {"oldTime": 0.2412, "newTime": 0.2508, "relativeDifference": 0.039, "timeSpeed": 1.039, "quantiles": [0.016, 0.039, 0.104, 0.124], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Momentum\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.3534, "newTime": 0.372, "relativeDifference": 0.052, "timeSpeed": 1.052, "quantiles": [0.006, 0.027, 0.047, 0.052], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Nesterov\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.0935, "newTime": 0.0932, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.014, 0.016], "testName": "linear_regression", "query": "WITH (SELECT state FROM test_model) AS model SELECT evalMLMethod(model, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.234, "newTime": 0.2492, "relativeDifference": 0.064, "timeSpeed": 1.064, "quantiles": [0.0, 0.01, 0.065, 0.072], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(0) AS x1, materialize(0) AS x2, materialize(0) AS x3, materialize(0) AS x4, materialize(0) AS x5, materialize(0) AS x6, materialize(0) AS x7, materialize(0) AS x8, materialize(0) AS x9, materialize(0) AS x10 FROM zeros(150000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.1848, "newTime": 0.1859, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.006, 0.015, 0.025, 0.029], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(0) AS x1, materialize(0) AS x2, materialize(0) AS x3, materialize(0) AS x4, materialize(0) AS x5, materialize(0) AS x6, materialize(0) AS x7, materialize(0) AS x8, materialize(0) AS x9, materialize(0) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.9288, "newTime": 0.9307, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.002, 0.009, 0.011], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(100000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.22, "newTime": 0.2232, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.003, 0.009, 0.016, 0.019], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.3898, "newTime": 0.3912, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.009, 0.025, 0.029], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(500000000))\\n    WHERE NOT ignore(xor(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.3377, "newTime": 0.3404, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.008, 0.01, 0.017, 0.019], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(toUInt8(0)) AS x1, materialize(toUInt16(0)) AS x2, materialize(toUInt32(0)) AS x3, materialize(toUInt64(0)) AS x4, materialize(toInt8(0)) AS x5, materialize(toInt16(0)) AS x6, materialize(toInt32(0)) AS x7, materialize(toInt64(0)) AS x8, materialize(toFloat32(0)) AS x9, materialize(toFloat64(0)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.3585, "newTime": 0.3592, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.002, 0.008, 0.01], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(toUInt8(0)) AS x1, materialize(toUInt16(0)) AS x2, materialize(toUInt32(0)) AS x3, materialize(toUInt64(0)) AS x4, materialize(toInt8(0)) AS x5, materialize(toInt16(0)) AS x6, materialize(toInt32(0)) AS x7, materialize(toInt64(0)) AS x8, materialize(toFloat32(0)) AS x9, materialize(toFloat64(0)) AS x10 FROM zeros(40000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.3704, "newTime": 0.3695, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.002, 0.011, 0.019], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.3398, "newTime": 0.3361, "relativeDifference": -0.011, "timeSpeed": 1.011, "quantiles": [0.0, 0.001, 0.011, 0.011], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.176, "newTime": 0.1738, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.001, 0.012, 0.018, 0.02], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(xor(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}, {"oldTime": 0.1006, "newTime": 0.1015, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.009, 0.013, 0.024, 0.026], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(number))"}, {"oldTime": 0.1032, "newTime": 0.1047, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.001, 0.008, 0.018, 0.021], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(toFloat32(number)))"}, {"oldTime": 0.1014, "newTime": 0.1012, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.006, 0.05, 0.054], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(toFloat64(number)))"}, {"oldTime": 0.1876, "newTime": 0.186, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.003, 0.005, 0.011, 0.011], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(number))"}, {"oldTime": 0.1972, "newTime": 0.1987, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.001, 0.007, 0.01, 0.01], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(toFloat32(number)))"}, {"oldTime": 0.1943, "newTime": 0.1961, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.0, 0.005, 0.019, 0.024], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(toFloat64(number)))"}, {"oldTime": 0.1555, "newTime": 0.1551, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.007, 0.014, 0.015], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(number))"}, {"oldTime": 0.1583, "newTime": 0.1588, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.01, 0.022, 0.025], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(toFloat32(number)))"}, {"oldTime": 0.1609, "newTime": 0.1575, "relativeDifference": -0.022, "timeSpeed": 1.021, "quantiles": [0.001, 0.005, 0.021, 0.023], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(toFloat64(number)))"}, {"oldTime": 0.1415, "newTime": 0.1429, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.004, 0.007, 0.016, 0.02], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(number))"}, {"oldTime": 0.1461, "newTime": 0.147, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.003, 0.012, 0.012], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(toFloat32(number)))"}, {"oldTime": 0.1449, "newTime": 0.144, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.012, 0.026, 0.028], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(toFloat64(number)))"}, {"oldTime": 0.1916, "newTime": 0.1923, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.001, 0.005, 0.006], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(number))"}, {"oldTime": 0.1964, "newTime": 0.1967, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.006, 0.011, 0.013], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(toFloat32(number)))"}, {"oldTime": 0.1973, "newTime": 0.1933, "relativeDifference": -0.021, "timeSpeed": 1.02, "quantiles": [0.004, 0.012, 0.02, 0.022], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(toFloat64(number)))"}, {"oldTime": 0.1592, "newTime": 0.1588, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.01, 0.021, 0.025], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(number))"}, {"oldTime": 0.159, "newTime": 0.1598, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.0, 0.002, 0.009, 0.01], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(toFloat32(number)))"}, {"oldTime": 0.162, "newTime": 0.1606, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.008, 0.016, 0.023, 0.024], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(toFloat64(number)))"}, {"oldTime": 0.3409, "newTime": 0.3379, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.003, 0.016, 0.021], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(number))"}, {"oldTime": 0.3369, "newTime": 0.3385, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.005, 0.014, 0.018], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(toFloat32(number)))"}, {"oldTime": 0.3384, "newTime": 0.3339, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.011, 0.012, 0.016, 0.019], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(toFloat64(number)))"}, {"oldTime": 0.1099, "newTime": 0.1107, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.004, 0.007, 0.016, 0.018], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(number))"}, {"oldTime": 0.1158, "newTime": 0.1163, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.0, 0.003, 0.02, 0.02], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(toFloat32(number)))"}, {"oldTime": 0.1168, "newTime": 0.117, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.003, 0.036, 0.045], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(toFloat64(number)))"}, {"oldTime": 0.4856, "newTime": 0.4989, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.007, 0.017, 0.029, 0.03], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(number))"}, {"oldTime": 0.6158, "newTime": 0.6127, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.008, 0.032, 0.033], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(toFloat32(number)))"}, {"oldTime": 0.5567, "newTime": 0.5587, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.001, 0.006, 0.015, 0.017], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(toFloat64(number)))"}, {"oldTime": 0.5383, "newTime": 0.5433, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.008, 0.01, 0.02, 0.026], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(number))"}, {"oldTime": 0.6273, "newTime": 0.6345, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.004, 0.011, 0.014, 0.016], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(toFloat32(number)))"}, {"oldTime": 0.6067, "newTime": 0.6069, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.004, 0.018, 0.02], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(toFloat64(number)))"}, {"oldTime": 0.3673, "newTime": 0.3646, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.002, 0.007, 0.018, 0.019], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(number))"}, {"oldTime": 0.4325, "newTime": 0.4331, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.007, 0.008], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(toFloat32(number)))"}, {"oldTime": 0.4405, "newTime": 0.4329, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.0, 0.016, 0.04, 0.041], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(toFloat64(number)))"}, {"oldTime": 0.365, "newTime": 0.3663, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.004, 0.015, 0.018], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(number))"}, {"oldTime": 0.4446, "newTime": 0.4395, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.001, 0.004, 0.013, 0.016], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(toFloat32(number)))"}, {"oldTime": 0.4131, "newTime": 0.4216, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.007, 0.018, 0.039, 0.044], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(toFloat64(number)))"}, {"oldTime": 0.2359, "newTime": 0.2347, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.004, 0.005, 0.015, 0.018], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(number))"}, {"oldTime": 0.1618, "newTime": 0.1648, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.001, 0.014, 0.022, 0.026], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(toFloat32(number)))"}, {"oldTime": 0.2273, "newTime": 0.2276, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.01, 0.024, 0.025], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(toFloat64(number)))"}, {"oldTime": 0.4355, "newTime": 0.4371, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.001, 0.005, 0.027, 0.028], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(number))"}, {"oldTime": 0.4684, "newTime": 0.4727, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.001, 0.009, 0.038, 0.042], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(toFloat32(number)))"}, {"oldTime": 0.495, "newTime": 0.4944, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.01, 0.011], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(toFloat64(number)))"}, {"oldTime": 0.3584, "newTime": 0.3623, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.008, 0.02, 0.027], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(number))"}, {"oldTime": 0.3966, "newTime": 0.3962, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.007, 0.049, 0.056], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(toFloat32(number)))"}, {"oldTime": 0.4269, "newTime": 0.4247, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.005, 0.018, 0.022], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(toFloat64(number)))"}, {"oldTime": 0.2281, "newTime": 0.2287, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.004, 0.012, 0.014], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(number))"}, {"oldTime": 0.1625, "newTime": 0.1596, "relativeDifference": -0.018, "timeSpeed": 1.018, "quantiles": [0.002, 0.008, 0.034, 0.037], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(toFloat32(number)))"}, {"oldTime": 0.2201, "newTime": 0.2218, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.007, 0.02, 0.023], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(toFloat64(number)))"}, {"oldTime": 0.8611, "newTime": 0.8691, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.002, 0.006, 0.014, 0.017], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(number))"}, {"oldTime": 0.8922, "newTime": 0.8899, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.001, 0.005, 0.005], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(toFloat32(number)))"}, {"oldTime": 0.821, "newTime": 0.829, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.005, 0.009, 0.016, 0.017], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(toFloat64(number)))"}, {"oldTime": 0.2083, "newTime": 0.2093, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.004, 0.007, 0.009], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(number))"}, {"oldTime": 0.1562, "newTime": 0.1564, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.009, 0.021, 0.022], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(toFloat32(number)))"}, {"oldTime": 0.2025, "newTime": 0.2025, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.024, 0.026], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(toFloat64(number)))"}, {"oldTime": 0.201, "newTime": 0.2076, "relativeDifference": 0.032, "timeSpeed": 1.032, "quantiles": [0.004, 0.016, 0.031, 0.032], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(number))"}, {"oldTime": 0.2677, "newTime": 0.2651, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.015, 0.022, 0.027], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(toFloat32(number)))"}, {"oldTime": 0.2718, "newTime": 0.2661, "relativeDifference": -0.021, "timeSpeed": 1.021, "quantiles": [0.011, 0.013, 0.028, 0.031], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(toFloat64(number)))"}, {"oldTime": 0.2142, "newTime": 0.2139, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.02, 0.037, 0.052], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(number))"}, {"oldTime": 0.1586, "newTime": 0.1586, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.008, 0.019, 0.022], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(toFloat32(number)))"}, {"oldTime": 0.2103, "newTime": 0.2062, "relativeDifference": -0.02, "timeSpeed": 1.019, "quantiles": [0.003, 0.011, 0.027, 0.027], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(toFloat64(number)))"}, {"oldTime": 0.0646, "newTime": 0.0662, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.001, 0.005, 0.025, 0.03], "testName": "merge_table_streams", "query": "SELECT UserID FROM merge(default, \\'^(hits_100m_single|merge_table_streams_\\\\\\\\d)$\\') WHERE UserID = 12345678901234567890"}, {"oldTime": 0.0022, "newTime": 0.002, "relativeDifference": -0.091, "timeSpeed": 1.099, "quantiles": [0.012, 0.035, 0.064, 0.067], "testName": "merge_tree_huge_pk", "query": "SELECT count() FROM huge_pk WHERE c001 > 10"}, {"oldTime": 0.0573, "newTime": 0.0549, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.012, 0.016, 0.057, 0.08], "testName": "merge_tree_huge_pk", "query": "SELECT count() FROM huge_pk WHERE c001 in (2,3) and c400 in (10,0) and c100 < 2"}, {"oldTime": 0.0097, "newTime": 0.0097, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.005, 0.033, 0.057, 0.071], "testName": "merge_tree_huge_pk", "query": "SELECT count() FROM huge_pk WHERE c700 > 10"}, {"oldTime": 0.0049, "newTime": 0.005, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.026, 0.044, 0.08, 0.087], "testName": "merge_tree_huge_pk", "query": "SELECT count() FROM huge_pk WHERE c701 > 10"}, {"oldTime": 0.0008, "newTime": 0.0008, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.005, 0.038, 0.148, 0.173], "testName": "merge_tree_many_partitions", "query": "SELECT count() FROM bad_partitions"}, {"oldTime": 0.2043, "newTime": 0.2061, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.004, 0.008, 0.014, 0.019], "testName": "merge_tree_many_partitions_2", "query": "SELECT sum(ignore(*)) FROM bad_partitions"}, {"oldTime": 0.0006, "newTime": 0.0007, "relativeDifference": 0.166, "timeSpeed": 1.166, "quantiles": [0.124, 0.189, 0.431, 0.474], "testName": "merge_tree_simple_select", "query": "SELECT count() FROM simple_mergetree"}, {"oldTime": 0.0209, "newTime": 0.0224, "relativeDifference": 0.071, "timeSpeed": 1.071, "quantiles": [0.065, 0.103, 0.249, 0.267], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         group by key format Null;\\n    "}, {"oldTime": 0.0449, "newTime": 0.0478, "relativeDifference": 0.064, "timeSpeed": 1.064, "quantiles": [0.064, 0.091, 0.349, 0.404], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 0.0127, "newTime": 0.0104, "relativeDifference": -0.182, "timeSpeed": 1.221, "quantiles": [0.011, 0.182, 0.244, 0.278], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_11111_key_value\\n         group by key format Null;\\n    "}, {"oldTime": 0.0259, "newTime": 0.0288, "relativeDifference": 0.111, "timeSpeed": 1.111, "quantiles": [0.095, 0.105, 0.138, 0.144], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_11111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 0.0919, "newTime": 0.1027, "relativeDifference": 0.117, "timeSpeed": 1.117, "quantiles": [0.099, 0.129, 0.173, 0.183], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.298, "newTime": 0.3006, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.004, 0.007, 0.025, 0.028], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.0849, "newTime": 0.0802, "relativeDifference": -0.056, "timeSpeed": 1.058, "quantiles": [0.0, 0.025, 0.06, 0.069], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_11111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.4362, "newTime": 0.4327, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.008, 0.011, 0.018, 0.018], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_11111_tuple\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.1831, "newTime": 0.1841, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.001, 0.003, 0.007, 0.009], "testName": "ngram_distance", "query": "SELECT ngramDistance(Title, \\'baby dont hurt me\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.1817, "newTime": 0.1806, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.005, 0.009, 0.011], "testName": "ngram_distance", "query": "SELECT ngramDistance(Title, \\'no more\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.1814, "newTime": 0.181, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.004, 0.015, 0.022], "testName": "ngram_distance", "query": "SELECT ngramDistance(Title, \\'what is love\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.1979, "newTime": 0.1975, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.005, 0.01, 0.011], "testName": "ngram_distance", "query": "SELECT ngramDistance(Title, SearchPhrase) AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.2524, "newTime": 0.2508, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.002, 0.004, 0.008, 0.01], "testName": "ngram_distance", "query": "SELECT ngramDistance(Title, URL) AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.199, "newTime": 0.1999, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.003, 0.004, 0.008, 0.008], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitive(Title, \\'BABY DonT hUrT me\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.2006, "newTime": 0.2024, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.0, 0.005, 0.011, 0.012], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitive(Title, \\'nO MOrE\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.2006, "newTime": 0.1994, "relativeDifference": -0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.003, 0.005, 0.006], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitive(Title, \\'wHAt Is lovE\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3473, "newTime": 0.3478, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.001, 0.007, 0.008], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitiveUTF8(Title, \\'\u041c\u0435\u0442\u0440\u0438\u043a\u0430\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3623, "newTime": 0.3611, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.002, 0.013, 0.013], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitiveUTF8(URL, \\'\u0427\u0435\u043c \u0437\u0410\u043d\u0438\u043c\u0430\u0435\u0448\u042c\u0441\u044f\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3633, "newTime": 0.3658, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.002, 0.003, 0.01, 0.015], "testName": "ngram_distance", "query": "SELECT ngramDistanceCaseInsensitiveUTF8(URL, \\'\u043a\u0430\u043a \u0434\u0415\u043b\u0410\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3341, "newTime": 0.3337, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.006, 0.006], "testName": "ngram_distance", "query": "SELECT ngramDistanceUTF8(Title, \\'\u043c\u0435\u0442\u0440\u0438\u043a\u0430\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3523, "newTime": 0.3512, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.009, 0.012], "testName": "ngram_distance", "query": "SELECT ngramDistanceUTF8(Title, SearchPhrase) AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.5006, "newTime": 0.5008, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.002, 0.008, 0.008], "testName": "ngram_distance", "query": "SELECT ngramDistanceUTF8(Title, URL) AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3507, "newTime": 0.3477, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.001, 0.005, 0.01, 0.012], "testName": "ngram_distance", "query": "SELECT ngramDistanceUTF8(URL, \\'\u043a\u0430\u043a \u0434\u0435\u043b\u0430\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.3479, "newTime": 0.3524, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.001, 0.004, 0.012, 0.015], "testName": "ngram_distance", "query": "SELECT ngramDistanceUTF8(URL, \\'\u0447\u0435\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0448\u044c\u0441\u044f\\') AS distance FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.1046, "newTime": 0.1053, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.004, 0.005, 0.015, 0.017], "testName": "order_by_decimals", "query": "SELECT toDecimal128(number, 10) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null"}, {"oldTime": 0.07, "newTime": 0.0697, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.004, 0.015, 0.022], "testName": "order_by_decimals", "query": "SELECT toDecimal32(number, 0) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null"}, {"oldTime": 0.0663, "newTime": 0.066, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.004, 0.01, 0.012], "testName": "order_by_decimals", "query": "SELECT toDecimal32(number, 0) AS n FROM numbers(1000000) ORDER BY n FORMAT Null"}, {"oldTime": 0.07, "newTime": 0.0688, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.004, 0.008, 0.017, 0.019], "testName": "order_by_decimals", "query": "SELECT toDecimal64(number, 8) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null"}, {"oldTime": 0.0375, "newTime": 0.0368, "relativeDifference": -0.019, "timeSpeed": 1.019, "quantiles": [0.008, 0.013, 0.021, 0.022], "testName": "order_by_decimals", "query": "SELECT toInt32(number) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null"}, {"oldTime": 0.1324, "newTime": 0.1286, "relativeDifference": -0.029, "timeSpeed": 1.029, "quantiles": [0.029, 0.041, 0.056, 0.062], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single ORDER BY CounterID DESC, toStartOfWeek(EventDate) DESC LIMIT 100"}, {"oldTime": 0.1207, "newTime": 0.1149, "relativeDifference": -0.049, "timeSpeed": 1.05, "quantiles": [0.012, 0.042, 0.066, 0.068], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate LIMIT 100"}, {"oldTime": 0.4121, "newTime": 0.3855, "relativeDifference": -0.065, "timeSpeed": 1.069, "quantiles": [0.006, 0.05, 0.076, 0.089], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate, URL LIMIT 100"}, {"oldTime": 0.0704, "newTime": 0.07, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.004, 0.007, 0.039, 0.055], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single WHERE CounterID IN (152220, 168777, 149234, 149234) ORDER BY CounterID DESC, EventDate DESC LIMIT 100"}, {"oldTime": 0.0644, "newTime": 0.0628, "relativeDifference": -0.025, "timeSpeed": 1.025, "quantiles": [0.01, 0.023, 0.036, 0.038], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single WHERE UserID=1988954671305023629 ORDER BY CounterID, EventDate LIMIT 100"}, {"oldTime": 0.1009, "newTime": 0.1008, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.001, 0.004, 0.012, 0.013], "testName": "order_by_single_column", "query": "SELECT MobilePhoneModel as col FROM hits_100m_single ORDER BY col LIMIT 20000,1"}, {"oldTime": 0.0555, "newTime": 0.0589, "relativeDifference": 0.061, "timeSpeed": 1.061, "quantiles": [0.004, 0.017, 0.063, 0.08], "testName": "order_by_single_column", "query": "SELECT MobilePhoneModel as col FROM hits_100m_single WHERE notEmpty(col) ORDER BY col LIMIT 500000,1"}, {"oldTime": 0.1167, "newTime": 0.1181, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.0, 0.009, 0.023, 0.025], "testName": "order_by_single_column", "query": "SELECT PageCharset as col FROM hits_100m_single ORDER BY col LIMIT 10000,1"}, {"oldTime": 0.1364, "newTime": 0.1363, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.006, 0.02, 0.025], "testName": "order_by_single_column", "query": "SELECT SearchPhrase as col FROM hits_100m_single ORDER BY col LIMIT 10000,1"}, {"oldTime": 0.1794, "newTime": 0.1789, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.004, 0.017, 0.022], "testName": "order_by_single_column", "query": "SELECT SearchPhrase as col FROM hits_100m_single WHERE notEmpty(col) ORDER BY col LIMIT 10000,1"}, {"oldTime": 0.3586, "newTime": 0.3526, "relativeDifference": -0.017, "timeSpeed": 1.017, "quantiles": [0.004, 0.013, 0.022, 0.026], "testName": "order_by_single_column", "query": "SELECT Title as col FROM hits_100m_single ORDER BY col LIMIT 1000,1"}, {"oldTime": 0.4309, "newTime": 0.4296, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.009, 0.009], "testName": "order_by_single_column", "query": "SELECT URL as col FROM hits_100m_single ORDER BY col LIMIT 1000,1"}, {"oldTime": 1.2197, "newTime": 1.2099, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.007, 0.014, 0.031, 0.037], "testName": "parallel_insert", "query": "\\n        INSERT INTO hits2\\n        SELECT CounterID, EventDate, UserID, Title\\n        FROM hits_10m_single\\n    "}, {"oldTime": 0.063, "newTime": 0.063, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.007, 0.027, 0.039], "testName": "pre_limit_no_sorting", "query": "SELECT sum(number) FROM (select number from system.numbers_mt limit 1000000000)"}, {"oldTime": 0.6912, "newTime": 0.6886, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.004, 0.01, 0.01], "testName": "prewhere", "query": "SELECT Title FROM hits_10m_single PREWHERE WatchID % 2 = 1 WHERE UserID = 10000 FORMAT Null"}, {"oldTime": 0.19, "newTime": 0.1791, "relativeDifference": -0.058, "timeSpeed": 1.06, "quantiles": [0.012, 0.027, 0.061, 0.066], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(10000) WHERE NOT ignore(randomPrintableASCII(10000))"}, {"oldTime": 0.2079, "newTime": 0.2008, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.003, 0.02, 0.033, 0.035], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(100000) WHERE NOT ignore(randomPrintableASCII(1000))"}, {"oldTime": 0.0189, "newTime": 0.0187, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.001, 0.011, 0.039, 0.055], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(10))"}, {"oldTime": 0.1381, "newTime": 0.1311, "relativeDifference": -0.051, "timeSpeed": 1.053, "quantiles": [0.009, 0.043, 0.055, 0.061], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(100))"}, {"oldTime": 0.6857, "newTime": 0.7075, "relativeDifference": 0.031, "timeSpeed": 1.031, "quantiles": [0.011, 0.026, 0.049, 0.056], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(rand() % 1000))"}, {"oldTime": 0.1437, "newTime": 0.1465, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.011, 0.019, 0.04, 0.042], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(randomPrintableASCII(rand() % 10))"}, {"oldTime": 0.6896, "newTime": 0.6784, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.0, 0.013, 0.026, 0.036], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(randomPrintableASCII(rand() % 100))"}, {"oldTime": 0.2556, "newTime": 0.2528, "relativeDifference": -0.011, "timeSpeed": 1.011, "quantiles": [0.006, 0.01, 0.014, 0.015], "testName": "range", "query": "SELECT range(0, number % 100, 1) FROM numbers(10000000) FORMAT Null"}, {"oldTime": 0.1159, "newTime": 0.1168, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.005, 0.007, 0.018, 0.026], "testName": "range", "query": "SELECT range(number % 100)       FROM numbers(10000000) FORMAT Null"}, {"oldTime": 0.1355, "newTime": 0.1333, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.016, 0.018, 0.062, 0.075], "testName": "read_hits_with_aio", "query": "SELECT count() FROM hits_100m_single where EventDate between toDate(\\'2013-07-10\\') and toDate(\\'2013-07-16\\') and UserID=123 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 0, max_read_buffer_size = 10485760;"}, {"oldTime": 0.1709, "newTime": 0.1734, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.002, 0.01, 0.018, 0.021], "testName": "read_hits_with_aio", "query": "SELECT count() FROM hits_100m_single where EventDate between toDate(\\'2013-07-10\\') and toDate(\\'2013-07-16\\') and UserID=123 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 1, max_read_buffer_size = 10485760;"}, {"oldTime": 0.2776, "newTime": 0.2757, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.004, 0.006, 0.039, 0.052], "testName": "read_hits_with_aio", "query": "SELECT count() FROM hits_100m_single where UserID=1234567890 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 0, max_read_buffer_size = 10485760;"}, {"oldTime": 0.2526, "newTime": 0.2519, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.0, 0.003, 0.026, 0.027], "testName": "read_hits_with_aio", "query": "SELECT count() FROM hits_100m_single where UserID=1234567890 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 1, max_read_buffer_size = 10485760;"}, {"oldTime": 0.2697, "newTime": 0.2706, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.02, 0.032, 0.034], "testName": "right", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(right(URL, 16))"}, {"oldTime": 0.3066, "newTime": 0.3149, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.0, 0.022, 0.048, 0.051], "testName": "right", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(substring(URL, greatest(minus(plus(length(URL), 1), 16), 1)))"}, {"oldTime": 1.1995, "newTime": 1.1853, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.003, 0.007, 0.012, 0.013], "testName": "round_down", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(roundDown(rand() % 65536, (SELECT groupArray(number) FROM numbers(65536))))"}, {"oldTime": 0.0599, "newTime": 0.0609, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.001, 0.01, 0.02, 0.023], "testName": "round_down", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundAge(rand() % 100))"}, {"oldTime": 0.0965, "newTime": 0.0964, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.003, 0.014, 0.022], "testName": "round_down", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDown(rand() % 100, [0, 1, 18, 25, 35, 45, 55]))"}, {"oldTime": 0.0911, "newTime": 0.0907, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.003, 0.008, 0.008], "testName": "round_down", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDown(rand() % 65536, [0, 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000]))"}, {"oldTime": 0.0586, "newTime": 0.059, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.003, 0.007, 0.017, 0.02], "testName": "round_down", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDuration(rand() % 65536))"}, {"oldTime": 0.0148, "newTime": 0.0148, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.003, 0.012, 0.039, 0.051], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toDecimal128(number, 0), -2))"}, {"oldTime": 0.003, "newTime": 0.0036, "relativeDifference": 0.199, "timeSpeed": 1.199, "quantiles": [0.01, 0.107, 0.188, 0.207], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toFloat64(number), -2))"}, {"oldTime": 0.0037, "newTime": 0.0035, "relativeDifference": -0.055, "timeSpeed": 1.057, "quantiles": [0.006, 0.065, 0.125, 0.152], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toInt64(number), -2))"}, {"oldTime": 0.0139, "newTime": 0.0138, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.01, 0.023, 0.05, 0.05], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toDecimal128(number, 0), -2))"}, {"oldTime": 0.0031, "newTime": 0.0028, "relativeDifference": -0.097, "timeSpeed": 1.107, "quantiles": [0.007, 0.048, 0.105, 0.113], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toFloat64(number), -2))"}, {"oldTime": 0.0041, "newTime": 0.0037, "relativeDifference": -0.098, "timeSpeed": 1.108, "quantiles": [0.027, 0.079, 0.137, 0.174], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toInt64(number), -2))"}, {"oldTime": 0.0142, "newTime": 0.0145, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.003, 0.024, 0.07, 0.079], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toDecimal128(number, 0), -2))"}, {"oldTime": 0.003, "newTime": 0.0027, "relativeDifference": -0.1, "timeSpeed": 1.111, "quantiles": [0.011, 0.05, 0.18, 0.205], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toFloat64(number), -2))"}, {"oldTime": 0.0034, "newTime": 0.0035, "relativeDifference": 0.029, "timeSpeed": 1.029, "quantiles": [0.035, 0.101, 0.168, 0.182], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toInt64(number), -2))"}, {"oldTime": 0.0151, "newTime": 0.0151, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.004, 0.007, 0.029, 0.032], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toDecimal128(number, 0), -2))"}, {"oldTime": 0.0029, "newTime": 0.0031, "relativeDifference": 0.068, "timeSpeed": 1.068, "quantiles": [0.042, 0.065, 0.152, 0.194], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toFloat64(number), -2))"}, {"oldTime": 0.0038, "newTime": 0.0039, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.017, 0.023, 0.046, 0.064], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toInt64(number), -2))"}, {"oldTime": 0.0132, "newTime": 0.0131, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.007, 0.017, 0.083, 0.088], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toDecimal128(number, 0), -2))"}, {"oldTime": 0.0029, "newTime": 0.0028, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.015, 0.146, 0.211, 0.219], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toFloat64(number), -2))"}, {"oldTime": 0.0033, "newTime": 0.0032, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.044, 0.068, 0.112, 0.123], "testName": "round_methods", "query": "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toInt64(number), -2))"}, {"oldTime": 0.0626, "newTime": 0.0625, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.021, 0.044, 0.045], "testName": "scalar", "query": "WITH (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag1\\') AS bm1, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag2\\') AS bm2, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag3\\') AS bm3, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag4\\') AS bm4, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag5\\') AS bm5, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag6\\') AS bm6, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag7\\') AS bm7, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag8\\') AS bm8, toDateTime(\\'2000-01-01 00:00:00\\') AS ts_begin, addSeconds(toDateTime(\\'2000-01-01 00:00:00\\'), 1e8) AS ts_end SELECT multiIf(bitmapContains(bm1, mid_seq), 1, bitmapContains(bm2, mid_seq), 2, bitmapContains(bm3, mid_seq), 3, bitmapContains(bm4, mid_seq), 4, bitmapContains(bm5, mid_seq), 5, bitmapContains(bm6, mid_seq), 6, bitmapContains(bm7, mid_seq), 7, bitmapContains(bm8, mid_seq), 8, 0) AS tag, count() AS gc, sum(order_total_sales) AS total FROM cdp_orders PREWHERE order_complete_time >= ts_begin AND order_complete_time < ts_end GROUP BY tag ORDER BY tag"}, {"oldTime": 0.0729, "newTime": 0.0706, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.009, 0.03, 0.064, 0.075], "testName": "set_hits", "query": "SELECT count() FROM hits_100m_single WHERE UserID IN (SELECT UserID FROM hits_100m_single WHERE AdvEngineID != 0)"}, {"oldTime": 0.0444, "newTime": 0.0439, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.01, 0.011, 0.029, 0.031], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE RegionID IN (SELECT RegionID FROM hits_10m_single)"}, {"oldTime": 0.2783, "newTime": 0.2794, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.005, 0.013, 0.015], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE SearchPhrase IN (SELECT SearchPhrase FROM hits_10m_single)"}, {"oldTime": 0.0895, "newTime": 0.0908, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.003, 0.011, 0.024, 0.03], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE URL IN (SELECT URL FROM hits_10m_single WHERE AdvEngineID != 0)"}, {"oldTime": 0.3271, "newTime": 0.3235, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.002, 0.005, 0.015, 0.022], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE URL IN (SELECT URL FROM hits_10m_single WHERE SearchEngineID != 0)"}, {"oldTime": 0.1422, "newTime": 0.1422, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.007, 0.024, 0.029], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE UserID IN (SELECT UserID FROM hits_10m_single)"}, {"oldTime": 0.0181, "newTime": 0.0221, "relativeDifference": 0.22, "timeSpeed": 1.22, "quantiles": [0.001, 0.032, 0.481, 0.5], "testName": "set_index", "query": "SELECT count() FROM numbers(1000) WHERE toString(number) IN (\\'41577\\', \\'83972\\', \\'51697\\', \\'50014\\', \\'37553\\', \\'93459\\', \\'87438\\', \\'95971\\', \\'83186\\', \\'74326\\', \\'67871\\', \\'50406\\', \\'83678\\', \\'29655\\', \\'18580\\', \\'83905\\', \\'61518\\', \\'29059\\', \\'56700\\', \\'82787\\', \\'98672\\', \\'30884\\', \\'81822\\', \\'39850\\', \\'80852\\', \\'57627\\', \\'91346\\', \\'64522\\', \\'17781\\', \\'49467\\', \\'41099\\', \\'41929\\', \\'85618\\', \\'91389\\', \\'68564\\', \\'91769\\', \\'81219\\', \\'52218\\', \\'37220\\', \\'97097\\', \\'2129\\', \\'9886\\', \\'52049\\', \\'34847\\', \\'25364\\', \\'36429\\', \\'76897\\', \\'71868\\', \\'58121\\', \\'71199\\', \\'84819\\', \\'69991\\', \\'34046\\', \\'64507\\', \\'34892\\', \\'24228\\', \\'36986\\', \\'28588\\', \\'51159\\', \\'53444\\', \\'80531\\', \\'9941\\', \\'20256\\', \\'48103\\', \\'32565\\', \\'62890\\', \\'5379\\', \\'60302\\', \\'46434\\', \\'3205\\', \\'18821\\', \\'31030\\', \\'19794\\', \\'71557\\', \\'71703\\', \\'15024\\', \\'14004\\', \\'82164\\', \\'95659\\', \\'40227\\', \\'83358\\', \\'24395\\', \\'9610\\', \\'19814\\', \\'48491\\', \\'66412\\', \\'16012\\', \\'71586\\', \\'42143\\', \\'51103\\', \\'24463\\', \\'89949\\', \\'35694\\', \\'39193\\', \\'63904\\', \\'40489\\', \\'77144\\', \\'94014\\', \\'84836\\', \\'9980\\', \\'46554\\', \\'43905\\', \\'25588\\', \\'25205\\', \\'72624\\', \\'10249\\', \\'35888\\', \\'98478\\', \\'99030\\', \\'26834\\', \\'31\\', \\'81499\\', \\'14847\\', \\'82997\\', \\'92357\\', \\'92893\\', \\'17426\\', \\'56630\\', \\'22252\\', \\'68119\\', \\'62710\\', \\'8740\\', \\'82144\\', \\'79916\\', \\'23391\\', \\'30192\\', \\'99271\\', \\'96435\\', \\'44237\\', \\'98327\\', \\'69481\\', \\'16691\\', \\'13643\\', \\'84554\\', \\'38571\\', \\'70926\\', \\'99283\\', \\'79000\\', \\'20926\\', \\'86495\\', \\'4834\\', \\'1222\\', \\'39486\\', \\'57697\\', \\'58002\\', \\'40790\\', \\'15623\\', \\'3999\\', \\'31515\\', \\'12694\\', \\'26143\\', \\'35951\\', \\'54085\\', \\'97534\\', \\'35329\\', \\'73535\\', \\'88715\\', \\'29572\\', \\'75799\\', \\'45166\\', \\'32066\\', \\'48023\\', \\'69523\\', \\'93150\\', \\'8740\\', \\'96790\\', \\'15534\\', \\'63252\\', \\'5142\\', \\'67045\\', \\'93992\\', \\'16663\\', \\'292\\', \\'63924\\', \\'6588\\', \\'12190\\', \\'31506\\', \\'69590\\', \\'35394\\', \\'55168\\', \\'65223\\', \\'79183\\', \\'32600\\', \\'69676\\', \\'28316\\', \\'72111\\', \\'53531\\', \\'15073\\', \\'41127\\', \\'73451\\', \\'24725\\', \\'61647\\', \\'65315\\', \\'41143\\', \\'26493\\', \\'95608\\', \\'34407\\', \\'76098\\', \\'53105\\', \\'83691\\', \\'48755\\', \\'35696\\', \\'62587\\', \\'81826\\', \\'3963\\', \\'45766\\', \\'82751\\', \\'12430\\', \\'97685\\', \\'29919\\', \\'78155\\', \\'71636\\', \\'50215\\', \\'89734\\', \\'9892\\', \\'47151\\', \\'54855\\', \\'3428\\', \\'9712\\', \\'52592\\', \\'2403\\', \\'79602\\', \\'81243\\', \\'79859\\', \\'57361\\', \\'82000\\', \\'42107\\', \\'28860\\', \\'99591\\', \\'28296\\', \\'57337\\', \\'64969\\', \\'32332\\', \\'25535\\', \\'30924\\', \\'21313\\', \\'32554\\', \\'17342\\', \\'87311\\', \\'19825\\', \\'24898\\', \\'61323\\', \\'83209\\', \\'79322\\', \\'79009\\', \\'50746\\', \\'33396\\', \\'62033\\', \\'16548\\', \\'17427\\', \\'24073\\', \\'34640\\', \\'52368\\', \\'4724\\', \\'80408\\', \\'40\\', \\'33787\\', \\'16666\\', \\'19665\\', \\'86751\\', \\'27264\\', \\'2241\\', \\'88134\\', \\'53566\\', \\'10589\\', \\'79711\\', \\'92823\\', \\'58972\\', \\'91767\\', \\'60885\\', \\'51659\\', \\'7867\\', \\'96849\\', \\'30360\\', \\'20914\\', \\'9584\\', \\'1250\\', \\'22871\\', \\'23282\\', \\'99312\\', \\'4683\\', \\'33429\\', \\'68361\\', \\'82614\\', \\'81440\\', \\'47863\\', \\'69790\\', \\'11968\\', \\'75210\\', \\'66854\\', \\'37002\\', \\'61142\\', \\'71514\\', \\'1588\\', \\'42336\\', \\'11069\\', \\'26291\\', \\'2261\\', \\'71056\\', \\'13492\\', \\'9133\\', \\'91216\\', \\'72207\\', \\'71586\\', \\'86535\\', \\'83898\\', \\'24392\\', \\'45384\\', \\'48545\\', \\'61972\\', \\'503\\', \\'80180\\', \\'35834\\', \\'97025\\', \\'70411\\', \\'55039\\', \\'35430\\', \\'27631\\', \\'82533\\', \\'96831\\', \\'74077\\', \\'42533\\', \\'14451\\', \\'26943\\', \\'53783\\', \\'69489\\', \\'71969\\', \\'8432\\', \\'37230\\', \\'61348\\', \\'19472\\', \\'59115\\', \\'9886\\', \\'50951\\', \\'57109\\', \\'7141\\', \\'1902\\', \\'84130\\', \\'4323\\', \\'55889\\', \\'47784\\', \\'2220\\', \\'75988\\', \\'66988\\', \\'63721\\', \\'8131\\', \\'95601\\', \\'95207\\', \\'2311\\', \\'26541\\', \\'50991\\', \\'6717\\', \\'2969\\', \\'71857\\', \\'51034\\', \\'65958\\', \\'94716\\', \\'90275\\', \\'21012\\', \\'46859\\', \\'7984\\', \\'31131\\', \\'46457\\', \\'69578\\', \\'44540\\', \\'7294\\', \\'80117\\', \\'9925\\', \\'60155\\', \\'90608\\', \\'82684\\', \\'32193\\', \\'87071\\', \\'28006\\', \\'87604\\', \\'24501\\', \\'79087\\', \\'2848\\', \\'29237\\', \\'11221\\', \\'81319\\', \\'40966\\', \\'87641\\', \\'35325\\', \\'78705\\', \\'88636\\', \\'78717\\', \\'62831\\', \\'56390\\', \\'99271\\', \\'43821\\', \\'14453\\', \\'17923\\', \\'62695\\', \\'77322\\', \\'21038\\', \\'67677\\', \\'41271\\', \\'4376\\', \\'65426\\', \\'46091\\', \\'19887\\', \\'97251\\', \\'55583\\', \\'58763\\', \\'3826\\', \\'35037\\', \\'73533\\', \\'64267\\', \\'82319\\', \\'9836\\', \\'42622\\', \\'96829\\', \\'16363\\', \\'10455\\', \\'49290\\', \\'99992\\', \\'98229\\', \\'66356\\', \\'59087\\', \\'73998\\', \\'25986\\', \\'4279\\', \\'56790\\', \\'69540\\', \\'588\\', \\'36620\\', \\'60358\\', \\'45056\\', \\'89297\\', \\'42740\\', \\'8323\\', \\'19245\\', \\'82417\\', \\'41431\\', \\'699\\', \\'11554\\', \\'73910\\', \\'44491\\', \\'56019\\', \\'68901\\', \\'45816\\', \\'68126\\', \\'89379\\', \\'23885\\', \\'13263\\', \\'56395\\', \\'73130\\', \\'19089\\', \\'23771\\', \\'10335\\', \\'48547\\', \\'16903\\', \\'6453\\', \\'33560\\', \\'89668\\', \\'38159\\', \\'43177\\', \\'90655\\', \\'49712\\', \\'62\\', \\'66920\\', \\'34180\\', \\'12150\\', \\'48564\\', \\'39538\\', \\'85026\\', \\'87195\\', \\'14928\\', \\'8956\\', \\'71157\\', \\'53287\\', \\'39161\\', \\'67583\\', \\'83309\\', \\'92054\\', \\'86977\\', \\'56188\\', \\'15229\\', \\'88170\\', \\'60894\\', \\'58497\\', \\'89254\\', \\'40082\\', \\'86890\\', \\'60161\\', \\'97291\\', \\'45878\\', \\'23368\\', \\'14577\\', \\'92870\\', \\'37017\\', \\'97356\\', \\'99426\\', \\'76061\\', \\'89186\\', \\'99751\\', \\'85153\\', \\'61580\\', \\'39360\\', \\'90107\\', \\'25603\\', \\'26798\\', \\'76224\\', \\'6469\\', \\'7912\\', \\'69838\\', \\'16404\\', \\'67497\\', \\'28965\\', \\'80836\\', \\'80365\\', \\'91249\\', \\'48713\\', \\'17113\\', \\'33090\\', \\'40793\\', \\'70450\\', \\'66689\\', \\'83698\\', \\'17802\\', \\'43869\\', \\'13355\\', \\'18959\\', \\'79411\\', \\'87930\\', \\'9265\\', \\'37504\\', \\'44876\\', \\'97234\\', \\'94149\\', \\'35040\\', \\'22049\\', \\'49248\\', \\'6535\\', \\'36080\\', \\'28346\\', \\'94437\\', \\'78319\\', \\'17961\\', \\'89056\\', \\'56161\\', \\'35810\\', \\'41632\\', \\'45494\\', \\'53351\\', \\'89729\\', \\'99510\\', \\'51584\\', \\'59688\\', \\'6193\\', \\'70809\\', \\'51093\\', \\'92589\\', \\'90247\\', \\'34910\\', \\'78235\\', \\'17362\\', \\'49423\\', \\'63324\\', \\'525\\', \\'37638\\', \\'72325\\', \\'89356\\', \\'15298\\', \\'59116\\', \\'17848\\', \\'65429\\', \\'27029\\', \\'84781\\', \\'70247\\', \\'8825\\', \\'35082\\', \\'70451\\', \\'22522\\', \\'58125\\', \\'91879\\', \\'90531\\', \\'2478\\', \\'463\\', \\'37902\\', \\'54405\\', \\'87267\\', \\'72688\\', \\'22803\\', \\'33134\\', \\'35177\\', \\'84551\\', \\'44974\\', \\'88375\\', \\'76407\\', \\'27774\\', \\'33849\\', \\'19915\\', \\'82014\\', \\'80434\\', \\'26380\\', \\'48777\\', \\'53811\\', \\'14838\\', \\'26829\\', \\'56441\\', \\'99869\\', \\'49574\\', \\'85476\\', \\'19723\\', \\'16907\\', \\'4018\\', \\'37338\\', \\'78510\\', \\'47912\\', \\'13030\\', \\'65277\\', \\'95716\\', \\'67363\\', \\'21393\\', \\'89887\\', \\'78842\\', \\'81650\\', \\'903\\', \\'17436\\', \\'30704\\', \\'49223\\', \\'27198\\', \\'25500\\', \\'52214\\', \\'54258\\', \\'70082\\', \\'53950\\', \\'49312\\', \\'43615\\', \\'99473\\', \\'94348\\', \\'53661\\', \\'96213\\', \\'96346\\', \\'62010\\', \\'38268\\', \\'32861\\', \\'75660\\', \\'10392\\', \\'89491\\', \\'68335\\', \\'29817\\', \\'88706\\', \\'24184\\', \\'36298\\', \\'43440\\', \\'21626\\', \\'26535\\', \\'44560\\', \\'46363\\', \\'12534\\', \\'99070\\', \\'95606\\', \\'33714\\', \\'73070\\', \\'8303\\', \\'29853\\', \\'23014\\', \\'99982\\', \\'4530\\', \\'14955\\', \\'45803\\', \\'50\\', \\'90750\\', \\'30394\\', \\'81276\\', \\'95563\\', \\'47314\\', \\'58520\\', \\'91299\\', \\'88944\\', \\'54402\\', \\'67405\\', \\'29253\\', \\'47079\\', \\'71734\\', \\'99728\\', \\'17652\\', \\'13307\\', \\'35556\\', \\'18962\\', \\'26780\\', \\'17771\\', \\'53712\\', \\'60055\\', \\'37628\\', \\'35830\\', \\'90739\\', \\'61151\\', \\'41309\\', \\'27652\\', \\'3051\\', \\'53167\\', \\'98417\\', \\'19382\\', \\'36833\\', \\'75085\\', \\'65374\\', \\'87732\\', \\'30352\\', \\'31776\\', \\'32765\\', \\'97565\\', \\'92199\\', \\'49050\\', \\'29503\\', \\'51024\\', \\'18834\\', \\'8515\\', \\'24069\\', \\'96216\\', \\'10777\\', \\'90680\\', \\'18974\\', \\'68884\\', \\'85305\\', \\'36007\\', \\'56707\\', \\'4212\\', \\'47352\\', \\'34426\\', \\'13185\\', \\'92939\\', \\'95782\\', \\'70577\\', \\'58080\\', \\'98279\\', \\'3906\\', \\'5065\\', \\'56896\\', \\'16382\\', \\'31273\\', \\'17117\\', \\'98602\\', \\'12786\\', \\'24086\\', \\'63970\\', \\'72756\\', \\'35798\\', \\'82367\\', \\'7356\\', \\'53398\\', \\'68503\\', \\'2962\\', \\'16425\\', \\'67334\\', \\'68461\\', \\'65439\\', \\'15620\\', \\'70906\\', \\'29649\\', \\'46461\\', \\'74602\\', \\'38012\\', \\'71714\\', \\'16825\\', \\'89480\\', \\'53386\\', \\'88532\\', \\'35104\\', \\'28556\\', \\'82120\\', \\'23155\\', \\'23347\\', \\'24797\\', \\'60061\\', \\'54962\\', \\'99427\\', \\'82248\\', \\'82447\\', \\'39968\\', \\'63727\\', \\'27431\\', \\'81511\\', \\'91168\\', \\'71425\\', \\'80740\\', \\'84127\\', \\'40717\\', \\'15503\\', \\'15419\\', \\'46594\\', \\'61263\\', \\'19212\\', \\'53175\\', \\'70724\\', \\'74445\\', \\'23034\\', \\'71818\\', \\'40246\\', \\'18886\\', \\'53066\\', \\'4880\\', \\'83701\\', \\'86107\\', \\'87862\\', \\'44751\\', \\'392\\', \\'73440\\', \\'90291\\', \\'93395\\', \\'20894\\', \\'38463\\', \\'32664\\', \\'55158\\', \\'20090\\', \\'50004\\', \\'79070\\', \\'98471\\', \\'85478\\', \\'96615\\', \\'68149\\', \\'78334\\', \\'97752\\', \\'73207\\', \\'71678\\', \\'91238\\', \\'96757\\', \\'82598\\', \\'194\\', \\'35797\\', \\'45120\\', \\'60782\\', \\'28721\\', \\'17676\\', \\'78066\\', \\'60957\\', \\'11826\\', \\'51563\\', \\'50516\\', \\'16485\\', \\'47053\\', \\'31738\\', \\'48923\\', \\'23554\\', \\'96850\\', \\'42033\\', \\'73701\\', \\'78607\\', \\'45979\\', \\'54571\\', \\'12415\\', \\'31693\\', \\'15356\\', \\'36902\\', \\'9126\\', \\'3767\\', \\'3295\\', \\'90402\\', \\'24005\\', \\'95350\\', \\'67033\\', \\'49137\\', \\'72606\\', \\'51899\\', \\'17522\\', \\'31957\\', \\'44641\\', \\'53982\\', \\'23767\\', \\'68257\\', \\'15766\\', \\'19995\\', \\'2107\\', \\'48788\\', \\'11765\\', \\'91055\\', \\'46576\\', \\'54651\\', \\'50381\\', \\'62827\\', \\'73636\\', \\'46606\\', \\'98753\\', \\'37631\\', \\'70441\\', \\'87916\\', \\'66983\\', \\'33870\\', \\'31125\\', \\'12904\\', \\'57040\\', \\'4874\\', \\'58632\\', \\'42037\\', \\'18782\\', \\'5998\\', \\'18974\\', \\'57949\\', \\'81010\\', \\'90407\\', \\'99874\\', \\'20462\\', \\'89949\\', \\'10952\\', \\'71454\\', \\'95130\\', \\'46115\\', \\'3518\\', \\'13384\\', \\'69039\\', \\'79482\\', \\'22076\\', \\'59782\\', \\'32042\\', \\'40930\\', \\'60243\\', \\'29298\\', \\'6790\\', \\'46985\\', \\'44398\\', \\'85631\\', \\'14380\\', \\'66179\\', \\'2629\\', \\'32126\\', \\'49833\\', \\'14118\\', \\'58492\\', \\'31493\\', \\'81172\\', \\'96638\\', \\'8745\\', \\'89663\\', \\'76842\\', \\'78633\\', \\'41373\\', \\'83721\\', \\'42886\\', \\'11123\\', \\'32739\\', \\'11051\\', \\'1303\\', \\'92314\\', \\'83324\\', \\'85600\\', \\'44276\\', \\'69064\\', \\'56125\\', \\'84650\\', \\'31028\\', \\'12628\\', \\'14502\\', \\'64764\\', \\'39405\\', \\'44855\\', \\'79046\\', \\'51716\\', \\'46824\\', \\'83389\\', \\'1941\\', \\'1257\\', \\'9280\\', \\'73176\\', \\'84729\\', \\'2579\\', \\'63366\\', \\'22606\\', \\'35541\\', \\'51096\\', \\'13447\\', \\'18355\\', \\'68037\\', \\'28436\\', \\'94116\\', \\'81070\\', \\'78355\\', \\'67897\\', \\'5296\\', \\'32742\\', \\'77645\\', \\'91853\\', \\'18767\\', \\'67949\\', \\'40963\\', \\'5792\\', \\'17278\\', \\'25597\\', \\'41884\\', \\'80829\\', \\'7099\\', \\'18645\\', \\'60295\\', \\'12082\\', \\'81800\\', \\'78415\\', \\'18082\\', \\'38789\\', \\'16295\\', \\'72377\\', \\'74949\\', \\'55583\\', \\'66853\\', \\'15402\\', \\'72977\\', \\'15123\\', \\'99434\\', \\'34999\\', \\'21687\\', \\'76049\\', \\'42987\\', \\'83748\\', \\'88256\\', \\'66688\\', \\'21766\\', \\'20304\\', \\'29271\\', \\'10069\\', \\'19822\\', \\'11792\\', \\'42526\\', \\'74143\\', \\'17289\\', \\'30253\\', \\'6367\\', \\'20888\\', \\'12975\\', \\'94073\\', \\'98639\\', \\'30134\\', \\'26320\\', \\'65507\\', \\'69002\\', \\'53120\\', \\'4550\\', \\'38893\\', \\'18954\\', \\'38283\\', \\'54863\\', \\'17698\\', \\'99670\\', \\'10521\\', \\'92467\\', \\'60994\\', \\'18052\\', \\'48673\\', \\'35811\\', \\'87282\\', \\'62706\\', \\'16061\\', \\'53112\\', \\'22652\\', \\'37780\\', \\'55662\\', \\'26331\\', \\'49410\\', \\'79074\\', \\'10623\\', \\'69577\\', \\'79613\\', \\'9491\\', \\'31229\\', \\'43922\\', \\'84231\\', \\'58409\\', \\'36386\\', \\'46875\\', \\'74431\\', \\'76735\\', \\'38776\\', \\'23350\\', \\'7314\\', \\'9079\\', \\'51519\\', \\'98544\\', \\'70216\\', \\'63380\\', \\'90381\\', \\'1295\\', \\'46901\\', \\'58225\\', \\'55339\\', \\'89918\\', \\'75522\\', \\'35431\\', \\'89460\\', \\'49552\\', \\'89302\\', \\'23068\\', \\'28493\\', \\'3042\\', \\'25194\\', \\'59520\\', \\'9810\\', \\'95706\\', \\'81297\\', \\'89638\\', \\'54794\\', \\'94527\\', \\'45262\\', \\'97932\\', \\'78685\\', \\'6947\\', \\'22818\\', \\'48700\\', \\'9153\\', \\'12289\\', \\'22011\\', \\'58825\\', \\'93854\\', \\'65438\\', \\'4509\\', \\'33741\\', \\'28208\\', \\'69061\\', \\'48578\\', \\'40247\\', \\'77725\\', \\'31837\\', \\'39003\\', \\'69363\\', \\'78113\\', \\'76398\\', \\'97262\\', \\'67795\\', \\n    \\'68446\\', \\'58896\\', \\'60969\\', \\'19849\\', \\'6722\\', \\'91854\\', \\'49519\\', \\'13949\\', \\'67109\\', \\'48824\\', \\'31723\\', \\'75554\\', \\'69575\\', \\'94986\\', \\'75350\\', \\'18628\\', \\'15284\\', \\'41943\\', \\'15433\\', \\'52607\\', \\'41\\', \\'22340\\', \\'29528\\', \\'24059\\', \\'34145\\', \\'72517\\', \\'46316\\', \\'10667\\', \\'54510\\', \\'19882\\', \\'47764\\', \\'69124\\', \\'41963\\', \\'84350\\', \\'48420\\', \\'4646\\', \\'24958\\', \\'69020\\', \\'97121\\', \\'26178\\', \\'62664\\', \\'50622\\', \\'32554\\', \\'49655\\', \\'45398\\', \\'11267\\', \\'72222\\', \\'73363\\', \\'89554\\', \\'89046\\', \\'57384\\', \\'29259\\', \\'37888\\', \\'24850\\', \\'74353\\', \\'57343\\', \\'34762\\', \\'2900\\', \\'11393\\', \\'42154\\', \\'94306\\', \\'70552\\', \\'75265\\', \\'921\\', \\'26003\\', \\'64352\\', \\'89857\\', \\'83171\\', \\'58249\\', \\'48940\\', \\'53512\\', \\'66335\\', \\'44865\\', \\'68729\\', \\'19299\\', \\'58003\\', \\'39854\\', \\'99122\\', \\'3860\\', \\'80173\\', \\'52242\\', \\'90966\\', \\'53183\\', \\'71982\\', \\'82325\\', \\'87842\\', \\'15000\\', \\'55627\\', \\'71132\\', \\'6354\\', \\'42402\\', \\'91719\\', \\'91644\\', \\'94533\\', \\'74925\\', \\'66278\\', \\'66911\\', \\'85576\\', \\'40495\\', \\'70919\\', \\'71797\\', \\'87835\\', \\'29845\\', \\'71832\\', \\'3390\\', \\'7994\\', \\'33499\\', \\'70715\\', \\'54897\\', \\'82710\\', \\'63077\\', \\'78105\\', \\'24758\\', \\'89585\\', \\'84607\\', \\'46477\\', \\'78618\\', \\'10989\\', \\'39222\\', \\'98749\\', \\'51685\\', \\'94664\\', \\'31008\\', \\'32823\\', \\'89521\\', \\'72160\\', \\'26952\\', \\'4001\\', \\'21421\\', \\'5737\\', \\'74027\\', \\'88179\\', \\'45553\\', \\'83743\\', \\'19913\\', \\'49435\\', \\'65616\\', \\'82641\\', \\'5149\\', \\'76959\\', \\'40681\\', \\'73023\\', \\'2670\\', \\'30845\\', \\'18863\\', \\'35094\\', \\'88400\\', \\'80963\\', \\'9154\\', \\'16571\\', \\'64192\\', \\'59694\\', \\'41317\\', \\'59942\\', \\'58856\\', \\'99281\\', \\'67260\\', \\'66971\\', \\'22716\\', \\'76089\\', \\'58047\\', \\'67071\\', \\'53707\\', \\'462\\', \\'52518\\', \\'72277\\', \\'10681\\', \\'69\\', \\'98855\\', \\'12593\\', \\'88842\\', \\'67242\\', \\'73543\\', \\'37439\\', \\'18413\\', \\'67211\\', \\'93495\\', \\'45576\\', \\'70614\\', \\'27988\\', \\'53210\\', \\'18618\\', \\'21318\\', \\'68059\\', \\'25518\\', \\'55917\\', \\'56522\\', \\'16548\\', \\'2404\\', \\'93538\\', \\'61452\\', \\'66358\\', \\'3709\\', \\'23914\\', \\'92426\\', \\'81439\\', \\'38070\\', \\'28988\\', \\'29939\\', \\'2948\\', \\'85720\\', \\'45628\\', \\'51101\\', \\'89431\\', \\'86365\\', \\'17571\\', \\'50987\\', \\'83849\\', \\'11015\\', \\'83812\\', \\'66187\\', \\'26362\\', \\'66786\\', \\'22024\\', \\'93866\\', \\'36161\\', \\'90080\\', \\'64874\\', \\'37294\\', \\'83860\\', \\'73821\\', \\'80279\\', \\'36766\\', \\'73117\\', \\'44620\\', \\'84556\\', \\'42070\\', \\'90383\\', \\'27862\\', \\'20665\\', \\'67576\\', \\'34997\\', \\'57958\\', \\'80638\\', \\'84351\\', \\'63961\\', \\'1362\\', \\'14338\\', \\'80377\\', \\'24192\\', \\'41294\\', \\'57368\\', \\'51189\\', \\'27287\\', \\'45764\\', \\'86289\\', \\'65600\\', \\'708\\', \\'84090\\', \\'96005\\', \\'55676\\', \\'84855\\', \\'72385\\', \\'70018\\', \\'9336\\', \\'82701\\', \\'3710\\', \\'52083\\', \\'74045\\', \\'96454\\', \\'30956\\', \\'67369\\', \\'78941\\', \\'81810\\', \\'71906\\', \\'23194\\', \\'33042\\', \\'50794\\', \\'61256\\', \\'24449\\', \\'48639\\', \\'22916\\', \\'78303\\', \\'13666\\', \\'40762\\', \\'43942\\', \\'51075\\', \\'89783\\', \\'95786\\', \\'90462\\', \\'6181\\', \\'36482\\', \\'40675\\', \\'4970\\', \\'6388\\', \\'91849\\', \\'72579\\', \\'94983\\', \\'86084\\', \\'20140\\', \\'68427\\', \\'48123\\', \\'43122\\', \\'98066\\', \\'37560\\', \\'6927\\', \\'72803\\', \\'5546\\', \\'62259\\', \\'98439\\', \\'6457\\', \\'98568\\', \\'70499\\', \\'33022\\', \\'28226\\', \\'29675\\', \\'20917\\', \\'75365\\', \\'20900\\', \\'8190\\', \\'56736\\', \\'99153\\', \\'77779\\', \\'49333\\', \\'50293\\', \\'97650\\', \\'4067\\', \\'47278\\', \\'42761\\', \\'71875\\', \\'13966\\', \\'11223\\', \\'46783\\', \\'18059\\', \\'61355\\', \\'29638\\', \\'75681\\', \\'24466\\', \\'89634\\', \\'20759\\', \\'83252\\', \\'37780\\', \\'15931\\', \\'74893\\', \\'6703\\', \\'64524\\', \\'80656\\', \\'85990\\', \\'78427\\', \\'18411\\', \\'20696\\', \\'86432\\', \\'93176\\', \\'69889\\', \\'15072\\', \\'15180\\', \\'9935\\', \\'10467\\', \\'60248\\', \\'42430\\', \\'62590\\', \\'89596\\', \\'27743\\', \\'26398\\', \\'79912\\', \\'60048\\', \\'50943\\', \\'38870\\', \\'69383\\', \\'72261\\', \\'98059\\', \\'55242\\', \\'74905\\', \\'5667\\', \\'54321\\', \\'70415\\', \\'39903\\', \\'49711\\', \\'85318\\', \\'79979\\', \\'59262\\', \\'82321\\', \\'15263\\', \\'17416\\', \\'74554\\', \\'94733\\', \\'72112\\', \\'49872\\', \\'54849\\', \\'73883\\', \\'78250\\', \\'74935\\', \\'68559\\', \\'57564\\', \\'50541\\', \\'45730\\', \\'41595\\', \\'5588\\', \\'83723\\', \\'42891\\', \\'11898\\', \\'14348\\', \\'99732\\', \\'14481\\', \\'85233\\', \\'21277\\', \\'94508\\', \\'52551\\', \\'74187\\', \\'7634\\', \\'42912\\', \\'25100\\', \\'43536\\', \\'35798\\', \\'48190\\', \\'86477\\', \\'22680\\', \\'48148\\', \\'59501\\', \\'56563\\', \\'16802\\', \\'81496\\', \\'97568\\', \\'68657\\', \\'51462\\', \\'67953\\', \\'99660\\', \\'39002\\', \\'54170\\', \\'57190\\', \\'68086\\', \\'52700\\', \\'6487\\', \\'55709\\', \\'70418\\', \\'62629\\', \\'70420\\', \\'35695\\', \\'36152\\', \\'45360\\', \\'53503\\', \\'46623\\', \\'76000\\', \\'50648\\', \\'97876\\', \\'44815\\', \\'29163\\', \\'1356\\', \\'64123\\', \\'71388\\', \\'17658\\', \\'99084\\', \\'58727\\', \\'59437\\', \\'38773\\', \\'71254\\', \\'81286\\', \\'97545\\', \\'18786\\', \\'56834\\', \\'20346\\', \\'36401\\', \\'62316\\', \\'58082\\', \\'67959\\', \\'99876\\', \\'69895\\', \\'80099\\', \\'62747\\', \\'20517\\', \\'99777\\', \\'6472\\', \\'49189\\', \\'31321\\', \\'39992\\', \\'68073\\', \\'13378\\', \\'51806\\', \\'21776\\', \\'52060\\', \\'96983\\', \\'25754\\', \\'93709\\', \\'96627\\', \\'8644\\', \\'93726\\', \\'14002\\', \\'37716\\', \\'87620\\', \\'34507\\', \\'76339\\', \\'24491\\', \\'5849\\', \\'44110\\', \\'522\\', \\'66521\\', \\'12776\\', \\'44887\\', \\'80535\\', \\'14548\\', \\'75248\\', \\'671\\', \\'73071\\', \\'35715\\', \\'59474\\', \\'7061\\', \\'82243\\', \\'56170\\', \\'20179\\', \\'59717\\', \\'1725\\', \\'24634\\', \\'11270\\', \\'77023\\', \\'63840\\', \\'46608\\', \\'44667\\', \\'22422\\', \\'59771\\', \\'94768\\', \\'73033\\', \\'82905\\', \\'16463\\', \\'40971\\', \\'22204\\', \\'58366\\', \\'28721\\', \\'14907\\', \\'76468\\', \\'81872\\', \\'38418\\', \\'36989\\', \\'61439\\', \\'10610\\', \\'131\\', \\'44296\\', \\'35453\\', \\'10117\\', \\'75856\\', \\'94603\\', \\'99602\\', \\'68075\\', \\'35949\\', \\'13599\\', \\'50030\\', \\'69633\\', \\'55956\\', \\'85465\\', \\'16429\\', \\'86081\\', \\'11145\\', \\'6195\\', \\'82207\\', \\'90598\\', \\'92814\\', \\'23725\\', \\'83204\\', \\'80346\\', \\'71542\\', \\'46634\\', \\'15820\\', \\'54123\\', \\'45397\\', \\'15322\\', \\'61743\\', \\'9273\\', \\'71347\\', \\'6835\\', \\'64006\\', \\'91718\\', \\'43677\\', \\'32923\\', \\'21486\\', \\'17098\\', \\'61694\\', \\'43347\\', \\'40019\\', \\'4071\\', \\'52443\\', \\'42386\\', \\'56839\\', \\'83514\\', \\'27633\\', \\'40780\\', \\'51749\\', \\'92101\\', \\'62384\\', \\'92206\\', \\'56044\\', \\'66174\\', \\'11137\\', \\'73966\\', \\'78471\\', \\'30468\\', \\'31643\\', \\'33197\\', \\'6888\\', \\'8066\\', \\'86603\\', \\'74383\\', \\'6098\\', \\'54411\\', \\'98819\\', \\'89862\\', \\'88639\\', \\'94422\\', \\'89371\\', \\'80526\\', \\'91747\\', \\'91220\\', \\'64944\\', \\'76658\\', \\'42046\\', \\'58518\\', \\'27249\\', \\'6646\\', \\'3028\\', \\'1346\\', \\'33763\\', \\'9734\\', \\'31737\\', \\'65527\\', \\'5892\\', \\'60813\\', \\'3410\\', \\'35464\\', \\'43009\\', \\'98382\\', \\'70580\\', \\'93898\\', \\'56404\\', \\'32995\\', \\'62771\\', \\'71556\\', \\'40538\\', \\'55612\\', \\'45656\\', \\'10758\\', \\'20268\\', \\'33603\\', \\'38310\\', \\'14242\\', \\'74397\\', \\'10722\\', \\'71575\\', \\'22590\\', \\'49043\\', \\'91439\\', \\'9055\\', \\'23668\\', \\'9101\\', \\'5268\\', \\'64133\\', \\'77501\\', \\'64684\\', \\'11337\\', \\'47575\\', \\'50732\\', \\'88680\\', \\'93730\\', \\'46785\\', \\'17589\\', \\'3520\\', \\'57595\\', \\'71241\\', \\'34994\\', \\'8753\\', \\'36147\\', \\'88844\\', \\'41914\\', \\'11250\\', \\'94632\\', \\'71927\\', \\'4624\\', \\'86279\\', \\'7664\\', \\'2659\\', \\'94853\\', \\'65386\\', \\'30438\\', \\'86005\\', \\'92883\\', \\'84629\\', \\'59910\\', \\'44484\\', \\'1306\\', \\'8404\\', \\'56962\\', \\'29990\\', \\'38445\\', \\'96191\\', \\'73013\\', \\'66590\\', \\'40951\\', \\'24712\\', \\'18825\\', \\'37268\\', \\'87843\\', \\'18972\\', \\'12154\\', \\'7779\\', \\'52149\\', \\'76152\\', \\'65799\\', \\'86011\\', \\'35475\\', \\'78083\\', \\'88232\\', \\'91551\\', \\'65532\\', \\'93516\\', \\'73827\\', \\'24227\\', \\'44687\\', \\'55759\\', \\'83819\\', \\'45088\\', \\'10856\\', \\'60488\\', \\'39051\\', \\'14103\\', \\'76650\\', \\'81181\\', \\'46731\\', \\'737\\', \\'58788\\', \\'78945\\', \\'42096\\', \\'66731\\', \\'66740\\', \\'72273\\', \\'88969\\', \\'5655\\', \\'86590\\', \\'41096\\', \\'80038\\', \\'32430\\', \\'51877\\', \\'23970\\', \\'91900\\', \\'13082\\', \\'45880\\', \\'94367\\', \\'19739\\', \\'61998\\', \\'71665\\', \\'16083\\', \\'57035\\', \\'26916\\', \\'10166\\', \\'18834\\', \\'46798\\', \\'66881\\', \\'28444\\', \\'68840\\', \\'10459\\', \\'81087\\', \\'4728\\', \\'76224\\', \\'39257\\', \\'23470\\', \\'93524\\', \\'37345\\', \\'30074\\', \\'49856\\', \\'22022\\', \\'55279\\', \\'5159\\', \\'5193\\', \\'58030\\', \\'57539\\', \\'12514\\', \\'49759\\', \\'96222\\', \\'52597\\', \\'67192\\', \\'88187\\', \\'53614\\', \\'16084\\', \\'79915\\', \\'28212\\', \\'79334\\', \\'85283\\', \\'32306\\', \\'31058\\', \\'43113\\', \\'74707\\', \\'74869\\', \\'2213\\', \\'32134\\', \\'6379\\', \\'85426\\', \\'87098\\', \\'35984\\', \\'51105\\', \\'69287\\', \\'16803\\', \\'83337\\', \\'14913\\', \\'62531\\', \\'58098\\', \\'7914\\', \\'20105\\', \\'28850\\', \\'1384\\', \\'43173\\', \\'62983\\', \\'87113\\', \\'76066\\', \\'86320\\', \\'77684\\', \\'45191\\', \\'95225\\', \\'41503\\', \\'36713\\', \\'48404\\', \\'91228\\', \\'53865\\', \\'98981\\', \\'59161\\', \\'61237\\', \\'84561\\', \\'17455\\', \\'14379\\', \\'57789\\', \\'80895\\', \\'99260\\', \\'84595\\', \\'72942\\', \\'53220\\', \\'84448\\', \\'81332\\', \\'49437\\', \\'83086\\', \\'93414\\', \\'54519\\', \\'52288\\', \\'74772\\', \\'22460\\', \\'49324\\', \\'11168\\', \\'96071\\', \\'61985\\', \\'38284\\', \\'6405\\', \\'54698\\', \\'71727\\', \\'60093\\', \\'37340\\', \\'87884\\', \\'83403\\', \\'4542\\', \\'94949\\', \\'19636\\', \\'15855\\', \\'39105\\', \\'10424\\', \\'67418\\', \\'91022\\', \\'69254\\', \\'8481\\', \\'38411\\', \\'3832\\', \\'44354\\', \\'93548\\', \\'57172\\', \\'28481\\', \\'372\\', \\'81497\\', \\'52179\\', \\'41060\\', \\'72141\\', \\'41396\\', \\'65590\\', \\'70432\\', \\'82819\\', \\'93814\\', \\'26118\\', \\'84780\\', \\'88485\\', \\'70821\\', \\'8222\\', \\'83000\\', \\'47067\\', \\'38516\\', \\'33347\\', \\'47681\\', \\'48202\\', \\'60749\\', \\'52112\\', \\'7937\\', \\'28105\\', \\'11394\\', \\'45746\\', \\'43252\\', \\'34494\\', \\'2979\\', \\'69715\\', \\'42486\\', \\'82315\\', \\'71760\\', \\'97413\\', \\'66137\\', \\'94487\\', \\'7429\\', \\'74434\\', \\'22964\\', \\'55251\\', \\'3448\\', \\'53534\\', \\'2574\\', \\'9693\\', \\'96157\\', \\'2955\\', \\'4348\\', \\'19566\\', \\'56930\\', \\'83319\\', \\'31310\\', \\'53905\\', \\'1148\\', \\'41726\\', \\'22233\\', \\'76045\\', \\'37351\\', \\'10545\\', \\'17581\\', \\'28047\\', \\'30199\\', \\'4741\\', \\'58111\\', \\'33497\\', \\'67796\\', \\'67730\\', \\'31247\\', \\'43772\\', \\'29461\\', \\'45970\\', \\'73353\\', \\'22534\\', \\'53962\\', \\'32147\\', \\'71392\\', \\'62579\\', \\'66345\\', \\'58246\\', \\'33442\\', \\'9581\\', \\'29705\\', \\'14058\\', \\'86471\\', \\'76125\\', \\'59363\\', \\'94982\\', \\'74810\\', \\'89149\\', \\'20066\\', \\'3366\\', \\'3568\\', \\'25752\\', \\'80036\\', \\'64119\\', \\'27270\\', \\'40061\\', \\'91052\\', \\'69022\\', \\'9852\\', \\'77112\\', \\'83075\\', \\'43924\\', \\'61661\\', \\'56133\\', \\'96652\\', \\'57944\\', \\'72576\\', \\'82170\\', \\'79236\\', \\'55745\\', \\'15309\\', \\'88878\\', \\'72761\\', \\'37647\\', \\'67465\\', \\'12777\\', \\'97309\\', \\'93202\\', \\'41470\\', \\'8787\\', \\'64920\\', \\'48514\\', \\'18917\\', \\'35157\\', \\'59151\\', \\'4640\\', \\'5317\\', \\'38134\\', \\'76548\\', \\'82788\\', \\'9214\\', \\'58418\\', \\'73185\\', \\'90554\\', \\'10543\\', \\'47182\\', \\'62936\\', \\'91765\\', \\'89751\\', \\'68931\\', \\'48865\\', \\'64607\\', \\'7150\\', \\'77862\\', \\'14297\\', \\'14828\\', \\'33013\\', \\'91698\\', \\'67593\\', \\'98096\\', \\'16595\\', \\'51639\\', \\'86531\\', \\'24719\\', \\'1703\\', \\'78788\\', \\'43810\\', \\'38918\\', \\'95491\\', \\'99903\\', \\'82671\\', \\'8291\\', \\'68288\\', \\'31224\\', \\'39863\\', \\'4265\\', \\'77798\\', \\'7698\\', \\'33804\\', \\'92286\\', \\'4744\\', \\'37038\\', \\'44203\\', \\'98212\\', \\'17369\\', \\'77442\\', \\'62879\\', \\'4145\\', \\'96881\\', \\'15646\\', \\'36824\\', \\'19959\\', \\'45451\\', \\'76049\\', \\'54272\\', \\'97577\\', \\'95298\\', \\'81115\\', \\'30204\\', \\'82041\\', \\'8037\\', \\'10052\\', \\'8756\\', \\'76833\\', \\'82851\\', \\'24276\\', \\'75574\\', \\'36037\\', \\'78079\\', \\'92807\\', \\'29064\\', \\'90000\\', \\'84150\\', \\'17102\\', \\'75092\\', \\'49424\\', \\'35597\\', \\'4693\\', \\'82853\\', \\'42511\\', \\'16119\\', \\'23478\\', \\'65240\\', \\'55585\\', \\'91762\\', \\'71671\\', \\'46682\\', \\'72479\\', \\'97696\\', \\'24615\\', \\'12579\\', \\'30274\\', \\'48255\\', \\'2336\\', \\'90202\\', \\'5808\\', \\'45426\\', \\'76308\\', \\'74639\\', \\'31245\\', \\'99894\\', \\'89638\\', \\'6233\\', \\'33893\\', \\'71899\\', \\'85273\\', \\'89429\\', \\'29761\\', \\'50231\\', \\'57249\\', \\'99347\\', \\'22642\\', \\'66972\\', \\'86221\\', \\'47514\\', \\'88274\\', \\'10819\\', \\'73150\\', \\'53754\\', \\'13304\\', \\'20478\\', \\'38099\\', \\'619\\', \\'14669\\', \\'8011\\', \\'97657\\', \\'26569\\', \\'65430\\', \\'13467\\', \\'38180\\', \\'23675\\', \\'72350\\', \\'42257\\', \\'39875\\', \\'23529\\', \\'53407\\', \\'11833\\', \\n    \\'29599\\', \\'95621\\', \\'7727\\', \\'59527\\', \\'86846\\', \\'22860\\', \\'5358\\', \\'3730\\', \\'87555\\', \\'362\\', \\'95755\\', \\'54565\\', \\'29935\\', \\'68950\\', \\'52349\\', \\'98344\\', \\'86576\\', \\'7420\\', \\'12236\\', \\'15844\\', \\'48099\\', \\'97535\\', \\'97081\\', \\'50261\\', \\'31187\\', \\'60496\\', \\'24123\\', \\'24042\\', \\'6376\\', \\'6679\\', \\'99806\\', \\'20306\\', \\'60676\\', \\'36881\\', \\'77309\\', \\'5247\\', \\'96569\\', \\'53417\\', \\'73252\\', \\'64179\\', \\'35318\\', \\'75732\\', \\'65119\\', \\'32621\\', \\'40464\\', \\'22887\\', \\'96152\\', \\'65161\\', \\'83381\\', \\'8915\\', \\'68142\\', \\'7328\\', \\'85031\\', \\'15688\\', \\'72519\\', \\'93992\\', \\'86927\\', \\'75538\\', \\'38205\\', \\'50877\\', \\'70039\\', \\'97538\\', \\'94822\\', \\'52131\\', \\'49643\\', \\'85206\\', \\'1347\\', \\'14574\\', \\'88736\\', \\'53442\\', \\'49991\\', \\'64925\\', \\'72283\\', \\'82213\\', \\'60905\\', \\'36118\\', \\'62963\\', \\'16983\\', \\'79185\\', \\'15111\\', \\'26059\\', \\'17792\\', \\'98218\\', \\'33214\\', \\'1094\\', \\'41754\\', \\'77275\\', \\'65173\\', \\'13190\\', \\'91004\\', \\'90422\\', \\'44387\\', \\'92672\\', \\'98641\\', \\'54609\\', \\'83295\\', \\'37395\\', \\'70104\\', \\'32986\\', \\'72524\\', \\'82478\\', \\'5837\\', \\'83916\\', \\'52736\\', \\'57112\\', \\'55985\\', \\'42642\\', \\'42136\\', \\'89642\\', \\'35712\\', \\'49489\\', \\'19726\\', \\'65824\\', \\'24384\\', \\'48112\\', \\'15366\\', \\'99206\\', \\'68384\\', \\'51389\\', \\'529\\', \\'21475\\', \\'75749\\', \\'95182\\', \\'60110\\', \\'70571\\', \\'74174\\', \\'38105\\', \\'78107\\', \\'4101\\', \\'8982\\', \\'11215\\', \\'23987\\', \\'3303\\', \\'28706\\', \\'54629\\', \\'98000\\', \\'67510\\', \\'30036\\', \\'99140\\', \\'48896\\', \\'40971\\', \\'7735\\', \\'79984\\', \\'50134\\', \\'94928\\', \\'57023\\', \\'52880\\', \\'83067\\', \\'41940\\', \\'62994\\', \\'89213\\', \\'38593\\', \\'19283\\', \\'68206\\', \\'22234\\', \\'19245\\', \\'26266\\', \\'32403\\', \\'65889\\', \\'17022\\', \\'64280\\', \\'42797\\', \\'27161\\', \\'57675\\', \\'42313\\', \\'93606\\', \\'93082\\', \\'20659\\', \\'90824\\', \\'1226\\', \\'66266\\', \\'12503\\', \\'57104\\', \\'15247\\', \\'51160\\', \\'92398\\', \\'71967\\', \\'59476\\', \\'44465\\', \\'35765\\', \\'10787\\', \\'47737\\', \\'45792\\', \\'2292\\', \\'47599\\', \\'89612\\', \\'8162\\', \\'87622\\', \\'69410\\', \\'45727\\', \\'31158\\', \\'99791\\', \\'89544\\', \\'27214\\', \\'99588\\', \\'40516\\', \\'75616\\', \\'36505\\', \\'46079\\', \\'95448\\', \\'97999\\', \\'47462\\', \\'47799\\', \\'82729\\', \\'34038\\', \\'60789\\', \\'96938\\', \\'22682\\', \\'79062\\', \\'93307\\', \\'36038\\', \\'49016\\', \\'90983\\', \\'48219\\', \\'50889\\', \\'32517\\', \\'72219\\', \\'71229\\', \\'82643\\', \\'1195\\', \\'70543\\', \\'17\\', \\'22178\\', \\'23544\\', \\'72371\\', \\'1163\\', \\'28527\\', \\'7336\\', \\'39846\\', \\'31956\\', \\'80963\\', \\'41804\\', \\'59791\\', \\'41831\\', \\'1940\\', \\'52377\\', \\'79494\\', \\'12531\\', \\'81112\\', \\'44320\\', \\'18746\\', \\'5774\\', \\'63869\\', \\'4085\\', \\'59922\\', \\'12751\\', \\'99443\\', \\'13530\\', \\'23872\\', \\'36026\\', \\'83360\\', \\'32711\\', \\'92980\\', \\'11140\\', \\'99323\\', \\'57263\\', \\'98149\\', \\'29265\\', \\'25548\\', \\'65995\\', \\'4818\\', \\'15593\\', \\'8535\\', \\'37863\\', \\'12217\\', \\'14474\\', \\'66584\\', \\'89272\\', \\'86690\\', \\'58777\\', \\'39666\\', \\'44756\\', \\'18442\\', \\'52586\\', \\'98030\\', \\'40850\\', \\'38708\\', \\'49304\\', \\'68923\\', \\'65008\\', \\'84388\\', \\'83639\\', \\'29866\\', \\'63675\\', \\'26793\\', \\'49227\\', \\'82099\\', \\'24090\\', \\'57535\\', \\'24201\\', \\'65776\\', \\'74054\\', \\'89833\\', \\'62979\\', \\'26613\\', \\'5851\\', \\'99766\\', \\'63484\\', \\'66605\\', \\'37179\\', \\'90760\\', \\'59336\\', \\'58390\\', \\'93239\\', \\'84578\\', \\'11396\\', \\'93994\\', \\'73818\\', \\'23972\\', \\'37720\\', \\'72369\\', \\'25063\\', \\'32952\\', \\'71036\\', \\'76612\\', \\'31285\\', \\'34090\\', \\'19136\\', \\'53783\\', \\'66436\\', \\'61478\\', \\'96749\\', \\'43658\\', \\'7399\\', \\'31574\\', \\'67073\\', \\'40480\\', \\'20727\\', \\'70993\\', \\'65549\\', \\'30800\\', \\'21507\\', \\'53785\\', \\'89574\\', \\'86381\\', \\'56492\\', \\'62603\\', \\'44856\\', \\'68687\\', \\'63794\\', \\'70996\\', \\'7475\\', \\'84238\\', \\'71939\\', \\'86886\\', \\'94792\\', \\'15036\\', \\'36936\\', \\'95722\\', \\'17771\\', \\'67850\\', \\'33371\\', \\'49314\\', \\'40744\\', \\'5432\\', \\'81057\\', \\'41201\\', \\'75986\\', \\'22961\\', \\'15323\\', \\'1570\\', \\'18657\\', \\'95219\\', \\'19130\\', \\'53127\\', \\'15867\\', \\'81135\\', \\'73206\\', \\'76668\\', \\'36386\\', \\'48828\\', \\'31417\\', \\'56916\\', \\'70891\\', \\'60534\\', \\'95777\\', \\'10022\\', \\'94053\\', \\'2928\\', \\'56326\\', \\'16559\\', \\'79656\\', \\'6414\\', \\'81247\\', \\'78270\\', \\'55687\\', \\'19151\\', \\'61597\\', \\'99857\\', \\'81142\\', \\'27725\\', \\'53493\\', \\'12185\\', \\'1455\\', \\'48501\\', \\'59425\\', \\'20591\\', \\'24900\\', \\'66079\\', \\'84889\\', \\'32024\\', \\'18919\\', \\'2043\\', \\'7076\\', \\'71201\\', \\'88258\\', \\'86521\\', \\'93348\\', \\'26395\\', \\'39646\\', \\'44145\\', \\'33911\\', \\'46231\\', \\'67054\\', \\'39979\\', \\'11630\\', \\'23020\\', \\'76278\\', \\'88056\\', \\'11480\\', \\'4723\\', \\'78612\\', \\'70211\\', \\'60622\\', \\'84687\\', \\'59092\\', \\'65675\\', \\'38479\\', \\'64399\\', \\'64699\\', \\'95964\\', \\'42764\\', \\'69060\\', \\'28189\\', \\'4193\\', \\'95805\\', \\'75462\\', \\'17245\\', \\'59640\\', \\'94773\\', \\'84292\\', \\'53092\\', \\'98507\\', \\'61353\\', \\'32483\\', \\'53027\\', \\'48912\\', \\'87221\\', \\'47788\\', \\'59263\\', \\'65196\\', \\'35567\\', \\'17494\\', \\'64253\\', \\'50223\\', \\'7057\\', \\'87467\\', \\'62414\\', \\'2523\\', \\'50910\\', \\'72353\\', \\'78986\\', \\'78104\\', \\'47719\\', \\'29108\\', \\'12957\\', \\'5114\\', \\'64435\\', \\'66707\\', \\'37449\\', \\'70399\\', \\'45334\\', \\'71606\\', \\'55338\\', \\'55072\\', \\'58765\\', \\'12151\\', \\'22012\\', \\'16954\\', \\'87366\\', \\'14240\\', \\'98041\\', \\'72296\\', \\'47408\\', \\'56879\\', \\'99584\\', \\'63172\\', \\'92316\\', \\'28071\\', \\'29880\\', \\'19608\\', \\'13839\\', \\'87484\\', \\'56541\\', \\'88662\\', \\'87098\\', \\'72124\\', \\'78282\\', \\'27653\\', \\'38993\\', \\'31870\\', \\'67239\\', \\'99445\\', \\'7376\\', \\'78487\\', \\'98880\\', \\'12180\\', \\'86773\\', \\'67773\\', \\'15416\\', \\'58172\\', \\'13075\\', \\'67559\\', \\'97510\\', \\'29705\\', \\'86985\\', \\'57024\\', \\'11827\\', \\'31236\\', \\'91920\\', \\'26116\\', \\'94614\\', \\'14486\\', \\'46252\\', \\'78847\\', \\'43786\\', \\'70048\\', \\'96739\\', \\'35240\\', \\'39933\\', \\'58209\\', \\'27852\\', \\'65669\\', \\'47323\\', \\'58150\\', \\'84444\\', \\'44344\\', \\'95882\\', \\'41258\\', \\'31314\\', \\'69060\\', \\'19916\\', \\'6979\\', \\'19436\\', \\'45572\\', \\'16259\\', \\'74566\\', \\'6306\\', \\'24705\\', \\'53422\\', \\'593\\', \\'97031\\', \\'22308\\', \\'26875\\', \\'23042\\', \\'78035\\', \\'34229\\', \\'61976\\', \\'23175\\', \\'50072\\', \\'90896\\', \\'50810\\', \\'71730\\', \\'86468\\', \\'94807\\', \\'8218\\', \\'36032\\', \\'58628\\', \\'60560\\', \\'51206\\', \\'37943\\', \\'27987\\', \\'15014\\', \\'49905\\', \\'70018\\', \\'66799\\', \\'80851\\', \\'23594\\', \\'29982\\', \\'6438\\', \\'97381\\', \\'47715\\', \\'96294\\', \\'17985\\', \\'48545\\', \\'12672\\', \\'5250\\', \\'9988\\', \\'24601\\', \\'3736\\', \\'97815\\', \\'54363\\', \\'64703\\', \\'44167\\', \\'68376\\', \\'16595\\', \\'38073\\', \\'29630\\', \\'59630\\', \\'1858\\', \\'71823\\', \\'75580\\', \\'70083\\', \\'14493\\', \\'93821\\', \\'93394\\', \\'85369\\', \\'3818\\', \\'8435\\', \\'59988\\', \\'43966\\', \\'13961\\', \\'15855\\', \\'83332\\', \\'80312\\', \\'27299\\', \\'88840\\', \\'76964\\', \\'56173\\', \\'62794\\', \\'79389\\', \\'82642\\', \\'85843\\', \\'47116\\', \\'43064\\', \\'16061\\', \\'28905\\', \\'54415\\', \\'72832\\', \\'91252\\', \\'93488\\', \\'79457\\', \\'99336\\', \\'70744\\', \\'80432\\', \\'6487\\', \\'880\\', \\'87701\\', \\'154\\', \\'86574\\', \\'86677\\', \\'17892\\', \\'81488\\', \\'95260\\', \\'12515\\', \\'43189\\', \\'9211\\', \\'55403\\', \\'41417\\', \\'60046\\', \\'54785\\', \\'83655\\', \\'28274\\', \\'65745\\', \\'63062\\', \\'44549\\', \\'36391\\', \\'48051\\', \\'7328\\', \\'3572\\', \\'33226\\', \\'49177\\', \\'25123\\', \\'59065\\', \\'19691\\', \\'15109\\', \\'10172\\', \\'95578\\', \\'29497\\', \\'48152\\', \\'20276\\', \\'36270\\', \\'78866\\', \\'48309\\', \\'53209\\', \\'55475\\', \\'30073\\', \\'19717\\', \\'16004\\', \\'45692\\', \\'83430\\', \\'9291\\', \\'45935\\', \\'57030\\', \\'92613\\', \\'91656\\', \\'67697\\', \\'34915\\', \\'28156\\', \\'56594\\', \\'3273\\', \\'11194\\', \\'98270\\', \\'34370\\', \\'2621\\', \\'66679\\', \\'97451\\', \\'97717\\', \\'87923\\', \\'48310\\', \\'37725\\', \\'69743\\', \\'75103\\', \\'84956\\', \\'75163\\', \\'16069\\', \\'65304\\', \\'19397\\', \\'18071\\', \\'27273\\', \\'49823\\', \\'57595\\', \\'98324\\', \\'82174\\', \\'10293\\', \\'80943\\', \\'64184\\', \\'19472\\', \\'4198\\', \\'9410\\', \\'25927\\', \\'65961\\', \\'33155\\', \\'95168\\', \\'33692\\', \\'61712\\', \\'69877\\', \\'13308\\', \\'17415\\', \\'10022\\', \\'2491\\', \\'67310\\', \\'96140\\', \\'68050\\', \\'76272\\', \\'17143\\', \\'76805\\', \\'57176\\', \\'7539\\', \\'22690\\', \\'95483\\', \\'87592\\', \\'27221\\', \\'90821\\', \\'51154\\', \\'99828\\', \\'68998\\', \\'54581\\', \\'74222\\', \\'10269\\', \\'65057\\', \\'45467\\', \\'96089\\', \\'55058\\', \\'89779\\', \\'60837\\', \\'74122\\', \\'52886\\', \\'58055\\', \\'14880\\', \\'93208\\', \\'66652\\', \\'68830\\', \\'24121\\', \\'62407\\', \\'87257\\', \\'18802\\', \\'14925\\', \\'45423\\', \\'98624\\', \\'55195\\', \\'59072\\', \\'41414\\', \\'77840\\', \\'66075\\', \\'62705\\', \\'26549\\', \\'19063\\', \\'57552\\', \\'2507\\', \\'52069\\', \\'57620\\', \\'66688\\', \\'14833\\', \\'33700\\', \\'90666\\', \\'98052\\', \\'5367\\', \\'2268\\', \\'43093\\', \\'69063\\', \\'22030\\', \\'85564\\', \\'92258\\', \\'1847\\', \\'24446\\', \\'65835\\', \\'38660\\', \\'91899\\', \\'87732\\', \\'52396\\', \\'31952\\', \\'36000\\', \\'86944\\', \\'16109\\', \\'80729\\', \\'53757\\', \\'60226\\', \\'59103\\', \\'84187\\', \\'36674\\', \\'72823\\', \\'29884\\', \\'4654\\', \\'69139\\', \\'20440\\', \\'57413\\', \\'3651\\', \\'39639\\', \\'44564\\', \\'57492\\', \\'84159\\', \\'751\\', \\'99748\\', \\'9659\\', \\'72661\\', \\'39220\\', \\'99742\\', \\'74734\\', \\'75729\\', \\'38071\\', \\'69934\\', \\'73640\\', \\'65294\\', \\'54524\\', \\'64372\\', \\'37927\\', \\'17187\\', \\'7863\\', \\'12732\\', \\'40296\\', \\'36197\\', \\'15821\\', \\'76831\\', \\'4400\\', \\'71933\\', \\'4040\\', \\'22072\\', \\'33064\\', \\'25702\\', \\'13324\\', \\'91275\\', \\'27388\\', \\'97729\\', \\'14620\\', \\'45989\\', \\'80737\\', \\'17934\\', \\'4219\\', \\'3032\\', \\'43457\\', \\'31051\\', \\'24469\\', \\'67041\\', \\'29328\\', \\'75499\\', \\'80951\\', \\'88212\\', \\'92595\\', \\'49969\\', \\'24612\\', \\'58732\\', \\'2718\\', \\'3805\\', \\'50918\\', \\'99426\\', \\'8614\\', \\'35580\\', \\'93273\\', \\'989\\', \\'24385\\', \\'41185\\', \\'25687\\', \\'47146\\', \\'25227\\', \\'95839\\', \\'56355\\', \\'98536\\', \\'79824\\', \\'31725\\', \\'46447\\', \\'26690\\', \\'68418\\', \\'47783\\', \\'33725\\', \\'21729\\', \\'70797\\', \\'59038\\', \\'60376\\', \\'25087\\', \\'68332\\', \\'67950\\', \\'12411\\', \\'95918\\', \\'64736\\', \\'65336\\', \\'74947\\', \\'64605\\', \\'4106\\', \\'42712\\', \\'96640\\', \\'28492\\', \\'28648\\', \\'42429\\', \\'821\\', \\'24333\\', \\'69677\\', \\'38959\\', \\'23484\\', \\'92005\\', \\'29352\\', \\'29159\\', \\'52873\\', \\'99947\\', \\'21834\\', \\'85347\\', \\'93479\\', \\'28298\\', \\'55608\\', \\'3226\\', \\'69714\\', \\'80283\\', \\'6577\\', \\'18849\\', \\'44605\\', \\'75286\\', \\'28139\\', \\'26541\\', \\'12867\\', \\'57500\\', \\'86617\\', \\'33005\\', \\'57498\\', \\'60223\\', \\'74954\\', \\'51401\\', \\'55246\\', \\'5648\\', \\'16513\\', \\'40930\\', \\'43821\\', \\'32090\\', \\'66002\\', \\'65530\\', \\'76083\\', \\'6047\\', \\'6879\\', \\'94987\\', \\'80787\\', \\'11688\\', \\'77161\\', \\'92670\\', \\'6696\\', \\'400\\', \\'28572\\', \\'47234\\', \\'51375\\', \\'88518\\', \\'762\\', \\'92617\\', \\'54260\\', \\'7560\\', \\'60180\\', \\'43331\\', \\'64059\\', \\'27616\\', \\'75839\\', \\'21392\\', \\'47756\\', \\'46254\\', \\'19486\\', \\'88533\\', \\'30130\\', \\'93694\\', \\'8557\\', \\'66534\\', \\'94447\\', \\'16910\\', \\'6480\\', \\'77440\\', \\'24366\\', \\'6195\\', \\'48946\\', \\'28597\\', \\'44429\\', \\'50300\\', \\'73556\\', \\'40638\\', \\'98709\\', \\'94413\\', \\'15987\\', \\'43860\\', \\'64871\\', \\'93953\\', \\'34506\\', \\'7296\\', \\'31753\\', \\'30626\\', \\'77510\\', \\'39829\\', \\'25696\\', \\'39776\\', \\'69185\\', \\'36540\\', \\'65413\\', \\'31528\\', \\'43446\\', \\'73532\\', \\'49776\\', \\'30282\\', \\'30004\\', \\'26725\\', \\'15200\\', \\'33958\\', \\'90320\\', \\'71836\\', \\'48051\\', \\'31970\\', \\'5326\\', \\'96194\\', \\'69695\\', \\'60898\\', \\'60945\\', \\'18271\\', \\'50868\\', \\'61468\\', \\'23593\\', \\'68985\\', \\'20628\\', \\'58044\\', \\'8942\\', \\'34849\\', \\'7384\\', \\'50500\\', \\'62895\\', \\'78780\\', \\'48946\\', \\'65278\\', \\'4067\\', \\'973\\', \\'34761\\', \\'15512\\', \\'73739\\', \\'23138\\', \\'47322\\', \\'55568\\', \\'32259\\', \\'71816\\', \\'49277\\', \\'75218\\', \\'76104\\', \\'19579\\', \\'68312\\', \\'67904\\', \\'33886\\', \\'53888\\', \\'26421\\', \\'43859\\', \\'40291\\', \\'39068\\', \\'31711\\', \\'36542\\', \\'10195\\', \\'39781\\', \\'72352\\', \\'13188\\', \\'34113\\', \\'9428\\', \\'60443\\', \\'4987\\', \\'13783\\', \\'80744\\', \\'63483\\', \\'18266\\', \\'11961\\', \\'87167\\', \\'46987\\', \\'28480\\', \\'74214\\', \\'39191\\', \\'8146\\', \\'38090\\', \\'75727\\', \\'79245\\', \\'47720\\', \\'52547\\', \\'45321\\', \\'4972\\', \\'49701\\', \\'74354\\', \\'69672\\', \\'63455\\', \\'41902\\', \\'5667\\', \\'54166\\', \\'4962\\', \\'25873\\', \\'44509\\', \\'73332\\', \\'73383\\', \\'29438\\', \\'21455\\', \\'12320\\', \\'11997\\', \\'16921\\', \\'49379\\', \\'63027\\', \\'86175\\', \\'8110\\', \\'76149\\', \\'2520\\', \\'11256\\', \\'25863\\', \\'50518\\', \\'69001\\',\\n    \\'79113\\', \\'9447\\', \\'91840\\', \\'5242\\', \\'10998\\', \\'46496\\', \\'2448\\', \\'56058\\', \\'20970\\', \\'10517\\', \\'17783\\', \\'25723\\', \\'97137\\', \\'62840\\', \\'1264\\', \\'78691\\', \\'81020\\', \\'55335\\', \\'48524\\', \\'2088\\', \\'90413\\', \\'76651\\', \\'26855\\', \\'16177\\', \\'14954\\', \\'62914\\', \\'21344\\', \\'5708\\', \\'75560\\', \\'39311\\', \\'95865\\', \\'28783\\', \\'64902\\', \\'95657\\', \\'46276\\', \\'33426\\', \\'4799\\', \\'11588\\', \\'57513\\', \\'73689\\', \\'77677\\', \\'63011\\', \\'97795\\', \\'34954\\', \\'76866\\', \\'32043\\', \\'32697\\', \\'26643\\', \\'36890\\', \\'53476\\', \\'3011\\', \\'13963\\', \\'49551\\', \\'87671\\', \\'67761\\', \\'17488\\', \\'94770\\', \\'50599\\', \\'33272\\', \\'23091\\', \\'38079\\', \\'41177\\', \\'22395\\', \\'91656\\', \\'79679\\', \\'38687\\', \\'57384\\', \\'80118\\', \\'42507\\', \\'4098\\', \\'78949\\', \\'45669\\', \\'48802\\', \\'83915\\', \\'78292\\', \\'4369\\', \\'57657\\', \\'49146\\', \\'45192\\', \\'98491\\', \\'72457\\', \\'46331\\', \\'207\\', \\'81601\\', \\'7409\\', \\'70856\\', \\'91605\\', \\'70295\\', \\'9171\\', \\'72293\\', \\'32997\\', \\'78025\\', \\'16795\\', \\'73534\\', \\'68780\\', \\'21284\\', \\'31767\\', \\'94381\\', \\'86439\\', \\'12420\\', \\'53285\\', \\'99563\\', \\'60502\\', \\'67954\\', \\'55012\\', \\'99809\\', \\'5431\\', \\'69978\\', \\'99712\\', \\'14401\\', \\'79498\\', \\'4495\\', \\'3045\\', \\'528\\', \\'72542\\', \\'91604\\', \\'72725\\', \\'39378\\', \\'80378\\', \\'41996\\', \\'20138\\', \\'54545\\', \\'59730\\', \\'36951\\', \\'45157\\', \\'37964\\', \\'97690\\', \\'12184\\', \\'4944\\', \\'53803\\', \\'93605\\', \\'60851\\', \\'68938\\', \\'46285\\', \\'89663\\', \\'90309\\', \\'6907\\', \\'87239\\', \\'81791\\', \\'83292\\', \\'90013\\', \\'68927\\', \\'14725\\', \\'81840\\', \\'63836\\', \\'52068\\', \\'43830\\', \\'4794\\', \\'931\\', \\'59255\\', \\'8263\\', \\'99057\\', \\'94401\\', \\'69033\\', \\'7437\\', \\'20364\\', \\'92884\\', \\'28193\\', \\'43932\\', \\'37629\\', \\'59426\\', \\'18891\\', \\'8583\\', \\'79551\\', \\'87242\\', \\'1483\\', \\'6725\\', \\'65786\\', \\'16844\\', \\'12650\\', \\'99305\\', \\'42841\\', \\'9811\\', \\'18800\\', \\'39313\\', \\'51373\\', \\'31874\\', \\'84558\\', \\'27831\\', \\'48614\\', \\'48975\\', \\'55509\\', \\'83363\\', \\'31854\\', \\'64001\\', \\'94028\\', \\'76125\\', \\'79314\\', \\'24893\\', \\'81132\\', \\'9441\\', \\'86015\\', \\'28356\\', \\'40358\\', \\'10160\\', \\'23328\\', \\'7330\\', \\'76538\\', \\'37611\\', \\'89351\\', \\'84132\\', \\'97047\\', \\'26109\\', \\'95222\\', \\'35130\\', \\'75600\\', \\'88602\\', \\'15073\\', \\'87835\\', \\'71649\\', \\'28948\\', \\'81615\\', \\'37498\\', \\'28674\\', \\'59776\\', \\'44095\\', \\'65924\\', \\'64368\\', \\'94536\\', \\'12518\\', \\'61711\\', \\'55619\\', \\'82949\\', \\'4114\\', \\'21540\\', \\'70544\\', \\'28022\\', \\'79983\\', \\'28781\\', \\'7749\\', \\'97873\\', \\'4951\\', \\'50076\\', \\'47611\\', \\'99522\\', \\'56820\\', \\'38653\\', \\'49047\\', \\'36283\\', \\'83908\\', \\'72452\\', \\'85625\\', \\'10811\\', \\'36998\\', \\'44083\\', \\'34864\\', \\'44975\\', \\'39057\\', \\'4551\\', \\'68450\\', \\'24781\\', \\'1503\\', \\'9871\\', \\'46885\\', \\'11424\\', \\'21259\\', \\'54900\\', \\'97669\\', \\'85669\\', \\'6015\\', \\'2521\\', \\'37661\\', \\'14915\\', \\'57423\\', \\'91903\\', \\'94789\\', \\'32059\\', \\'64972\\', \\'4600\\', \\'61465\\', \\'27118\\', \\'79785\\', \\'13547\\', \\'49766\\', \\'38410\\', \\'68860\\', \\'63756\\', \\'23621\\', \\'64387\\', \\'46255\\', \\'63408\\', \\'11297\\', \\'41081\\', \\'56326\\', \\'58349\\', \\'98703\\', \\'72268\\', \\'73574\\', \\'32098\\', \\'42534\\', \\'91502\\', \\'38083\\', \\'11241\\', \\'56828\\', \\'12098\\', \\'25377\\', \\'37054\\', \\'56328\\', \\'30034\\', \\'26922\\', \\'68401\\', \\'93478\\', \\'63275\\', \\'62650\\', \\'81407\\', \\'773\\', \\'79499\\', \\'14970\\', \\'47217\\', \\'1187\\', \\'57428\\', \\'69980\\', \\'77764\\', \\'74791\\', \\'22107\\', \\'54363\\', \\'39247\\', \\'56028\\', \\'56982\\', \\'84244\\', \\'21464\\', \\'18716\\', \\'25533\\', \\'94589\\', \\'94768\\', \\'21537\\', \\'18436\\', \\'81135\\', \\'27654\\', \\'79713\\', \\'56630\\', \\'61571\\', \\'58453\\', \\'26758\\', \\'68450\\', \\'68449\\', \\'2994\\', \\'15347\\', \\'83954\\', \\'71823\\', \\'6428\\', \\'44210\\', \\'79597\\', \\'95144\\', \\'32871\\', \\'1991\\', \\'320\\', \\'77157\\', \\'63607\\', \\'31154\\', \\'48846\\', \\'71125\\', \\'61750\\', \\'59608\\', \\'33038\\', \\'35733\\', \\'68915\\', \\'94127\\', \\'50383\\', \\'64242\\', \\'49708\\', \\'57270\\', \\'65019\\', \\'8581\\', \\'12111\\', \\'18487\\', \\'50013\\', \\'58664\\', \\'22214\\', \\'19033\\', \\'33681\\', \\'44754\\', \\'28830\\', \\'10381\\', \\'52318\\', \\'34959\\', \\'20682\\', \\'55453\\', \\'53800\\', \\'65774\\', \\'99164\\', \\'72102\\', \\'36986\\', \\'44157\\', \\'56716\\', \\'7974\\', \\'81475\\', \\'25926\\', \\'39402\\', \\'33688\\', \\'99671\\', \\'95312\\', \\'42268\\', \\'26536\\', \\'14482\\', \\'67377\\', \\'57993\\', \\'89147\\', \\'15834\\', \\'64995\\', \\'4700\\', \\'18714\\', \\'30221\\', \\'39095\\', \\'32749\\', \\'69257\\', \\'55204\\', \\'30497\\', \\'31839\\', \\'63045\\', \\'30009\\', \\'62683\\', \\'31232\\', \\'77680\\', \\'93551\\', \\'63589\\', \\'6989\\', \\'77246\\', \\'42169\\', \\'46117\\', \\'73226\\', \\'37427\\', \\'1858\\', \\'83649\\', \\'37410\\', \\'86369\\', \\'4641\\', \\'74481\\', \\'66168\\', \\'48041\\', \\'22597\\', \\'14670\\', \\'27464\\', \\'57165\\', \\'20939\\', \\'36282\\', \\'76940\\', \\'73358\\', \\'50521\\', \\'69603\\', \\'8895\\', \\'81793\\', \\'57743\\', \\'81903\\', \\'64025\\', \\'91641\\', \\'25276\\', \\'34040\\', \\'62642\\', \\'64015\\', \\'57657\\', \\'84890\\', \\'73832\\', \\'782\\', \\'60160\\', \\'16998\\', \\'40023\\', \\'24590\\', \\'88613\\', \\'76640\\', \\'53091\\', \\'67600\\', \\'80183\\', \\'45674\\', \\'64464\\', \\'25163\\', \\'42384\\', \\'66972\\', \\'13953\\', \\'41966\\', \\'66048\\', \\'15135\\', \\'73745\\', \\'19466\\', \\'53657\\', \\'34619\\', \\'13462\\', \\'15905\\', \\'48257\\', \\'73297\\', \\'238\\', \\'93525\\', \\'80556\\', \\'5942\\', \\'5411\\', \\'66169\\', \\'9090\\', \\'95130\\', \\'74316\\', \\'57321\\', \\'48083\\', \\'62355\\', \\'68113\\', \\'15239\\', \\'36644\\', \\'80326\\', \\'65817\\', \\'54428\\', \\'61955\\', \\'58849\\', \\'77206\\', \\'16073\\', \\'98261\\', \\'92091\\', \\'39178\\', \\'35464\\', \\'85109\\', \\'85452\\', \\'21128\\', \\'25665\\', \\'81860\\', \\'44664\\', \\'24024\\', \\'56960\\', \\'95124\\', \\'39786\\', \\'18836\\', \\'11121\\', \\'44163\\', \\'81074\\', \\'79064\\', \\'46219\\', \\'94694\\', \\'44233\\', \\'81469\\', \\'24642\\', \\'15030\\', \\'21995\\', \\'13587\\', \\'40755\\', \\'6669\\', \\'81093\\', \\'74305\\', \\'1881\\', \\'55649\\', \\'37273\\', \\'80827\\', \\'98643\\', \\'46694\\', \\'59281\\', \\'79231\\', \\'42813\\', \\'84984\\', \\'7052\\', \\'98113\\', \\'17296\\', \\'84434\\', \\'31205\\', \\'46894\\', \\'71219\\', \\'74530\\', \\'44686\\', \\'70744\\', \\'91388\\', \\'20692\\', \\'96853\\', \\'73803\\', \\'15836\\', \\'18126\\', \\'49686\\', \\'4179\\', \\'47588\\', \\'87892\\', \\'65425\\', \\'68012\\', \\'97468\\', \\'92510\\', \\'99271\\', \\'58694\\', \\'11918\\', \\'37051\\', \\'18644\\', \\'57228\\', \\'14265\\', \\'57572\\', \\'57022\\', \\'52186\\', \\'30193\\', \\'93570\\', \\'87872\\', \\'5257\\', \\'26784\\', \\'6476\\', \\'61746\\', \\'68559\\', \\'1720\\', \\'26202\\', \\'16519\\', \\'27688\\', \\'10645\\', \\'87174\\', \\'60845\\', \\'73385\\', \\'82075\\', \\'6933\\', \\'98828\\', \\'56895\\', \\'17344\\', \\'84253\\', \\'36561\\', \\'51648\\', \\'24939\\', \\'63470\\', \\'31034\\', \\'95052\\', \\'51090\\', \\'51465\\', \\'87979\\', \\'68650\\', \\'30181\\', \\'29598\\', \\'19137\\', \\'43221\\', \\'81353\\', \\'90170\\', \\'96985\\', \\'61115\\', \\'17385\\', \\'92314\\', \\'80650\\', \\'55821\\', \\'17874\\', \\'84333\\', \\'93272\\', \\'48260\\', \\'87272\\', \\'22764\\', \\'59957\\', \\'51870\\', \\'85988\\', \\'39222\\', \\'77241\\', \\'62535\\', \\'28344\\', \\'6011\\', \\'80831\\', \\'64551\\', \\'46299\\', \\'75195\\', \\'71177\\', \\'8660\\', \\'58943\\', \\'57003\\', \\'3306\\', \\'74413\\', \\'74068\\', \\'15073\\', \\'89016\\', \\'93140\\', \\'13911\\', \\'57170\\', \\'19880\\', \\'41870\\', \\'9131\\', \\'57495\\', \\'73032\\', \\'86979\\', \\'60094\\', \\'87026\\', \\'30880\\', \\'4736\\', \\'86301\\', \\'92707\\', \\'21689\\', \\'83565\\', \\'71275\\', \\'47665\\', \\'65687\\', \\'71184\\', \\'89897\\', \\'32490\\', \\'97577\\', \\'38723\\', \\'79113\\', \\'37531\\', \\'97500\\', \\'94450\\', \\'15699\\', \\'58019\\', \\'84423\\', \\'27057\\', \\'56017\\', \\'97148\\', \\'47365\\', \\'30669\\', \\'33818\\', \\'80406\\', \\'99690\\', \\'33012\\', \\'95178\\', \\'46809\\', \\'48448\\', \\'79350\\', \\'9146\\', \\'99701\\', \\'98976\\', \\'71197\\', \\'44161\\', \\'75069\\', \\'36602\\', \\'79650\\', \\'97301\\', \\'12020\\', \\'56658\\', \\'25701\\', \\'46392\\', \\'78609\\', \\'63073\\', \\'69419\\', \\'57736\\', \\'20102\\', \\'42415\\', \\'79044\\', \\'20277\\', \\'56280\\', \\'47903\\', \\'94311\\', \\'25558\\', \\'40336\\', \\'91305\\', \\'90505\\', \\'66769\\', \\'64562\\', \\'83737\\', \\'62892\\', \\'10375\\', \\'71024\\', \\'19988\\', \\'56946\\', \\'76110\\', \\'21847\\', \\'43162\\', \\'50578\\', \\'46086\\', \\'54167\\', \\'61722\\', \\'53463\\', \\'63134\\', \\'69288\\', \\'12838\\', \\'14116\\', \\'71687\\', \\'50846\\', \\'59810\\', \\'24826\\', \\'84138\\', \\'82885\\', \\'91496\\', \\'98600\\', \\'82769\\', \\'40049\\', \\'4125\\', \\'50694\\', \\'1294\\', \\'2805\\', \\'29691\\', \\'82321\\', \\'76462\\', \\'85945\\', \\'115\\', \\'29188\\', \\'66918\\', \\'71340\\', \\'31585\\', \\'61638\\', \\'95472\\', \\'52978\\', \\'50622\\', \\'81990\\', \\'60955\\', \\'70519\\', \\'22270\\', \\'35610\\', \\'95871\\', \\'89222\\', \\'41038\\', \\'52546\\', \\'1163\\', \\'67943\\', \\'1793\\', \\'92010\\', \\'35755\\', \\'74509\\', \\'66665\\', \\'95759\\', \\'8568\\', \\'44299\\', \\'67822\\', \\'5806\\', \\'85839\\', \\'13895\\', \\'87675\\', \\'31357\\', \\'88014\\', \\'40026\\', \\'53050\\', \\'28951\\', \\'31992\\', \\'42495\\', \\'82892\\', \\'51567\\', \\'2869\\', \\'45808\\', \\'20238\\', \\'20781\\', \\'56098\\', \\'66307\\', \\'95701\\', \\'614\\', \\'60833\\', \\'3091\\', \\'81339\\', \\'24195\\', \\'65639\\', \\'85976\\', \\'28116\\', \\'66224\\', \\'51502\\', \\'73637\\', \\'13207\\', \\'88302\\', \\'36488\\', \\'65518\\', \\'98187\\', \\'26\\', \\'74367\\', \\'64706\\', \\'53943\\', \\'86760\\', \\'25783\\', \\'82112\\', \\'34958\\', \\'86621\\', \\'20848\\', \\'63459\\', \\'14049\\', \\'84943\\', \\'91873\\', \\'50238\\', \\'77773\\', \\'64109\\', \\'8602\\', \\'87934\\', \\'47583\\', \\'66053\\', \\'30287\\', \\'5507\\', \\'80312\\', \\'37464\\', \\'57457\\', \\'86200\\', \\'17806\\', \\'16522\\', \\'38843\\', \\'94334\\', \\'59958\\', \\'63864\\', \\'53427\\', \\'74506\\', \\'33980\\', \\'90449\\', \\'30842\\', \\'53616\\', \\'36738\\', \\'52\\', \\'13595\\', \\'53051\\', \\'13174\\', \\'60163\\', \\'71420\\', \\'73835\\', \\'67119\\', \\'79018\\', \\'42782\\', \\'45059\\', \\'952\\', \\'46360\\', \\'85879\\', \\'71552\\', \\'84741\\', \\'29746\\', \\'32577\\', \\'10041\\', \\'7208\\', \\'97528\\', \\'51256\\', \\'916\\', \\'55973\\', \\'17684\\', \\'99046\\', \\'38782\\', \\'58660\\', \\'97798\\', \\'66032\\', \\'48339\\', \\'51329\\', \\'12532\\', \\'97904\\', \\'95454\\', \\'42737\\', \\'62541\\', \\'96702\\', \\'82953\\', \\'94610\\', \\'26645\\', \\'86813\\', \\'25480\\', \\'99713\\', \\'26078\\', \\'23028\\', \\'93056\\', \\'21445\\', \\'73209\\', \\'89318\\', \\'69987\\', \\'34705\\', \\'30064\\', \\'17094\\', \\'51135\\', \\'54141\\', \\'26625\\', \\'1086\\', \\'13082\\', \\'30843\\', \\'98672\\', \\'56864\\', \\'42605\\', \\'5833\\', \\'60850\\', \\'69366\\', \\'27351\\', \\'16456\\', \\'92609\\', \\'48030\\', \\'54322\\', \\'69891\\', \\'46502\\', \\'34578\\', \\'77918\\', \\'63276\\', \\'75958\\', \\'42519\\', \\'60266\\', \\'85576\\', \\'4855\\', \\'14258\\', \\'67017\\', \\'10545\\', \\'35078\\', \\'53012\\', \\'71922\\', \\'85784\\', \\'73402\\', \\'74363\\', \\'58457\\', \\'94102\\', \\'23510\\', \\'51559\\', \\'39482\\', \\'87057\\', \\'9377\\', \\'10106\\', \\'82985\\', \\'33931\\', \\'16523\\', \\'6484\\', \\'97749\\', \\'83172\\', \\'53753\\', \\'27466\\', \\'23073\\', \\'96083\\', \\'67302\\', \\'57465\\', \\'21877\\', \\'18013\\', \\'99804\\', \\'32873\\', \\'43123\\', \\'72365\\', \\'53197\\', \\'80578\\', \\'69770\\', \\'97471\\', \\'86954\\', \\'67183\\', \\'98497\\', \\'78474\\', \\'28450\\', \\'63183\\', \\'98699\\', \\'42738\\', \\'61433\\', \\'3491\\', \\'27304\\', \\'49311\\', \\'94980\\', \\'92740\\', \\'43272\\', \\'86549\\', \\'11406\\', \\'79636\\', \\'85582\\', \\'38086\\', \\'657\\', \\'2354\\', \\'26567\\', \\'77450\\', \\'42086\\', \\'21600\\', \\'49011\\', \\'44059\\', \\'47872\\', \\'75761\\', \\'96577\\', \\'11642\\', \\'83471\\', \\'79616\\', \\'23749\\', \\'77082\\', \\'96876\\', \\'65302\\', \\'84027\\', \\'48955\\', \\'59887\\', \\'20657\\', \\'75090\\', \\'9058\\', \\'50347\\', \\'66088\\', \\'70745\\', \\'76342\\', \\'58026\\', \\'95568\\', \\'61504\\', \\'93473\\', \\'84590\\', \\'47089\\', \\'74717\\', \\'93090\\', \\'46334\\', \\'68273\\', \\'59500\\', \\'54345\\', \\'72608\\', \\'54048\\', \\'86156\\', \\'40296\\', \\'74046\\', \\'6813\\', \\'36369\\', \\'74543\\', \\'18305\\', \\'85236\\', \\'31316\\', \\'37061\\', \\'96893\\', \\'23112\\', \\'5529\\', \\'10166\\', \\'19037\\', \\'1467\\', \\'70810\\', \\'30932\\', \\'18410\\', \\'92837\\', \\'81324\\', \\'12268\\', \\'54705\\', \\'25207\\', \\'90366\\', \\'56528\\', \\'3392\\', \\'88747\\', \\'39951\\', \\'97957\\', \\'99404\\', \\'23685\\', \\'13533\\', \\'15640\\', \\'11434\\', \\'66516\\', \\'71025\\', \\'65770\\', \\'88000\\', \\'52232\\', \\'32360\\', \\'10787\\', \\'37438\\', \\'2264\\', \\'94460\\', \\'80214\\', \\'42288\\', \\'59062\\', \\'29010\\', \\'64093\\', \\'21225\\', \\'22297\\', \\'36935\\', \\'19202\\', \\'5925\\', \\'85373\\', \\'27414\\', \\'28991\\', \\'9191\\', \\'42273\\', \\'56587\\', \\'89719\\', \\'77191\\', \\'64334\\', \\'61542\\', \\'28763\\', \\'28978\\', \\'79184\\', \\'59815\\', \\'95200\\', \\'30246\\', \\'54022\\', \\'287\\', \\'91808\\', \\'66347\\', \\'50833\\', \\'15356\\', \\'78614\\',\\n    \\'65087\\', \\'9664\\', \\'67555\\', \\'58222\\', \\'20787\\', \\'72382\\', \\'83712\\', \\'15858\\', \\'72040\\', \\'59451\\', \\'7428\\', \\'47586\\', \\'83509\\', \\'45969\\', \\'28759\\', \\'94033\\', \\'88618\\', \\'46\\', \\'1753\\', \\'28290\\', \\'71934\\', \\'99070\\', \\'52517\\', \\'65865\\', \\'15904\\', \\'68134\\', \\'87595\\', \\'39779\\', \\'99174\\', \\'13366\\', \\'50847\\', \\'69037\\', \\'77911\\', \\'19709\\', \\'84404\\', \\'24370\\', \\'18920\\', \\'1746\\', \\'28059\\', \\'4653\\', \\'6892\\', \\'25496\\', \\'48810\\', \\'82943\\', \\'7069\\', \\'44018\\', \\'1617\\', \\'56497\\', \\'27582\\', \\'29576\\', \\'47883\\', \\'8385\\', \\'54975\\', \\'96245\\', \\'77257\\', \\'31194\\', \\'34512\\', \\'19198\\', \\'50926\\', \\'50886\\', \\'91577\\', \\'49260\\', \\'49604\\', \\'58464\\', \\'18198\\', \\'90887\\', \\'15379\\', \\'74883\\', \\'36644\\', \\'63967\\', \\'34545\\', \\'20539\\', \\'12884\\', \\'6010\\', \\'98636\\', \\'94832\\', \\'47702\\', \\'98318\\', \\'6078\\', \\'42517\\', \\'97030\\', \\'93707\\', \\'39286\\', \\'10245\\', \\'66230\\', \\'99574\\', \\'74563\\', \\'81937\\', \\'22153\\', \\'10659\\', \\'67579\\', \\'85147\\', \\'69686\\', \\'32017\\', \\'8199\\', \\'20027\\', \\'64266\\', \\'60707\\', \\'55426\\', \\'22027\\', \\'13823\\', \\'81404\\', \\'86757\\', \\'3754\\', \\'197\\', \\'45469\\', \\'68736\\', \\'17656\\', \\'92453\\', \\'6784\\', \\'35531\\', \\'33538\\', \\'27558\\', \\'35825\\', \\'13471\\', \\'16377\\', \\'66978\\', \\'44601\\', \\'69943\\', \\'84635\\', \\'7335\\', \\'67725\\', \\'88064\\', \\'78201\\', \\'64380\\', \\'66771\\', \\'62221\\', \\'60427\\', \\'32028\\', \\'37857\\', \\'5491\\', \\'2757\\', \\'10537\\', \\'2199\\', \\'60244\\', \\'14726\\', \\'29734\\', \\'34433\\', \\'81241\\', \\'39778\\', \\'65831\\', \\'56153\\', \\'81696\\', \\'25113\\', \\'17371\\', \\'79022\\', \\'3587\\', \\'60439\\', \\'96582\\', \\'37801\\', \\'82496\\', \\'68242\\', \\'19561\\', \\'53140\\', \\'17171\\', \\'13165\\', \\'58750\\', \\'80612\\', \\'19818\\', \\'16753\\', \\'70009\\', \\'75290\\', \\'48846\\', \\'89851\\', \\'25190\\', \\'35525\\', \\'84348\\', \\'65298\\', \\'23161\\', \\'60583\\', \\'89611\\', \\'18798\\', \\'85422\\', \\'60713\\', \\'17660\\', \\'41915\\', \\'65757\\', \\'4781\\', \\'48374\\', \\'10712\\', \\'40330\\', \\'2409\\', \\'41020\\', \\'28042\\', \\'51857\\', \\'81224\\', \\'93917\\', \\'90366\\', \\'58848\\', \\'8012\\', \\'92070\\', \\'75349\\', \\'80066\\', \\'83228\\', \\'55170\\', \\'78376\\', \\'94127\\', \\'29418\\', \\'58660\\', \\'74006\\', \\'63909\\', \\'59502\\', \\'63255\\', \\'32318\\', \\'28904\\', \\'26117\\', \\'88103\\', \\'50656\\', \\'58517\\', \\'16372\\', \\'43392\\', \\'77876\\', \\'65997\\', \\'63501\\', \\'45927\\', \\'17444\\', \\'84021\\', \\'54886\\', \\'57082\\', \\'47456\\', \\'73816\\', \\'66900\\', \\'82958\\', \\'49722\\', \\'95843\\', \\'23458\\', \\'4560\\', \\'67276\\', \\'59080\\', \\'81486\\', \\'2967\\', \\'26133\\', \\'87694\\', \\'74183\\', \\'22100\\', \\'45306\\', \\'33895\\', \\'26512\\', \\'71426\\', \\'54994\\', \\'47367\\', \\'10171\\', \\'45681\\', \\'36268\\', \\'3166\\', \\'2179\\', \\'64197\\', \\'90037\\', \\'4641\\', \\'96073\\', \\'72989\\', \\'55123\\', \\'48825\\', \\'2862\\', \\'66974\\', \\'30115\\', \\'41554\\', \\'26727\\', \\'54025\\', \\'69504\\', \\'38284\\', \\'7816\\', \\'36370\\', \\'75764\\', \\'69774\\', \\'43208\\', \\'43598\\', \\'39461\\', \\'21655\\', \\'12169\\', \\'77790\\', \\'44578\\', \\'70959\\', \\'13500\\', \\'40823\\', \\'52952\\', \\'88095\\', \\'82193\\', \\'66424\\', \\'79814\\', \\'25651\\', \\'58125\\', \\'42724\\', \\'11752\\', \\'64533\\', \\'34827\\', \\'72755\\', \\'96727\\', \\'82066\\', \\'60268\\', \\'55535\\', \\'4230\\', \\'73018\\', \\'69602\\', \\'16912\\', \\'66088\\', \\'21859\\', \\'38654\\', \\'38638\\', \\'51444\\', \\'37999\\', \\'18595\\', \\'15209\\', \\'21801\\', \\'21130\\', \\'53741\\', \\'54954\\', \\'91590\\', \\'83660\\', \\'74071\\', \\'82627\\', \\'4311\\', \\'45268\\', \\'94735\\', \\'65747\\', \\'72428\\', \\'22621\\', \\'70828\\', \\'64394\\', \\'647\\', \\'23570\\', \\'17677\\', \\'84377\\', \\'63993\\', \\'10268\\', \\'47426\\', \\'72750\\', \\'83772\\', \\'29090\\', \\'73284\\', \\'36683\\', \\'91143\\', \\'64546\\', \\'99836\\', \\'21999\\', \\'61793\\', \\'41557\\', \\'16714\\', \\'20586\\', \\'14251\\', \\'56633\\', \\'46146\\', \\'84730\\', \\'5445\\', \\'8367\\', \\'52621\\', \\'79252\\', \\'89737\\', \\'18431\\', \\'32134\\', \\'86975\\', \\'58939\\', \\'63385\\', \\'8504\\', \\'25998\\', \\'79549\\', \\'70558\\', \\'4870\\', \\'57604\\', \\'48374\\', \\'32388\\', \\'97871\\', \\'75590\\', \\'10919\\', \\'43825\\', \\'82858\\', \\'25807\\', \\'50366\\', \\'2841\\', \\'2716\\', \\'51315\\', \\'79719\\', \\'33159\\', \\'63382\\', \\'11327\\', \\'65184\\', \\'87243\\', \\'17850\\', \\'40149\\', \\'12171\\', \\'48486\\', \\'26380\\', \\'85432\\', \\'35427\\', \\'59256\\', \\'57601\\', \\'29529\\', \\'20553\\', \\'3006\\', \\'69997\\', \\'87919\\', \\'47626\\', \\'96026\\', \\'37445\\', \\'51735\\', \\'89296\\', \\'26702\\', \\'22837\\', \\'61279\\', \\'85193\\', \\'30624\\', \\'10676\\', \\'83075\\', \\'21477\\', \\'54708\\', \\'47485\\', \\'80297\\', \\'86204\\', \\'25192\\', \\'55197\\', \\'81177\\', \\'70551\\', \\'11003\\', \\'7001\\', \\'55017\\', \\'487\\', \\'40926\\', \\'99463\\', \\'79514\\', \\'69697\\', \\'52854\\', \\'88640\\', \\'44464\\', \\'66314\\', \\'48240\\', \\'49787\\', \\'81333\\', \\'14914\\', \\'12919\\', \\'51037\\', \\'88609\\', \\'25572\\', \\'61019\\', \\'85184\\', \\'12051\\', \\'61246\\', \\'52108\\', \\'98895\\', \\'24549\\', \\'86944\\', \\'73303\\', \\'9012\\', \\'25151\\', \\'97424\\', \\'43531\\', \\'44790\\', \\'63034\\', \\'86713\\', \\'76483\\', \\'17499\\', \\'86891\\', \\'3267\\', \\'45091\\', \\'39126\\', \\'94419\\', \\'35750\\', \\'35239\\', \\'49413\\', \\'62381\\', \\'92010\\', \\'7246\\', \\'26997\\', \\'47446\\', \\'26930\\', \\'22668\\', \\'43961\\', \\'51741\\', \\'63058\\', \\'41977\\', \\'62933\\', \\'9197\\', \\'94303\\', \\'29044\\', \\'53755\\', \\'22391\\', \\'85373\\', \\'66572\\', \\'74650\\', \\'7824\\', \\'49712\\', \\'40021\\', \\'99958\\', \\'60404\\', \\'37370\\', \\'89264\\', \\'52343\\', \\'90901\\', \\'44730\\', \\'4252\\', \\'5811\\', \\'22283\\', \\'25102\\', \\'86636\\', \\'75509\\', \\'47088\\', \\'62971\\', \\'85519\\', \\'7495\\', \\'16798\\', \\'25708\\', \\'59258\\', \\'89361\\', \\'43455\\', \\'86768\\', \\'29961\\', \\'4362\\', \\'60956\\', \\'81059\\', \\'87604\\', \\'46241\\', \\'98362\\', \\'21030\\', \\'76182\\', \\'83545\\', \\'59150\\', \\'99333\\', \\'68271\\', \\'32629\\', \\'3364\\', \\'96467\\', \\'40427\\', \\'307\\', \\'84267\\', \\'239\\', \\'11711\\', \\'40933\\', \\'24518\\', \\'33854\\', \\'60291\\', \\'94179\\', \\'5564\\', \\'33196\\', \\'73818\\', \\'22201\\', \\'97078\\', \\'69360\\', \\'94513\\', \\'42623\\', \\'6510\\', \\'67378\\', \\'79468\\', \\'10394\\', \\'96430\\', \\'87701\\', \\'2667\\', \\'64162\\', \\'93266\\', \\'48941\\', \\'55345\\', \\'56127\\', \\'22704\\', \\'8793\\', \\'57008\\', \\'36920\\', \\'80845\\', \\'81203\\', \\'98715\\', \\'84158\\', \\'49194\\', \\'72718\\', \\'52919\\', \\'4951\\', \\'8715\\', \\'82384\\', \\'8570\\', \\'26733\\', \\'62399\\', \\'27297\\', \\'79038\\', \\'57916\\', \\'46155\\', \\'82381\\', \\'1027\\', \\'20541\\', \\'40580\\', \\'44836\\', \\'17336\\', \\'55548\\', \\'87454\\', \\'63549\\', \\'61401\\', \\'88819\\', \\'23326\\', \\'37546\\', \\'49089\\', \\'50707\\', \\'23099\\', \\'20724\\', \\'67184\\', \\'3394\\', \\'95941\\', \\'76045\\', \\'20523\\', \\'30393\\', \\'14157\\', \\'69381\\', \\'94104\\', \\'15406\\', \\'46707\\', \\'36234\\', \\'9136\\', \\'96805\\', \\'4904\\', \\'20310\\', \\'77164\\', \\'15400\\', \\'87198\\', \\'48310\\', \\'59729\\', \\'35230\\', \\'61503\\', \\'42015\\', \\'86910\\', \\'23264\\', \\'23542\\', \\'49105\\', \\'58334\\', \\'52855\\', \\'78865\\', \\'73516\\', \\'43820\\', \\'96593\\', \\'33168\\', \\'26170\\', \\'88241\\', \\'4016\\', \\'79862\\', \\'39617\\', \\'95329\\', \\'57881\\', \\'71750\\', \\'89690\\', \\'22519\\', \\'59367\\', \\'19825\\', \\'12638\\', \\'36100\\', \\'14355\\', \\'79540\\', \\'8411\\', \\'94571\\', \\'80462\\', \\'11953\\', \\'55629\\', \\'14598\\', \\'81066\\', \\'48968\\', \\'74149\\', \\'36938\\', \\'4564\\', \\'59157\\', \\'75517\\', \\'14309\\', \\'64905\\', \\'59893\\', \\'62803\\', \\'6968\\', \\'33003\\', \\'40894\\', \\'48816\\', \\'77710\\', \\'16692\\', \\'19135\\', \\'98381\\', \\'49397\\', \\'24048\\', \\'17804\\', \\'26829\\', \\'24046\\', \\'44546\\', \\'28174\\', \\'2639\\', \\'27957\\', \\'38625\\', \\'85902\\', \\'9908\\', \\'77666\\', \\'14096\\', \\'89851\\', \\'23600\\', \\'20717\\', \\'32860\\', \\'44070\\', \\'67853\\', \\'85907\\', \\'23761\\', \\'789\\', \\'73370\\', \\'15649\\', \\'26472\\', \\'9174\\', \\'20081\\', \\'49415\\', \\'97463\\', \\'14565\\', \\'19834\\', \\'94738\\', \\'68045\\', \\'67542\\', \\'3552\\', \\'77093\\', \\'99071\\', \\'16832\\', \\'95177\\', \\'49571\\', \\'85821\\', \\'9368\\', \\'85170\\', \\'58449\\', \\'89633\\', \\'99302\\', \\'94158\\', \\'50274\\', \\'50223\\', \\'51128\\', \\'52847\\', \\'53598\\', \\'47826\\', \\'2883\\', \\'28192\\', \\'84324\\', \\'9530\\', \\'14385\\', \\'37292\\', \\'74795\\', \\'16821\\', \\'5010\\', \\'77101\\', \\'96596\\', \\'72384\\', \\'41399\\', \\'83046\\', \\'37927\\', \\'48213\\', \\'84574\\', \\'55438\\', \\'79315\\', \\'71005\\', \\'45190\\', \\'56133\\', \\'14016\\', \\'92180\\', \\'28365\\', \\'34307\\', \\'90665\\', \\'74758\\', \\'45080\\', \\'38017\\', \\'80599\\', \\'91174\\', \\'47907\\', \\'19299\\', \\'9707\\', \\'92260\\', \\'36784\\', \\'55855\\', \\'25939\\', \\'74472\\', \\'47402\\', \\'12352\\', \\'75591\\', \\'31459\\', \\'76711\\', \\'57940\\', \\'95535\\', \\'55231\\', \\'80645\\', \\'84613\\', \\'90280\\', \\'3500\\', \\'83695\\', \\'42992\\', \\'77226\\', \\'25326\\', \\'8093\\', \\'49838\\', \\'6457\\', \\'44814\\', \\'82819\\', \\'94986\\', \\'81818\\', \\'65186\\', \\'21378\\', \\'49711\\', \\'66248\\', \\'72391\\', \\'65826\\', \\'21284\\', \\'41399\\', \\'72858\\', \\'32223\\', \\'35915\\', \\'45221\\', \\'36871\\', \\'16193\\', \\'2522\\', \\'52963\\', \\'24506\\', \\'98239\\', \\'56752\\', \\'15192\\', \\'8451\\', \\'62802\\', \\'54777\\', \\'67983\\', \\'82177\\', \\'7303\\', \\'71445\\', \\'40559\\', \\'58655\\', \\'73468\\', \\'40491\\', \\'52864\\', \\'81558\\', \\'36789\\', \\'53134\\', \\'38801\\', \\'90600\\', \\'36385\\', \\'90996\\', \\'20526\\', \\'13627\\', \\'62253\\', \\'96989\\', \\'88864\\', \\'11928\\', \\'14681\\', \\'77082\\', \\'95659\\', \\'47182\\', \\'16085\\', \\'26894\\', \\'39758\\', \\'32803\\', \\'26458\\', \\'65779\\', \\'66110\\', \\'38888\\', \\'15490\\', \\'48120\\', \\'90238\\', \\'8736\\', \\'233\\', \\'76851\\', \\'86938\\', \\'8873\\', \\'95387\\', \\'33400\\', \\'50788\\', \\'13568\\', \\'43139\\', \\'29821\\', \\'70427\\', \\'21022\\', \\'93285\\', \\'57243\\', \\'51675\\', \\'77459\\', \\'33170\\', \\'81485\\', \\'85303\\', \\'44133\\', \\'203\\', \\'44175\\', \\'89151\\', \\'26705\\', \\'32990\\', \\'10885\\', \\'10208\\', \\'58477\\', \\'97729\\', \\'699\\', \\'40581\\', \\'8065\\', \\'95864\\', \\'89797\\', \\'47506\\', \\'19160\\', \\'85728\\', \\'58599\\', \\'96271\\', \\'75849\\', \\'30736\\', \\'18808\\', \\'25828\\', \\'52011\\', \\'66179\\', \\'70244\\', \\'81312\\', \\'19570\\', \\'14287\\', \\'61078\\', \\'81922\\', \\'63361\\', \\'80858\\', \\'306\\', \\'22156\\', \\'82923\\', \\'53176\\', \\'24864\\', \\'49193\\', \\'2961\\', \\'96536\\', \\'62449\\', \\'13213\\', \\'85347\\', \\'11442\\', \\'76615\\', \\'43037\\', \\'86122\\', \\'99676\\', \\'74309\\', \\'46017\\', \\'16175\\', \\'12685\\', \\'53550\\', \\'19080\\', \\'37283\\', \\'44921\\', \\'34991\\', \\'4433\\', \\'99561\\', \\'38215\\', \\'35662\\', \\'13892\\', \\'7814\\', \\'41718\\', \\'41231\\', \\'85589\\', \\'74048\\', \\'72169\\', \\'26946\\', \\'61732\\', \\'9135\\', \\'39009\\', \\'63534\\', \\'4114\\', \\'40417\\', \\'83412\\', \\'22562\\', \\'65546\\', \\'720\\', \\'90064\\', \\'73027\\', \\'50736\\', \\'71086\\', \\'12445\\', \\'3681\\', \\'65140\\', \\'56291\\', \\'47452\\', \\'48916\\', \\'65136\\', \\'53941\\', \\'15484\\', \\'21038\\', \\'47251\\', \\'78461\\', \\'31031\\', \\'4838\\', \\'87483\\', \\'732\\', \\'16111\\', \\'68263\\', \\'4811\\', \\'65979\\', \\'44283\\', \\'51659\\', \\'29997\\', \\'11280\\', \\'3880\\', \\'12399\\', \\'63450\\', \\'93862\\', \\'50981\\', \\'62790\\', \\'76784\\', \\'76696\\', \\'40906\\', \\'49261\\', \\'35863\\', \\'43747\\', \\'65954\\', \\'36125\\', \\'73713\\', \\'98678\\', \\'13409\\', \\'38773\\', \\'59417\\', \\'9763\\', \\'429\\', \\'66203\\', \\'7350\\', \\'32754\\', \\'36079\\', \\'72447\\', \\'63925\\', \\'12958\\', \\'65292\\', \\'80270\\', \\'78432\\', \\'50925\\', \\'74946\\', \\'7649\\', \\'13689\\', \\'68001\\', \\'52318\\', \\'5804\\', \\'51584\\', \\'63637\\', \\'85697\\', \\'50929\\', \\'25279\\', \\'20963\\', \\'83038\\', \\'31199\\', \\'64189\\', \\'17152\\', \\'20459\\', \\'66108\\', \\'66005\\', \\'53159\\', \\'53971\\', \\'32528\\', \\'77145\\', \\'52981\\', \\'88941\\', \\'68593\\', \\'86343\\', \\'97770\\', \\'25625\\', \\'17598\\', \\'55249\\', \\'89640\\', \\'94162\\', \\'65874\\', \\'36511\\', \\'21906\\', \\'70401\\', \\'30914\\', \\'24085\\', \\'42945\\', \\'55597\\', \\'78393\\', \\'98120\\', \\'38283\\', \\'44967\\', \\'76077\\', \\'45739\\', \\'92432\\', \\'11846\\', \\'59131\\', \\'26322\\', \\'82651\\', \\'94792\\', \\'37726\\', \\'23301\\', \\'11275\\', \\'98813\\', \\'34229\\', \\'65440\\', \\'51369\\', \\'55580\\', \\'35207\\', \\'84314\\', \\'35696\\', \\'50231\\', \\'9399\\', \\'18679\\', \\'27219\\', \\'22519\\', \\'26725\\', \\'63451\\', \\'79357\\', \\'55915\\', \\'77027\\', \\'30354\\', \\'45890\\', \\'10745\\', \\'60035\\', \\'7914\\', \\'43562\\', \\'12219\\', \\'30220\\', \\'29382\\', \\'72520\\', \\'87475\\', \\'83634\\', \\'15163\\', \\'32468\\', \\'72904\\', \\'18200\\', \\'84666\\', \\'43560\\', \\'58483\\', \\'64613\\', \\'52170\\', \\'55490\\', \\'45954\\', \\'99323\\', \\'26401\\', \\'61210\\', \\'10450\\', \\'70360\\', \\'42906\\', \\'32851\\', \\'70022\\', \\'49966\\', \\'62331\\', \\'84249\\', \\'98093\\', \\'62146\\', \\'88171\\', \\'73246\\', \\'48314\\', \\'45730\\', \\'56348\\', \\'59081\\', \\'16642\\', \\'57872\\', \\'81564\\', \\'32305\\', \\'4158\\', \\'47263\\',\\n    \\'97234\\', \\'74415\\', \\'36159\\', \\'30014\\', \\'22241\\', \\'77574\\', \\'27990\\', \\'67395\\', \\'81471\\', \\'18512\\', \\'47546\\', \\'23386\\', \\'6156\\', \\'72893\\', \\'15332\\', \\'57667\\', \\'92657\\', \\'35148\\', \\'45316\\', \\'90482\\', \\'93819\\', \\'38065\\', \\'74899\\', \\'10850\\', \\'63285\\', \\'50968\\', \\'88081\\', \\'42486\\', \\'56089\\', \\'43288\\', \\'11239\\', \\'55127\\', \\'26637\\', \\'85974\\', \\'93879\\', \\'78540\\', \\'42451\\', \\'35082\\', \\'93809\\', \\'63793\\', \\'51039\\', \\'13518\\', \\'20239\\', \\'26933\\', \\'19322\\', \\'26648\\', \\'83711\\', \\'93163\\', \\'95951\\', \\'77389\\', \\'43771\\', \\'36873\\', \\'66976\\', \\'38082\\', \\'59476\\', \\'53984\\', \\'6951\\', \\'42615\\', \\'80733\\', \\'1120\\', \\'80595\\', \\'10500\\', \\'67420\\', \\'38885\\', \\'8892\\', \\'36205\\', \\'17170\\', \\'46564\\', \\'66415\\', \\'36372\\', \\'68305\\', \\'41470\\', \\'38699\\', \\'60900\\', \\'23468\\', \\'6927\\', \\'498\\', \\'55896\\', \\'4005\\', \\'50692\\', \\'67984\\', \\'91012\\', \\'97314\\', \\'94177\\', \\'57676\\', \\'36734\\', \\'32671\\', \\'44733\\', \\'34981\\', \\'52186\\', \\'15599\\', \\'75642\\', \\'82652\\', \\'22773\\', \\'97106\\', \\'20691\\', \\'38085\\', \\'50368\\', \\'74916\\', \\'76281\\', \\'54002\\', \\'85721\\', \\'99186\\', \\'78438\\', \\'27865\\', \\'34827\\', \\'61315\\', \\'8817\\', \\'93105\\', \\'71539\\', \\'35484\\', \\'58033\\', \\'17540\\', \\'32806\\', \\'87253\\', \\'15780\\', \\'80123\\', \\'34241\\', \\'70383\\', \\'95515\\', \\'27998\\', \\'47682\\', \\'32682\\', \\'93658\\', \\'15116\\', \\'93030\\', \\'71866\\', \\'35516\\', \\'70161\\', \\'7556\\', \\'64122\\', \\'54622\\', \\'14312\\', \\'64375\\', \\'28863\\', \\'27886\\', \\'34040\\', \\'10010\\', \\'1460\\', \\'58765\\', \\'71496\\', \\'37785\\', \\'5616\\', \\'84850\\', \\'2194\\', \\'55514\\', \\'33636\\', \\'7138\\', \\'36937\\', \\'44763\\', \\'61308\\', \\'63574\\', \\'8069\\', \\'24109\\', \\'17821\\', \\'82144\\', \\'53309\\', \\'26183\\', \\'84238\\', \\'36684\\', \\'45285\\', \\'41353\\', \\'29380\\', \\'93726\\', \\'59560\\', \\'96422\\', \\'34218\\', \\'66851\\', \\'49001\\', \\'4855\\', \\'46849\\', \\'19877\\', \\'76540\\', \\'61415\\', \\'32053\\', \\'38801\\', \\'74623\\', \\'92808\\', \\'6660\\', \\'85031\\', \\'97706\\', \\'34417\\', \\'51085\\', \\'72292\\', \\'30903\\', \\'45126\\', \\'69978\\', \\'11572\\', \\'68622\\', \\'64123\\', \\'59344\\', \\'67118\\', \\'46014\\', \\'59248\\', \\'69321\\', \\'31897\\', \\'72232\\', \\'48016\\', \\'36455\\', \\'87125\\', \\'85356\\', \\'96888\\', \\'28316\\', \\'23149\\', \\'34823\\', \\'29944\\', \\'18522\\', \\'14045\\', \\'973\\', \\'49472\\', \\'89165\\', \\'84112\\', \\'94087\\', \\'47881\\', \\'87600\\', \\'86330\\', \\'13384\\', \\'4528\\', \\'94572\\', \\'30634\\', \\'86728\\', \\'48525\\', \\'53243\\', \\'35911\\', \\'96382\\', \\'22525\\', \\'89914\\', \\'52213\\', \\'23007\\', \\'54827\\', \\'35721\\', \\'49121\\', \\'40203\\', \\'99040\\', \\'55039\\', \\'94543\\', \\'85440\\', \\'75098\\', \\'12566\\', \\'15579\\', \\'40603\\', \\'51321\\', \\'28805\\', \\'46550\\', \\'42499\\', \\'69794\\', \\'51322\\', \\'37286\\', \\'72035\\', \\'15494\\', \\'39787\\', \\'97639\\', \\'24343\\', \\'36299\\', \\'72759\\', \\'96672\\', \\'58801\\', \\'57467\\', \\'97185\\', \\'19493\\', \\'4431\\', \\'33940\\', \\'950\\', \\'46713\\', \\'12503\\', \\'35185\\', \\'31106\\', \\'93821\\', \\'1086\\', \\'31767\\', \\'17484\\', \\'52751\\', \\'70411\\', \\'12196\\', \\'502\\', \\'45391\\', \\'70720\\', \\'27507\\', \\'1282\\', \\'18633\\', \\'45031\\', \\'10475\\', \\'83570\\', \\'29539\\', \\'16753\\', \\'63494\\', \\'17010\\', \\'76069\\', \\'38913\\', \\'53948\\', \\'34175\\', \\'36761\\', \\'37575\\', \\'73655\\', \\'76272\\', \\'1069\\', \\'74456\\', \\'10440\\', \\'65502\\', \\'95286\\', \\'39384\\', \\'83461\\', \\'76477\\', \\'4167\\', \\'46503\\', \\'22373\\', \\'24523\\', \\'46024\\', \\'28959\\', \\'83219\\', \\'27807\\', \\'80905\\', \\'88626\\', \\'70234\\', \\'86888\\', \\'60954\\', \\'95397\\', \\'47973\\', \\'47944\\', \\'30154\\', \\'42698\\', \\'15144\\', \\'53223\\', \\'21123\\', \\'19281\\', \\'62933\\', \\'24952\\', \\'84744\\', \\'58456\\', \\'38446\\', \\'26768\\', \\'40797\\', \\'107\\', \\'52101\\', \\'8348\\', \\'8531\\', \\'17772\\', \\'97826\\', \\'34009\\', \\'15825\\', \\'48977\\', \\'54939\\', \\'78886\\', \\'31784\\', \\'42842\\', \\'22773\\', \\'9095\\', \\'25113\\', \\'65362\\', \\'83953\\', \\'55921\\', \\'92797\\', \\'26776\\', \\'59312\\', \\'56428\\', \\'52218\\', \\'50141\\', \\'52535\\', \\'22564\\', \\'50708\\', \\'50384\\', \\'16261\\', \\'529\\', \\'31406\\', \\'46452\\', \\'30954\\', \\'5385\\', \\'60190\\', \\'38790\\', \\'65440\\', \\'11891\\', \\'2196\\', \\'83560\\', \\'68884\\', \\'72400\\', \\'47795\\', \\'7501\\', \\'8916\\', \\'63267\\', \\'35567\\', \\'39889\\', \\'61818\\', \\'94343\\', \\'46612\\', \\'75029\\', \\'46988\\', \\'12411\\', \\'6123\\', \\'60904\\', \\'43704\\', \\'31143\\', \\'72544\\', \\'45919\\', \\'67953\\', \\'97776\\', \\'49517\\', \\'60476\\', \\'54437\\', \\'46261\\', \\'99778\\', \\'18541\\', \\'77626\\', \\'12537\\', \\'68459\\', \\'12688\\', \\'36284\\', \\'54901\\', \\'89375\\', \\'10538\\', \\'38415\\', \\'33160\\', \\'78777\\', \\'33532\\', \\'82538\\', \\'21329\\', \\'34359\\', \\'29544\\', \\'57035\\', \\'61945\\', \\'49098\\', \\'32484\\', \\'68236\\', \\'11088\\', \\'57533\\', \\'11044\\', \\'96786\\', \\'58861\\', \\'51390\\', \\'9582\\', \\'24229\\', \\'32604\\', \\'66195\\', \\'7311\\', \\'46441\\', \\'73383\\', \\'58033\\', \\'41866\\', \\'19293\\', \\'73085\\', \\'50627\\', \\'19818\\', \\'40498\\', \\'56436\\', \\'99865\\', \\'55516\\', \\'38917\\', \\'89889\\', \\'49571\\', \\'99408\\', \\'20144\\', \\'76122\\', \\'49593\\', \\'47906\\', \\'94763\\', \\'26488\\', \\'86343\\', \\'98334\\', \\'70112\\', \\'85244\\', \\'45622\\', \\'47828\\', \\'35306\\', \\'86838\\', \\'57186\\', \\'69907\\', \\'90594\\', \\'68206\\', \\'25118\\', \\'75445\\', \\'71715\\', \\'15800\\', \\'67558\\', \\'17783\\', \\'56525\\', \\'22970\\', \\'17354\\', \\'17139\\', \\'76827\\', \\'50325\\', \\'95314\\', \\'65432\\', \\'44045\\', \\'57928\\', \\'66247\\', \\'10673\\', \\'69744\\', \\'99485\\', \\'57467\\', \\'66889\\', \\'55246\\', \\'15095\\', \\'23540\\', \\'32890\\', \\'22959\\', \\'59472\\', \\'62237\\', \\'6956\\', \\'34669\\', \\'16547\\', \\'54868\\', \\'22598\\', \\'65120\\', \\'48525\\', \\'72750\\', \\'70559\\', \\'75706\\', \\'61831\\', \\'14032\\', \\'36146\\', \\'90211\\', \\'36082\\', \\'79712\\', \\'43018\\', \\'53903\\', \\'82490\\', \\'45698\\', \\'54202\\', \\'83079\\', \\'4867\\', \\'18044\\', \\'55144\\', \\'49189\\', \\'33278\\', \\'48387\\', \\'68822\\', \\'73057\\', \\'58118\\', \\'89796\\', \\'47318\\', \\'98383\\', \\'58759\\', \\'172\\', \\'56627\\', \\'79861\\', \\'86734\\', \\'25758\\', \\'80779\\', \\'55741\\', \\'40924\\', \\'24568\\', \\'23090\\', \\'62934\\', \\'94264\\', \\'58331\\', \\'18747\\', \\'15802\\', \\'81585\\', \\'92542\\', \\'97426\\', \\'18205\\', \\'11820\\', \\'62702\\', \\'16439\\', \\'18613\\', \\'45918\\', \\'47584\\', \\'98743\\', \\'39808\\', \\'33357\\', \\'16033\\', \\'87378\\', \\'87036\\', \\'88920\\', \\'99300\\', \\'89343\\', \\'7384\\', \\'36867\\', \\'36712\\', \\'96947\\', \\'92141\\', \\'85779\\', \\'81735\\', \\'86121\\', \\'19511\\', \\'70519\\', \\'62537\\', \\'10398\\', \\'99308\\', \\'63922\\', \\'45419\\', \\'17708\\', \\'2093\\', \\'85127\\', \\'55753\\', \\'97149\\', \\'82877\\', \\'64642\\', \\'30417\\', \\'151\\', \\'75464\\', \\'75992\\', \\'99440\\', \\'58040\\', \\'32083\\', \\'90604\\', \\'47830\\', \\'40087\\', \\'78899\\', \\'43638\\', \\'59066\\', \\'46579\\', \\'44828\\', \\'35130\\', \\'10670\\', \\'62051\\', \\'94127\\', \\'32024\\', \\'85455\\', \\'80408\\', \\'18295\\', \\'8106\\', \\'89380\\', \\'90499\\', \\'3196\\', \\'3826\\', \\'63462\\', \\'64317\\', \\'55570\\', \\'77162\\', \\'48564\\', \\'59842\\', \\'80241\\', \\'76221\\', \\'57327\\', \\'48049\\', \\'74336\\', \\'43168\\', \\'19559\\', \\'32059\\', \\'99226\\', \\'46384\\', \\'48111\\', \\'56013\\', \\'58953\\', \\'68426\\', \\'22\\', \\'72641\\', \\'16207\\', \\'595\\', \\'71706\\', \\'61213\\', \\'65921\\', \\'67517\\', \\'92618\\', \\'57660\\', \\'76414\\', \\'60998\\', \\'1829\\', \\'90176\\', \\'62932\\', \\'15052\\', \\'94997\\', \\'41\\', \\'58848\\', \\'56411\\', \\'18129\\', \\'86542\\', \\'16330\\', \\'2803\\', \\'5651\\', \\'47351\\', \\'57866\\', \\'3560\\', \\'97530\\', \\'8338\\', \\'59434\\', \\'50183\\', \\'39076\\', \\'2516\\', \\'16293\\', \\'6559\\', \\'31189\\', \\'83713\\', \\'58214\\', \\'32016\\', \\'56581\\', \\'46226\\', \\'74599\\', \\'33513\\', \\'51530\\', \\'20163\\', \\'56512\\', \\'1694\\', \\'8165\\', \\'17370\\', \\'2510\\', \\'46015\\', \\'80417\\', \\'77195\\', \\'69062\\', \\'717\\', \\'33699\\', \\'37638\\', \\'82238\\', \\'5436\\', \\'67991\\', \\'98554\\', \\'26668\\', \\'19565\\', \\'26500\\', \\'30133\\', \\'54349\\', \\'36668\\', \\'56773\\', \\'55187\\', \\'25458\\', \\'54126\\', \\'11833\\', \\'32007\\', \\'38881\\', \\'20038\\', \\'42186\\', \\'67850\\', \\'12001\\', \\'96089\\', \\'63397\\', \\'75035\\', \\'16744\\', \\'45208\\', \\'84186\\', \\'82044\\', \\'34818\\', \\'55858\\', \\'1623\\', \\'41600\\', \\'34753\\', \\'92242\\', \\'16416\\', \\'49800\\', \\'45309\\', \\'56520\\', \\'38893\\', \\'42865\\', \\'37476\\', \\'78860\\', \\'32503\\', \\'18086\\', \\'55004\\', \\'65795\\', \\'82926\\', \\'75725\\', \\'52917\\', \\'75463\\', \\'82202\\', \\'35158\\', \\'67065\\', \\'38454\\', \\'90106\\', \\'79681\\', \\'57317\\', \\'68357\\', \\'66487\\', \\'99640\\', \\'13182\\', \\'68684\\', \\'96739\\', \\'89887\\', \\'54307\\', \\'98357\\', \\'4597\\', \\'47645\\', \\'38560\\', \\'17334\\', \\'46291\\', \\'91096\\', \\'22675\\', \\'12995\\', \\'35767\\', \\'76173\\', \\'54754\\', \\'75206\\', \\'13345\\', \\'78860\\', \\'19929\\', \\'12740\\', \\'13007\\', \\'69737\\', \\'52454\\', \\'6784\\', \\'77198\\', \\'59565\\', \\'44548\\', \\'22924\\', \\'38773\\', \\'9522\\', \\'59392\\', \\'45244\\', \\'64754\\', \\'39640\\', \\'75795\\', \\'22725\\', \\'78314\\', \\'24738\\', \\'83167\\', \\'31049\\', \\'92122\\', \\'62117\\', \\'47314\\', \\'34032\\', \\'76951\\', \\'63164\\', \\'22515\\', \\'46057\\', \\'81625\\', \\'72164\\', \\'60013\\', \\'26171\\', \\'55608\\', \\'50486\\', \\'51422\\', \\'18277\\', \\'13682\\', \\'70130\\', \\'49689\\', \\'32278\\', \\'25430\\', \\'84394\\', \\'57371\\', \\'93398\\', \\'14139\\', \\'461\\', \\'37302\\', \\'25705\\', \\'25642\\', \\'70311\\', \\'81778\\', \\'66948\\', \\'51187\\', \\'99649\\', \\'44509\\', \\'12753\\', \\'39827\\', \\'57393\\', \\'40288\\', \\'26496\\', \\'1500\\', \\'32979\\', \\'62062\\', \\'5170\\', \\'25273\\', \\'26343\\', \\'21058\\', \\'66749\\', \\'52257\\', \\'26335\\', \\'4347\\', \\'82427\\', \\'51381\\', \\'66857\\', \\'58330\\', \\'15097\\', \\'23881\\', \\'93865\\', \\'97929\\', \\'11233\\', \\'67910\\', \\'22731\\', \\'70911\\', \\'93941\\', \\'46169\\', \\'31920\\', \\'16027\\', \\'1635\\', \\'16338\\', \\'49712\\', \\'29345\\', \\'26316\\', \\'15221\\', \\'54771\\', \\'34715\\', \\'35399\\', \\'80287\\', \\'90881\\', \\'33758\\', \\'46569\\', \\'52450\\', \\'40564\\', \\'34885\\', \\'5679\\', \\'53232\\', \\'85632\\', \\'87510\\', \\'4008\\', \\'87014\\', \\'49611\\', \\'94569\\', \\'96432\\', \\'57394\\', \\'66064\\', \\'34144\\', \\'67269\\', \\'83546\\', \\'5901\\', \\'25386\\', \\'57588\\', \\'55055\\', \\'6940\\', \\'8414\\', \\'31432\\', \\'75407\\', \\'86922\\', \\'33925\\', \\'24600\\', \\'48261\\', \\'94439\\', \\'34234\\', \\'69028\\', \\'37145\\', \\'32386\\', \\'68275\\', \\'13237\\', \\'3521\\', \\'57395\\', \\'55029\\', \\'16426\\', \\'87797\\', \\'18559\\', \\'72744\\', \\'1155\\', \\'30384\\', \\'19799\\', \\'50001\\', \\'85831\\', \\'19583\\', \\'83898\\', \\'13465\\', \\'58160\\', \\'51160\\', \\'89216\\', \\'90725\\', \\'37151\\', \\'32241\\', \\'6319\\', \\'95146\\', \\'10376\\', \\'55137\\', \\'64094\\', \\'14990\\', \\'19747\\', \\'85852\\', \\'50692\\', \\'63214\\', \\'53123\\', \\'97058\\', \\'60203\\', \\'29272\\', \\'14439\\', \\'69712\\', \\'13023\\', \\'75808\\', \\'67150\\', \\'76276\\', \\'54521\\', \\'46621\\', \\'78807\\', \\'89302\\', \\'30273\\', \\'85103\\', \\'63180\\', \\'75468\\', \\'98474\\', \\'37749\\', \\'66275\\', \\'61712\\', \\'39381\\', \\'2740\\', \\'83025\\', \\'18083\\', \\'42030\\', \\'3391\\', \\'56204\\', \\'3960\\', \\'34780\\', \\'22476\\', \\'50074\\', \\'79854\\', \\'89447\\', \\'3695\\', \\'2986\\', \\'85090\\', \\'71529\\', \\'77995\\', \\'51572\\', \\'60278\\', \\'69314\\', \\'70777\\', \\'46754\\', \\'22085\\', \\'94517\\', \\'98052\\', \\'5700\\', \\'43157\\', \\'12345\\', \\'34663\\', \\'40350\\', \\'5739\\', \\'84384\\', \\'8354\\', \\'81566\\', \\'75500\\', \\'88934\\', \\'67062\\', \\'52877\\', \\'30428\\', \\'95593\\', \\'13288\\', \\'51836\\', \\'25264\\', \\'19278\\', \\'81290\\', \\'47555\\', \\'7606\\', \\'46694\\', \\'29735\\', \\'25723\\', \\'81597\\', \\'26221\\', \\'24545\\', \\'98576\\', \\'63395\\', \\'36061\\', \\'58752\\', \\'8486\\', \\'97817\\', \\'27235\\', \\'18579\\', \\'2387\\', \\'88017\\', \\'42855\\', \\'5111\\', \\'49094\\', \\'28448\\', \\'82227\\', \\'63436\\', \\'89135\\', \\'86591\\', \\'2922\\', \\'72163\\', \\'83000\\', \\'14378\\', \\'81829\\', \\'5610\\', \\'93513\\', \\'78135\\', \\'55292\\', \\'80776\\', \\'21212\\', \\'40604\\', \\'44442\\', \\'50505\\', \\'22750\\', \\'47985\\', \\'19367\\', \\'63494\\', \\'4363\\', \\'64500\\', \\'79444\\', \\'36504\\', \\'43418\\', \\'72523\\', \\'85981\\', \\'13740\\', \\'302\\', \\'76267\\', \\'14962\\', \\'79643\\', \\'26144\\', \\'27125\\', \\'13364\\', \\'82935\\', \\'8936\\', \\'8340\\', \\'38025\\', \\'80742\\', \\'42829\\', \\'95357\\', \\'11131\\', \\'6806\\', \\'10497\\', \\'70527\\', \\'3004\\', \\'54217\\', \\'51051\\', \\'34722\\', \\'57348\\', \\'50489\\', \\'76514\\', \\'76546\\', \\'29498\\', \\'40587\\', \\'52697\\', \\'37808\\', \\'32509\\', \\'68927\\', \\'68051\\', \\'53328\\', \\'41926\\', \\'9344\\', \\'67795\\', \\'98626\\', \\'44058\\', \\'46817\\', \\'95773\\', \\'57539\\', \\'13352\\', \\'96292\\', \\'72647\\', \\'47111\\', \\'48595\\', \\'82684\\', \\'43566\\', \\'93381\\', \\'3081\\', \\'27653\\', \\'25045\\', \\'34753\\', \\'80870\\', \\'92013\\', \\'21935\\', \\'89454\\', \\'14127\\', \\'73278\\', \\'87015\\',\\n    \\'65232\\', \\'97216\\', \\'26840\\', \\'21272\\', \\'8226\\', \\'42347\\', \\'44358\\', \\'26715\\', \\'7860\\', \\'31989\\', \\'14091\\', \\'15648\\', \\'85801\\', \\'20463\\', \\'85221\\', \\'77969\\', \\'87196\\', \\'28563\\', \\'69663\\', \\'55169\\', \\'11372\\', \\'38915\\', \\'74678\\', \\'1183\\', \\'14845\\', \\'85696\\', \\'54995\\', \\'62342\\', \\'83227\\', \\'73536\\', \\'64251\\', \\'46556\\', \\'78421\\', \\'89058\\', \\'41036\\', \\'79746\\', \\'42148\\', \\'77720\\', \\'33923\\', \\'24979\\', \\'98428\\', \\'80202\\', \\'36845\\', \\'20584\\', \\'13506\\', \\'97375\\', \\'48434\\', \\'14863\\', \\'29237\\', \\'99014\\', \\'20650\\', \\'48496\\', \\'61825\\', \\'89100\\', \\'51501\\', \\'22632\\', \\'89030\\', \\'22901\\', \\'54072\\', \\'68093\\', \\'98140\\', \\'1631\\', \\'43266\\', \\'34532\\', \\'35780\\', \\'17763\\', \\'41731\\', \\'19580\\', \\'72266\\', \\'66530\\', \\'55650\\', \\'51506\\', \\'92256\\', \\'5332\\', \\'85143\\', \\'65002\\', \\'30530\\', \\'21358\\', \\'88420\\', \\'81349\\', \\'94086\\', \\'68143\\', \\'95343\\', \\'30490\\', \\'61605\\', \\'40296\\', \\'61665\\', \\'21032\\', \\'498\\', \\'67165\\', \\'3151\\', \\'94788\\', \\'36502\\', \\'77434\\', \\'88776\\', \\'67565\\', \\'4404\\', \\'51177\\', \\'49030\\', \\'88502\\', \\'92552\\', \\'31170\\', \\'92051\\', \\'79960\\', \\'43784\\', \\'17864\\', \\'54179\\', \\'91590\\', \\'39153\\', \\'75017\\', \\'11161\\', \\'31100\\', \\'27964\\', \\'30263\\', \\'54908\\', \\'57991\\', \\'89272\\', \\'14642\\', \\'40576\\', \\'20224\\', \\'48887\\', \\'93479\\', \\'87862\\', \\'19858\\', \\'78238\\', \\'4113\\', \\'32369\\', \\'70072\\', \\'82752\\', \\'85122\\', \\'72450\\', \\'53113\\', \\'53806\\', \\'45347\\', \\'55032\\', \\'77242\\', \\'70401\\', \\'83685\\', \\'41229\\', \\'47489\\', \\'36964\\', \\'40556\\', \\'2619\\', \\'64080\\', \\'7354\\', \\'10159\\', \\'74827\\', \\'11846\\', \\'64587\\', \\'88667\\', \\'20940\\', \\'93594\\', \\'43669\\', \\'38592\\', \\'20211\\', \\'96055\\', \\'65995\\', \\'89957\\', \\'18941\\', \\'82750\\', \\'90753\\', \\'49989\\', \\'63331\\', \\'52911\\', \\'1675\\', \\'98447\\', \\'35516\\', \\'28539\\', \\'91592\\', \\'80615\\', \\'68066\\', \\'63922\\', \\'52509\\', \\'26025\\', \\'14634\\', \\'69439\\', \\'19820\\', \\'89983\\', \\'38306\\', \\'84048\\', \\'66264\\', \\'26855\\', \\'3634\\', \\'92094\\', \\'61088\\', \\'28293\\', \\'11428\\', \\'68748\\', \\'10665\\', \\'27114\\', \\'20151\\', \\'65883\\', \\'86423\\', \\'77069\\', \\'74997\\', \\'147\\', \\'41427\\', \\'26124\\', \\'22163\\', \\'82452\\', \\'61186\\', \\'89370\\', \\'58583\\', \\'2692\\', \\'54969\\', \\'84679\\', \\'26237\\', \\'46229\\', \\'16041\\', \\'28473\\', \\'38684\\', \\'43587\\', \\'37886\\', \\'68790\\', \\'92030\\', \\'85066\\', \\'13673\\', \\'30280\\', \\'91844\\', \\'43115\\', \\'10005\\', \\'1481\\', \\'84393\\', \\'10008\\', \\'60291\\', \\'90687\\', \\'99338\\', \\'95570\\', \\'39916\\', \\'68643\\', \\'41309\\', \\'24724\\', \\'57188\\', \\'75473\\', \\'21647\\', \\'50206\\', \\'6820\\', \\'73756\\', \\'51102\\', \\'76169\\', \\'99840\\', \\'32863\\', \\'17306\\', \\'43063\\', \\'90483\\', \\'15894\\', \\'59042\\', \\'53797\\', \\'93961\\', \\'12248\\', \\'12125\\', \\'39393\\', \\'17056\\', \\'11576\\', \\'6145\\', \\'43960\\', \\'74245\\', \\'86805\\', \\'95665\\', \\'58855\\', \\'50039\\', \\'14867\\', \\'85076\\', \\'3939\\', \\'55501\\', \\'18184\\', \\'62019\\', \\'16312\\', \\'37518\\', \\'18544\\', \\'67431\\', \\'68250\\', \\'70766\\', \\'74635\\', \\'41835\\', \\'74538\\', \\'77822\\', \\'47918\\', \\'90863\\', \\'17526\\', \\'78930\\', \\'47473\\', \\'67945\\', \\'70385\\', \\'19404\\', \\'45030\\', \\'13476\\', \\'46186\\', \\'28191\\', \\'22019\\', \\'18700\\', \\'90915\\', \\'41408\\', \\'63333\\', \\'52902\\', \\'87336\\', \\'72833\\', \\'47707\\', \\'46692\\', \\'47873\\', \\'82012\\', \\'22597\\', \\'46379\\', \\'69109\\', \\'72108\\', \\'47439\\', \\'51130\\', \\'41894\\', \\'29827\\', \\'88403\\', \\'75040\\', \\'37504\\', \\'69925\\', \\'19034\\', \\'57998\\', \\'46633\\', \\'1021\\', \\'48358\\', \\'55923\\', \\'3536\\', \\'26350\\', \\'36696\\', \\'29658\\', \\'25247\\', \\'65614\\', \\'19042\\', \\'34463\\', \\'85938\\', \\'26155\\', \\'49801\\', \\'74604\\', \\'17581\\', \\'91632\\', \\'12935\\', \\'97966\\', \\'14947\\', \\'71196\\', \\'32270\\', \\'51915\\', \\'41692\\', \\'83274\\', \\'6608\\', \\'37190\\', \\'35363\\', \\'85313\\', \\'97545\\', \\'5696\\', \\'23700\\', \\'39334\\', \\'38434\\', \\'20192\\', \\'27349\\', \\'71340\\', \\'19732\\', \\'96142\\', \\'17152\\', \\'32995\\', \\'34829\\', \\'71157\\', \\'36376\\', \\'11522\\', \\'26646\\', \\'19239\\', \\'34033\\', \\'4200\\', \\'39023\\', \\'64291\\', \\'7931\\', \\'42807\\', \\'2800\\', \\'75490\\', \\'4515\\', \\'84571\\', \\'59557\\', \\'13421\\', \\'69465\\', \\'69121\\', \\'82358\\', \\'18134\\', \\'18536\\', \\'74294\\', \\'24013\\', \\'43777\\', \\'94192\\', \\'77031\\', \\'33341\\', \\'98070\\', \\'27534\\', \\'34419\\', \\'40107\\', \\'17826\\', \\'48196\\', \\'82843\\', \\'37592\\', \\'40484\\', \\'49019\\', \\'59822\\', \\'26118\\', \\'89788\\', \\'5990\\', \\'99595\\', \\'35178\\', \\'49473\\', \\'54699\\', \\'81618\\', \\'23497\\', \\'87025\\', \\'29421\\', \\'1685\\', \\'31406\\', \\'54115\\', \\'25193\\', \\'44525\\', \\'44886\\', \\'4885\\', \\'74482\\', \\'63280\\', \\'57532\\', \\'29773\\', \\'83104\\', \\'5354\\', \\'35313\\', \\'12558\\', \\'16165\\', \\'52712\\', \\'82282\\', \\'73541\\', \\'97334\\', \\'7283\\', \\'29405\\', \\'87694\\', \\'64717\\', \\'98840\\', \\'2868\\', \\'17727\\', \\'61847\\', \\'32417\\', \\'91009\\', \\'12117\\', \\'35077\\', \\'36279\\', \\'87552\\', \\'12441\\', \\'70576\\', \\'505\\', \\'57332\\', \\'56191\\', \\'33846\\', \\'78645\\', \\'58506\\', \\'48692\\', \\'27712\\', \\'86722\\', \\'46677\\', \\'81512\\', \\'14807\\', \\'30337\\', \\'7863\\', \\'457\\', \\'71893\\', \\'32256\\', \\'21897\\', \\'95811\\', \\'73552\\', \\'24929\\', \\'4893\\', \\'49448\\', \\'33836\\', \\'24781\\', \\'43236\\', \\'30853\\', \\'81985\\', \\'60625\\', \\'20087\\', \\'30674\\', \\'39280\\', \\'10779\\', \\'97785\\', \\'11298\\', \\'65057\\', \\'17589\\', \\'44085\\', \\'10126\\', \\'72351\\', \\'4165\\', \\'30539\\', \\'97124\\', \\'20545\\', \\'50087\\', \\'13490\\', \\'4055\\', \\'62365\\', \\'24046\\', \\'63110\\', \\'99045\\', \\'47122\\', \\'74389\\', \\'29843\\', \\'89082\\', \\'71686\\', \\'40321\\', \\'15789\\', \\'63062\\', \\'23403\\', \\'27718\\', \\'72550\\', \\'36098\\', \\'47309\\', \\'60568\\', \\'22266\\', \\'20542\\', \\'59018\\', \\'76386\\', \\'89381\\', \\'9164\\', \\'42093\\', \\'19931\\', \\'90426\\', \\'73695\\', \\'26948\\', \\'17363\\', \\'15727\\', \\'75439\\', \\'45425\\', \\'42518\\', \\'32966\\', \\'80703\\', \\'4659\\', \\'74566\\', \\'22464\\', \\'49383\\', \\'53167\\', \\'80720\\', \\'45464\\', \\'179\\', \\'29789\\', \\'19444\\', \\'97663\\', \\'6466\\', \\'51290\\', \\'56374\\', \\'17869\\', \\'97520\\', \\'45148\\', \\'92149\\', \\'54757\\', \\'94455\\', \\'80125\\', \\'98584\\', \\'70174\\', \\'77708\\', \\'59260\\', \\'50275\\', \\'49211\\', \\'60730\\', \\'29875\\', \\'90935\\', \\'29676\\', \\'95390\\', \\'18263\\', \\'73189\\', \\'41364\\', \\'39707\\', \\'75110\\', \\'59156\\', \\'11770\\', \\'38655\\', \\'55173\\', \\'62547\\', \\'16328\\', \\'70585\\', \\'81958\\', \\'61191\\', \\'90906\\', \\'45978\\', \\'59134\\', \\'24609\\', \\'32956\\', \\'30518\\', \\'27341\\', \\'84512\\', \\'24987\\', \\'65295\\', \\'75210\\', \\'97931\\', \\'56717\\', \\'6751\\', \\'83338\\', \\'82808\\', \\'96570\\', \\'27038\\', \\'93274\\', \\'399\\', \\'9330\\', \\'54319\\', \\'24848\\', \\'39269\\', \\'92692\\', \\'50625\\', \\'52306\\', \\'93262\\', \\'48756\\', \\'66694\\', \\'50517\\', \\'41763\\', \\'42231\\', \\'8589\\', \\'41923\\', \\'87839\\', \\'9579\\', \\'5104\\', \\'41634\\', \\'63030\\', \\'15100\\', \\'59593\\', \\'38288\\', \\'88852\\', \\'81957\\', \\'84267\\', \\'56380\\', \\'89329\\', \\'74372\\', \\'16026\\', \\'15795\\', \\'29456\\', \\'93173\\', \\'76367\\', \\'37598\\', \\'68153\\', \\'72405\\', \\'55181\\', \\'77543\\', \\'30730\\', \\'27564\\', \\'98764\\', \\'48711\\', \\'22180\\', \\'51352\\', \\'80150\\', \\'50091\\', \\'19481\\', \\'97962\\', \\'74879\\', \\'75369\\', \\'84410\\', \\'54712\\', \\'68399\\', \\'60910\\', \\'57922\\', \\'8896\\', \\'94118\\', \\'5276\\', \\'54049\\', \\'11614\\', \\'98854\\', \\'65979\\', \\'75156\\', \\'39456\\', \\'30226\\', \\'27357\\', \\'71087\\', \\'30814\\', \\'6416\\', \\'56480\\', \\'70259\\', \\'56525\\', \\'69945\\', \\'63874\\', \\'87262\\', \\'97398\\', \\'77972\\', \\'76745\\', \\'97191\\', \\'26739\\', \\'10957\\', \\'48743\\', \\'18175\\', \\'74688\\', \\'49853\\', \\'83675\\', \\'79232\\', \\'72211\\', \\'77255\\', \\'44445\\', \\'81053\\', \\'5506\\', \\'21366\\', \\'99015\\', \\'57598\\', \\'9467\\', \\'65131\\', \\'73794\\', \\'25679\\', \\'3609\\', \\'70041\\', \\'14653\\', \\'93792\\', \\'7076\\', \\'87326\\', \\'12978\\', \\'20886\\', \\'24089\\', \\'82187\\', \\'55203\\', \\'96649\\', \\'51205\\', \\'26250\\', \\'98219\\', \\'64275\\', \\'18634\\', \\'94004\\', \\'50999\\', \\'99611\\', \\'72380\\', \\'28685\\', \\'33246\\', \\'49116\\', \\'44972\\', \\'44273\\', \\'26558\\', \\'84799\\', \\'51310\\', \\'39480\\', \\'16713\\', \\'34371\\', \\'94308\\', \\'38743\\', \\'14592\\', \\'47430\\', \\'74505\\', \\'38866\\', \\'69596\\', \\'84705\\', \\'20236\\', \\'49353\\', \\'28259\\', \\'16255\\', \\'27665\\', \\'94271\\', \\'98652\\', \\'18279\\', \\'4805\\', \\'57471\\', \\'7944\\', \\'72567\\', \\'55603\\', \\'47327\\', \\'32268\\', \\'1256\\', \\'47608\\', \\'80225\\', \\'15744\\', \\'75492\\', \\'74652\\', \\'96812\\', \\'77976\\', \\'72595\\', \\'86791\\', \\'97736\\', \\'83149\\', \\'57030\\', \\'58553\\', \\'7121\\', \\'53544\\', \\'94894\\', \\'57236\\', \\'55850\\', \\'52762\\', \\'36303\\', \\'97740\\', \\'25314\\', \\'43196\\', \\'74248\\', \\'52320\\', \\'60448\\', \\'10606\\', \\'7010\\', \\'21765\\', \\'20357\\', \\'61825\\', \\'34331\\', \\'15898\\', \\'67485\\', \\'70353\\', \\'41657\\', \\'49212\\', \\'21628\\', \\'11783\\', \\'90514\\', \\'33883\\', \\'85668\\', \\'73432\\', \\'55374\\', \\'53880\\', \\'864\\', \\'66975\\', \\'51190\\', \\'18268\\', \\'45344\\', \\'99680\\', \\'91098\\', \\'3893\\', \\'90773\\', \\'55611\\', \\'5914\\', \\'14977\\', \\'29463\\', \\'38339\\', \\'94390\\', \\'15379\\', \\'74717\\', \\'78721\\', \\'10689\\', \\'90966\\', \\'33191\\', \\'32384\\', \\'4363\\', \\'61992\\', \\'37456\\', \\'28402\\', \\'51633\\', \\'14358\\', \\'99226\\', \\'23024\\', \\'22114\\', \\'86438\\', \\'70682\\', \\'27242\\', \\'46237\\', \\'92467\\', \\'83997\\', \\'71994\\', \\'59256\\', \\'44728\\', \\'51372\\', \\'50328\\', \\'66925\\', \\'16487\\', \\'7348\\', \\'69501\\', \\'23328\\', \\'55945\\', \\'98064\\', \\'92561\\', \\'5275\\', \\'67097\\', \\'37616\\', \\'8561\\', \\'14378\\', \\'83858\\', \\'44306\\', \\'60514\\', \\'89238\\', \\'28781\\', \\'11864\\', \\'31540\\', \\'3809\\', \\'16629\\', \\'4336\\', \\'70961\\', \\'10787\\', \\'58719\\', \\'39587\\', \\'46840\\', \\'48993\\', \\'18578\\', \\'30890\\', \\'71438\\', \\'29672\\', \\'54785\\', \\'77570\\', \\'25012\\', \\'70696\\', \\'25935\\', \\'279\\', \\'74327\\', \\'33944\\', \\'55060\\', \\'72194\\', \\'28269\\', \\'47600\\', \\'2132\\', \\'56618\\', \\'77029\\', \\'26410\\', \\'25682\\', \\'13744\\', \\'31968\\', \\'27115\\', \\'57065\\', \\'49313\\', \\'31237\\', \\'70475\\', \\'38549\\', \\'33723\\', \\'66622\\', \\'19646\\', \\'93518\\', \\'4052\\', \\'29390\\', \\'10163\\', \\'19879\\', \\'10765\\', \\'71024\\', \\'71339\\', \\'69114\\', \\'78385\\', \\'64440\\', \\'79577\\', \\'48109\\', \\'81114\\', \\'4708\\', \\'44863\\', \\'72410\\', \\'71161\\', \\'55491\\', \\'3433\\', \\'88675\\', \\'48496\\', \\'97875\\', \\'17184\\', \\'840\\', \\'16960\\', \\'32880\\', \\'48533\\', \\'82430\\', \\'44005\\', \\'36654\\', \\'96011\\', \\'16158\\', \\'21530\\', \\'88485\\', \\'91231\\', \\'77831\\', \\'39266\\', \\'9833\\', \\'96154\\', \\'89200\\', \\'2021\\', \\'57813\\', \\'897\\', \\'27643\\', \\'65750\\', \\'27447\\', \\'29043\\', \\'50691\\', \\'74683\\', \\'78027\\', \\'99590\\', \\'6052\\', \\'22867\\', \\'4567\\', \\'3918\\', \\'27143\\', \\'77750\\', \\'32003\\', \\'14011\\', \\'59006\\', \\'33140\\', \\'12165\\', \\'72413\\', \\'89931\\', \\'59389\\', \\'45281\\', \\'52596\\', \\'31993\\', \\'88613\\', \\'85332\\', \\'8016\\', \\'34419\\', \\'80901\\', \\'76317\\', \\'34932\\', \\'71099\\', \\'23354\\', \\'19296\\', \\'42671\\', \\'12646\\', \\'47189\\', \\'67982\\', \\'79803\\', \\'28449\\', \\'6229\\', \\'44873\\', \\'48970\\', \\'10012\\', \\'6871\\', \\'88240\\', \\'1277\\', \\'71039\\', \\'47959\\', \\'45051\\', \\'74358\\', \\'68394\\', \\'49093\\', \\'78063\\', \\'26981\\', \\'8704\\', \\'18470\\', \\'14458\\', \\'38195\\', \\'75691\\', \\'64683\\', \\'44910\\', \\'93423\\', \\'67591\\', \\'36833\\', \\'63204\\', \\'29507\\', \\'38894\\', \\'59524\\', \\'12141\\', \\'36543\\', \\'86914\\', \\'91250\\', \\'45459\\', \\'30156\\', \\'119\\', \\'95390\\', \\'75872\\', \\'28827\\', \\'67609\\', \\'99869\\', \\'91237\\', \\'70358\\', \\'60292\\', \\'3499\\', \\'3133\\', \\'45478\\', \\'5800\\', \\'47576\\', \\'50558\\', \\'71500\\', \\'65579\\', \\'84252\\', \\'68999\\', \\'59495\\', \\'79395\\', \\'28634\\', \\'44121\\', \\'26503\\', \\'11922\\', \\'22058\\', \\'34164\\', \\'32668\\', \\'10422\\', \\'62793\\', \\'41303\\', \\'2030\\', \\'76875\\', \\'17151\\', \\'42101\\', \\'22133\\', \\'82998\\', \\'19499\\', \\'14247\\', \\'95259\\', \\'746\\', \\'38449\\', \\'72450\\', \\'99138\\', \\'61259\\', \\'65623\\', \\'13439\\', \\'45597\\', \\'55234\\', \\'19347\\', \\'70266\\', \\'4828\\', \\'79316\\', \\'16983\\', \\'49723\\', \\'95468\\', \\'9747\\', \\'81126\\', \\'31999\\', \\'33796\\', \\'15270\\', \\'60644\\', \\'61048\\', \\'98848\\', \\'26685\\', \\'40980\\', \\'23733\\', \\'13676\\', \\'98363\\', \\'17970\\', \\'76451\\', \\'42657\\', \\'13165\\', \\'27870\\', \\'49193\\', \\'56279\\', \\'34647\\', \\'1652\\', \\'47674\\', \\'95555\\', \\'80556\\', \\'52419\\', \\'61110\\', \\'26124\\', \\'49097\\', \\'90600\\', \\'53605\\', \\'97544\\', \\'8694\\', \\'94739\\', \\'59652\\', \\'41807\\', \\'87155\\', \\'83539\\', \\'61468\\', \\'20614\\', \\'12652\\', \\'86562\\', \\'82894\\', \\'94360\\', \\'56182\\', \\'30513\\', \\'65379\\', \\'6522\\', \\'86486\\',\\n    \\'37674\\', \\'44977\\', \\'54370\\', \\'97381\\', \\'60218\\', \\'2423\\', \\'99591\\', \\'69913\\', \\'26507\\', \\'19708\\', \\'6279\\', \\'58955\\', \\'20126\\', \\'1495\\', \\'57894\\', \\'7638\\', \\'38700\\', \\'77148\\', \\'36844\\', \\'7539\\', \\'91452\\', \\'6914\\', \\'74349\\', \\'66850\\', \\'49104\\', \\'6516\\', \\'58535\\', \\'20851\\', \\'27859\\', \\'32881\\', \\'72919\\', \\'28203\\', \\'32882\\', \\'2419\\', \\'77583\\', \\'63822\\', \\'37703\\', \\'66793\\', \\'65784\\', \\'62281\\', \\'55867\\', \\'70703\\', \\'89344\\', \\'1498\\', \\'33770\\', \\'87176\\', \\'95636\\', \\'64891\\', \\'90736\\', \\'95521\\', \\'10989\\', \\'5237\\', \\'99010\\', \\'21106\\', \\'11422\\', \\'1831\\', \\'67239\\', \\'52557\\', \\'36468\\', \\'71713\\', \\'39637\\', \\'49574\\', \\'50455\\', \\'14953\\', \\'96900\\', \\'70852\\', \\'96982\\', \\'4341\\', \\'44585\\', \\'95651\\', \\'79669\\', \\'29652\\', \\'87294\\', \\'74692\\', \\'16221\\', \\'768\\', \\'35380\\', \\'21352\\', \\'50907\\', \\'27259\\', \\'11718\\', \\'5017\\', \\'55964\\', \\'94137\\', \\'52347\\', \\'10595\\', \\'12968\\', \\'85602\\', \\'97965\\', \\'18836\\', \\'90511\\', \\'70960\\', \\'97336\\', \\'44575\\', \\'23791\\', \\'42195\\', \\'64776\\', \\'29363\\', \\'42379\\', \\'1805\\', \\'28919\\', \\'6772\\', \\'78143\\', \\'54797\\', \\'27362\\', \\'56149\\', \\'59048\\', \\'38567\\', \\'6339\\', \\'27787\\', \\'42167\\', \\'45990\\', \\'95532\\', \\'54839\\', \\'26572\\', \\'38496\\', \\'89797\\', \\'6634\\', \\'16468\\', \\'24898\\', \\'66814\\', \\'98126\\', \\'31762\\', \\'36133\\', \\'64539\\', \\'43167\\', \\'87022\\', \\'61295\\', \\'30364\\', \\'89249\\', \\'25756\\', \\'63570\\', \\'91484\\', \\'10564\\', \\'79648\\', \\'5756\\', \\'41376\\', \\'61897\\', \\'40388\\', \\'88927\\', \\'62891\\', \\'79708\\', \\'25495\\', \\'22204\\', \\'33892\\', \\'36871\\', \\'19879\\', \\'58646\\', \\'57061\\', \\'73100\\', \\'75831\\', \\'20029\\', \\'67462\\', \\'54675\\', \\'7766\\', \\'2409\\', \\'24506\\', \\'7877\\', \\'11720\\', \\'86252\\', \\'9897\\', \\'8080\\', \\'70684\\', \\'74497\\', \\'2242\\', \\'24604\\', \\'31969\\', \\'83999\\', \\'56635\\', \\'5283\\', \\'64971\\', \\'79152\\', \\'27470\\', \\'89042\\', \\'22835\\', \\'21476\\', \\'50292\\', \\'56081\\', \\'96342\\', \\'32763\\', \\'84487\\', \\'64856\\', \\'79152\\', \\'64656\\', \\'72169\\', \\'69971\\', \\'93094\\', \\'52804\\', \\'80917\\', \\'53152\\', \\'56016\\', \\'28496\\', \\'79110\\', \\'17133\\', \\'12581\\', \\'91742\\', \\'78929\\', \\'2676\\', \\'46700\\', \\'59528\\', \\'93808\\', \\'4535\\', \\'54035\\', \\'40161\\', \\'62796\\', \\'3598\\', \\'97088\\', \\'13599\\', \\'36337\\', \\'73395\\', \\'17494\\', \\'86275\\', \\'62058\\', \\'61937\\', \\'87747\\', \\'94883\\', \\'90677\\', \\'88544\\', \\'72553\\', \\'50210\\', \\'75481\\', \\'64378\\', \\'74464\\', \\'21659\\', \\'30970\\', \\'71989\\', \\'84846\\', \\'72289\\', \\'88716\\', \\'39143\\', \\'8487\\', \\'4912\\', \\'91013\\', \\'18623\\', \\'19122\\', \\'36507\\', \\'76438\\', \\'7516\\', \\'67970\\', \\'72350\\', \\'69873\\', \\'33635\\', \\'55983\\', \\'69008\\', \\'49545\\', \\'3134\\', \\'60056\\', \\'52509\\', \\'63304\\', \\'15560\\', \\'23651\\', \\'81090\\', \\'7027\\', \\'8317\\', \\'33060\\', \\'37295\\', \\'51961\\', \\'53037\\', \\'97431\\', \\'40512\\', \\'23536\\', \\'25168\\', \\'78455\\', \\'85613\\', \\'12304\\', \\'40733\\', \\'99890\\', \\'51238\\', \\'55439\\', \\'96201\\', \\'73559\\', \\'92533\\', \\'90173\\', \\'16721\\', \\'6078\\', \\'29854\\', \\'38894\\', \\'31117\\', \\'63040\\', \\'86795\\', \\'81786\\', \\'21149\\', \\'38998\\', \\'61811\\', \\'48622\\', \\'73019\\', \\'59296\\', \\'13576\\', \\'92559\\', \\'36300\\', \\'77294\\', \\'26794\\', \\'50912\\', \\'98380\\', \\'13176\\', \\'57746\\', \\'75286\\', \\'15330\\', \\'40921\\', \\'7337\\', \\'4664\\', \\'20384\\', \\'4674\\', \\'44516\\', \\'27633\\', \\'31950\\', \\'88210\\', \\'54536\\', \\'9839\\', \\'80137\\', \\'77491\\', \\'18434\\', \\'45152\\', \\'96942\\', \\'41005\\', \\'76103\\', \\'34825\\', \\'86869\\', \\'14772\\', \\'13384\\', \\'21051\\', \\'37348\\', \\'34434\\', \\'97210\\', \\'54960\\', \\'26598\\', \\'60981\\', \\'41889\\', \\'6446\\', \\'64492\\', \\'95310\\', \\'86236\\', \\'81885\\', \\'35684\\', \\'16539\\', \\'98476\\', \\'32028\\', \\'96470\\', \\'6318\\', \\'99576\\', \\'93935\\', \\'48609\\', \\'86090\\', \\'2476\\', \\'65576\\', \\'80636\\', \\'44817\\', \\'99646\\', \\'98963\\', \\'20486\\', \\'26261\\', \\'27334\\', \\'72946\\', \\'82023\\', \\'33506\\', \\'80193\\', \\'13762\\', \\'98133\\', \\'21134\\', \\'33268\\', \\'63477\\', \\'74609\\', \\'30454\\', \\'51477\\', \\'93391\\', \\'96805\\', \\'68653\\', \\'2714\\', \\'63642\\', \\'51520\\', \\'22972\\', \\'13305\\', \\'96058\\', \\'42336\\', \\'74461\\', \\'31597\\', \\'12050\\', \\'81712\\', \\'37977\\', \\'25718\\', \\'4834\\', \\'56608\\', \\'75731\\', \\'406\\', \\'28585\\', \\'63924\\', \\'23702\\', \\'29849\\', \\'16941\\', \\'91921\\', \\'65842\\', \\'76525\\', \\'68534\\', \\'50902\\', \\'17609\\', \\'23852\\', \\'53703\\', \\'31286\\', \\'58526\\', \\'9633\\', \\'87596\\', \\'10654\\', \\'2085\\', \\'52766\\', \\'22135\\', \\'76524\\', \\'32295\\', \\'90072\\', \\'70078\\', \\'77786\\', \\'93741\\', \\'87320\\', \\'70309\\', \\'44024\\', \\'95286\\', \\'12361\\', \\'29682\\', \\'59766\\', \\'26685\\', \\'90686\\', \\'81691\\', \\'49704\\', \\'23431\\', \\'53955\\', \\'39023\\', \\'47261\\', \\'1530\\', \\'58265\\', \\'80065\\', \\'95620\\', \\'90621\\', \\'63760\\', \\'90676\\', \\'81653\\', \\'36397\\', \\'20252\\', \\'81754\\', \\'20256\\', \\'67098\\', \\'7838\\', \\'49408\\', \\'88400\\', \\'87941\\', \\'84533\\', \\'6570\\', \\'22567\\', \\'18850\\', \\'55472\\', \\'40129\\', \\'48425\\', \\'23497\\', \\'39308\\', \\'34698\\', \\'53092\\', \\'89480\\', \\'47785\\', \\'57282\\', \\'25508\\', \\'19006\\', \\'50604\\', \\'86917\\', \\'9436\\', \\'88921\\', \\'3168\\', \\'70537\\', \\'3185\\', \\'34988\\', \\'5462\\', \\'69482\\', \\'45768\\', \\'91955\\', \\'56898\\', \\'15307\\', \\'99731\\', \\'89292\\', \\'19356\\', \\'20646\\', \\'66712\\', \\'7281\\', \\'12856\\', \\'31174\\', \\'19577\\', \\'8726\\', \\'62971\\', \\'33008\\', \\'37118\\', \\'59055\\', \\'84101\\', \\'68445\\', \\'91957\\', \\'47526\\', \\'15627\\', \\'79914\\', \\'20013\\', \\'26147\\', \\'80821\\', \\'56372\\', \\'74205\\', \\'28531\\', \\'25352\\', \\'51775\\', \\'93948\\', \\'55212\\', \\'17863\\', \\'91521\\', \\'74911\\', \\'88160\\', \\'2360\\', \\'98260\\', \\'18294\\', \\'62402\\', \\'84268\\', \\'9580\\', \\'42668\\', \\'1467\\', \\'40059\\', \\'5221\\', \\'4216\\', \\'9917\\', \\'35420\\', \\'16496\\', \\'34369\\', \\'50253\\', \\'95234\\', \\'95114\\', \\'84193\\', \\'28322\\', \\'37031\\', \\'81284\\', \\'88628\\', \\'36782\\', \\'42572\\', \\'73347\\', \\'66188\\', \\'43342\\', \\'77285\\', \\'16513\\', \\'89064\\', \\'63066\\', \\'72645\\', \\'67075\\', \\'48208\\', \\'18181\\', \\'77898\\', \\'65795\\', \\'53707\\', \\'39856\\', \\'92883\\', \\'92567\\', \\'49733\\', \\'30236\\', \\'10273\\', \\'53029\\', \\'69773\\', \\'78379\\', \\'72108\\', \\'47696\\', \\'97557\\', \\'95184\\', \\'14688\\', \\'29853\\', \\'62694\\', \\'70431\\', \\'88435\\', \\'58799\\', \\'21883\\', \\'99866\\', \\'69178\\', \\'55870\\', \\'14414\\', \\'85274\\', \\'27321\\', \\'55555\\', \\'613\\', \\'15067\\', \\'88217\\', \\'73655\\', \\'99548\\', \\'13631\\', \\'78789\\', \\'36690\\', \\'7952\\', \\'60830\\', \\'77438\\', \\'40059\\', \\'95602\\', \\'43097\\', \\'3429\\', \\'93731\\', \\'90537\\', \\'2932\\', \\'35702\\', \\'16125\\', \\'6652\\', \\'39632\\', \\'39349\\', \\'9910\\', \\'38103\\', \\'78608\\', \\'73565\\', \\'48556\\', \\'28978\\', \\'7128\\', \\'82326\\', \\'53980\\', \\'28059\\', \\'28212\\', \\'87101\\', \\'77752\\', \\'99170\\', \\'56753\\', \\'30484\\', \\'71470\\', \\'32607\\', \\'24674\\', \\'32687\\', \\'25098\\', \\'94712\\', \\'64024\\', \\'48239\\', \\'90408\\', \\'17316\\', \\'99243\\', \\'3656\\', \\'67402\\', \\'48009\\', \\'98427\\', \\'52800\\', \\'56024\\', \\'4417\\', \\'89747\\', \\'93338\\', \\'18758\\', \\'56411\\', \\'44810\\', \\'82456\\', \\'30808\\', \\'75470\\', \\'67115\\', \\'66876\\', \\'53906\\', \\'78403\\', \\'56059\\', \\'34383\\', \\'60056\\', \\'89136\\', \\'7237\\', \\'11129\\', \\'21351\\', \\'78662\\', \\'43606\\', \\'37454\\', \\'45465\\', \\'9292\\', \\'38099\\', \\'81699\\', \\'50195\\', \\'49368\\', \\'47503\\', \\'44605\\', \\'6523\\', \\'81478\\', \\'37910\\', \\'397\\', \\'20256\\', \\'6835\\', \\'2787\\', \\'80383\\', \\'4241\\', \\'65986\\', \\'83870\\', \\'21205\\', \\'10879\\', \\'26593\\', \\'44357\\', \\'72604\\', \\'56131\\', \\'43423\\', \\'80206\\', \\'26240\\', \\'87198\\', \\'99445\\', \\'53504\\', \\'10632\\', \\'2465\\', \\'31793\\', \\'89575\\', \\'64184\\', \\'39988\\', \\'60049\\', \\'87100\\', \\'37151\\', \\'61585\\', \\'82180\\', \\'52065\\', \\'72519\\', \\'72935\\', \\'3201\\', \\'5862\\', \\'20560\\', \\'95339\\', \\'21661\\', \\'17533\\', \\'17182\\', \\'71189\\', \\'91564\\', \\'57999\\', \\'35490\\', \\'94773\\', \\'95056\\', \\'51583\\', \\'59394\\', \\'10727\\', \\'8655\\', \\'48123\\', \\'10701\\', \\'25314\\', \\'20100\\', \\'6533\\', \\'46435\\', \\'43188\\', \\'23001\\', \\'23018\\', \\'76637\\', \\'32018\\', \\'36603\\', \\'18701\\', \\'9550\\', \\'61550\\', \\'47541\\', \\'36500\\', \\'67507\\', \\'81574\\', \\'95490\\', \\'69169\\', \\'32584\\', \\'30045\\', \\'64699\\', \\'83539\\', \\'89396\\', \\'42517\\', \\'61979\\', \\'41528\\', \\'8271\\', \\'88377\\', \\'61423\\', \\'1158\\', \\'89724\\', \\'70789\\', \\'14886\\', \\'64823\\', \\'56675\\', \\'97747\\', \\'23990\\', \\'58495\\', \\'82064\\', \\'17062\\', \\'90258\\', \\'86854\\', \\'93304\\', \\'12925\\', \\'49975\\', \\'45074\\', \\'87155\\', \\'72223\\', \\'67344\\', \\'42733\\', \\'42516\\', \\'40110\\', \\'15444\\', \\'88285\\', \\'39371\\', \\'23198\\', \\'61544\\', \\'90205\\', \\'6192\\', \\'15718\\', \\'19803\\', \\'92712\\', \\'20081\\', \\'31397\\', \\'5555\\', \\'70463\\', \\'19521\\', \\'80401\\', \\'74097\\', \\'32060\\', \\'26495\\', \\'20507\\', \\'40473\\', \\'1449\\', \\'57215\\', \\'46142\\', \\'39303\\', \\'50359\\', \\'35898\\', \\'46908\\', \\'90752\\', \\'7823\\', \\'27416\\', \\'73770\\', \\'98790\\', \\'17907\\', \\'29999\\', \\'76417\\', \\'49926\\', \\'76752\\', \\'21608\\', \\'26524\\', \\'88209\\', \\'6000\\', \\'88897\\', \\'19541\\', \\'41451\\', \\'59538\\', \\'56560\\', \\'1456\\', \\'67828\\', \\'82407\\', \\'45722\\', \\'93344\\', \\'54279\\', \\'78594\\', \\'38354\\', \\'93807\\', \\'10929\\', \\'91560\\', \\'60681\\', \\'70615\\', \\'32527\\', \\'10108\\', \\'48303\\', \\'63134\\', \\'28500\\', \\'18257\\', \\'57081\\', \\'24801\\', \\'99077\\', \\'52197\\', \\'15390\\', \\'52300\\', \\'57116\\', \\'417\\', \\'7503\\', \\'20054\\', \\'75315\\', \\'81359\\', \\'69091\\', \\'18853\\', \\'2465\\', \\'25600\\', \\'13522\\', \\'74575\\', \\'12661\\', \\'83071\\', \\'15191\\', \\'27543\\', \\'21730\\', \\'60853\\', \\'18961\\', \\'14773\\', \\'89185\\', \\'33694\\', \\'51143\\', \\'1449\\', \\'68831\\', \\'78062\\', \\'65173\\', \\'32697\\', \\'41674\\', \\'9429\\', \\'22156\\', \\'96022\\', \\'46305\\', \\'97534\\', \\'5685\\', \\'48870\\', \\'89988\\', \\'20686\\', \\'66705\\', \\'6865\\', \\'94250\\', \\'16872\\', \\'13178\\', \\'7420\\', \\'73531\\', \\'92723\\', \\'60620\\', \\'48843\\', \\'74207\\', \\'60016\\', \\'50943\\', \\'62699\\', \\'63507\\', \\'76537\\', \\'87066\\', \\'76922\\', \\'24711\\', \\'34809\\', \\'5021\\', \\'31293\\', \\'53854\\', \\'77607\\', \\'52322\\', \\'10934\\', \\'50284\\', \\'87804\\', \\'36730\\', \\'86946\\', \\'80749\\', \\'43325\\', \\'97958\\', \\'7362\\', \\'39582\\', \\'10042\\', \\'42053\\', \\'66236\\', \\'69931\\', \\'23463\\', \\'87996\\', \\'33563\\', \\'4468\\', \\'32905\\', \\'50815\\', \\'79478\\', \\'28658\\', \\'46018\\', \\'23186\\', \\'26080\\', \\'13494\\', \\'6237\\', \\'42762\\', \\'86440\\', \\'77407\\', \\'10426\\', \\'62902\\', \\'73251\\', \\'36861\\', \\'92357\\', \\'98754\\', \\'1839\\', \\'46391\\', \\'11420\\', \\'27132\\', \\'93028\\', \\'39609\\', \\'42015\\', \\'68218\\', \\'54228\\', \\'5456\\', \\'38705\\', \\'64307\\', \\'49483\\', \\'878\\', \\'54360\\', \\'54480\\', \\'66684\\', \\'55089\\', \\'4537\\', \\'82073\\', \\'72602\\', \\'96238\\', \\'56708\\', \\'58625\\', \\'32991\\', \\'74205\\', \\'72868\\', \\'79086\\', \\'64250\\', \\'56376\\', \\'10621\\', \\'76607\\', \\'47706\\', \\'72760\\', \\'70303\\', \\'60715\\', \\'14644\\', \\'44186\\', \\'36264\\', \\'29489\\', \\'14184\\', \\'62699\\', \\'30567\\', \\'16700\\', \\'31222\\', \\'15650\\', \\'1500\\', \\'22950\\', \\'54628\\', \\'41004\\', \\'96094\\', \\'70028\\', \\'74178\\', \\'65328\\', \\'26605\\', \\'63076\\', \\'75271\\', \\'79285\\', \\'8151\\', \\'42101\\', \\'56362\\', \\'25961\\', \\'87864\\', \\'972\\', \\'29510\\', \\'2747\\', \\'8877\\', \\'9780\\', \\'61052\\', \\'84105\\', \\'15573\\', \\'27475\\', \\'44570\\', \\'25334\\', \\'18517\\', \\'44237\\', \\'84094\\', \\'67524\\', \\'76761\\', \\'65678\\', \\'79284\\', \\'2462\\', \\'42631\\', \\'22696\\', \\'19223\\', \\'29728\\', \\'67742\\', \\'11883\\', \\'59027\\', \\'12377\\', \\'80538\\', \\'2165\\', \\'17377\\', \\'15030\\', \\'49838\\', \\'23920\\', \\'26025\\', \\'68179\\', \\'75894\\', \\'43783\\', \\'97106\\', \\'75558\\', \\'35528\\', \\'52081\\', \\'16951\\', \\'68855\\', \\'402\\', \\'21459\\', \\'97550\\', \\'16948\\', \\'5369\\', \\'4641\\', \\'2663\\', \\'15233\\', \\'79974\\', \\'71093\\', \\'15234\\', \\'42690\\', \\'22322\\', \\'54282\\', \\'95845\\', \\'90010\\', \\'40530\\', \\'88298\\', \\'41885\\', \\'7079\\', \\'6098\\', \\'72786\\', \\'36603\\', \\'77378\\', \\'48393\\', \\'45723\\', \\'41996\\', \\'96025\\', \\'89297\\', \\'75586\\', \\'8422\\', \\'24360\\', \\'170\\', \\'46036\\', \\'46725\\', \\'67944\\', \\'74029\\', \\'73069\\', \\'45371\\', \\'99916\\', \\'71085\\', \\'42608\\', \\'89904\\', \\'6393\\', \\'51274\\', \\'42729\\', \\'58924\\', \\'82497\\', \\'64143\\', \\'88622\\', \\'18818\\', \\'89041\\', \\'56090\\', \\'21369\\', \\'78224\\', \\'90450\\', \\'45488\\', \\'58830\\', \\'4133\\', \\'98062\\', \\'81113\\', \\'11285\\', \\'51457\\', \\'3183\\', \\'38800\\', \\'65278\\', \\'42169\\', \\'28602\\', \\'52648\\', \\'44683\\', \\'75647\\', \\'11778\\', \\'32151\\', \\'33528\\', \\'23773\\', \\'68268\\', \\'23367\\', \\'70964\\', \\'23548\\',\\n    \\'35575\\', \\'67570\\', \\'77681\\', \\'74158\\', \\'25374\\', \\'62714\\', \\'43100\\', \\'4977\\', \\'51678\\', \\'83460\\', \\'29755\\', \\'15890\\', \\'64626\\', \\'54044\\', \\'14793\\', \\'64339\\', \\'94008\\', \\'97126\\', \\'49202\\', \\'33889\\', \\'12601\\', \\'12275\\', \\'56123\\', \\'94557\\', \\'68226\\', \\'67200\\', \\'9374\\', \\'70687\\', \\'29211\\', \\'8039\\', \\'14598\\', \\'74548\\', \\'37433\\', \\'98991\\', \\'29933\\', \\'37203\\', \\'23973\\', \\'96482\\', \\'64774\\', \\'58350\\', \\'61781\\', \\'31824\\', \\'57193\\', \\'26476\\', \\'21814\\', \\'32297\\', \\'32627\\', \\'44277\\', \\'33876\\', \\'55468\\', \\'81715\\', \\'82505\\', \\'61462\\', \\'20324\\', \\'84293\\', \\'40116\\', \\'51087\\', \\'43594\\', \\'6854\\', \\'59077\\', \\'39841\\', \\'26023\\', \\'22777\\', \\'66859\\', \\'82460\\', \\'89515\\', \\'41712\\', \\'33711\\', \\'71875\\', \\'10685\\', \\'12655\\', \\'50138\\', \\'31063\\', \\'37040\\', \\'95819\\', \\'38919\\', \\'27391\\', \\'29833\\', \\'34350\\', \\'65646\\', \\'7697\\', \\'2688\\', \\'41146\\', \\'13241\\', \\'50305\\', \\'86568\\', \\'24487\\', \\'78741\\', \\'96370\\', \\'21015\\', \\'31719\\', \\'39750\\', \\'25014\\', \\'72415\\', \\'8486\\', \\'90668\\', \\'51143\\', \\'49488\\', \\'21057\\', \\'92803\\', \\'53528\\', \\'39550\\', \\'76039\\', \\'44185\\', \\'32404\\', \\'30217\\', \\'19796\\', \\'38084\\', \\'49161\\', \\'80140\\', \\'20241\\', \\'39357\\', \\'68908\\', \\'93083\\', \\'77231\\', \\'6952\\', \\'36322\\', \\'50790\\', \\'623\\', \\'29730\\', \\'13616\\', \\'57546\\', \\'17434\\', \\'93811\\', \\'35148\\', \\'81419\\', \\'40250\\', \\'40329\\', \\'89126\\', \\'72402\\', \\'16053\\', \\'27107\\', \\'28919\\', \\'16829\\', \\'96582\\', \\'65057\\', \\'28416\\', \\'30801\\', \\'77742\\', \\'27420\\', \\'73118\\', \\'89352\\', \\'54706\\', \\'23035\\', \\'88413\\', \\'64608\\', \\'61930\\', \\'15037\\', \\'47327\\', \\'59596\\', \\'18700\\', \\'57576\\', \\'63628\\', \\'56823\\', \\'60091\\', \\'68209\\', \\'21001\\', \\'14962\\', \\'72257\\', \\'83802\\', \\'33721\\', \\'86343\\', \\'11133\\', \\'65737\\', \\'68477\\', \\'90725\\', \\'86869\\', \\'98403\\', \\'47393\\', \\'25356\\', \\'61372\\', \\'8873\\', \\'19888\\', \\'48836\\', \\'66005\\', \\'23531\\', \\'72520\\', \\'26461\\', \\'78508\\', \\'28213\\', \\'96394\\', \\'22983\\', \\'37856\\', \\'71814\\', \\'27425\\', \\'72753\\', \\'27511\\', \\'65471\\', \\'38592\\', \\'3683\\', \\'24652\\', \\'64505\\', \\'92543\\', \\'53201\\', \\'40639\\', \\'99542\\', \\'53425\\', \\'35321\\', \\'47669\\', \\'14134\\', \\'47727\\', \\'48202\\', \\'71931\\', \\'32119\\', \\'50086\\', \\'50266\\', \\'67159\\', \\'89317\\', \\'81905\\', \\'30315\\', \\'49154\\', \\'8690\\', \\'69365\\', \\'56881\\', \\'46473\\', \\'64100\\', \\'38365\\', \\'59377\\', \\'65630\\', \\'54871\\', \\'52745\\', \\'91536\\', \\'16106\\', \\'70066\\', \\'62063\\', \\'84530\\', \\'88103\\', \\'33599\\', \\'51063\\', \\'87299\\', \\'41880\\', \\'25335\\', \\'51252\\', \\'42788\\', \\'13568\\', \\'1721\\', \\'62424\\', \\'83308\\', \\'36787\\', \\'91536\\', \\'92555\\', \\'27600\\', \\'24030\\', \\'12267\\', \\'66336\\', \\'30242\\', \\'7183\\', \\'67624\\', \\'28471\\', \\'48593\\', \\'79766\\', \\'31178\\', \\'47818\\', \\'94522\\', \\'88855\\', \\'45262\\', \\'43670\\', \\'18065\\', \\'25062\\', \\'44558\\', \\'37189\\', \\'69225\\', \\'35216\\', \\'42683\\', \\'26289\\', \\'72816\\', \\'31947\\', \\'65871\\', \\'45715\\', \\'59452\\', \\'22014\\', \\'56669\\', \\'60331\\', \\'33450\\', \\'60601\\', \\'95047\\', \\'30789\\', \\'90107\\', \\'81565\\', \\'32266\\', \\'3252\\', \\'5446\\', \\'58756\\', \\'55370\\', \\'34034\\', \\'81071\\', \\'2560\\', \\'39054\\', \\'39564\\', \\'15010\\', \\'5389\\', \\'60002\\', \\'53320\\', \\'49545\\', \\'48444\\', \\'31415\\', \\'39278\\', \\'79879\\', \\'30148\\', \\'10186\\', \\'60358\\', \\'29011\\', \\'14419\\', \\'95159\\', \\'94815\\', \\'55251\\', \\'90910\\', \\'80582\\', \\'92304\\', \\'11697\\', \\'60061\\', \\'38577\\', \\'84439\\', \\'76196\\', \\'34542\\', \\'50963\\', \\'36294\\', \\'11123\\', \\'59763\\', \\'29873\\', \\'47383\\', \\'12979\\', \\'22119\\', \\'21723\\', \\'64725\\', \\'48377\\', \\'77132\\', \\'9817\\', \\'79920\\', \\'47653\\', \\'60069\\', \\'12924\\', \\'53808\\', \\'55962\\', \\'66969\\', \\'13757\\', \\'60615\\', \\'10994\\', \\'9138\\', \\'34119\\', \\'58436\\', \\'64407\\', \\'75170\\', \\'73524\\', \\'51864\\', \\'94183\\', \\'86847\\', \\'15585\\', \\'57616\\', \\'96267\\', \\'5340\\', \\'52929\\', \\'49096\\', \\'50291\\', \\'5559\\', \\'32382\\', \\'84077\\', \\'6598\\', \\'87921\\', \\'59719\\', \\'31726\\', \\'44772\\', \\'63373\\', \\'75420\\', \\'66829\\', \\'47275\\', \\'98264\\', \\'61387\\', \\'94945\\', \\'44540\\', \\'50098\\', \\'13078\\', \\'44729\\', \\'95332\\', \\'63555\\', \\'30782\\', \\'63203\\', \\'15071\\', \\'60996\\', \\'72812\\', \\'17418\\', \\'80215\\', \\'37610\\', \\'30670\\', \\'44674\\', \\'74822\\', \\'15471\\', \\'25236\\', \\'16266\\', \\'76213\\', \\'35820\\', \\'19567\\', \\'8715\\', \\'72003\\', \\'90606\\', \\'1434\\', \\'53545\\', \\'88170\\', \\'75014\\', \\'62287\\', \\'35436\\', \\'38669\\', \\'12927\\', \\'83877\\', \\'38622\\', \\'28313\\', \\'82884\\', \\'73969\\', \\'38671\\', \\'10450\\', \\'24158\\', \\'22941\\', \\'73162\\', \\'86548\\', \\'42482\\', \\'95315\\', \\'92016\\', \\'96156\\', \\'44012\\', \\'35962\\', \\'6366\\', \\'3881\\', \\'74300\\', \\'26248\\', \\'30182\\', \\'19164\\', \\'67105\\', \\'66771\\', \\'52587\\', \\'69894\\', \\'61820\\', \\'16551\\', \\'50743\\', \\'10096\\', \\'69030\\', \\'24451\\', \\'89165\\', \\'23929\\', \\'96291\\', \\'30685\\', \\'64413\\', \\'19913\\', \\'9049\\', \\'71383\\', \\'61684\\', \\'45384\\', \\'45927\\', \\'81840\\', \\'49521\\', \\'89594\\', \\'30055\\', \\'83430\\', \\'14930\\', \\'60316\\', \\'86585\\', \\'99375\\', \\'80170\\', \\'14207\\', \\'19584\\', \\'20067\\', \\'82874\\', \\'30159\\', \\'46647\\', \\'6942\\', \\'66777\\', \\'32638\\', \\'55662\\', \\'75470\\', \\'77622\\', \\'26893\\', \\'96149\\', \\'14373\\', \\'33252\\', \\'50574\\', \\'7945\\', \\'20696\\', \\'56662\\', \\'94348\\', \\'3384\\', \\'20956\\', \\'89668\\', \\'99052\\', \\'65131\\', \\'56847\\', \\'17589\\', \\'16419\\', \\'2670\\', \\'10705\\', \\'59587\\', \\'92902\\', \\'92424\\', \\'48570\\', \\'11034\\', \\'69149\\', \\'35733\\', \\'17315\\', \\'84966\\', \\'69353\\', \\'69590\\', \\'52834\\', \\'32561\\', \\'6049\\', \\'50156\\', \\'71676\\', \\'76423\\', \\'32361\\', \\'61509\\', \\'8845\\', \\'75709\\', \\'35956\\', \\'21912\\', \\'31188\\', \\'59083\\', \\'43459\\', \\'38614\\', \\'92206\\', \\'55645\\', \\'38737\\', \\'34193\\', \\'6451\\', \\'94163\\', \\'24326\\', \\'49976\\', \\'71600\\', \\'58024\\', \\'67160\\', \\'4365\\', \\'38270\\', \\'59558\\', \\'80834\\', \\'60739\\', \\'54318\\', \\'19738\\', \\'42196\\', \\'43191\\', \\'13463\\', \\'88914\\', \\'99239\\', \\'66869\\', \\'75691\\', \\'33085\\', \\'4323\\', \\'7170\\', \\'46184\\', \\'41423\\', \\'89835\\', \\'46877\\', \\'20349\\', \\'14365\\', \\'32727\\', \\'35322\\', \\'841\\', \\'23597\\', \\'43370\\', \\'57527\\', \\'73250\\', \\'32553\\', \\'71489\\', \\'44617\\', \\'98323\\', \\'37672\\', \\'59549\\', \\'96023\\', \\'63176\\', \\'13524\\', \\'15621\\', \\'30448\\', \\'28136\\', \\'45549\\', \\'3513\\', \\'64153\\', \\'19839\\', \\'24219\\', \\'41987\\', \\'51083\\', \\'90268\\', \\'52052\\', \\'31430\\', \\'4727\\', \\'99409\\', \\'43595\\', \\'82374\\', \\'61251\\', \\'51470\\', \\'66562\\', \\'98724\\', \\'23529\\', \\'53895\\', \\'67562\\', \\'87573\\', \\'89964\\', \\'30821\\', \\'15733\\', \\'33062\\', \\'86963\\', \\'33450\\', \\'75338\\', \\'32570\\', \\'14453\\', \\'38080\\', \\'36335\\', \\'84226\\', \\'52790\\', \\'42883\\', \\'61156\\', \\'42789\\', \\'57846\\', \\'60096\\', \\'29946\\', \\'80178\\', \\'15882\\', \\'1971\\', \\'60722\\', \\'62458\\', \\'8754\\', \\'59991\\', \\'89321\\', \\'584\\', \\'70565\\', \\'36458\\', \\'21226\\', \\'23561\\', \\'9837\\', \\'39364\\', \\'23065\\', \\'30675\\', \\'9306\\', \\'40085\\', \\'52082\\', \\'89976\\', \\'73283\\', \\'77851\\', \\'36174\\', \\'54470\\', \\'63250\\', \\'72111\\', \\'70853\\', \\'26723\\', \\'42590\\', \\'91230\\', \\'47512\\', \\'13983\\', \\'70898\\', \\'70927\\', \\'40721\\', \\'30642\\', \\'41628\\', \\'90010\\', \\'27306\\', \\'1933\\', \\'43304\\', \\'44499\\', \\'87890\\', \\'22201\\', \\'89249\\', \\'63935\\', \\'48438\\', \\'58588\\', \\'1061\\', \\'70061\\', \\'63075\\', \\'9676\\', \\'65820\\', \\'82156\\', \\'82668\\', \\'111\\', \\'54350\\', \\'10328\\', \\'23466\\', \\'98936\\', \\'18285\\', \\'53919\\', \\'32422\\', \\'84859\\', \\'58387\\', \\'24022\\', \\'32423\\', \\'6010\\', \\'56417\\', \\'49452\\', \\'69999\\', \\'14885\\', \\'47102\\', \\'59577\\', \\'24999\\', \\'75984\\', \\'96464\\', \\'59088\\', \\'85987\\', \\'71442\\', \\'88789\\', \\'4753\\', \\'8229\\', \\'76883\\', \\'15284\\', \\'90610\\', \\'40507\\', \\'78882\\', \\'55575\\', \\'25315\\', \\'7214\\', \\'70602\\', \\'4796\\', \\'35767\\', \\'54657\\', \\'42153\\', \\'16050\\', \\'93607\\', \\'99249\\', \\'77236\\', \\'59949\\', \\'52871\\', \\'47837\\', \\'33534\\', \\'30023\\', \\'89137\\', \\'99938\\', \\'35824\\', \\'50775\\', \\'30282\\', \\'82798\\', \\'53312\\', \\'65277\\', \\'68375\\', \\'91445\\', \\'58166\\', \\'43344\\', \\'6589\\', \\'82515\\', \\'34632\\', \\'78588\\', \\'152\\', \\'67554\\', \\'15877\\', \\'74334\\', \\'32783\\', \\'45147\\', \\'39483\\', \\'92067\\', \\'59029\\', \\'38298\\', \\'55229\\', \\'28268\\', \\'85140\\', \\'33451\\', \\'15424\\', \\'46695\\', \\'23201\\', \\'83329\\', \\'28372\\', \\'19518\\', \\'89198\\', \\'33305\\', \\'43892\\', \\'470\\', \\'37662\\', \\'9407\\', \\'14376\\', \\'80310\\', \\'21459\\', \\'72381\\', \\'80414\\', \\'88305\\', \\'69073\\', \\'63101\\', \\'91054\\', \\'47190\\', \\'48595\\', \\'24696\\', \\'41426\\', \\'35133\\', \\'94399\\', \\'21790\\', \\'55040\\', \\'73279\\', \\'20809\\', \\'67805\\', \\'94115\\', \\'58633\\', \\'78053\\', \\'89444\\', \\'4112\\', \\'8\\', \\'34517\\', \\'22106\\', \\'85934\\', \\'86814\\', \\'53333\\', \\'93437\\', \\'85062\\', \\'32791\\', \\'72744\\', \\'99843\\', \\'51161\\', \\'22730\\', \\'34908\\', \\'82918\\', \\'92566\\', \\'22467\\', \\'41226\\', \\'98518\\', \\'29235\\', \\'94042\\', \\'84371\\', \\'79100\\', \\'25214\\', \\'7764\\', \\'59427\\', \\'47891\\', \\'61092\\', \\'23775\\', \\'13641\\', \\'30837\\', \\'77377\\', \\'43032\\', \\'38441\\', \\'29462\\', \\'20300\\', \\'19070\\', \\'20982\\', \\'73987\\', \\'87836\\', \\'68062\\', \\'6419\\', \\'51563\\', \\'40084\\', \\'85694\\', \\'86677\\', \\'47142\\', \\'27222\\', \\'17844\\', \\'19158\\', \\'45120\\', \\'88524\\', \\'74724\\', \\'73229\\', \\'42470\\', \\'38751\\', \\'1132\\', \\'28603\\', \\'61188\\', \\'55021\\', \\'88825\\', \\'58005\\', \\'62411\\', \\'8843\\', \\'94852\\', \\'93664\\', \\'39253\\', \\'27473\\', \\'247\\', \\'43824\\', \\'1804\\', \\'8905\\', \\'11509\\', \\'95659\\', \\'7811\\', \\'80691\\', \\'15779\\', \\'49794\\', \\'8991\\', \\'76099\\', \\'29223\\', \\'36060\\', \\'85399\\', \\'41369\\', \\'22885\\', \\'38473\\', \\'22376\\', \\'50446\\', \\'89578\\', \\'25818\\', \\'61333\\', \\'78787\\', \\'47605\\', \\'83654\\', \\'99068\\', \\'52120\\', \\'48367\\', \\'86381\\', \\'19803\\', \\'72600\\', \\'31998\\', \\'37755\\', \\'88031\\', \\'83969\\', \\'42319\\', \\'27974\\', \\'35780\\', \\'93662\\', \\'46808\\', \\'60529\\', \\'15491\\', \\'10447\\', \\'48829\\', \\'33886\\', \\'68333\\', \\'44855\\', \\'86554\\', \\'64794\\', \\'66376\\', \\'58222\\', \\'14021\\', \\'52043\\', \\'56375\\', \\'1300\\', \\'38105\\', \\'89159\\', \\'97456\\', \\'26800\\', \\'93124\\', \\'3673\\', \\'32279\\', \\'30658\\', \\'84475\\', \\'3708\\', \\'93952\\', \\'39245\\', \\'91980\\', \\'55333\\', \\'79440\\', \\'64407\\', \\'46559\\', \\'60759\\', \\'10688\\', \\'49872\\', \\'45810\\', \\'87405\\', \\'66932\\', \\'56530\\', \\'57751\\', \\'9619\\', \\'27361\\', \\'6356\\', \\'65848\\', \\'7524\\', \\'20273\\', \\'22362\\', \\'20504\\', \\'28042\\', \\'39475\\', \\'51677\\', \\'85733\\', \\'32426\\', \\'54558\\', \\'17222\\', \\'56485\\', \\'34928\\', \\'90917\\', \\'70528\\', \\'51732\\', \\'61014\\', \\'98420\\', \\'67265\\', \\'41383\\', \\'3883\\', \\'47642\\', \\'53324\\', \\'93679\\', \\'93088\\', \\'57534\\', \\'44449\\', \\'46779\\', \\'81482\\', \\'54279\\', \\'80135\\', \\'11216\\', \\'92545\\', \\'18426\\', \\'96005\\', \\'57801\\', \\'21898\\', \\'5104\\', \\'83467\\', \\'72015\\', \\'43783\\', \\'89674\\', \\'57468\\', \\'96686\\', \\'95167\\', \\'38507\\', \\'95187\\', \\'64923\\', \\'71214\\', \\'42834\\', \\'93219\\', \\'47342\\', \\'24476\\', \\'84834\\', \\'29080\\', \\'86533\\', \\'30687\\', \\'68400\\', \\'26933\\', \\'37396\\', \\'65169\\', \\'89767\\', \\'20642\\', \\'53843\\', \\'85167\\', \\'77306\\', \\'46723\\', \\'68501\\', \\'4243\\', \\'35044\\', \\'15950\\', \\'40388\\', \\'53630\\', \\'76125\\', \\'10816\\', \\'83285\\', \\'4120\\', \\'11402\\', \\'91344\\', \\'95169\\')"}, {"oldTime": 0.0064, "newTime": 0.0062, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.005, 0.035, 0.077, 0.088], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE -toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'"}, {"oldTime": 0.1008, "newTime": 0.1061, "relativeDifference": 0.052, "timeSpeed": 1.052, "quantiles": [0.001, 0.006, 0.045, 0.052], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE -toInt64(a) NOT IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'"}, {"oldTime": 0.0361, "newTime": 0.034, "relativeDifference": -0.059, "timeSpeed": 1.061, "quantiles": [0.004, 0.041, 0.119, 0.128], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'break\\'"}, {"oldTime": 0.0523, "newTime": 0.0552, "relativeDifference": 0.055, "timeSpeed": 1.055, "quantiles": [0.021, 0.036, 0.066, 0.074], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'"}, {"oldTime": 0.0388, "newTime": 0.0379, "relativeDifference": -0.024, "timeSpeed": 1.023, "quantiles": [0.022, 0.246, 0.37, 0.38], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A"}, {"oldTime": 0.0464, "newTime": 0.0439, "relativeDifference": -0.054, "timeSpeed": 1.056, "quantiles": [0.0, 0.014, 0.229, 0.248], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A"}, {"oldTime": 0.0463, "newTime": 0.0438, "relativeDifference": -0.054, "timeSpeed": 1.057, "quantiles": [0.031, 0.048, 0.141, 0.152], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A"}, {"oldTime": 0.05, "newTime": 0.048, "relativeDifference": -0.041, "timeSpeed": 1.041, "quantiles": [0.018, 0.032, 0.064, 0.071], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table LEFT JOIN join_table USING A"}, {"oldTime": 0.0114, "newTime": 0.0107, "relativeDifference": -0.062, "timeSpeed": 1.065, "quantiles": [0.019, 0.047, 0.124, 0.143], "testName": "slices_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(substring(PageCharset, 1, 2))"}, {"oldTime": 0.0439, "newTime": 0.0438, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.003, 0.017, 0.044, 0.054], "testName": "slices_hits", "query": "SELECT count() FROM test.hits WHERE NOT ignore(substring(URL, 10, 20))"}, {"oldTime": 0.2033, "newTime": 0.2011, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.009, 0.013, 0.021, 0.024], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_16 ORDER BY key)"}, {"oldTime": 0.217, "newTime": 0.2199, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.005, 0.01, 0.016, 0.018], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_32 ORDER BY key)"}, {"oldTime": 0.2836, "newTime": 0.2802, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.006, 0.011, 0.024, 0.031], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_64 ORDER BY key)"}, {"oldTime": 0.1651, "newTime": 0.165, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.01, 0.013], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_16 ORDER BY key)"}, {"oldTime": 0.1634, "newTime": 0.1585, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.008, 0.023, 0.041, 0.043], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_32 ORDER BY key)"}, {"oldTime": 0.2198, "newTime": 0.2222, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.007, 0.014, 0.035, 0.049], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_64 ORDER BY key)"}, {"oldTime": 0.2038, "newTime": 0.2013, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.008, 0.014, 0.033, 0.036], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_16 ORDER BY key)"}, {"oldTime": 0.5518, "newTime": 0.5436, "relativeDifference": -0.015, "timeSpeed": 1.015, "quantiles": [0.001, 0.006, 0.014, 0.017], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_32 ORDER BY key)"}, {"oldTime": 0.5947, "newTime": 0.6118, "relativeDifference": 0.028, "timeSpeed": 1.028, "quantiles": [0.01, 0.019, 0.035, 0.039], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_64 ORDER BY key)"}, {"oldTime": 0.1666, "newTime": 0.1661, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.015, 0.06, 0.07], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_8 ORDER BY key)"}, {"oldTime": 0.3741, "newTime": 0.3735, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.015, 0.035, 0.044], "testName": "string_join", "query": "SELECT 1 FROM hits_10m_words AS l ANY LEFT JOIN hits_10m_words AS r USING (word) FORMAT Null"}, {"oldTime": 0.328, "newTime": 0.3243, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.003, 0.01, 0.03, 0.034], "testName": "string_join", "query": "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (long) FORMAT Null"}, {"oldTime": 0.1981, "newTime": 0.1993, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.005, 0.034, 0.049], "testName": "string_join", "query": "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (short) FORMAT Null"}, {"oldTime": 0.288, "newTime": 0.2967, "relativeDifference": 0.03, "timeSpeed": 1.03, "quantiles": [0.0, 0.008, 0.029, 0.041], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.2238, "newTime": 0.2219, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.006, 0.008, 0.025, 0.037], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.3408, "newTime": 0.3636, "relativeDifference": 0.066, "timeSpeed": 1.066, "quantiles": [0.008, 0.023, 0.064, 0.069], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT word FROM hits_10m_words) FORMAT Null"}, {"oldTime": 0.2684, "newTime": 0.246, "relativeDifference": -0.084, "timeSpeed": 1.091, "quantiles": [0.006, 0.026, 0.067, 0.083], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE long IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.1619, "newTime": 0.1604, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.008, 0.011, 0.039, 0.053], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE long IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.1949, "newTime": 0.1998, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.006, 0.009, 0.028, 0.039], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE short IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.1421, "newTime": 0.1444, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.003, 0.01, 0.03, 0.04], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE short IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.0258, "newTime": 0.0264, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.001, 0.013, 0.028, 0.029], "testName": "string_sort", "query": "SELECT MobilePhoneModel FROM hits_100m_single ORDER BY MobilePhoneModel LIMIT 10"}, {"oldTime": 0.1439, "newTime": 0.1434, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.005, 0.022, 0.023], "testName": "string_sort", "query": "SELECT MobilePhoneModel FROM hits_10m_single ORDER BY MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.0265, "newTime": 0.0259, "relativeDifference": -0.023, "timeSpeed": 1.023, "quantiles": [0.005, 0.009, 0.028, 0.038], "testName": "string_sort", "query": "SELECT MobilePhoneModel, MobilePhoneModel FROM hits_100m_single ORDER BY MobilePhoneModel, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.1435, "newTime": 0.1454, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.004, 0.011, 0.027, 0.037], "testName": "string_sort", "query": "SELECT MobilePhoneModel, MobilePhoneModel FROM hits_10m_single ORDER BY MobilePhoneModel, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.0884, "newTime": 0.0936, "relativeDifference": 0.058, "timeSpeed": 1.058, "quantiles": [0.02, 0.059, 0.132, 0.149], "testName": "string_sort", "query": "SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10"}, {"oldTime": 0.4389, "newTime": 0.4415, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.004, 0.01, 0.032, 0.038], "testName": "string_sort", "query": "SELECT MobilePhoneModel, PageCharset FROM hits_10m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.216, "newTime": 0.2143, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.006, 0.018, 0.023], "testName": "string_sort", "query": "SELECT MobilePhoneModel, Referer FROM hits_100m_single ORDER BY MobilePhoneModel, Referer LIMIT 10"}, {"oldTime": 1.0548, "newTime": 1.0933, "relativeDifference": 0.036, "timeSpeed": 1.036, "quantiles": [0.017, 0.022, 0.033, 0.036], "testName": "string_sort", "query": "SELECT MobilePhoneModel, Referer FROM hits_10m_single ORDER BY MobilePhoneModel, Referer LIMIT 9000000, 10"}, {"oldTime": 0.1091, "newTime": 0.1096, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.015, 0.061, 0.063], "testName": "string_sort", "query": "SELECT MobilePhoneModel, SearchPhrase FROM hits_100m_single ORDER BY MobilePhoneModel, SearchPhrase LIMIT 10"}, {"oldTime": 0.5716, "newTime": 0.5772, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.006, 0.007, 0.026, 0.031], "testName": "string_sort", "query": "SELECT MobilePhoneModel, SearchPhrase FROM hits_10m_single ORDER BY MobilePhoneModel, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.25, "newTime": 0.2491, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.022, 0.052, 0.058], "testName": "string_sort", "query": "SELECT MobilePhoneModel, Title FROM hits_100m_single ORDER BY MobilePhoneModel, Title LIMIT 10"}, {"oldTime": 1.0233, "newTime": 0.988, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.032, 0.035, 0.046, 0.052], "testName": "string_sort", "query": "SELECT MobilePhoneModel, Title FROM hits_10m_single ORDER BY MobilePhoneModel, Title LIMIT 9000000, 10"}, {"oldTime": 0.2766, "newTime": 0.268, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.001, 0.014, 0.03, 0.034], "testName": "string_sort", "query": "SELECT MobilePhoneModel, URL FROM hits_100m_single ORDER BY MobilePhoneModel, URL LIMIT 10"}, {"oldTime": 0.9887, "newTime": 0.9642, "relativeDifference": -0.025, "timeSpeed": 1.025, "quantiles": [0.021, 0.022, 0.033, 0.035], "testName": "string_sort", "query": "SELECT MobilePhoneModel, URL FROM hits_10m_single ORDER BY MobilePhoneModel, URL LIMIT 9000000, 10"}, {"oldTime": 0.043, "newTime": 0.0436, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.012, 0.021, 0.024], "testName": "string_sort", "query": "SELECT PageCharset FROM hits_100m_single ORDER BY PageCharset LIMIT 10"}, {"oldTime": 0.2248, "newTime": 0.2229, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.007, 0.014, 0.033, 0.038], "testName": "string_sort", "query": "SELECT PageCharset FROM hits_10m_single ORDER BY PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.0855, "newTime": 0.085, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.023, 0.177, 0.213], "testName": "string_sort", "query": "SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.451, "newTime": 0.4574, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.001, 0.01, 0.03, 0.037], "testName": "string_sort", "query": "SELECT PageCharset, MobilePhoneModel FROM hits_10m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.0427, "newTime": 0.0426, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.006, 0.014, 0.014], "testName": "string_sort", "query": "SELECT PageCharset, PageCharset FROM hits_100m_single ORDER BY PageCharset, PageCharset LIMIT 10"}, {"oldTime": 0.2205, "newTime": 0.2227, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.009, 0.014, 0.03, 0.033], "testName": "string_sort", "query": "SELECT PageCharset, PageCharset FROM hits_10m_single ORDER BY PageCharset, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.224, "newTime": 0.2285, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.003, 0.015, 0.027, 0.034], "testName": "string_sort", "query": "SELECT PageCharset, Referer FROM hits_100m_single ORDER BY PageCharset, Referer LIMIT 10"}, {"oldTime": 1.1157, "newTime": 1.1167, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.017, 0.044, 0.056], "testName": "string_sort", "query": "SELECT PageCharset, Referer FROM hits_10m_single ORDER BY PageCharset, Referer LIMIT 9000000, 10"}, {"oldTime": 0.1157, "newTime": 0.1134, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.0, 0.019, 0.036, 0.04], "testName": "string_sort", "query": "SELECT PageCharset, SearchPhrase FROM hits_100m_single ORDER BY PageCharset, SearchPhrase LIMIT 10"}, {"oldTime": 0.6741, "newTime": 0.6593, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.006, 0.008, 0.022, 0.034], "testName": "string_sort", "query": "SELECT PageCharset, SearchPhrase FROM hits_10m_single ORDER BY PageCharset, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.2566, "newTime": 0.2584, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.007, 0.011, 0.06, 0.066], "testName": "string_sort", "query": "SELECT PageCharset, Title FROM hits_100m_single ORDER BY PageCharset, Title LIMIT 10"}, {"oldTime": 1.0617, "newTime": 1.0387, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.004, 0.021, 0.039, 0.049], "testName": "string_sort", "query": "SELECT PageCharset, Title FROM hits_10m_single ORDER BY PageCharset, Title LIMIT 9000000, 10"}, {"oldTime": 0.2825, "newTime": 0.279, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.01, 0.016, 0.026, 0.031], "testName": "string_sort", "query": "SELECT PageCharset, URL FROM hits_100m_single ORDER BY PageCharset, URL LIMIT 10"}, {"oldTime": 1.0268, "newTime": 1.0376, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.006, 0.015, 0.018], "testName": "string_sort", "query": "SELECT PageCharset, URL FROM hits_10m_single ORDER BY PageCharset, URL LIMIT 9000000, 10"}, {"oldTime": 0.1583, "newTime": 0.1555, "relativeDifference": -0.018, "timeSpeed": 1.018, "quantiles": [0.001, 0.008, 0.017, 0.022], "testName": "string_sort", "query": "SELECT Referer FROM hits_100m_single ORDER BY Referer LIMIT 10"}, {"oldTime": 0.8163, "newTime": 0.7976, "relativeDifference": -0.023, "timeSpeed": 1.023, "quantiles": [0.003, 0.007, 0.022, 0.025], "testName": "string_sort", "query": "SELECT Referer FROM hits_10m_single ORDER BY Referer LIMIT 9000000, 10"}, {"oldTime": 0.2024, "newTime": 0.2021, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.006, 0.014, 0.015], "testName": "string_sort", "query": "SELECT Referer, MobilePhoneModel FROM hits_100m_single ORDER BY Referer, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.9865, "newTime": 1.0049, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.008, 0.018, 0.029, 0.033], "testName": "string_sort", "query": "SELECT Referer, MobilePhoneModel FROM hits_10m_single ORDER BY Referer, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.2208, "newTime": 0.2224, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.002, 0.007, 0.015, 0.017], "testName": "string_sort", "query": "SELECT Referer, PageCharset FROM hits_100m_single ORDER BY Referer, PageCharset LIMIT 10"}, {"oldTime": 1.0518, "newTime": 1.0718, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.0, 0.011, 0.027, 0.032], "testName": "string_sort", "query": "SELECT Referer, PageCharset FROM hits_10m_single ORDER BY Referer, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.1602, "newTime": 0.1593, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.001, 0.003, 0.009, 0.009], "testName": "string_sort", "query": "SELECT Referer, Referer FROM hits_100m_single ORDER BY Referer, Referer LIMIT 10"}, {"oldTime": 0.7972, "newTime": 0.8153, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.004, 0.015, 0.029, 0.035], "testName": "string_sort", "query": "SELECT Referer, Referer FROM hits_10m_single ORDER BY Referer, Referer LIMIT 9000000, 10"}, {"oldTime": 0.2297, "newTime": 0.232, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.003, 0.022, 0.023], "testName": "string_sort", "query": "SELECT Referer, SearchPhrase FROM hits_100m_single ORDER BY Referer, SearchPhrase LIMIT 10"}, {"oldTime": 1.1158, "newTime": 1.111, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.002, 0.005, 0.033, 0.038], "testName": "string_sort", "query": "SELECT Referer, SearchPhrase FROM hits_10m_single ORDER BY Referer, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.4601, "newTime": 0.468, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.003, 0.005, 0.018, 0.029], "testName": "string_sort", "query": "SELECT Referer, Title FROM hits_100m_single ORDER BY Referer, Title LIMIT 10"}, {"oldTime": 1.5606, "newTime": 1.5733, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.003, 0.009, 0.031, 0.036], "testName": "string_sort", "query": "SELECT Referer, Title FROM hits_10m_single ORDER BY Referer, Title LIMIT 9000000, 10"}, {"oldTime": 0.4736, "newTime": 0.4876, "relativeDifference": 0.029, "timeSpeed": 1.029, "quantiles": [0.003, 0.009, 0.029, 0.033], "testName": "string_sort", "query": "SELECT Referer, URL FROM hits_100m_single ORDER BY Referer, URL LIMIT 10"}, {"oldTime": 1.5138, "newTime": 1.4785, "relativeDifference": -0.024, "timeSpeed": 1.023, "quantiles": [0.002, 0.015, 0.042, 0.045], "testName": "string_sort", "query": "SELECT Referer, URL FROM hits_10m_single ORDER BY Referer, URL LIMIT 9000000, 10"}, {"oldTime": 0.0543, "newTime": 0.0543, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.003, 0.008, 0.01], "testName": "string_sort", "query": "SELECT SearchPhrase FROM hits_100m_single ORDER BY SearchPhrase LIMIT 10"}, {"oldTime": 0.302, "newTime": 0.2836, "relativeDifference": -0.061, "timeSpeed": 1.064, "quantiles": [0.005, 0.027, 0.055, 0.061], "testName": "string_sort", "query": "SELECT SearchPhrase FROM hits_10m_single ORDER BY SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.1069, "newTime": 0.1067, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.002, 0.002, 0.012, 0.014], "testName": "string_sort", "query": "SELECT SearchPhrase, MobilePhoneModel FROM hits_100m_single ORDER BY SearchPhrase, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.4915, "newTime": 0.4943, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.002, 0.014, 0.031, 0.037], "testName": "string_sort", "query": "SELECT SearchPhrase, MobilePhoneModel FROM hits_10m_single ORDER BY SearchPhrase, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.1258, "newTime": 0.1218, "relativeDifference": -0.032, "timeSpeed": 1.032, "quantiles": [0.006, 0.031, 0.089, 0.095], "testName": "string_sort", "query": "SELECT SearchPhrase, PageCharset FROM hits_100m_single ORDER BY SearchPhrase, PageCharset LIMIT 10"}, {"oldTime": 0.6147, "newTime": 0.6083, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.0, 0.01, 0.026, 0.033], "testName": "string_sort", "query": "SELECT SearchPhrase, PageCharset FROM hits_10m_single ORDER BY SearchPhrase, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.2504, "newTime": 0.2479, "relativeDifference": -0.01, "timeSpeed": 1.01, "quantiles": [0.002, 0.009, 0.023, 0.025], "testName": "string_sort", "query": "SELECT SearchPhrase, Referer FROM hits_100m_single ORDER BY SearchPhrase, Referer LIMIT 10"}, {"oldTime": 0.9692, "newTime": 0.9555, "relativeDifference": -0.015, "timeSpeed": 1.014, "quantiles": [0.008, 0.018, 0.042, 0.045], "testName": "string_sort", "query": "SELECT SearchPhrase, Referer FROM hits_10m_single ORDER BY SearchPhrase, Referer LIMIT 9000000, 10"}, {"oldTime": 0.0558, "newTime": 0.0554, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.004, 0.006, 0.011, 0.014], "testName": "string_sort", "query": "SELECT SearchPhrase, SearchPhrase FROM hits_100m_single ORDER BY SearchPhrase, SearchPhrase LIMIT 10"}, {"oldTime": 0.2837, "newTime": 0.28, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.002, 0.01, 0.016, 0.018], "testName": "string_sort", "query": "SELECT SearchPhrase, SearchPhrase FROM hits_10m_single ORDER BY SearchPhrase, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.2777, "newTime": 0.2819, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.003, 0.007, 0.015, 0.019], "testName": "string_sort", "query": "SELECT SearchPhrase, Title FROM hits_100m_single ORDER BY SearchPhrase, Title LIMIT 10"}, {"oldTime": 1.0382, "newTime": 1.0697, "relativeDifference": 0.03, "timeSpeed": 1.03, "quantiles": [0.013, 0.03, 0.048, 0.053], "testName": "string_sort", "query": "SELECT SearchPhrase, Title FROM hits_10m_single ORDER BY SearchPhrase, Title LIMIT 9000000, 10"}, {"oldTime": 0.3114, "newTime": 0.3115, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.011, 0.03, 0.033], "testName": "string_sort", "query": "SELECT SearchPhrase, URL FROM hits_100m_single ORDER BY SearchPhrase, URL LIMIT 10"}, {"oldTime": 1.0411, "newTime": 1.0257, "relativeDifference": -0.015, "timeSpeed": 1.015, "quantiles": [0.002, 0.005, 0.016, 0.017], "testName": "string_sort", "query": "SELECT SearchPhrase, URL FROM hits_10m_single ORDER BY SearchPhrase, URL LIMIT 9000000, 10"}, {"oldTime": 0.1857, "newTime": 0.1882, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.008, 0.011, 0.019, 0.023], "testName": "string_sort", "query": "SELECT Title FROM hits_100m_single ORDER BY Title LIMIT 10"}, {"oldTime": 0.7652, "newTime": 0.7736, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.011, 0.065, 0.075], "testName": "string_sort", "query": "SELECT Title FROM hits_10m_single ORDER BY Title LIMIT 9000000, 10"}, {"oldTime": 0.2329, "newTime": 0.2356, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.007, 0.01, 0.04, 0.054], "testName": "string_sort", "query": "SELECT Title, MobilePhoneModel FROM hits_100m_single ORDER BY Title, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.9965, "newTime": 0.9831, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.003, 0.015, 0.059, 0.071], "testName": "string_sort", "query": "SELECT Title, MobilePhoneModel FROM hits_10m_single ORDER BY Title, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.2684, "newTime": 0.2627, "relativeDifference": -0.022, "timeSpeed": 1.021, "quantiles": [0.005, 0.013, 0.046, 0.061], "testName": "string_sort", "query": "SELECT Title, PageCharset FROM hits_100m_single ORDER BY Title, PageCharset LIMIT 10"}, {"oldTime": 1.0126, "newTime": 1.0253, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.009, 0.019, 0.052, 0.063], "testName": "string_sort", "query": "SELECT Title, PageCharset FROM hits_10m_single ORDER BY Title, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.4707, "newTime": 0.4723, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.0, 0.023, 0.041], "testName": "string_sort", "query": "SELECT Title, Referer FROM hits_100m_single ORDER BY Title, Referer LIMIT 10"}, {"oldTime": 1.552, "newTime": 1.5724, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.013, 0.026, 0.032], "testName": "string_sort", "query": "SELECT Title, Referer FROM hits_10m_single ORDER BY Title, Referer LIMIT 9000000, 10"}, {"oldTime": 0.2646, "newTime": 0.2661, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.005, 0.006, 0.016, 0.023], "testName": "string_sort", "query": "SELECT Title, SearchPhrase FROM hits_100m_single ORDER BY Title, SearchPhrase LIMIT 10"}, {"oldTime": 1.0466, "newTime": 1.0568, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.006, 0.01, 0.035, 0.042], "testName": "string_sort", "query": "SELECT Title, SearchPhrase FROM hits_10m_single ORDER BY Title, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.1858, "newTime": 0.1892, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.0, 0.005, 0.014, 0.018], "testName": "string_sort", "query": "SELECT Title, Title FROM hits_100m_single ORDER BY Title, Title LIMIT 10"}, {"oldTime": 0.7892, "newTime": 0.7907, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.002, 0.025, 0.036, 0.041], "testName": "string_sort", "query": "SELECT Title, Title FROM hits_10m_single ORDER BY Title, Title LIMIT 9000000, 10"}, {"oldTime": 0.5571, "newTime": 0.5417, "relativeDifference": -0.028, "timeSpeed": 1.028, "quantiles": [0.013, 0.02, 0.028, 0.029], "testName": "string_sort", "query": "SELECT Title, URL FROM hits_100m_single ORDER BY Title, URL LIMIT 10"}, {"oldTime": 1.461, "newTime": 1.4512, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.002, 0.015, 0.034, 0.039], "testName": "string_sort", "query": "SELECT Title, URL FROM hits_10m_single ORDER BY Title, URL LIMIT 9000000, 10"}, {"oldTime": 0.2188, "newTime": 0.2183, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.011, 0.018, 0.02], "testName": "string_sort", "query": "SELECT URL FROM hits_100m_single ORDER BY URL LIMIT 10"}, {"oldTime": 0.6999, "newTime": 0.7153, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.001, 0.005, 0.036, 0.05], "testName": "string_sort", "query": "SELECT URL FROM hits_10m_single ORDER BY URL LIMIT 9000000, 10"}, {"oldTime": 0.2608, "newTime": 0.2643, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.001, 0.008, 0.018, 0.02], "testName": "string_sort", "query": "SELECT URL, MobilePhoneModel FROM hits_100m_single ORDER BY URL, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.8969, "newTime": 0.8917, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.008, 0.053, 0.058], "testName": "string_sort", "query": "SELECT URL, MobilePhoneModel FROM hits_10m_single ORDER BY URL, MobilePhoneModel LIMIT 9000000, 10"}, {"oldTime": 0.2795, "newTime": 0.2884, "relativeDifference": 0.031, "timeSpeed": 1.031, "quantiles": [0.001, 0.007, 0.026, 0.034], "testName": "string_sort", "query": "SELECT URL, PageCharset FROM hits_100m_single ORDER BY URL, PageCharset LIMIT 10"}, {"oldTime": 0.9287, "newTime": 0.9248, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.0, 0.009, 0.025, 0.028], "testName": "string_sort", "query": "SELECT URL, PageCharset FROM hits_10m_single ORDER BY URL, PageCharset LIMIT 9000000, 10"}, {"oldTime": 0.4646, "newTime": 0.4646, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.017, 0.021], "testName": "string_sort", "query": "SELECT URL, Referer FROM hits_100m_single ORDER BY URL, Referer LIMIT 10"}, {"oldTime": 1.4152, "newTime": 1.4426, "relativeDifference": 0.019, "timeSpeed": 1.019, "quantiles": [0.01, 0.019, 0.041, 0.042], "testName": "string_sort", "query": "SELECT URL, Referer FROM hits_10m_single ORDER BY URL, Referer LIMIT 9000000, 10"}, {"oldTime": 0.2919, "newTime": 0.2923, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.013, 0.025, 0.026], "testName": "string_sort", "query": "SELECT URL, SearchPhrase FROM hits_100m_single ORDER BY URL, SearchPhrase LIMIT 10"}, {"oldTime": 0.9962, "newTime": 0.9828, "relativeDifference": -0.014, "timeSpeed": 1.013, "quantiles": [0.003, 0.01, 0.024, 0.032], "testName": "string_sort", "query": "SELECT URL, SearchPhrase FROM hits_10m_single ORDER BY URL, SearchPhrase LIMIT 9000000, 10"}, {"oldTime": 0.543, "newTime": 0.5528, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.006, 0.017, 0.029, 0.036], "testName": "string_sort", "query": "SELECT URL, Title FROM hits_100m_single ORDER BY URL, Title LIMIT 10"}, {"oldTime": 1.4371, "newTime": 1.3613, "relativeDifference": -0.053, "timeSpeed": 1.055, "quantiles": [0.008, 0.019, 0.052, 0.073], "testName": "string_sort", "query": "SELECT URL, Title FROM hits_10m_single ORDER BY URL, Title LIMIT 9000000, 10"}, {"oldTime": 0.223, "newTime": 0.2175, "relativeDifference": -0.025, "timeSpeed": 1.025, "quantiles": [0.006, 0.016, 0.028, 0.03], "testName": "string_sort", "query": "SELECT URL, URL FROM hits_100m_single ORDER BY URL, URL LIMIT 10"}, {"oldTime": 0.6967, "newTime": 0.7084, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.001, 0.006, 0.028, 0.044], "testName": "string_sort", "query": "SELECT URL, URL FROM hits_10m_single ORDER BY URL, URL LIMIT 9000000, 10"}, {"oldTime": 0.0634, "newTime": 0.0617, "relativeDifference": -0.027, "timeSpeed": 1.027, "quantiles": [0.005, 0.016, 0.039, 0.05], "testName": "sum_map", "query": "SELECT sumMap(key, val) FROM sum_map_100000 FORMAT Null"}, {"oldTime": 0.6103, "newTime": 0.617, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.004, 0.009, 0.039, 0.053], "testName": "sum_map", "query": "SELECT sumMap(key, val) FROM sum_map_1000000 FORMAT Null"}, {"oldTime": 0.0606, "newTime": 0.0609, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.025, 0.06, 0.062], "testName": "sum_map", "query": "SELECT sumMapWithOverflow(key, val) FROM sum_map_100000 FORMAT Null"}, {"oldTime": 0.5996, "newTime": 0.5908, "relativeDifference": -0.015, "timeSpeed": 1.014, "quantiles": [0.004, 0.01, 0.023, 0.027], "testName": "sum_map", "query": "SELECT sumMapWithOverflow(key, val) FROM sum_map_1000000 FORMAT Null"}, {"oldTime": 0.0527, "newTime": 0.0536, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.0, 0.017, 0.045, 0.059], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM      zeros( 100000000) WHERE NOT ignore(rand())"}, {"oldTime": 0.0394, "newTime": 0.0389, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.001, 0.012, 0.073, 0.078], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM   zeros_mt(1600000000) WHERE NOT ignore(rand())"}, {"oldTime": 0.06, "newTime": 0.0604, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.008, 0.033, 0.038], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM  numbers(    10000000) WHERE NOT ignore(toString(number))"}, {"oldTime": 0.0397, "newTime": 0.0403, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.0, 0.008, 0.068, 0.07], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM  numbers_mt(160000000) WHERE NOT ignore(toString(number))"}, {"oldTime": 0.1729, "newTime": 0.1722, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.001, 0.007, 0.013, 0.015], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(intHash32(number))"}, {"oldTime": 0.1498, "newTime": 0.1482, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.006, 0.012, 0.019, 0.022], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(intHash64(number))"}, {"oldTime": 0.1387, "newTime": 0.1387, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.006, 0.009, 0.011], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number % 34908756)"}, {"oldTime": 0.1538, "newTime": 0.1643, "relativeDifference": 0.068, "timeSpeed": 1.068, "quantiles": [0.002, 0.007, 0.068, 0.074], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number % 7)"}, {"oldTime": 0.1525, "newTime": 0.1509, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.0, 0.008, 0.02, 0.028], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number / 7)"}, {"oldTime": 0.7345, "newTime": 0.7079, "relativeDifference": -0.037, "timeSpeed": 1.037, "quantiles": [0.006, 0.036, 0.041, 0.042], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(reinterpretAsString(number))"}, {"oldTime": 0.0996, "newTime": 0.0996, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.001, 0.008, 0.012], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(intHash32(number))"}, {"oldTime": 0.0892, "newTime": 0.0878, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.0, 0.005, 0.015, 0.018], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(intHash64(number))"}, {"oldTime": 0.0841, "newTime": 0.0869, "relativeDifference": 0.033, "timeSpeed": 1.033, "quantiles": [0.019, 0.028, 0.039, 0.043], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number % 34908756)"}, {"oldTime": 0.0951, "newTime": 0.0969, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.004, 0.016, 0.03, 0.032], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number % 7)"}, {"oldTime": 0.0902, "newTime": 0.0891, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.003, 0.008, 0.017, 0.02], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number / 7)"}, {"oldTime": 0.4175, "newTime": 0.4134, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.009, 0.011, 0.024, 0.03], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(reinterpretAsString(number))"}, {"oldTime": 0.3118, "newTime": 0.314, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.003, 0.011, 0.022, 0.028], "testName": "synthetic_hardware_benchmark", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(materialize(\\'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\') AS s, concat(s,s,s,s,s,s,s,s,s,s) AS t, concat(t,t,t,t,t,t,t,t,t,t) AS u) SETTINGS max_block_size = 1000"}, {"oldTime": 0.3416, "newTime": 0.3404, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.001, 0.007, 0.032, 0.044], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 1000 AS k, count() FROM numbers(    100000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.1982, "newTime": 0.1969, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.002, 0.016, 0.02], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 1000 AS k, count() FROM numbers_mt(1600000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.0975, "newTime": 0.0963, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.012, 0.026, 0.039, 0.041], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 100000 AS k, count() FROM numbers(    10000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.1746, "newTime": 0.1724, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.007, 0.019, 0.035, 0.039], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 100000 AS k, count() FROM numbers_mt(160000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.3934, "newTime": 0.4027, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.001, 0.023, 0.062, 0.075], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 1000000 AS k, count() FROM numbers(    10000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.4869, "newTime": 0.4788, "relativeDifference": -0.017, "timeSpeed": 1.016, "quantiles": [0.001, 0.007, 0.031, 0.04], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 1000000 AS k, count() FROM numbers_mt(160000000) GROUP BY k FORMAT Null"}, {"oldTime": 1.7068, "newTime": 1.7006, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.007, 0.04, 0.051], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 10000000 AS k, count() FROM numbers(   10000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.8243, "newTime": 0.8377, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.007, 0.013, 0.026, 0.03], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 10000000 AS k, count() FROM numbers_mt(80000000) GROUP BY k FORMAT Null"}, {"oldTime": 1.6779, "newTime": 1.6812, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.009, 0.015, 0.019], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % toUInt32(1e8) AS k, count() FROM numbers_mt(toUInt32(1e8)) GROUP BY k FORMAT Null"}, {"oldTime": 0.1192, "newTime": 0.1228, "relativeDifference": 0.03, "timeSpeed": 1.03, "quantiles": [0.0, 0.03, 0.073, 0.077], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(ltrim(toString(number)))"}, {"oldTime": 0.1182, "newTime": 0.115, "relativeDifference": -0.028, "timeSpeed": 1.027, "quantiles": [0.01, 0.019, 0.04, 0.047], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(rtrim(toString(number)))"}, {"oldTime": 1.3787, "newTime": 1.3818, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.004, 0.019, 0.028], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(BOTH \\'012345\\' FROM toString(number)))"}, {"oldTime": 0.499, "newTime": 0.5161, "relativeDifference": 0.034, "timeSpeed": 1.034, "quantiles": [0.02, 0.025, 0.038, 0.041], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(LEADING \\'012345\\' FROM toString(number)))"}, {"oldTime": 1.1134, "newTime": 1.0744, "relativeDifference": -0.036, "timeSpeed": 1.036, "quantiles": [0.0, 0.006, 0.049, 0.053], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(TRAILING \\'012345\\' FROM toString(number)))"}, {"oldTime": 0.1315, "newTime": 0.1319, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.014, 0.044, 0.044], "testName": "trim_numbers", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(toString(number)))"}, {"oldTime": 0.3798, "newTime": 0.3918, "relativeDifference": 0.031, "timeSpeed": 1.031, "quantiles": [0.013, 0.021, 0.04, 0.048], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(ltrim(URL))"}, {"oldTime": 0.3715, "newTime": 0.39, "relativeDifference": 0.049, "timeSpeed": 1.049, "quantiles": [0.01, 0.019, 0.039, 0.049], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(rtrim(URL))"}, {"oldTime": 1.945, "newTime": 1.9429, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.009, 0.026, 0.028], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(BOTH \\'htpsw:/\\' FROM URL))"}, {"oldTime": 0.5577, "newTime": 0.554, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.006, 0.017, 0.022, 0.023], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(LEADING \\'htpsw:/\\' FROM URL))"}, {"oldTime": 0.8389, "newTime": 0.8198, "relativeDifference": -0.023, "timeSpeed": 1.023, "quantiles": [0.001, 0.007, 0.029, 0.035], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(TRAILING \\'/\\' FROM URL))"}, {"oldTime": 0.3725, "newTime": 0.3775, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.0, 0.013, 0.029, 0.042], "testName": "trim_urls", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(URL))"}, {"oldTime": 0.0992, "newTime": 0.1001, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.0, 0.008, 0.098, 0.144], "testName": "trim_whitespace", "query": "SELECT replaceRegexpAll(value, \\'^ *| *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.0643, "newTime": 0.0645, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.059, 0.1, 0.12], "testName": "trim_whitespace", "query": "SELECT replaceRegexpOne(value, \\' *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.0484, "newTime": 0.0471, "relativeDifference": -0.027, "timeSpeed": 1.027, "quantiles": [0.003, 0.026, 0.067, 0.081], "testName": "trim_whitespace", "query": "SELECT replaceRegexpOne(value, \\'^ *\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.1031, "newTime": 0.1056, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.01, 0.013, 0.028, 0.034], "testName": "trim_whitespace", "query": "SELECT trimBoth(value) FROM whitespaces FORMAT Null"}, {"oldTime": 0.1021, "newTime": 0.1026, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.0, 0.007, 0.029, 0.041], "testName": "trim_whitespace", "query": "SELECT trimLeft(value) FROM whitespaces FORMAT Null"}, {"oldTime": 0.1041, "newTime": 0.1037, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.004, 0.013, 0.021, 0.027], "testName": "trim_whitespace", "query": "SELECT trimRight(value) FROM whitespaces FORMAT Null"}, {"oldTime": 0.0201, "newTime": 0.02, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.002, 0.004, 0.013, 0.016], "testName": "uniq", "query": "SELECT 1 AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0704, "newTime": 0.0702, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.001, 0.005, 0.011, 0.013], "testName": "uniq", "query": "SELECT 1 AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0489, "newTime": 0.0471, "relativeDifference": -0.037, "timeSpeed": 1.038, "quantiles": [0.001, 0.011, 0.041, 0.046], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0475, "newTime": 0.0472, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.001, 0.005, 0.009, 0.009], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0495, "newTime": 0.0491, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.002, 0.009, 0.012], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0533, "newTime": 0.0529, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.0, 0.007, 0.018, 0.019], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0582, "newTime": 0.0583, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.004, 0.01, 0.012], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0709, "newTime": 0.0731, "relativeDifference": 0.031, "timeSpeed": 1.031, "quantiles": [0.0, 0.005, 0.031, 0.032], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0947, "newTime": 0.0951, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.003, 0.005, 0.014, 0.015], "testName": "uniq", "query": "SELECT 1 AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.991, "newTime": 1.9746, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.004, 0.006, 0.016, 0.019], "testName": "uniq", "query": "SELECT 1 AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0452, "newTime": 0.0438, "relativeDifference": -0.031, "timeSpeed": 1.031, "quantiles": [0.022, 0.052, 0.096, 0.108], "testName": "uniq", "query": "SELECT 1 AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0198, "newTime": 0.0195, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.003, 0.005, 0.014, 0.019], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0199, "newTime": 0.0198, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.0, 0.011, 0.026, 0.027], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0197, "newTime": 0.0196, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.002, 0.006, 0.017, 0.02], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0199, "newTime": 0.0197, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.001, 0.006, 0.01, 0.011], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.02, "newTime": 0.0197, "relativeDifference": -0.015, "timeSpeed": 1.015, "quantiles": [0.003, 0.009, 0.016, 0.019], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2634, "newTime": 0.2637, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.018, 0.053, 0.055], "testName": "uniq", "query": "SELECT ClientIP AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.4179, "newTime": 0.4168, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.004, 0.021, 0.022], "testName": "uniq", "query": "SELECT ClientIP AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3852, "newTime": 0.3815, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.0, 0.005, 0.012, 0.015], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3812, "newTime": 0.3771, "relativeDifference": -0.011, "timeSpeed": 1.01, "quantiles": [0.001, 0.007, 0.024, 0.028], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3778, "newTime": 0.3816, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.008, 0.01, 0.022, 0.024], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.377, "newTime": 0.3791, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.004, 0.007, 0.009, 0.01], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3793, "newTime": 0.384, "relativeDifference": 0.012, "timeSpeed": 1.012, "quantiles": [0.002, 0.008, 0.018, 0.023], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3816, "newTime": 0.384, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.004, 0.023, 0.031], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3915, "newTime": 0.3816, "relativeDifference": -0.026, "timeSpeed": 1.025, "quantiles": [0.008, 0.022, 0.034, 0.036], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.4909, "newTime": 0.4953, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.009, 0.011, 0.03, 0.046], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.425, "newTime": 0.4245, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.014, 0.031, 0.033], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3291, "newTime": 0.3301, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.003, 0.016, 0.019], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.0152, "newTime": 1.0028, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.006, 0.017, 0.029, 0.031], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.4049, "newTime": 0.4057, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.002, 0.006, 0.015, 0.019], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3053, "newTime": 0.3052, "relativeDifference": -0.001, "timeSpeed": 1.0, "quantiles": [0.0, 0.005, 0.032, 0.039], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.306, "newTime": 0.3069, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.003, 0.009, 0.021, 0.021], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0566, "newTime": 0.0567, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.009, 0.046, 0.056], "testName": "uniq", "query": "SELECT RegionID AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.172, "newTime": 0.1752, "relativeDifference": 0.018, "timeSpeed": 1.018, "quantiles": [0.003, 0.008, 0.019, 0.019], "testName": "uniq", "query": "SELECT RegionID AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1121, "newTime": 0.1118, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.006, 0.032, 0.034], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1208, "newTime": 0.1209, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.006, 0.013, 0.013], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1333, "newTime": 0.1329, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.007, 0.016, 0.019], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1402, "newTime": 0.139, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.001, 0.003, 0.016, 0.019], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1512, "newTime": 0.1514, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.001, 0.004, 0.021, 0.022], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1658, "newTime": 0.1681, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.013, 0.017, 0.035, 0.04], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1899, "newTime": 0.1889, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.005, 0.006, 0.01, 0.01], "testName": "uniq", "query": "SELECT RegionID AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.383, "newTime": 0.3897, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.004, 0.01, 0.022, 0.027], "testName": "uniq", "query": "SELECT RegionID AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1163, "newTime": 0.1145, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.0, 0.009, 0.04, 0.043], "testName": "uniq", "query": "SELECT RegionID AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0574, "newTime": 0.0571, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.008, 0.022, 0.029], "testName": "uniq", "query": "SELECT RegionID AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0669, "newTime": 0.0676, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.004, 0.012, 0.02, 0.022], "testName": "uniq", "query": "SELECT RegionID AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0587, "newTime": 0.0586, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.0, 0.009, 0.022, 0.026], "testName": "uniq", "query": "SELECT RegionID AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0571, "newTime": 0.0561, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.012, 0.017, 0.031, 0.032], "testName": "uniq", "query": "SELECT RegionID AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0565, "newTime": 0.0563, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.0, 0.003, 0.012, 0.012], "testName": "uniq", "query": "SELECT RegionID AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0416, "newTime": 0.0427, "relativeDifference": 0.026, "timeSpeed": 1.026, "quantiles": [0.003, 0.009, 0.023, 0.033], "testName": "uniq", "query": "SELECT SearchEngineID AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.224, "newTime": 0.225, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.002, 0.004, 0.007, 0.009], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0786, "newTime": 0.0786, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.001, 0.011, 0.014], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0906, "newTime": 0.0908, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.001, 0.014, 0.024], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1037, "newTime": 0.1032, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.004, 0.005, 0.012, 0.013], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1216, "newTime": 0.1223, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.002, 0.005, 0.02, 0.024], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1504, "newTime": 0.1498, "relativeDifference": -0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.008, 0.02, 0.025], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.1953, "newTime": 0.1923, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.006, 0.015, 0.03, 0.031], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2623, "newTime": 0.2601, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.001, 0.008, 0.022, 0.025], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.8727, "newTime": 1.8675, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.005, 0.014, 0.016], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0856, "newTime": 0.0853, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.011, 0.022, 0.025], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0404, "newTime": 0.0396, "relativeDifference": -0.02, "timeSpeed": 1.02, "quantiles": [0.0, 0.007, 0.021, 0.022], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0403, "newTime": 0.0399, "relativeDifference": -0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.007, 0.015, 0.015], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0404, "newTime": 0.0406, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.003, 0.006, 0.013, 0.017], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0398, "newTime": 0.0404, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.005, 0.007, 0.015, 0.018], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.0396, "newTime": 0.0402, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.003, 0.013, 0.044, 0.051], "testName": "uniq", "query": "SELECT SearchEngineID AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2741, "newTime": 0.2691, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.004, 0.018, 0.027, 0.027], "testName": "uniq", "query": "SELECT SearchPhrase AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.348, "newTime": 0.3418, "relativeDifference": -0.018, "timeSpeed": 1.018, "quantiles": [0.001, 0.01, 0.021, 0.024], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3375, "newTime": 0.3379, "relativeDifference": 0.001, "timeSpeed": 1.001, "quantiles": [0.0, 0.004, 0.011, 0.015], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3378, "newTime": 0.3411, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.0, 0.009, 0.019, 0.021], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.345, "newTime": 0.342, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.007, 0.008, 0.011, 0.011], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3406, "newTime": 0.3381, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.004, 0.011, 0.032, 0.037], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3396, "newTime": 0.3436, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.001, 0.005, 0.013, 0.015], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3382, "newTime": 0.3461, "relativeDifference": 0.023, "timeSpeed": 1.023, "quantiles": [0.004, 0.01, 0.022, 0.024], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3499, "newTime": 0.3507, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.002, 0.01, 0.029, 0.03], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.3103, "newTime": 1.3158, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.004, 0.007, 0.02, 0.02], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.3473, "newTime": 0.3467, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.008, 0.022, 0.024], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2912, "newTime": 0.2952, "relativeDifference": 0.013, "timeSpeed": 1.013, "quantiles": [0.006, 0.007, 0.019, 0.025], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.503, "newTime": 0.5133, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.005, 0.012, 0.027, 0.029], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.316, "newTime": 0.3187, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.002, 0.007, 0.016, 0.017], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2938, "newTime": 0.2949, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.007, 0.023, 0.029], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.2881, "newTime": 0.2875, "relativeDifference": -0.003, "timeSpeed": 1.002, "quantiles": [0.002, 0.002, 0.008, 0.009], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.0181, "newTime": 1.0434, "relativeDifference": 0.024, "timeSpeed": 1.024, "quantiles": [0.004, 0.024, 0.072, 0.076], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(URLHierarchy(URL))"}, {"oldTime": 0.7654, "newTime": 0.7579, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.002, 0.013, 0.027, 0.03], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(URLPathHierarchy(URL))"}, {"oldTime": 0.3487, "newTime": 0.3468, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.012, 0.025, 0.028], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryString(URL))"}, {"oldTime": 0.3257, "newTime": 0.324, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.004, 0.008, 0.018, 0.025], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryStringAndFragment(URL))"}, {"oldTime": 0.396, "newTime": 0.397, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.006, 0.019, 0.024], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutToFirstSignificantSubdomain(URL))"}, {"oldTime": 0.4344, "newTime": 0.4348, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.006, 0.023, 0.025], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutWWW(URL))"}, {"oldTime": 0.4107, "newTime": 0.4066, "relativeDifference": -0.01, "timeSpeed": 1.01, "quantiles": [0.0, 0.011, 0.034, 0.039], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(decodeURLComponent(URL))"}, {"oldTime": 0.3149, "newTime": 0.3139, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.009, 0.013, 0.014], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(domain(URL))"}, {"oldTime": 0.3621, "newTime": 0.3648, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.006, 0.007, 0.014, 0.016], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(domainWithoutWWW(URL))"}, {"oldTime": 0.4284, "newTime": 0.431, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.0, 0.003, 0.015, 0.023], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(extractURLParameterNames(URL))"}, {"oldTime": 0.4557, "newTime": 0.4514, "relativeDifference": -0.01, "timeSpeed": 1.009, "quantiles": [0.003, 0.005, 0.016, 0.019], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(extractURLParameters(URL))"}, {"oldTime": 0.3954, "newTime": 0.3922, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.0, 0.008, 0.014, 0.014], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(firstSignificantSubdomain(URL))"}, {"oldTime": 0.2986, "newTime": 0.3011, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.0, 0.001, 0.021, 0.023], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(fragment(URL))"}, {"oldTime": 0.3231, "newTime": 0.3191, "relativeDifference": -0.013, "timeSpeed": 1.012, "quantiles": [0.01, 0.013, 0.02, 0.024], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(path(URL))"}, {"oldTime": 0.4346, "newTime": 0.4315, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.003, 0.01, 0.017, 0.018], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(pathFull(URL))"}, {"oldTime": 0.2687, "newTime": 0.2671, "relativeDifference": -0.006, "timeSpeed": 1.005, "quantiles": [0.003, 0.014, 0.03, 0.043], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(protocol(URL))"}, {"oldTime": 0.3788, "newTime": 0.38, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.002, 0.01, 0.049, 0.052], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(queryString(URL))"}, {"oldTime": 0.3719, "newTime": 0.3841, "relativeDifference": 0.032, "timeSpeed": 1.032, "quantiles": [0.0, 0.017, 0.047, 0.06], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(queryStringAndFragment(URL))"}, {"oldTime": 0.3171, "newTime": 0.3181, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.008, 0.018, 0.021], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(topLevelDomain(URL))"}, {"oldTime": 0.521, "newTime": 0.5176, "relativeDifference": -0.007, "timeSpeed": 1.006, "quantiles": [0.0, 0.013, 0.029, 0.029], "testName": "vectorize_aggregation_combinators", "query": "SELECT arrayReduce(\\'avg\\', v) FROM array_data FORMAT Null"}, {"oldTime": 0.0318, "newTime": 0.0323, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.008, 0.009, 0.141, 0.147], "testName": "vectorize_aggregation_combinators", "query": "SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null"}, {"oldTime": 0.026, "newTime": 0.026, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.008, 0.033, 0.051], "testName": "vectorize_aggregation_combinators", "query": "SELECT countMerge(v) FROM (SELECT number % 1024 k, countState() v FROM numbers(10000000) GROUP BY k) FORMAT Null"}, {"oldTime": 0.3487, "newTime": 0.3487, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.003, 0.015, 0.017], "testName": "vectorize_aggregation_combinators", "query": "SELECT k, sumArray(v) FROM array_data GROUP BY k FORMAT Null"}, {"oldTime": 0.3168, "newTime": 0.3183, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.003, 0.012, 0.019], "testName": "vectorize_aggregation_combinators", "query": "SELECT sumArray(v) FROM array_data FORMAT Null"}, {"oldTime": 0.0927, "newTime": 0.0954, "relativeDifference": 0.029, "timeSpeed": 1.029, "quantiles": [0.004, 0.012, 0.027, 0.029], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":\"test_string\"}\\'), \\'myparam\\'))"}, {"oldTime": 0.6977, "newTime": 0.6991, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.0, 0.009, 0.028, 0.036], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 0.2, "newTime": 0.1941, "relativeDifference": -0.03, "timeSpeed": 1.03, "quantiles": [0.003, 0.017, 0.036, 0.037], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 0.4334, "newTime": 0.4286, "relativeDifference": -0.012, "timeSpeed": 1.011, "quantiles": [0.011, 0.028, 0.054, 0.063], "testName": "website", "query": "SELECT * FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\' ORDER BY EventTime LIMIT 10"}, {"oldTime": 0.2125, "newTime": 0.2106, "relativeDifference": -0.009, "timeSpeed": 1.009, "quantiles": [0.002, 0.008, 0.014, 0.015], "testName": "website", "query": "SELECT * FROM hits_10m_single WHERE URL LIKE \\'%metrika%\\' ORDER BY EventTime LIMIT 10"}, {"oldTime": 1.3454, "newTime": 1.3576, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.009, 0.021, 0.041, 0.042], "testName": "website", "query": "SELECT 1, URL, count() AS c FROM hits_100m_single GROUP BY 1, URL ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.1621, "newTime": 0.1639, "relativeDifference": 0.011, "timeSpeed": 1.011, "quantiles": [0.003, 0.011, 0.045, 0.047], "testName": "website", "query": "SELECT 1, URL, count() AS c FROM hits_10m_single GROUP BY 1, URL ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.006, "newTime": 0.0061, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.001, 0.016, 0.029, 0.033], "testName": "website", "query": "SELECT AdvEngineID, count() FROM hits_10m_single WHERE AdvEngineID != 0 GROUP BY AdvEngineID ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.4777, "newTime": 0.4772, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.013, 0.044, 0.054], "testName": "website", "query": "SELECT ClientIP AS x, x - 1, x - 2, x - 3, count() AS c FROM hits_100m_single GROUP BY x, x - 1, x - 2, x - 3 ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.3712, "newTime": 0.3585, "relativeDifference": -0.035, "timeSpeed": 1.035, "quantiles": [0.001, 0.013, 0.034, 0.039], "testName": "website", "query": "SELECT CounterID, avg(length(URL)) AS l, count() AS c FROM hits_100m_single WHERE URL != \\'\\' GROUP BY CounterID HAVING c > 100000 ORDER BY l DESC LIMIT 25"}, {"oldTime": 0.0473, "newTime": 0.0474, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.013, 0.043, 0.043], "testName": "website", "query": "SELECT CounterID, avg(length(URL)) AS l, count() AS c FROM hits_10m_single WHERE URL != \\'\\' GROUP BY CounterID HAVING c > 100000 ORDER BY l DESC LIMIT 25"}, {"oldTime": 0.0842, "newTime": 0.0838, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.005, 0.008, 0.015, 0.018], "testName": "website", "query": "SELECT MobilePhone, MobilePhoneModel, uniq(UserID) AS u FROM hits_100m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.0229, "newTime": 0.0236, "relativeDifference": 0.03, "timeSpeed": 1.03, "quantiles": [0.018, 0.027, 0.094, 0.121], "testName": "website", "query": "SELECT MobilePhone, MobilePhoneModel, uniq(UserID) AS u FROM hits_10m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.0768, "newTime": 0.0781, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.002, 0.007, 0.017, 0.024], "testName": "website", "query": "SELECT MobilePhoneModel, uniq(UserID) AS u FROM hits_100m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.2007, "newTime": 0.2019, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.0, 0.003, 0.024, 0.029], "testName": "website", "query": "SELECT RegionID, sum(AdvEngineID), count() AS c, avg(ResolutionWidth), uniq(UserID) FROM hits_100m_single GROUP BY RegionID ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0371, "newTime": 0.0363, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.0, 0.001, 0.016, 0.022], "testName": "website", "query": "SELECT RegionID, sum(AdvEngineID), count() AS c, avg(ResolutionWidth), uniq(UserID) FROM hits_10m_single GROUP BY RegionID ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.1734, "newTime": 0.1731, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.003, 0.007, 0.009], "testName": "website", "query": "SELECT RegionID, uniq(UserID) AS u FROM hits_100m_single GROUP BY RegionID ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.032, "newTime": 0.0323, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.004, 0.008, 0.015, 0.019], "testName": "website", "query": "SELECT RegionID, uniq(UserID) AS u FROM hits_10m_single GROUP BY RegionID ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.2745, "newTime": 0.2698, "relativeDifference": -0.018, "timeSpeed": 1.017, "quantiles": [0.005, 0.015, 0.036, 0.04], "testName": "website", "query": "SELECT SearchEngineID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.3465, "newTime": 0.3498, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.004, 0.007, 0.02, 0.024], "testName": "website", "query": "SELECT SearchEngineID, SearchPhrase, count() AS c FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0553, "newTime": 0.0538, "relativeDifference": -0.028, "timeSpeed": 1.027, "quantiles": [0.018, 0.038, 0.068, 0.072], "testName": "website", "query": "SELECT SearchEngineID, SearchPhrase, count() AS c FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.097, "newTime": 0.0972, "relativeDifference": 0.002, "timeSpeed": 1.002, "quantiles": [0.001, 0.006, 0.025, 0.035], "testName": "website", "query": "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY EventTime LIMIT 10"}, {"oldTime": 0.0994, "newTime": 0.1008, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.002, 0.006, 0.014, 0.016], "testName": "website", "query": "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY EventTime, SearchPhrase LIMIT 10"}, {"oldTime": 0.076, "newTime": 0.0776, "relativeDifference": 0.021, "timeSpeed": 1.021, "quantiles": [0.004, 0.013, 0.027, 0.033], "testName": "website", "query": "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY SearchPhrase LIMIT 10"}, {"oldTime": 0.7708, "newTime": 0.7682, "relativeDifference": -0.004, "timeSpeed": 1.003, "quantiles": [0.003, 0.007, 0.025, 0.039], "testName": "website", "query": "SELECT SearchPhrase, any(URL), any(Title), count() AS c, uniq(UserID) FROM hits_100m_single WHERE Title LIKE \\'%\u042f\u043d\u0434\u0435\u043a\u0441%\\' AND URL NOT LIKE \\'%.yandex.%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.1178, "newTime": 0.1239, "relativeDifference": 0.051, "timeSpeed": 1.051, "quantiles": [0.007, 0.02, 0.072, 0.091], "testName": "website", "query": "SELECT SearchPhrase, any(URL), any(Title), count() AS c, uniq(UserID) FROM hits_10m_single WHERE Title LIKE \\'%\u042f\u043d\u0434\u0435\u043a\u0441%\\' AND URL NOT LIKE \\'%.yandex.%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.3144, "newTime": 0.3095, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.009, 0.015, 0.037, 0.047], "testName": "website", "query": "SELECT SearchPhrase, any(URL), count() AS c FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.2574, "newTime": 0.2597, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.004, 0.006, 0.017, 0.017], "testName": "website", "query": "SELECT SearchPhrase, count() AS c FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.337, "newTime": 0.3394, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.0, 0.004, 0.008, 0.01], "testName": "website", "query": "SELECT SearchPhrase, uniq(UserID) AS u FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.0575, "newTime": 0.0544, "relativeDifference": -0.054, "timeSpeed": 1.056, "quantiles": [0.025, 0.045, 0.067, 0.074], "testName": "website", "query": "SELECT SearchPhrase, uniq(UserID) AS u FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10"}, {"oldTime": 0.0303, "newTime": 0.0303, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.0, 0.015, 0.038, 0.047], "testName": "website", "query": "SELECT Title, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(Title) GROUP BY Title ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.0451, "newTime": 0.0461, "relativeDifference": 0.022, "timeSpeed": 1.022, "quantiles": [0.023, 0.038, 0.09, 0.093], "testName": "website", "query": "SELECT Title, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(Title) GROUP BY Title ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.1584, "newTime": 0.1688, "relativeDifference": 0.065, "timeSpeed": 1.065, "quantiles": [0.022, 0.029, 0.084, 0.104], "testName": "website", "query": "SELECT TraficSourceID, SearchEngineID, AdvEngineID, ((SearchEngineID = 0 AND AdvEngineID = 0) ? Referer : \\'\\') AS Src, URL AS Dst, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 1000"}, {"oldTime": 0.1903, "newTime": 0.1937, "relativeDifference": 0.017, "timeSpeed": 1.017, "quantiles": [0.004, 0.017, 0.041, 0.047], "testName": "website", "query": "SELECT TraficSourceID, SearchEngineID, AdvEngineID, ((SearchEngineID = 0 AND AdvEngineID = 0) ? Referer : \\'\\') AS Src, URL AS Dst, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 1000"}, {"oldTime": 0.0824, "newTime": 0.0806, "relativeDifference": -0.022, "timeSpeed": 1.022, "quantiles": [0.008, 0.02, 0.111, 0.138], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.0244, "newTime": 0.0248, "relativeDifference": 0.016, "timeSpeed": 1.016, "quantiles": [0.015, 0.02, 0.058, 0.063], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND IsLink AND NOT IsDownload GROUP BY URL ORDER BY PageViews DESC LIMIT 1000"}, {"oldTime": 0.0908, "newTime": 0.0927, "relativeDifference": 0.02, "timeSpeed": 1.02, "quantiles": [0.008, 0.021, 0.037, 0.044], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.0313, "newTime": 0.0321, "relativeDifference": 0.025, "timeSpeed": 1.025, "quantiles": [0.019, 0.026, 0.073, 0.082], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND IsLink AND NOT IsDownload GROUP BY URL ORDER BY PageViews DESC LIMIT 1000"}, {"oldTime": 1.3446, "newTime": 1.365, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.008, 0.011, 0.018, 0.02], "testName": "website", "query": "SELECT URL, count() AS c FROM hits_100m_single GROUP BY URL ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.1539, "newTime": 0.1528, "relativeDifference": -0.008, "timeSpeed": 1.007, "quantiles": [0.001, 0.003, 0.019, 0.021], "testName": "website", "query": "SELECT URL, count() AS c FROM hits_10m_single GROUP BY URL ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0106, "newTime": 0.0106, "relativeDifference": 0.0, "timeSpeed": 1.0, "quantiles": [0.001, 0.007, 0.031, 0.045], "testName": "website", "query": "SELECT URLHash, EventDate, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND TraficSourceID IN (-1, 6) AND RefererHash = halfMD5(\\'http://example.ru/\\') GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 100"}, {"oldTime": 0.0147, "newTime": 0.0139, "relativeDifference": -0.055, "timeSpeed": 1.057, "quantiles": [0.017, 0.071, 0.173, 0.224], "testName": "website", "query": "SELECT URLHash, EventDate, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND TraficSourceID IN (-1, 6) AND RefererHash = halfMD5(\\'http://example.ru/\\') GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 100"}, {"oldTime": 0.6081, "newTime": 0.61, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.0, 0.005, 0.025, 0.034], "testName": "website", "query": "SELECT UserID, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, SearchPhrase LIMIT 10"}, {"oldTime": 0.9965, "newTime": 1.0011, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.004, 0.037, 0.054], "testName": "website", "query": "SELECT UserID, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, SearchPhrase ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.0556, "newTime": 0.056, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.003, 0.012, 0.068, 0.081], "testName": "website", "query": "SELECT UserID, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, SearchPhrase LIMIT 10"}, {"oldTime": 0.1003, "newTime": 0.0975, "relativeDifference": -0.028, "timeSpeed": 1.028, "quantiles": [0.001, 0.014, 0.045, 0.048], "testName": "website", "query": "SELECT UserID, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, SearchPhrase ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.4093, "newTime": 0.4128, "relativeDifference": 0.008, "timeSpeed": 1.008, "quantiles": [0.003, 0.01, 0.024, 0.026], "testName": "website", "query": "SELECT UserID, count() FROM hits_100m_single GROUP BY UserID ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.0422, "newTime": 0.0442, "relativeDifference": 0.047, "timeSpeed": 1.047, "quantiles": [0.026, 0.035, 0.068, 0.075], "testName": "website", "query": "SELECT UserID, count() FROM hits_10m_single GROUP BY UserID ORDER BY count() DESC LIMIT 10"}, {"oldTime": 1.706, "newTime": 1.7166, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.001, 0.015, 0.032, 0.033], "testName": "website", "query": "SELECT UserID, toMinute(EventTime) AS m, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, m, SearchPhrase ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.1939, "newTime": 0.1993, "relativeDifference": 0.027, "timeSpeed": 1.027, "quantiles": [0.019, 0.027, 0.063, 0.078], "testName": "website", "query": "SELECT UserID, toMinute(EventTime) AS m, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, m, SearchPhrase ORDER BY count() DESC LIMIT 10"}, {"oldTime": 0.3951, "newTime": 0.4008, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.005, 0.006, 0.016, 0.016], "testName": "website", "query": "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.2312, "newTime": 0.2347, "relativeDifference": 0.015, "timeSpeed": 1.015, "quantiles": [0.001, 0.008, 0.016, 0.017], "testName": "website", "query": "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_10m_single GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0634, "newTime": 0.0637, "relativeDifference": 0.004, "timeSpeed": 1.004, "quantiles": [0.001, 0.01, 0.05, 0.061], "testName": "website", "query": "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0084, "newTime": 0.0083, "relativeDifference": -0.012, "timeSpeed": 1.012, "quantiles": [0.014, 0.039, 0.264, 0.274], "testName": "website", "query": "SELECT WindowClientWidth, WindowClientHeight, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND NOT DontCountHits AND URLHash = halfMD5(\\'http://example.ru/\\') GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10000 FORMAT Null"}, {"oldTime": 0.0008, "newTime": 0.001, "relativeDifference": 0.25, "timeSpeed": 1.25, "quantiles": [0.083, 0.251, 0.415, 0.452], "testName": "website", "query": "SELECT count() FROM hits_100m_single"}, {"oldTime": 0.2669, "newTime": 0.2698, "relativeDifference": 0.01, "timeSpeed": 1.01, "quantiles": [0.001, 0.01, 0.038, 0.045], "testName": "website", "query": "SELECT count() FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\'"}, {"oldTime": 0.0008, "newTime": 0.0007, "relativeDifference": -0.126, "timeSpeed": 1.142, "quantiles": [0.014, 0.06, 0.156, 0.173], "testName": "website", "query": "SELECT count() FROM hits_10m_single"}, {"oldTime": 0.0071, "newTime": 0.0064, "relativeDifference": -0.099, "timeSpeed": 1.109, "quantiles": [0.029, 0.093, 0.201, 0.222], "testName": "website", "query": "SELECT count() FROM hits_10m_single WHERE AdvEngineID != 0"}, {"oldTime": 0.0153, "newTime": 0.0154, "relativeDifference": 0.006, "timeSpeed": 1.006, "quantiles": [0.008, 0.122, 0.359, 0.415], "testName": "website", "query": "SELECT count() FROM hits_10m_single WHERE UserID = 12345678901234567890"}, {"oldTime": 0.4608, "newTime": 0.4624, "relativeDifference": 0.003, "timeSpeed": 1.003, "quantiles": [0.003, 0.007, 0.013, 0.015], "testName": "website", "query": "SELECT domainWithoutWWW(Referer) AS key, avg(length(Referer)) AS l, count() AS c, any(Referer) FROM hits_100m_single WHERE Referer != \\'\\' GROUP BY key HAVING c > 100000 ORDER BY l DESC LIMIT 25"}, {"oldTime": 0.0854, "newTime": 0.0862, "relativeDifference": 0.009, "timeSpeed": 1.009, "quantiles": [0.003, 0.009, 0.05, 0.062], "testName": "website", "query": "SELECT domainWithoutWWW(Referer) AS key, avg(length(Referer)) AS l, count() AS c, any(Referer) FROM hits_10m_single WHERE Referer != \\'\\' GROUP BY key HAVING c > 100000 ORDER BY l DESC LIMIT 25"}, {"oldTime": 0.011, "newTime": 0.0108, "relativeDifference": -0.019, "timeSpeed": 1.018, "quantiles": [0.004, 0.018, 0.079, 0.082], "testName": "website", "query": "SELECT min(EventDate), max(EventDate) FROM hits_100m_single"}, {"oldTime": 0.0046, "newTime": 0.0044, "relativeDifference": -0.044, "timeSpeed": 1.045, "quantiles": [0.003, 0.02, 0.047, 0.051], "testName": "website", "query": "SELECT min(EventDate), max(EventDate) FROM hits_10m_single"}, {"oldTime": 0.0167, "newTime": 0.0168, "relativeDifference": 0.005, "timeSpeed": 1.005, "quantiles": [0.005, 0.012, 0.035, 0.054], "testName": "website", "query": "SELECT sum(AdvEngineID), count(), avg(ResolutionWidth) FROM hits_100m_single"}, {"oldTime": 0.0072, "newTime": 0.0069, "relativeDifference": -0.042, "timeSpeed": 1.043, "quantiles": [0.027, 0.094, 0.32, 0.359], "testName": "website", "query": "SELECT sum(AdvEngineID), count(), avg(ResolutionWidth) FROM hits_10m_single"}, {"oldTime": 0.9055, "newTime": 0.8981, "relativeDifference": -0.009, "timeSpeed": 1.008, "quantiles": [0.003, 0.005, 0.014, 0.016], "testName": "website", "query": "SELECT sum(ResolutionWidth), sum(ResolutionWidth + 1), sum(ResolutionWidth + 2), sum(ResolutionWidth + 3), sum(ResolutionWidth + 4), sum(ResolutionWidth + 5), sum(ResolutionWidth + 6), sum(ResolutionWidth + 7), sum(ResolutionWidth + 8), sum(ResolutionWidth + 9), sum(ResolutionWidth + 10), sum(ResolutionWidth + 11), sum(ResolutionWidth + 12), sum(ResolutionWidth + 13), sum(ResolutionWidth + 14), sum(ResolutionWidth + 15), sum(ResolutionWidth + 16), sum(ResolutionWidth + 17), sum(ResolutionWidth + 18), sum(ResolutionWidth + 19), sum(ResolutionWidth + 20), sum(ResolutionWidth + 21), sum(ResolutionWidth + 22), sum(ResolutionWidth + 23), sum(ResolutionWidth + 24), sum(ResolutionWidth + 25), sum(ResolutionWidth + 26), sum(ResolutionWidth + 27), sum(ResolutionWidth + 28), sum(ResolutionWidth + 29), sum(ResolutionWidth + 30), sum(ResolutionWidth + 31), sum(ResolutionWidth + 32), sum(ResolutionWidth + 33), sum(ResolutionWidth + 34), sum(ResolutionWidth + 35), sum(ResolutionWidth + 36), sum(ResolutionWidth + 37), sum(ResolutionWidth + 38), sum(ResolutionWidth + 39), sum(ResolutionWidth + 40), sum(ResolutionWidth + 41), sum(ResolutionWidth + 42), sum(ResolutionWidth + 43), sum(ResolutionWidth + 44), sum(ResolutionWidth + 45), sum(ResolutionWidth + 46), sum(ResolutionWidth + 47), sum(ResolutionWidth + 48), sum(ResolutionWidth + 49), sum(ResolutionWidth + 50), sum(ResolutionWidth + 51), sum(ResolutionWidth + 52), sum(ResolutionWidth + 53), sum(ResolutionWidth + 54), sum(ResolutionWidth + 55), sum(ResolutionWidth + 56), sum(ResolutionWidth + 57), sum(ResolutionWidth + 58), sum(ResolutionWidth + 59), sum(ResolutionWidth + 60), sum(ResolutionWidth + 61), sum(ResolutionWidth + 62), sum(ResolutionWidth + 63), sum(ResolutionWidth + 64), sum(ResolutionWidth + 65), sum(ResolutionWidth + 66), sum(ResolutionWidth + 67), sum(ResolutionWidth + 68), sum(ResolutionWidth + 69), sum(ResolutionWidth + 70), sum(ResolutionWidth + 71), sum(ResolutionWidth + 72), sum(ResolutionWidth + 73), sum(ResolutionWidth + 74), sum(ResolutionWidth + 75), sum(ResolutionWidth + 76), sum(ResolutionWidth + 77), sum(ResolutionWidth + 78), sum(ResolutionWidth + 79), sum(ResolutionWidth + 80), sum(ResolutionWidth + 81), sum(ResolutionWidth + 82), sum(ResolutionWidth + 83), sum(ResolutionWidth + 84), sum(ResolutionWidth + 85), sum(ResolutionWidth + 86), sum(ResolutionWidth + 87), sum(ResolutionWidth + 88), sum(ResolutionWidth + 89) FROM hits_100m_single"}, {"oldTime": 0.1787, "newTime": 0.1784, "relativeDifference": -0.002, "timeSpeed": 1.001, "quantiles": [0.001, 0.01, 0.03, 0.036], "testName": "website", "query": "SELECT sum(ResolutionWidth), sum(ResolutionWidth + 1), sum(ResolutionWidth + 2), sum(ResolutionWidth + 3), sum(ResolutionWidth + 4), sum(ResolutionWidth + 5), sum(ResolutionWidth + 6), sum(ResolutionWidth + 7), sum(ResolutionWidth + 8), sum(ResolutionWidth + 9), sum(ResolutionWidth + 10), sum(ResolutionWidth + 11), sum(ResolutionWidth + 12), sum(ResolutionWidth + 13), sum(ResolutionWidth + 14), sum(ResolutionWidth + 15), sum(ResolutionWidth + 16), sum(ResolutionWidth + 17), sum(ResolutionWidth + 18), sum(ResolutionWidth + 19), sum(ResolutionWidth + 20), sum(ResolutionWidth + 21), sum(ResolutionWidth + 22), sum(ResolutionWidth + 23), sum(ResolutionWidth + 24), sum(ResolutionWidth + 25), sum(ResolutionWidth + 26), sum(ResolutionWidth + 27), sum(ResolutionWidth + 28), sum(ResolutionWidth + 29), sum(ResolutionWidth + 30), sum(ResolutionWidth + 31), sum(ResolutionWidth + 32), sum(ResolutionWidth + 33), sum(ResolutionWidth + 34), sum(ResolutionWidth + 35), sum(ResolutionWidth + 36), sum(ResolutionWidth + 37), sum(ResolutionWidth + 38), sum(ResolutionWidth + 39), sum(ResolutionWidth + 40), sum(ResolutionWidth + 41), sum(ResolutionWidth + 42), sum(ResolutionWidth + 43), sum(ResolutionWidth + 44), sum(ResolutionWidth + 45), sum(ResolutionWidth + 46), sum(ResolutionWidth + 47), sum(ResolutionWidth + 48), sum(ResolutionWidth + 49), sum(ResolutionWidth + 50), sum(ResolutionWidth + 51), sum(ResolutionWidth + 52), sum(ResolutionWidth + 53), sum(ResolutionWidth + 54), sum(ResolutionWidth + 55), sum(ResolutionWidth + 56), sum(ResolutionWidth + 57), sum(ResolutionWidth + 58), sum(ResolutionWidth + 59), sum(ResolutionWidth + 60), sum(ResolutionWidth + 61), sum(ResolutionWidth + 62), sum(ResolutionWidth + 63), sum(ResolutionWidth + 64), sum(ResolutionWidth + 65), sum(ResolutionWidth + 66), sum(ResolutionWidth + 67), sum(ResolutionWidth + 68), sum(ResolutionWidth + 69), sum(ResolutionWidth + 70), sum(ResolutionWidth + 71), sum(ResolutionWidth + 72), sum(ResolutionWidth + 73), sum(ResolutionWidth + 74), sum(ResolutionWidth + 75), sum(ResolutionWidth + 76), sum(ResolutionWidth + 77), sum(ResolutionWidth + 78), sum(ResolutionWidth + 79), sum(ResolutionWidth + 80), sum(ResolutionWidth + 81), sum(ResolutionWidth + 82), sum(ResolutionWidth + 83), sum(ResolutionWidth + 84), sum(ResolutionWidth + 85), sum(ResolutionWidth + 86), sum(ResolutionWidth + 87), sum(ResolutionWidth + 88), sum(ResolutionWidth + 89) FROM hits_10m_single"}, {"oldTime": 0.0196, "newTime": 0.0193, "relativeDifference": -0.016, "timeSpeed": 1.015, "quantiles": [0.002, 0.01, 0.018, 0.019], "testName": "website", "query": "SELECT sum(UserID) FROM hits_100m_single"}, {"oldTime": 0.0065, "newTime": 0.0068, "relativeDifference": 0.046, "timeSpeed": 1.046, "quantiles": [0.003, 0.022, 0.043, 0.043], "testName": "website", "query": "SELECT sum(UserID) FROM hits_10m_single"}, {"oldTime": 0.0028, "newTime": 0.0029, "relativeDifference": 0.035, "timeSpeed": 1.035, "quantiles": [0.043, 0.078, 0.371, 0.455], "testName": "website", "query": "SELECT toStartOfMinute(EventTime) AS Minute, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-02\\' AND NOT Refresh AND NOT DontCountHits GROUP BY Minute ORDER BY Minute FORMAT Null"}, {"oldTime": 0.0111, "newTime": 0.0106, "relativeDifference": -0.046, "timeSpeed": 1.047, "quantiles": [0.038, 0.091, 0.139, 0.139], "testName": "website", "query": "SELECT toStartOfMinute(EventTime) AS Minute, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-02\\' AND NOT Refresh AND NOT DontCountHits GROUP BY Minute ORDER BY Minute FORMAT Null"}, {"oldTime": 0.1253, "newTime": 0.1247, "relativeDifference": -0.005, "timeSpeed": 1.004, "quantiles": [0.001, 0.004, 0.006, 0.007], "testName": "website", "query": "SELECT uniq(SearchPhrase) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.0415, "newTime": 0.0435, "relativeDifference": 0.048, "timeSpeed": 1.048, "quantiles": [0.039, 0.06, 0.109, 0.12], "testName": "website", "query": "SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null"}, {"oldTime": 0.0693, "newTime": 0.0698, "relativeDifference": 0.007, "timeSpeed": 1.007, "quantiles": [0.001, 0.004, 0.009, 0.011], "testName": "website", "query": "SELECT uniq(UserID) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.0412, "newTime": 0.0418, "relativeDifference": 0.014, "timeSpeed": 1.014, "quantiles": [0.015, 0.019, 0.03, 0.033], "testName": "website", "query": "SELECT uniq(UserID) FROM hits_10m_single FORMAT Null"}], "timePerformance": {"analyze_array_tuples": {"difference": [-0.0005], "newTime": [0.0222], "query": ["\\nSELECT [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199), (200, 200), (201, 201), (202, 202), (203, 203), (204, 204), (205, 205), (206, 206), (207, 207), (208, 208), (209, 209), (210, 210), (211, 211), (212, 212), (213, 213), (214, 214), (215, 215), (216, 216), (217, 217), (218, 218), (219, 219), (220, 220), (221, 221), (222, 222), (223, 223), (224, 224), (225, 225), (226, 226), (227, 227), (228, 228), (229, 229), (230, 230), (231, 231), (232, 232), (233, 233), (234, 234), (235, 235), (236, 236), (237, 237), (238, 238), (239, 239), (240, 240), (241, 241), (242, 242), (243, 243), (244, 244), (245, 245), (246, 246), (247, 247), (248, 248), (249, 249), (250, 250), (251, 251), (252, 252), (253, 253), (254, 254), (255, 255), (256, 256), (257, 257), (258, 258), (259, 259), (260, 260), (261, 261), (262, 262), (263, 263), (264, 264), (265, 265), (266, 266), (267, 267), (268, 268), (269, 269), (270, 270), (271, 271), (272, 272), (273, 273), (274, 274), (275, 275), (276, 276), (277, 277), (278, 278), (279, 279), (280, 280), (281, 281), (282, 282), (283, 283), (284, 284), (285, 285), (286, 286), (287, 287), (288, 288), (289, 289), (290, 290), (291, 291), (292, 292), (293, 293), (294, 294), (295, 295), (296, 296), (297, 297), (298, 298), (299, 299), (300, 300), (301, 301), (302, 302), (303, 303), (304, 304), (305, 305), (306, 306), (307, 307), (308, 308), (309, 309), (310, 310), (311, 311), (312, 312), (313, 313), (314, 314), (315, 315), (316, 316), (317, 317), (318, 318), (319, 319), (320, 320), (321, 321), (322, 322), (323, 323), (324, 324), (325, 325), (326, 326), (327, 327), (328, 328), (329, 329), (330, 330), (331, 331), (332, 332), (333, 333), (334, 334), (335, 335), (336, 336), (337, 337), (338, 338), (339, 339), (340, 340), (341, 341), (342, 342), (343, 343), (344, 344), (345, 345), (346, 346), (347, 347), (348, 348), (349, 349), (350, 350), (351, 351), (352, 352), (353, 353), (354, 354), (355, 355), (356, 356), (357, 357), (358, 358), (359, 359), (360, 360), (361, 361), (362, 362), (363, 363), (364, 364), (365, 365), (366, 366), (367, 367), (368, 368), (369, 369), (370, 370), (371, 371), (372, 372), (373, 373), (374, 374), (375, 375), (376, 376), (377, 377), (378, 378), (379, 379), (380, 380), (381, 381), (382, 382), (383, 383), (384, 384), (385, 385), (386, 386), (387, 387), (388, 388), (389, 389), (390, 390), (391, 391), (392, 392), (393, 393), (394, 394), (395, 395), (396, 396), (397, 397), (398, 398), (399, 399), (400, 400), (401, 401), (402, 402), (403, 403), (404, 404), (405, 405), (406, 406), (407, 407), (408, 408), (409, 409), (410, 410), (411, 411), (412, 412), (413, 413), (414, 414), (415, 415), (416, 416), (417, 417), (418, 418), (419, 419), (420, 420), (421, 421), (422, 422), (423, 423), (424, 424), (425, 425), (426, 426), (427, 427), (428, 428), (429, 429), (430, 430), (431, 431), (432, 432), (433, 433), (434, 434), (435, 435), (436, 436), (437, 437), (438, 438), (439, 439), (440, 440), (441, 441), (442, 442), (443, 443), (444, 444), (445, 445), (446, 446), (447, 447), (448, 448), (449, 449), (450, 450), (451, 451), (452, 452), (453, 453), (454, 454), (455, 455), (456, 456), (457, 457), (458, 458), (459, 459), (460, 460), (461, 461), (462, 462), (463, 463), (464, 464), (465, 465), (466, 466), (467, 467), (468, 468), (469, 469), (470, 470), (471, 471), (472, 472), (473, 473), (474, 474), (475, 475), (476, 476), (477, 477), (478, 478), (479, 479), (480, 480), (481, 481), (482, 482), (483, 483), (484, 484), (485, 485), (486, 486), (487, 487), (488, 488), (489, 489), (490, 490), (491, 491), (492, 492), (493, 493), (494, 494), (495, 495), (496, 496), (497, 497), (498, 498), (499, 499), (500, 500), (501, 501), (502, 502), (503, 503), (504, 504), (505, 505), (506, 506), (507, 507), (508, 508), (509, 509), (510, 510), (511, 511), (512, 512), (513, 513), (514, 514), (515, 515), (516, 516), (517, 517), (518, 518), (519, 519), (520, 520), (521, 521), (522, 522), (523, 523), (524, 524), (525, 525), (526, 526), (527, 527), (528, 528), (529, 529), (530, 530), (531, 531), (532, 532), (533, 533), (534, 534), (535, 535), (536, 536), (537, 537), (538, 538), (539, 539), (540, 540), (541, 541), (542, 542), (543, 543), (544, 544), (545, 545), (546, 546), (547, 547), (548, 548), (549, 549), (550, 550), (551, 551), (552, 552), (553, 553), (554, 554), (555, 555), (556, 556), (557, 557), (558, 558), (559, 559), (560, 560), (561, 561), (562, 562), (563, 563), (564, 564), (565, 565), (566, 566), (567, 567), (568, 568), (569, 569), (570, 570), (571, 571), (572, 572), (573, 573), (574, 574), (575, 575), (576, 576), (577, 577), (578, 578), (579, 579), (580, 580), (581, 581), (582, 582), (583, 583), (584, 584), (585, 585), (586, 586), (587, 587), (588, 588), (589, 589), (590, 590), (591, 591), (592, 592), (593, 593), (594, 594), (595, 595), (596, 596), (597, 597), (598, 598), (599, 599), (600, 600), (601, 601), (602, 602), (603, 603), (604, 604), (605, 605), (606, 606), (607, 607), (608, 608), (609, 609), (610, 610), (611, 611), (612, 612), (613, 613), (614, 614), (615, 615), (616, 616), (617, 617), (618, 618), (619, 619), (620, 620), (621, 621), (622, 622), (623, 623), (624, 624), (625, 625), (626, 626), (627, 627), (628, 628), (629, 629), (630, 630), (631, 631), (632, 632), (633, 633), (634, 634), (635, 635), (636, 636), (637, 637), (638, 638), (639, 639), (640, 640), (641, 641), (642, 642), (643, 643), (644, 644), (645, 645), (646, 646), (647, 647), (648, 648), (649, 649), (650, 650), (651, 651), (652, 652), (653, 653), (654, 654), (655, 655), (656, 656), (657, 657), (658, 658), (659, 659), (660, 660), (661, 661), (662, 662), (663, 663), (664, 664), (665, 665), (666, 666), (667, 667), (668, 668), (669, 669), (670, 670), (671, 671), (672, 672), (673, 673), (674, 674), (675, 675), (676, 676), (677, 677), (678, 678), (679, 679), (680, 680), (681, 681), (682, 682), (683, 683), (684, 684), (685, 685), (686, 686), (687, 687), (688, 688), (689, 689), (690, 690), (691, 691), (692, 692), (693, 693), (694, 694), (695, 695), (696, 696), (697, 697), (698, 698), (699, 699), (700, 700), (701, 701), (702, 702), (703, 703), (704, 704), (705, 705), (706, 706), (707, 707), (708, 708), (709, 709), (710, 710), (711, 711), (712, 712), (713, 713), (714, 714), (715, 715), (716, 716), (717, 717), (718, 718), (719, 719), (720, 720), (721, 721), (722, 722), (723, 723), (724, 724), (725, 725), (726, 726), (727, 727), (728, 728), (729, 729), (730, 730), (731, 731), (732, 732), (733, 733), (734, 734), (735, 735), (736, 736), (737, 737), (738, 738), (739, 739), (740, 740), (741, 741), (742, 742), (743, 743), (744, 744), (745, 745), (746, 746), (747, 747), (748, 748), (749, 749), (750, 750), (751, 751), (752, 752), (753, 753), (754, 754), (755, 755), (756, 756), (757, 757), (758, 758), (759, 759), (760, 760), (761, 761), (762, 762), (763, 763), (764, 764), (765, 765), (766, 766), (767, 767), (768, 768), (769, 769), (770, 770), (771, 771), (772, 772), (773, 773), (774, 774), (775, 775), (776, 776), (777, 777), (778, 778), (779, 779), (780, 780), (781, 781), (782, 782), (783, 783), (784, 784), (785, 785), (786, 786), (787, 787), (788, 788), (789, 789), (790, 790), (791, 791), (792, 792), (793, 793), (794, 794), (795, 795), (796, 796), (797, 797), (798, 798), (799, 799), (800, 800), (801, 801), (802, 802), (803, 803), (804, 804), (805, 805), (806, 806), (807, 807), (808, 808), (809, 809), (810, 810), (811, 811), (812, 812), (813, 813), (814, 814), (815, 815), (816, 816), (817, 817), (818, 818), (819, 819), (820, 820), (821, 821), (822, 822), (823, 823), (824, 824), (825, 825), (826, 826), (827, 827), (828, 828), (829, 829), (830, 830), (831, 831), (832, 832), (833, 833), (834, 834), (835, 835), (836, 836), (837, 837), (838, 838), (839, 839), (840, 840), (841, 841), (842, 842), (843, 843), (844, 844), (845, 845), (846, 846), (847, 847), (848, 848), (849, 849), (850, 850), (851, 851), (852, 852), (853, 853), (854, 854), (855, 855), (856, 856), (857, 857), (858, 858), (859, 859), (860, 860), (861, 861), (862, 862), (863, 863), (864, 864), (865, 865), (866, 866), (867, 867), (868, 868), (869, 869), (870, 870), (871, 871), (872, 872), (873, 873), (874, 874), (875, 875), (876, 876), (877, 877), (878, 878), (879, 879), (880, 880), (881, 881), (882, 882), (883, 883), (884, 884), (885, 885), (886, 886), (887, 887), (888, 888), (889, 889), (890, 890), (891, 891), (892, 892), (893, 893), (894, 894), (895, 895), (896, 896), (897, 897), (898, 898), (899, 899), (900, 900), (901, 901), (902, 902), (903, 903), (904, 904), (905, 905), (906, 906), (907, 907), (908, 908), (909, 909), (910, 910), (911, 911), (912, 912), (913, 913), (914, 914), (915, 915), (916, 916), (917, 917), (918, 918), (919, 919), (920, 920), (921, 921), (922, 922), (923, 923), (924, 924), (925, 925), (926, 926), (927, 927), (928, 928), (929, 929), (930, 930), (931, 931), (932, 932), (933, 933), (934, 934), (935, 935), (936, 936), (937, 937), (938, 938), (939, 939), (940, 940), (941, 941), (942, 942), (943, 943), (944, 944), (945, 945), (946, 946), (947, 947), (948, 948), (949, 949), (950, 950), (951, 951), (952, 952), (953, 953), (954, 954), (955, 955), (956, 956), (957, 957), (958, 958), (959, 959), (960, 960), (961, 961), (962, 962), (963, 963), (964, 964), (965, 965), (966, 966), (967, 967), (968, 968), (969, 969), (970, 970), (971, 971), (972, 972), (973, 973), (974, 974), (975, 975), (976, 976), (977, 977), (978, 978), (979, 979), (980, 980), (981, 981), (982, 982), (983, 983), (984, 984), (985, 985), (986, 986), (987, 987), (988, 988), (989, 989), (990, 990), (991, 991), (992, 992), (993, 993), (994, 994), (995, 995), (996, 996), (997, 997), (998, 998), (999, 999), (1000, 1000)] AS x FORMAT Null\\n"]}, "and_function": {"difference": [-0.0006, -0.0049], "newTime": [0.0866, 1.0268], "query": ["select count() from numbers(10000000) where number != 96594 AND number != 18511 AND number != 98085 AND number != 84177 AND number != 70314 AND number != 28083 AND number != 54202 AND number != 66522 AND number != 66939 AND number != 99469", "select count() from numbers(10000000) where number != 96594 AND number != 18511 AND number != 98085 AND number != 84177 AND number != 70314 AND number != 28083 AND number != 54202 AND number != 66522 AND number != 66939 AND number != 99469 AND number != 65776 AND number != 22876 AND number != 42151 AND number != 19924 AND number != 66681 AND number != 63022 AND number != 17487 AND number != 83914 AND number != 59754 AND number != 968 AND number != 73334 AND number != 68569 AND number != 49853 AND number != 33155 AND number != 31777 AND number != 99698 AND number != 26708 AND number != 76409 AND number != 42191 AND number != 55397 AND number != 25724 AND number != 39170 AND number != 22728 AND number != 98238 AND number != 86052 AND number != 12756 AND number != 13948 AND number != 57774 AND number != 82511 AND number != 11337 AND number != 23506 AND number != 11875 AND number != 58536 AND number != 56919 AND number != 25986 AND number != 80710 AND number != 61797 AND number != 99244 AND number != 11665 AND number != 15758 AND number != 82899 AND number != 63150 AND number != 7198 AND number != 40071 AND number != 46310 AND number != 78488 AND number != 9273 AND number != 91878 AND number != 57904 AND number != 53941 AND number != 75675 AND number != 12093 AND number != 50090 AND number != 59675 AND number != 41632 AND number != 81448 AND number != 46821 AND number != 51919 AND number != 49028 AND number != 71059 AND number != 15673 AND number != 6132 AND number != 15473 AND number != 32527 AND number != 63842 AND number != 33121 AND number != 53271 AND number != 86033 AND number != 96807 AND number != 4791 AND number != 80089 AND number != 51616 AND number != 46311 AND number != 82844 AND number != 59353 AND number != 63538 AND number != 64857 AND number != 58471 AND number != 29870 AND number != 80209 AND number != 61000 AND number != 75991 AND number != 44506 AND number != 11283 AND number != 6335 AND number != 73502 AND number != 22354 AND number != 72816 AND number != 66399 AND number != 61703"]}, "array_auc": {"difference": [0.0024], "newTime": [0.1571], "query": ["SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)"]}, "array_element": {"difference": [0.0006, -0.0027, -0.0037], "newTime": [0.0666, 0.0647, 0.0445], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])", "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], [2]][number % 2 + 2])", "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], []][number % 2 + 2])"]}, "array_fill": {"difference": [-0.0865, -0.0317, 0.0163, -0.0307, -0.0283, -0.0227], "newTime": [4.2039, 3.3331, 3.7723, 1.1946, 0.9387, 1.047], "query": ["SELECT arraySlice(arrayFill(x -> (((x.1) % 2) = 0), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null", "SELECT arraySlice(arrayFill(x -> (((x.1) % 2) >= 0), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null", "SELECT arraySlice(arrayFill(x -> (((x.1) % 2) >= 2), arrayMap(x -> (x, toString(x)), range(100000000))), 1, 10) FORMAT Null", "SELECT arraySlice(arrayFill(x -> ((x % 2) = 0), range(100000000)), 1, 10) FORMAT Null", "SELECT arraySlice(arrayFill(x -> ((x % 2) >= 0), range(100000000)), 1, 10) FORMAT Null", "SELECT arraySlice(arrayFill(x -> ((x % 2) >= 2), range(100000000)), 1, 10) FORMAT Null"]}, "array_join": {"difference": [0.011, -0.0082, 0.0, 0.0033, 0.0061, 0.0085], "newTime": [0.4206, 0.4072, 0.1074, 0.3158, 0.1977, 0.3097], "query": ["SELECT count() FROM (SELECT [number] a, [number * 2, number] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1", "SELECT count() FROM (SELECT [number] a, [number * 2, number] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1", "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b)", "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1", "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b)", "SELECT count() FROM (SELECT [number] a, [number * 2] b FROM numbers(10000000)) AS t LEFT ARRAY JOIN a, b WHERE NOT ignore(a + b) SETTINGS enable_unaligned_array_join = 1"]}, "array_reduce": {"difference": [-0.012, -0.0113, -0.0128, 0.0007, -0.0112, 0.0111], "newTime": [0.1758, 0.2111, 0.3943, 0.6243, 0.4231, 0.6748], "query": ["SELECT arrayReduce(\\'count\\', range(100000000))", "SELECT arrayReduce(\\'sum\\', range(100000000))", "SELECT arrayReduceInRanges(\\'count\\', [(1, 100000000)], range(100000000))", "SELECT arrayReduceInRanges(\\'count\\', arrayZip(range(1000000), range(1000000)), range(100000000))[123456]", "SELECT arrayReduceInRanges(\\'sum\\', [(1, 100000000)], range(100000000))", "SELECT arrayReduceInRanges(\\'sum\\', arrayZip(range(1000000), range(1000000)), range(100000000))[123456]"]}, "base64": {"difference": [-0.0039, 0.0011, 0.0008, -0.0045, -0.0049, -0.0036, -0.0025, 0.003, -0.0037], "newTime": [0.0902, 0.1893, 0.1335, 0.1977, 0.406, 0.2321, 0.1993, 0.4091, 0.23], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(materialize(\\'Hello, world!\\')))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(base64Encode(toString(number)))", "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(materialize(\\'Hello, world!\\'))) != materialize(\\'Hello, world!\\')", "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\'))) != materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')", "SELECT count() FROM numbers(10000000) WHERE base64Decode(base64Encode(toString(number))) != toString(number)", "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(materialize(\\'Hello, world!\\'))) != materialize(\\'Hello, world!\\')", "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\'))) != materialize(\\'This is a long string to test ClickHouse base64 functions impl..\\')", "SELECT count() FROM numbers(10000000) WHERE tryBase64Decode(base64Encode(toString(number))) != toString(number)"]}, "base64_hits": {"difference": [0.0001, -0.0001, -0.0056, 0.0192, -0.0003, 0.0038, 0.0185, -0.0141, -0.0008, -0.0007, -0.0172, 0.0121], "newTime": [0.0372, 0.0842, 0.439, 0.4774, 0.0593, 0.1422, 0.7689, 0.7953, 0.0499, 0.1322, 0.7681, 0.7999], "query": ["SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(MobilePhoneModel))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(Title))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(URL))", "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel", "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(SearchPhrase)) != SearchPhrase", "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(Title)) != Title", "SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(URL)) != URL", "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel", "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(SearchPhrase)) != SearchPhrase", "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(Title)) != Title", "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(URL)) != URL"]}, "basename": {"difference": [0.0038, 0.0006], "newTime": [0.0429, 0.0478], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(basename(Referer))", "SELECT count() FROM test.hits WHERE NOT ignore(basename(URL))"]}, "bitCount": {"difference": [-0.0001, -0.0008, 0.0007, 0.0017, 0.0001, -0.0016], "newTime": [0.0746, 0.141, 0.0962, 0.1665, 0.0996, 0.0931], "query": ["SELECT bitCount(number) FROM numbers(100000000) FORMAT Null", "SELECT bitCount(toFloat64(number)) FROM numbers(100000000) FORMAT Null", "SELECT bitCount(toInt32(number)) FROM numbers(100000000) FORMAT Null", "SELECT bitCount(toUInt16(number)) FROM numbers(100000000) FORMAT Null", "SELECT bitCount(toUInt32(number)) FROM numbers(100000000) FORMAT Null", "SELECT bitCount(toUInt8(number)) FROM numbers(100000000) FORMAT Null"]}, "bit_operations_fixed_string": {"difference": [-0.0002, 0.0004, -0.0001, -0.0003], "newTime": [0.0119, 0.0105, 0.012, 0.0122], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(bitAnd(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))", "SELECT count() FROM test.hits WHERE NOT ignore(bitNot(toFixedString(ClientIP6, 16)))", "SELECT count() FROM test.hits WHERE NOT ignore(bitOr(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))", "SELECT count() FROM test.hits WHERE NOT ignore(bitXor(toFixedString(ClientIP6, 16), IPv6StringToNum(\\'ffff:ffff:ffff:0000:0000:0000:0000:0000\\')))"]}, "bit_operations_fixed_string_numbers": {"difference": [0.0003, 0.0001], "newTime": [0.0424, 0.028], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore(bitXor(reinterpretAsFixedString(number), reinterpretAsFixedString(0xabcd0123cdef4567)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(bitXor(reinterpretAsFixedString(number), reinterpretAsFixedString(number + 1)))"]}, "bloom_filter": {"difference": [0.0054], "newTime": [0.4107], "query": ["INSERT INTO test_bf SELECT number AS id, [CAST(id, \\'String\\'), CAST(id + 1, \\'String\\'), CAST(id + 2, \\'String\\')] FROM numbers(1000000)"]}, "bounding_ratio": {"difference": [0.0001, 0.0005], "newTime": [0.0045, 0.0054], "query": ["SELECT (argMax(number, number) - argMin(number, number)) / (max(number) - min(number)) FROM numbers(1000000)", "SELECT boundingRatio(number, number) FROM numbers(1000000)"]}, "cidr": {"difference": [0.0012, 0.0009], "newTime": [0.0098, 0.0147], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(IPv4CIDRToRange(ClientIP, rand() % 33))", "SELECT count() FROM test.hits WHERE NOT ignore(IPv6CIDRToRange(ClientIP6, rand() % 33))"]}, "codecs_float_insert": {"difference": [-0.0003, -0.0003, 0.0008, -0.0016, -0.0004, -0.0006, -0.0002, 0.0001, 0.0013, 0.0013, -0.0005, -0.0007, 0.0001, -0.0008, 0.0001], "newTime": [0.0419, 0.0417, 0.0384, 0.0297, 0.0428, 0.0283, 0.0296, 0.0158, 0.0162, 0.0284, 0.0176, 0.0272, 0.0187, 0.0173, 0.0303], "query": ["INSERT INTO codec_mon_Float64_DoubleDelta (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_Float64_Gorilla (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_Float64_LZ4 (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_Float64_NONE (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_Float64_ZSTD (n) SELECT number+sin(number) FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_Float64_DoubleDelta (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_Float64_Gorilla (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_Float64_LZ4 (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_Float64_NONE (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_Float64_ZSTD (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_Float64_DoubleDelta (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_Float64_LZ4 (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_Float64_NONE (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_Float64_ZSTD (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"]}, "codecs_float_select": {"difference": [-0.0005, 0.0, 0.0001, -0.0002, -0.0006, 0.0001, -0.0003, -0.0002, -0.0006, 0.0003, -0.0001, -0.0001, -0.0007, 0.0002, -0.0003], "newTime": [0.0159, 0.013, 0.0061, 0.0041, 0.012, 0.0162, 0.0145, 0.0045, 0.0039, 0.013, 0.0078, 0.0129, 0.0043, 0.0048, 0.0124], "query": ["SELECT count(n) FROM codec_mon_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_Float64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_Float64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_Float64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_Float64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_Float64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"]}, "codecs_int_insert": {"difference": [-0.0118, -0.0068, 0.0076, 0.0024, -0.0038, -0.0085, -0.0134, -0.0052, -0.0015, -0.0093, -0.0162, -0.0173, 0.0138, 0.0031, -0.0038, -0.0023, -0.0034, 0.0159, 0.0005, -0.0014, -0.0028], "newTime": [0.1244, 0.2212, 0.2192, 0.212, 0.1264, 0.178, 0.3319, 0.1158, 0.2483, 0.2611, 0.1081, 0.1049, 0.1561, 0.1669, 0.1119, 0.0542, 0.1788, 0.1803, 0.1158, 0.1506, 0.2578], "query": ["INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_DoubleDelta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_Gorilla (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_LZ4 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_mon_UInt64_ZSTD (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_DoubleDelta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_Gorilla (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_NONE (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_rnd_UInt64_ZSTD (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_Gorilla (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_T64 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1", "INSERT INTO codec_seq_UInt64_ZSTD (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"]}, "codecs_int_select": {"difference": [-0.0001, 0.0, 0.0, -0.0006, 0.0003, 0.0002, 0.0001, 0.0002, -0.0006, 0.0001, 0.0008, -0.0001, 0.0002, -0.0003, -0.0007, 0.0002, -0.0003, 0.0002, 0.0005, -0.0005, 0.0001], "newTime": [0.0041, 0.0117, 0.0097, 0.0109, 0.0046, 0.011, 0.0152, 0.0046, 0.0151, 0.0144, 0.0053, 0.0044, 0.0086, 0.0045, 0.004, 0.0056, 0.0084, 0.0111, 0.0049, 0.0099, 0.0156], "query": ["SELECT count(n) FROM codec_mon_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_mon_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_rnd_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_Delta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_DoubleDelta WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_Gorilla WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_LZ4 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_NONE WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_T64 WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1", "SELECT count(n) FROM codec_seq_UInt64_ZSTD WHERE ignore(n) == 0 LIMIT 1000000 SETTINGS max_threads=1"]}, "collations": {"difference": [0.0043, -0.0004], "newTime": [0.4844, 0.0498], "query": ["SELECT Title FROM test.hits ORDER BY Title DESC COLLATE \\'tr\\' LIMIT 1000, 10", "SELECT Title FROM test.hits ORDER BY Title DESC LIMIT 1000, 10"]}, "column_column_comparison": {"difference": [0.0002, -0.0049, -0.0095, -0.0001, -0.0061, 0.0023, -0.0003, -0.0078, 0.0018, 0.0001, 0.0069, -0.0045, 0.0001, -0.0006, -0.003, 0.005, -0.0098, 0.0, -0.0009], "newTime": [0.0015, 0.604, 0.2377, 0.001, 0.2489, 0.9113, 0.0011, 0.2686, 0.2551, 0.0016, 0.621, 0.2594, 0.0013, 0.0011, 0.6608, 0.2518, 1.2148, 0.0011, 0.312], "query": ["SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < PageCharset SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < URL", "SELECT count() FROM hits_100m_single WHERE PageCharset < PageCharset SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE PageCharset < URL", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < PageCharset SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < SearchPhrase SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < URL", "SELECT count() FROM hits_100m_single WHERE Title < PageCharset", "SELECT count() FROM hits_100m_single WHERE Title < Title", "SELECT count() FROM hits_100m_single WHERE Title < URL", "SELECT count() FROM hits_100m_single WHERE URL < PageCharset", "SELECT count() FROM hits_100m_single WHERE URL < URL", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < PageCharset SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < URL", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < PageCharset SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < SearchPhrase SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < URL"]}, "complex_array_creation": {"difference": [-0.0003, -0.0006], "newTime": [0.022, 0.0201], "query": ["SELECT count() FROM zeros(1000000) WHERE NOT ignore([[], [zero]])", "SELECT count() FROM zeros(1000000) WHERE NOT ignore([[zero], [zero]])"]}, "concat_hits": {"difference": [-0.0003, -0.0004, -0.0006, 0.0011, 0.0003, -0.0002, 0.0003, -0.0027, 0.0003, 0.0008, 0.0015, 0.0007, 0.0032, 0.0002, -0.0011, 0.0051, 0.0002, -0.0021, -0.0014, -0.0036, -0.0015, 0.001, 0.0014, 0.0004, -0.0006, 0.0003], "newTime": [0.0147, 0.0147, 0.0138, 0.0112, 0.0159, 0.0169, 0.0118, 0.0516, 0.0686, 0.0575, 0.0612, 0.0634, 0.0806, 0.0149, 0.0145, 0.0165, 0.0102, 0.0529, 0.0152, 0.067, 0.0108, 0.0174, 0.0578, 0.0666, 0.0598, 0.0798], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'Hello\\', SearchPhrase, \\'World\\'))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'World\\', SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(\\'a\\', PageCharset, \\'b\\'))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, \\'Hello\\'))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, \\'Hello\\', PageCharset))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(MobilePhoneModel, SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(PageCharset, \\'a\\'))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, \\'Hello\\'))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, \\'Hello\\', URL))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, SearchPhrase, MobilePhoneModel))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, URL))", "SELECT count() FROM test.hits WHERE NOT ignore(concat(URL, URL, URL))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'Hello{}World\\', SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'World{}\\', SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'a{}b\\', PageCharset))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello\\', MobilePhoneModel))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello\\', URL))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello{}\\', MobilePhoneModel, PageCharset))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}Hello{}\\', URL, URL))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}a\\', PageCharset))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', MobilePhoneModel, SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', URL, SearchPhrase))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}\\', URL, URL))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}{}\\', URL, SearchPhrase, MobilePhoneModel))", "SELECT count() FROM test.hits WHERE NOT ignore(format(\\'{}{}{}\\', URL, URL, URL))"]}, "conditional": {"difference": [0.0004, -0.0009, 0.0, 0.0003, -0.0001, -0.0001, 0.0, -0.0001], "newTime": [0.0155, 0.0275, 0.0093, 0.0154, 0.019, 0.0311, 0.0119, 0.0172], "query": ["SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, [toDateTime(\\'2019-02-04 01:24:31\\')], [toDate(\\'2019-02-04\\')]))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, [toDateTime(rand())], [toDate(rand())]))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, toDateTime(\\'2019-02-04 01:24:31\\'), toDate(\\'2019-02-04\\')))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(if(rand() % 2, toDateTime(rand()), toDate(rand())))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, [toDateTime(\\'2019-02-04 01:24:31\\')], [toDate(\\'2019-02-04\\')]))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, [toDateTime(rand())], [toDate(rand())]))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, toDateTime(\\'2019-02-04 01:24:31\\'), toDate(\\'2019-02-04\\')))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(multiIf(rand() % 2, toDateTime(rand()), toDate(rand())))"]}, "consistent_hashes": {"difference": [0.0001, -0.0005, -0.0007, -0.0001, 0.0002, 0.0001, -0.0001], "newTime": [0.0044, 0.0674, 0.0451, 0.0052, 0.005, 0.005, 0.0049], "query": ["SELECT jumpConsistentHash(number, 2) FROM numbers(1000000) FORMAT Null", "SELECT jumpConsistentHash(number, 32768) FROM numbers(1000000) FORMAT Null", "SELECT jumpConsistentHash(number, 500) FROM numbers(1000000) FORMAT Null", "SELECT sumburConsistentHash(toUInt32(number), 2) FROM numbers(1000000) FORMAT Null", "SELECT yandexConsistentHash(number, 2) FROM numbers(1000000) FORMAT Null", "SELECT yandexConsistentHash(number, 32768) FROM numbers(1000000) FORMAT Null", "SELECT yandexConsistentHash(number, 500) FROM numbers(1000000) FORMAT Null"]}, "constant_column_comparison": {"difference": [-0.0015, -0.0014, 0.0031, -0.0001, 0.0013, 0.0006, 0.0015, -0.0011, -0.0006, 0.0024, 0.0001, 0.0011, 0.0006, -0.0075, -0.0051, -0.0038, 0.0021, 0.003, 0.0072, -0.0017, -0.0078], "newTime": [0.4636, 0.4918, 0.4953, 0.3839, 0.453, 0.4484, 0.5003, 0.5546, 0.563, 0.1705, 0.2061, 0.206, 0.1923, 0.2338, 0.2346, 0.5334, 0.6147, 0.6255, 0.5442, 0.6096, 0.6566], "query": ["SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'model\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'utf-8\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE PageCharset < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE SearchPhrase < \\'\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0430\u044f \u0444\u0440\u0430\u0437\u0430\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE Title < \\'\\'", "SELECT count() FROM hits_100m_single WHERE Title < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\'", "SELECT count() FROM hits_100m_single WHERE Title < \\'\u041a\u0430\u043a\u043e\u0439-\u0442\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\\'", "SELECT count() FROM hits_100m_single WHERE URL < \\'\\'", "SELECT count() FROM hits_100m_single WHERE URL < \\'http://some_url\\'", "SELECT count() FROM hits_100m_single WHERE URL < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\'", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'model\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\\' SETTINGS max_threads = 2", "SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < \\'\u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0430\u044f \u0444\u0440\u0430\u0437\u0430\\' SETTINGS max_threads = 2"]}, "constant_column_search": {"difference": [-0.0005, 0.0036, -0.0018, 0.0067, 0.0112, -0.0029, -0.0022, 0.0092, -0.0075, 0.0127, -0.0119, -0.0046, 0.0039, 0.002, 0.0003, -0.0055, 0.0022, -0.001, -0.0044, -0.0029, -0.0088, -0.0023, -0.0019, 0.001, 0.004, -0.0005, 0.0014, -0.0016], "newTime": [0.2165, 0.2327, 0.9031, 1.0438, 1.6399, 1.0878, 0.4593, 0.5794, 0.5358, 0.8703, 0.5994, 1.0086, 0.4373, 0.324, 0.3411, 0.4919, 0.3713, 0.4726, 1.2353, 0.373, 1.1409, 0.4303, 0.4907, 0.4424, 0.3252, 0.2547, 0.3262, 0.3931], "query": ["SELECT DISTINCT Title, multiFuzzyMatchAny(Title, 2, [\\'^metrika\\\\\\\\.ry$\\']) AS distance FROM hits_100m_single WHERE distance = 1", "SELECT DISTINCT Title, multiFuzzyMatchAny(Title, 5, [\\'^metrika\\\\\\\\.ry$\\']) AS distance FROM hits_100m_single WHERE distance = 1", "SELECT count() FROM hits_100m_single WHERE match(URL, \\' *tranio\\\\\\\\.ru/spain/*/commercial/*\\') settings max_threads=5", "SELECT count() FROM hits_100m_single WHERE match(URL, \\'about/address|for_woman|^https?://lm-company.ruy/$|ultimateguitar.com\\')", "SELECT count() FROM hits_100m_single WHERE match(URL, \\'chelyabinsk.74.ru|doctor.74.ru|transport.74.ru|m.74.ru|//74.ru/|chel.74.ru|afisha.74.ru|diplom.74.ru|chelfin.ru|//chel.ru|chelyabinsk.ru|cheldoctor.ru|//mychel.ru|cheldiplom.ru|74.ru/video|market|poll|mail|conference|consult|contest|tags|feedback|pages|text\\')", "SELECT count() FROM hits_100m_single WHERE multiFuzzyMatchAny(URL, 2, [\\'about/address\\', \\'for_woman\\', \\'^https?://lm-company.ruy/$\\', \\'ultimateguitar.com\\'])", "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'about/address\\', \\'for_woman\\', \\'^https?://lm-company.ruy/$\\', \\'ultimateguitar.com\\'])", "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'chelyabinsk.74.ru\\', \\'doctor.74.ru\\', \\'transport.74.ru\\', \\'m.74.ru\\', \\'//74.ru/\\', \\'chel.74.ru\\', \\'afisha.74.ru\\', \\'diplom.74.ru\\', \\'chelfin.ru\\', \\'//chel.ru\\', \\'chelyabinsk.ru\\', \\'cheldoctor.ru\\', \\'//mychel.ru\\', \\'cheldiplom.ru\\', \\'74.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])", "SELECT count() FROM hits_100m_single WHERE multiMatchAny(URL, [\\'chelyabinsk\\\\\\\\.74\\\\\\\\.ru\\', \\'doctor\\\\\\\\.74\\\\\\\\.ru\\', \\'transport\\\\\\\\.74\\\\\\\\.ru\\', \\'m\\\\\\\\.74\\\\\\\\.ru\\', \\'//74\\\\\\\\.ru/\\', \\'chel\\\\\\\\.74\\\\\\\\.ru\\', \\'afisha\\\\\\\\.74\\\\\\\\.ru\\', \\'diplom\\\\\\\\.74\\\\\\\\.ru\\', \\'chelfin\\\\\\\\.ru\\', \\'//chel\\\\\\\\.ru\\', \\'chelyabinsk\\\\\\\\.ru\\', \\'cheldoctor\\\\\\\\.ru\\', \\'//mychel\\\\\\\\.ru\\', \\'cheldiplom\\\\\\\\.ru\\', \\'74\\\\\\\\.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])", "SELECT count() FROM hits_100m_single WHERE multiSearchAny(URL, [\\'chelyabinsk.74.ru\\', \\'doctor.74.ru\\', \\'transport.74.ru\\', \\'m.74.ru\\', \\'//74.ru/\\', \\'chel.74.ru\\', \\'afisha.74.ru\\', \\'diplom.74.ru\\', \\'chelfin.ru\\', \\'//chel.ru\\', \\'chelyabinsk.ru\\', \\'cheldoctor.ru\\', \\'//mychel.ru\\', \\'cheldiplom.ru\\', \\'74.ru/video\\', \\'market\\', \\'poll\\', \\'mail\\', \\'conference\\', \\'consult\\', \\'contest\\', \\'tags\\', \\'feedback\\', \\'pages\\', \\'text\\'])", "SELECT sum(multiFuzzyMatchAny(Title, 3, [\\'hello$\\', \\'world$\\', \\'^hello\\'])) FROM hits_100m_single", "select count(match(URL, \\'yandex|google\\')) FROM hits_100m_single", "select count(multiMatchAny(URL, [\\'yandex\\', \\'google\\'])) FROM hits_100m_single", "select count(multiSearchAllPositions(URL, [\\'yandex\\', \\'google\\'])) FROM hits_100m_single", "select count(position(URL, \\'yandex\\')), count(position(URL, \\'google\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'facebook\\')), sum(match(URL, \\'wikipedia\\')), sum(match(URL, \\'reddit\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'http\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex\\')), sum(match(URL, \\'google\\')), sum(match(URL, \\'yahoo\\')), sum(match(URL, \\'pikabu\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex|google|facebook|wikipedia|reddit\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex|google|http\\')) FROM hits_100m_single", "select sum(match(URL, \\'yandex|google|yahoo|pikabu\\')) FROM hits_100m_single", "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'facebook\\', \\'wikipedia\\', \\'reddit\\'])) from hits_100m_single", "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'http\\'])) from hits_100m_single", "select sum(multiMatchAny(URL, [\\'yandex\\', \\'google\\', \\'yahoo\\', \\'pikabu\\'])) from hits_100m_single", "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'facebook\\', \\'wikipedia\\', \\'reddit\\'])) from hits_100m_single", "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'http\\'])) from hits_100m_single", "select sum(multiSearchAny(URL, [\\'yandex\\', \\'google\\', \\'yahoo\\', \\'pikabu\\'])) from hits_100m_single", "select sum(multiSearchFirstIndex(URL, [\\'yandex\\', \\'google\\', \\'http\\', \\'facebook\\', \\'google\\'])) from hits_100m_single"]}, "count": {"difference": [0.0], "newTime": [0.0006], "query": ["SELECT count() FROM data"]}, "cpu_synthetic": {"difference": [0.0006, 0.0059, 0.0122, 0.0015, 0.01, 0.0008, 0.0003, -0.0014, -0.0031, 0.0007, -0.0011, 0.0011, 0.0046, -0.0049, -0.0009, -0.0026, 0.0306, 0.0048, -0.0186, 0.0005, -0.0018, -0.001, -0.003, 0.0046, -0.0006, -0.0031, -0.0047, 0.0017, 0.0104, 0.0013, -0.0034, -0.0059, -0.0001, -0.0004, -0.0004, 0.0001, -0.0006, -0.0003, 0.0003, 0.0002, 0.0004, -0.0006, -0.0004, -0.0024, -0.0015], "newTime": [0.1764, 0.2702, 0.4752, 1.0684, 0.9358, 0.0483, 0.0659, 0.2812, 0.3404, 0.0655, 0.0767, 0.1234, 0.44, 0.2545, 0.2581, 0.2754, 1.9797, 0.1242, 1.1144, 0.0952, 0.1604, 0.4697, 0.6245, 0.1659, 0.1994, 0.3288, 0.8471, 0.052, 0.4411, 0.432, 0.4746, 0.0999, 0.0178, 0.0212, 0.0179, 0.0238, 0.019, 0.0171, 0.0172, 0.0704, 0.0725, 0.0709, 0.1177, 0.1183, 0.1541], "query": ["SELECT RegionID, uniq(UserID) FROM hits_100m_single GROUP BY RegionID", "SELECT RegionID, uniq(UserID) FROM hits_10m_single GROUP BY RegionID SETTINGS max_threads = 1", "SELECT SearchEngineID, SearchPhrase, RegionID FROM hits_100m_single GROUP BY SearchEngineID, SearchPhrase, RegionID ORDER BY count() DESC LIMIT 10", "SELECT SearchEngineID, SearchPhrase, RegionID FROM hits_10m_single GROUP BY SearchEngineID, SearchPhrase, RegionID ORDER BY count() DESC LIMIT 10 SETTINGS max_threads = 1", "SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(PageCharset))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cityHash64(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryString(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(farmHash64(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(metroHash64(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(sipHash64(SearchPhrase))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(sipHash64(URL))", "SELECT count() FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\'", "SELECT count() FROM hits_100m_single WHERE match(URL, \\'^https?://(?:www\\\\\\\\.)?metri[kc]a\\\\\\\\.yandex\\\\\\\\.(?:ru|com|com\\\\\\\\.tr|ua|by|kz)/.+?2014\\')", "SELECT count() FROM hits_100m_single WHERE positionCaseInsensitiveUTF8(URL, \\'\u043d\u043e\u0432\u043e\u0441\u0442\u0438\\') != 0", "SELECT count() FROM hits_10m_single WHERE NOT ignore(MD5(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(Referer, URL, Title)", "SELECT count() FROM hits_10m_single WHERE NOT ignore(Referer, URL, Title) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(PageCharset)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(cityHash64(URL)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(cutQueryString(URL)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(farmHash64(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(metroHash64(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(sipHash64(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(sipHash64(URL)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE NOT ignore(toMonday(EventTime)) SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE URL LIKE \\'%metrika%\\' SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE match(URL, \\'^https?://(?:www\\\\\\\\.)?metri[kc]a\\\\\\\\.yandex\\\\\\\\.(?:ru|com|com\\\\\\\\.tr|ua|by|kz)/.+?2014\\') SETTINGS max_threads = 1", "SELECT count() FROM hits_10m_single WHERE positionCaseInsensitiveUTF8(URL, \\'\u043d\u043e\u0432\u043e\u0441\u0442\u0438\\') != 0 SETTINGS max_threads = 1", "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single", "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT quantilesIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single", "SELECT quantilesIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT quantilesTDigestIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single", "SELECT quantilesTDigestIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT quantilesTimingIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single", "SELECT quantilesTimingIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT uniq(UserID) FROM hits_100m_single", "SELECT uniq(UserID) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT uniqCombined(17)(UserID) FROM hits_100m_single", "SELECT uniqCombined(17)(UserID) FROM hits_10m_single SETTINGS max_threads = 1", "SELECT uniqExact(UserID) FROM hits_10m_single", "SELECT uniqExact(UserID) FROM hits_10m_single SETTINGS max_threads = 1"]}, "date_parsing": {"difference": [0.0005], "newTime": [0.0136], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(toDate(toString(EventDate)))"]}, "date_time_64": {"difference": [-0.001, -0.0001, -0.0003, -0.0005, -0.0001, -0.0003, -0.0003, -0.0002, 0.0002, 0.0005, -0.0014, -0.0025, -0.0003, 0.0008, 0.0003, -0.0012, -0.0006, 0.001], "newTime": [0.0199, 0.0353, 0.0497, 0.0209, 0.0257, 0.0253, 0.1164, 0.139, 0.0601, 0.068, 0.0659, 0.2167, 0.0191, 0.034, 0.1642, 0.3137, 0.0199, 0.0349], "query": ["SELECT count() FROM dt where not ignore(x)", "SELECT count() FROM dt64 where not ignore(x)", "SELECT count() from dt where not ignore(addDays(x, 1))", "SELECT count() from dt where not ignore(toRelativeMinuteNum(x))", "SELECT count() from dt where not ignore(toStartOfDay(x))", "SELECT count() from dt where not ignore(toStartOfWeek(x))", "SELECT count() from dt where not ignore(toString(x))", "SELECT count() from dt64 where not ignore(addDays(x, 1))", "SELECT count() from dt64 where not ignore(toRelativeMinuteNum(x))", "SELECT count() from dt64 where not ignore(toStartOfDay(x))", "SELECT count() from dt64 where not ignore(toStartOfWeek(x))", "SELECT count() from dt64 where not ignore(toString(x))", "SELECT max(x) FROM dt", "SELECT max(x) FROM dt64", "SELECT sum(toDateTime(toString(x)) != x) FROM dt", "SELECT sum(toDateTime64(toString(x), 3) != x) FROM dt64", "SELECT sum(x = x) FROM dt", "SELECT sum(x = x) FROM dt64"]}, "decimal_aggregates": {"difference": [-0.001, 0.0002, -0.0005, -0.002, -0.0021, -0.0018, -0.0014, -0.0003, -0.0001, -0.0004, 0.0006, 0.001, -0.0018, -0.0028, 0.0014, -0.0009, 0.0015, -0.0015, 0.0016, 0.0, -0.0003], "newTime": [0.0052, 0.003, 0.0027, 0.2419, 0.163, 0.1702, 0.0079, 0.0043, 0.0051, 0.2588, 0.1561, 0.1611, 0.2384, 0.1544, 0.1568, 0.1661, 0.1536, 0.1603, 0.0867, 0.0382, 0.0662], "query": ["SELECT avg(d128), sum(d128), sumWithOverflow(d128) FROM t", "SELECT avg(d32), sum(d32), sumWithOverflow(d32) FROM t", "SELECT avg(d64), sum(d64), sumWithOverflow(d64) FROM t", "SELECT median(d128), medianExact(d128), medianExactWeighted(d128, 2) FROM t", "SELECT median(d32), medianExact(d32), medianExactWeighted(d32, 2) FROM t", "SELECT median(d64), medianExact(d64), medianExactWeighted(d64, 2) FROM t", "SELECT min(d128), max(d128), argMin(x, d128), argMax(x, d128) FROM t", "SELECT min(d32), max(d32), argMin(x, d32), argMax(x, d32) FROM t", "SELECT min(d64), max(d64), argMin(x, d64), argMax(x, d64) FROM t", "SELECT quantile(d128), quantileExact(d128), quantileExactWeighted(d128, 2) FROM t", "SELECT quantile(d32), quantileExact(d32), quantileExactWeighted(d32, 2) FROM t", "SELECT quantile(d64), quantileExact(d64), quantileExactWeighted(d64, 2) FROM t", "SELECT quantilesExact(0.1, 0.9)(d128), quantilesExactWeighted(0.1, 0.9)(d128, 2) FROM t", "SELECT quantilesExact(0.1, 0.9)(d32), quantilesExactWeighted(0.1, 0.9)(d32, 2) FROM t", "SELECT quantilesExact(0.1, 0.9)(d64), quantilesExactWeighted(0.1, 0.9)(d64, 2) FROM t", "SELECT uniq(d128), uniqCombined(d128), uniqExact(d128), uniqHLL12(d128) FROM t", "SELECT uniq(d32), uniqCombined(d32), uniqExact(d32), uniqHLL12(d32) FROM t", "SELECT uniq(d64), uniqCombined(d64), uniqExact(d64), uniqHLL12(d64) FROM t", "SELECT varPop(d128), varSamp(d128), stddevPop(d128) FROM t", "SELECT varPop(d32), varSamp(d32), stddevPop(d32) FROM t", "SELECT varPop(d64), varSamp(d64), stddevPop(d64) FROM t"]}, "early_constant_folding": {"difference": [0.0007], "newTime": [0.0128], "query": ["SELECT count(JavaEnable) FROM default.hits_100m_single WHERE WatchID = 1 OR Title = \\'next\\' OR URL = \\'prev\\' OR OriginalURL = \\'???\\' OR 1"]}, "empty_string_deserialization": {"difference": [-0.0011], "newTime": [0.0181], "query": ["SELECT count() FROM empty_strings"]}, "empty_string_serialization": {"difference": [0.0663], "newTime": [0.7732], "query": ["INSERT INTO empty_strings SELECT \\'\\' FROM zeros(100000000);"]}, "entropy": {"difference": [0.0004, 0.0005, 0.0007, -0.0004, -0.0004, 0.0009, -0.0086, -0.0081, 0.0013], "newTime": [0.0506, 0.0744, 0.0168, 0.0091, 0.0059, 0.0567, 0.6511, 0.6697, 0.0333], "query": ["SELECT entropy(ClientIP) FROM test.hits", "SELECT entropy(ClientIP, RegionID) FROM test.hits", "SELECT entropy(MobilePhoneModel) FROM test.hits", "SELECT entropy(RegionID) FROM test.hits", "SELECT entropy(SearchEngineID) FROM test.hits", "SELECT entropy(SearchPhrase) FROM test.hits", "SELECT entropy(URL) FROM test.hits", "SELECT entropy(URL, URLDomain) FROM test.hits", "SELECT entropy(URLDomain) FROM test.hits"]}, "first_significant_subdomain": {"difference": [-0.0086], "newTime": [0.6302], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(firstSignificantSubdomain(URL))"]}, "fixed_string16": {"difference": [0.0019], "newTime": [0.0128], "query": ["SELECT count() FROM test.hits WHERE ClientIP6 < RemoteIP6"]}, "format_date_time": {"difference": [0.0, 0.0, -0.0008, 0.0001, 0.0006, -0.0011], "newTime": [0.0251, 0.0181, 0.0276, 0.0282, 0.0087, 0.0285], "query": ["SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%F %T\\'))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%H:%M:%S\\'))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%Y-%m-%d %H:%M:%S\\'))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'%m/%d/%Y %H:%M:%S\\'))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'Hello\\'))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(toDateTime(\\'2017-01-01 00:00:00\\') + number % 100000000 + rand() % 100000 AS t, formatDateTime(t, \\'The current time is: %I:%M %p\\'))"]}, "functions_coding": {"difference": [-0.0004, -0.0006, 0.0001, 0.0017], "newTime": [0.0069, 0.0115, 0.0091, 0.0119], "query": ["SELECT count() FROM numbers(1000000) WHERE NOT ignore(MACNumToString(number))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(MACStringToNum(MACNumToString(number)))", "SELECT count() FROM zeros_mt(10000000) WHERE NOT ignore(MACNumToString(rand64()))", "SELECT count() FROM zeros_mt(10000000) WHERE NOT ignore(MACStringToNum(MACNumToString(rand64())))"]}, "functions_geo": {"difference": [0.0002, -0.0004, 0.0013, -0.0013, -0.001, 0.0008], "newTime": [0.075, 0.0836, 0.2589, 0.1452, 0.1261, 0.148], "query": ["SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashDecode(hex(number)))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashDecode(toString(number % 1000000)))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashEncode((number % 150)*1.1 - 75, (number * 3.14 % 300)*1.1 - 150))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(geohashEncode(number + 91.0, number + 181.0))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(geohashDecode(toString(rand() % 1000000)))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(geohashEncode(1.0/rand(), 2.0/rand()))"]}, "general_purpose_hashes": {"difference": [0.0003, -0.0078, -0.0102, 0.045, 0.0074, -0.0078, -0.013, -0.02, -0.0058, -0.0072, -0.0003, 0.0223, -0.0128, 0.0137, -0.0041, -0.0477, 0.0057, 0.0644, -0.0029, -0.0002, 0.0073, 0.0021, -0.0045, 0.0091, -0.0078, 0.045, 0.0018, 0.0073, 0.0008, 0.004, 0.0055, 0.0058, 0.0024, -0.0059, -0.0039, 0.0102, -0.0025, 0.0003, -0.0003, 0.0107, 0.0031, 0.0021, -0.0041, -0.0103, -0.0102, 0.0102, -0.0156, 0.0055, 0.0011, -0.0015, 0.0006, 0.001, -0.0058, -0.0086, -0.0103, 0.0147, -0.0078, -0.0083, -0.01, -0.0105, 0.0211, -0.0066, -0.0049, -0.0142, 0.0011, -0.0079, 0.0177, 0.0202, -0.0125, -0.0093, 0.0458, 0.0115, 0.0252, 0.0347, 0.0069, 0.0094, 0.0322, 0.0092], "newTime": [0.5551, 1.4438, 0.5538, 1.0409, 0.5543, 1.0417, 0.3825, 1.2907, 0.3662, 1.2948, 0.7528, 1.2437, 0.5676, 1.1657, 0.5748, 1.1047, 0.772, 1.6937, 0.6607, 1.4192, 0.8417, 1.7315, 0.5567, 1.189, 0.6875, 1.3233, 0.2144, 0.5372, 0.2242, 0.3932, 0.2221, 0.4179, 0.1549, 0.4823, 0.1468, 0.4815, 0.2889, 0.4615, 0.225, 0.4348, 0.2357, 0.4192, 0.32, 0.6227, 0.2467, 0.5232, 0.3186, 0.6275, 0.223, 0.4359, 0.2741, 0.4828, 1.1341, 0.6139, 0.5051, 1.2743, 1.2553, 0.5159, 0.7076, 0.5752, 0.602, 0.7672, 0.5809, 0.578, 0.5368, 1.3602, 1.2492, 1.2679, 1.3973, 1.3965, 1.2511, 1.2414, 1.2568, 1.2883, 1.2432, 1.2556, 1.267, 1.2545], "query": ["SELECT count() from numbers(100000000) where not ignore(CRC32(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(CRC32(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(cityHash64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(cityHash64(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(farmHash64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(farmHash64(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(hiveHash(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(hiveHash(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(javaHash(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(javaHash(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(metroHash64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(metroHash64(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(murmurHash2_32(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(murmurHash2_32(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(murmurHash2_64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(murmurHash2_64(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_128(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_128(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_32(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_32(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(murmurHash3_64(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(xxHash32(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(xxHash32(toString(1000000000+number)))", "SELECT count() from numbers(100000000) where not ignore(xxHash64(materialize(\\'\\')))", "SELECT count() from numbers(100000000) where not ignore(xxHash64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(CRC32(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(CRC32(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(cityHash64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(cityHash64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(farmHash64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(farmHash64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(hiveHash(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(hiveHash(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(javaHash(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(javaHash(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(metroHash64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(metroHash64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_32(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_32(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash2_64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_128(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_128(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_32(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_32(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(murmurHash3_64(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash32(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash32(toString(1000000000+number)))", "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash64(materialize(\\'\\')))", "SELECT count() from numbers_mt(1000000000) where not ignore(xxHash64(toString(1000000000+number)))", "SELECT count() from zeros(1000000) where not ignore(CRC32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(cityHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(hiveHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(javaHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(murmurHash3_128(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(murmurHash3_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(xxHash32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros(1000000) where not ignore(xxHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(CRC32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(cityHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(hiveHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(javaHash(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_128(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(murmurHash3_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(xxHash32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))", "SELECT count() from zeros_mt(10000000) where not ignore(xxHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"]}, "general_purpose_hashes_on_UUID": {"difference": [0.0018, -0.0001, 0.0024, 0.0006, 0.0009, 0.0005, -0.0013, 0.0002, -0.0014, -0.0009, -0.0001, 0.0013, -0.0008, -0.0004, -0.0008, 0.0001, -0.0046, 0.0001, 0.0024, 0.0009, -0.0001, -0.0002, -0.0107, -0.0232, -0.0267, -0.0142, 0.0642, 0.0417, -0.0036, -0.0127, -0.0235, -0.0003, -0.0061, -0.0072, -0.0142, 0.0079, 0.0137, 0.0183, -0.04, 0.0164, 0.0055, 0.0033, -0.0206, -0.0043, -0.003, -0.0011, -0.0041, 0.0134, -0.0096, 0.0051, -0.0014, 0.0064, 0.0018, 0.0069, -0.0015, 0.0115, -0.0056, 0.0034, -0.008, -0.0161, -0.0031, 0.0022, 0.0048, 0.0054, 0.0001, 0.0021], "newTime": [0.0394, 0.0402, 0.0466, 0.0458, 0.0433, 0.0409, 0.0397, 0.0427, 0.0417, 0.0417, 0.0421, 0.021, 0.0177, 0.0202, 0.0201, 0.0187, 0.0188, 0.0182, 0.0217, 0.0196, 0.019, 0.0191, 0.6444, 0.4608, 0.6163, 0.4453, 1.3079, 1.1338, 1.2397, 1.0721, 0.8571, 0.7166, 0.8439, 0.6772, 0.7278, 0.6, 1.036, 0.8934, 0.9727, 0.8251, 0.8332, 0.7064, 0.8463, 0.7042, 0.2471, 0.1935, 0.2356, 0.1843, 0.4709, 0.404, 0.444, 0.3858, 0.3134, 0.2619, 0.3204, 0.2795, 0.2711, 0.2247, 0.3804, 0.3063, 0.3597, 0.3101, 0.3143, 0.2782, 0.3244, 0.2671], "query": ["SELECT count() from numbers(1000000) where not ignore(cityHash64(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(farmHash64(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(hiveHash(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(javaHash(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(metroHash64(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(murmurHash2_32(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(murmurHash2_64(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(murmurHash3_32(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(murmurHash3_64(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(xxHash32(toDecimal128(number, 23)))", "SELECT count() from numbers(1000000) where not ignore(xxHash64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(cityHash64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(farmHash64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(hiveHash(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(javaHash(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(metroHash64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash2_32(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash2_64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash3_32(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(murmurHash3_64(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(xxHash32(toDecimal128(number, 23)))", "SELECT count() from numbers_mt(10000000) where not ignore(xxHash64(toDecimal128(number, 23)))", "SELECT count() from zeros(100000000) where not ignore(cityHash64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(cityHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(farmHash64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(farmHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(hiveHash(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(hiveHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(javaHash(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(javaHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(metroHash64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(metroHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(murmurHash2_32(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(murmurHash2_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(murmurHash2_64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(murmurHash2_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(murmurHash3_32(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(murmurHash3_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(murmurHash3_64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(murmurHash3_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(xxHash32(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(xxHash32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros(100000000) where not ignore(xxHash64(generateUUIDv4()))", "SELECT count() from zeros(100000000) where not ignore(xxHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(farmHash64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(farmHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(hiveHash(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(hiveHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(javaHash(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(javaHash(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(metroHash64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(metroHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_32(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash2_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_32(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(murmurHash3_64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash32(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash32(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))", "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash64(generateUUIDv4()))", "SELECT count() from zeros_mt(1000000000) where not ignore(xxHash64(materialize(toUUID(\\'61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'))))"]}, "generate_table_function": {"difference": [0.0, -0.0001, -0.0005, -0.0001, -0.0002, -0.0003, 0.0002, 0.0, -0.0005, 0.0001, 0.0002, 0.0003, 0.0003, 0.0002, 0.0001, 0.0002, -0.0006, 0.0005, -0.0001], "newTime": [0.0063, 0.0089, 0.0164, 0.0061, 0.0084, 0.0227, 0.017, 0.0279, 0.0569, 0.0051, 0.0047, 0.0067, 0.0155, 0.0141, 0.016, 0.006, 0.0062, 0.0108, 0.0105], "query": ["SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'d Date, dt DateTime, dtm DateTime(\\\\\\'Europe/Moscow\\\\\\')\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'dt64 DateTime64, dts64 DateTime64(6), dtms64 DateTime64(6 ,\\\\\\'Europe/Moscow\\\\\\')\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'f32 Float32, f64 Float64\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Int8)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(Enum8(\\\\\\'hello\\\\\\' = 1, \\\\\\'world\\\\\\' = 5)))\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(Int32))\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(Nullable(UUID))\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Array(String)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Enum8(\\\\\\'hello\\\\\\' = 1, \\\\\\'world\\\\\\' = 5)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i FixedString(4)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Nullable(Enum16(\\\\\\'h\\\\\\' = 1, \\\\\\'w\\\\\\' = 5 , \\\\\\'o\\\\\\' = -200)))\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Nullable(String)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i String\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Tuple(Int32, Array(Int64))\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Tuple(Int32, Int64)\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i UUID\\', 0, 10, 10) LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8\\') LIMIT 10000000);", "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8\\', 0, 10, 10) LIMIT 10000000);"]}, "great_circle_dist": {"difference": [-0.0003, 0.0005], "newTime": [0.0438, 0.0239], "query": ["SELECT count() FROM numbers(1000000) WHERE NOT ignore(greatCircleDistance((rand(1) % 360) * 1. - 180, (number % 150) * 1.2 - 90, (number % 360) + toFloat64(rand(2)) / 4294967296 - 180, (rand(3) % 180) * 1. - 90))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(greatCircleDistance(55. + toFloat64(rand(1)) / 4294967296, 37. + toFloat64(rand(2)) / 4294967296, 55. + toFloat64(rand(3)) / 4294967296, 37. + toFloat64(rand(4)) / 4294967296))"]}, "group_array_moving_sum": {"difference": [-0.0114, 0.0008, 0.0026, -0.0094, 0.0049, 0.0226, -0.0178, 0.0041, -0.0076, 0.0058, 0.0206, 0.0154], "newTime": [0.9338, 0.4407, 0.9462, 0.4463, 0.956, 0.4532, 0.6138, 0.3387, 0.6302, 0.3311, 0.659, 0.3395], "query": ["select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_100m group by kk format Null", "select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_50m group by kk format Null", "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_100m group by kk format Null", "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_50m group by kk format Null", "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_100m group by kk format Null", "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_50m group by kk format Null", "select k, groupArrayMovingSum(10)(v) from moving_sum_100m group by k format Null", "select k, groupArrayMovingSum(10)(v) from moving_sum_50m group by k format Null", "select k, groupArrayMovingSum(1000)(v) from moving_sum_100m group by k format Null", "select k, groupArrayMovingSum(1000)(v) from moving_sum_50m group by k format Null", "select k, groupArrayMovingSum(10000)(v) from moving_sum_100m group by k format Null", "select k, groupArrayMovingSum(10000)(v) from moving_sum_50m group by k format Null"]}, "h3": {"difference": [-0.0015], "newTime": [0.1045], "query": ["SELECT count() FROM zeros(100000) WHERE NOT ignore(geoToH3(37.62 + rand(1) / 0x100000000, 55.75 + rand(2) / 0x100000000, 15))"]}, "if_array_num": {"difference": [0.0056, -0.0011, 0.0022, -0.0005, 0.0003, 0.0035], "newTime": [0.0874, 0.0894, 0.1145, 0.1274, 0.1531, 0.1604], "query": ["SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : [4, 5])", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : [400, 500])", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : materialize([4, 5]))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [1, 2, 3] : materialize([400, 500]))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([1, 2, 3]) : materialize([4, 5]))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([1, 2, 3]) : materialize([400, 500]))"]}, "if_array_string": {"difference": [-0.0009, -0.0037, -0.0022, 0.006, -0.0019, 0.1519], "newTime": [0.1857, 0.2634, 0.2163, 0.2656, 0.3323, 0.9981], "query": ["SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [\\'Hello\\', \\'World\\'] : [\\'a\\', \\'b\\', \\'c\\'])", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? [\\'Hello\\', \\'World\\'] : materialize([\\'a\\', \\'b\\', \\'c\\']))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'\\', \\'\\']) : emptyArrayString())", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'Hello\\', \\'World\\']) : [\\'a\\', \\'b\\', \\'c\\'])", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'Hello\\', \\'World\\']) : materialize([\\'a\\', \\'b\\', \\'c\\']))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"]}, "if_string_const": {"difference": [0.0006, 0.0006, 0.0003, 0.0003], "newTime": [0.0098, 0.0102, 0.0102, 0.0077], "query": ["SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'\\' : toFixedString(\\'world\\', 5))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'hello\\' : \\'\\')", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? \\'hello\\' : \\'world\\')", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(rand() % 2 ? toFixedString(\\'hello\\', 5) : toFixedString(\\'world\\', 5))"]}, "if_string_hits": {"difference": [-0.0002, 0.0011, 0.0006, 0.0015], "newTime": [0.0119, 0.0193, 0.0467, 0.0944], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? \\'\\' : PageCharset)", "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? SearchPhrase : MobilePhoneModel)", "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? URL : \\'\\')", "SELECT count() FROM test.hits WHERE NOT ignore(rand() % 2 ? URL : Referer)"]}, "information_value": {"difference": [0.0006, 0.0], "newTime": [0.0421, 0.0236], "query": ["SELECT categoricalInformationValue(Age < 15, Age >= 15 and Age < 30, Age >= 30 and Age < 45, Age >= 45 and Age < 60, Age >= 60, IsMobile) from hits_100m_single", "SELECT categoricalInformationValue(Age < 15, IsMobile) from hits_100m_single"]}, "inserts_arrays_lowcardinality": {"difference": [0.0006, -0.0007], "newTime": [0.0758, 0.2578], "query": ["INSERT INTO lot_of_string_arrays_dst SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src", "INSERT INTO lot_of_string_arrays_dst_lowcardinality SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src"]}, "int_parsing": {"difference": [0.0004, 0.0001, 0.0002, -0.0018, -0.0023, 0.0008, 0.0002, -0.0008, 0.0, 0.0, 0.0008, 0.0004, -0.0017, 0.0, 0.001, -0.0021, 0.0004, -0.002, 0.0004, -0.0001, -0.0007, 0.0012, -0.0001, -0.0001, -0.0003, 0.0012, -0.0006, -0.0006, 0.0004, 0.0002, -0.0004, 0.0, 0.0007, 0.0, -0.0003, 0.0002, 0.0003, 0.0, 0.0004, 0.0001, 0.0002, 0.0001, 0.0021, 0.0, -0.0006, 0.002, -0.0003, 0.0015, 0.0007, -0.0001, -0.0009, -0.001, -0.0004, 0.0007, -0.003, -0.0024, -0.0002, 0.0003, 0.0001, 0.0001, -0.0023, 0.0005, -0.0006, 0.0003, 0.0002, 0.0003, -0.0002, -0.0003, 0.0003, -0.0002, -0.0005, -0.0001, -0.0008, -0.0025, -0.0033, 0.0, -0.0012, -0.0017, -0.0006, 0.0003, 0.0008, -0.0003, 0.0005], "newTime": [0.0287, 0.0369, 0.0344, 0.0752, 0.0504, 0.0491, 0.064, 0.0276, 0.0338, 0.0574, 0.0575, 0.0587, 0.0691, 0.0778, 0.0368, 0.1142, 0.0655, 0.0637, 0.0344, 0.0316, 0.0336, 0.0876, 0.0303, 0.0276, 0.0439, 0.069, 0.0326, 0.0468, 0.0351, 0.0285, 0.0281, 0.0308, 0.0307, 0.0343, 0.028, 0.0294, 0.0288, 0.0328, 0.0279, 0.0525, 0.0601, 0.0306, 0.076, 0.0289, 0.0295, 0.0414, 0.0354, 0.0305, 0.04, 0.0332, 0.0553, 0.1718, 0.0302, 0.0575, 0.0744, 0.0609, 0.0354, 0.0351, 0.0497, 0.0502, 0.0827, 0.0817, 0.0337, 0.0354, 0.0512, 0.062, 0.0337, 0.0323, 0.0318, 0.048, 0.0293, 0.029, 0.0407, 0.1874, 0.0384, 0.0408, 0.1334, 0.1385, 0.0511, 0.0535, 0.059, 0.0285, 0.0332], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(toString(AdvEngineID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Age)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(CLID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ClientIP)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ClientTimeZone)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(CodeVersion)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ConnectTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(CookieEnable)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(CounterClass)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(CounterID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(DNSTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMCompleteTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMContentLoadedTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(DOMInteractiveTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(DontCountHits)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(FUniqID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(FetchTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(FirstPaintTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(FlashMajor)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(FlashMinor)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(GoodEvent)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(HID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(HTTPError)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(HasGCLID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(HistoryLength)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IPNetworkID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Income)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Interests)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsArtifical)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsDownload)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsEvent)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsLink)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsMobile)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsNotBounce)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsOldCounter)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsParameter)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(IsRobot)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(JavaEnable)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(JavascriptEnable)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(LoadEventEndTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(LoadEventStartTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(MobilePhone)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(NSToDOMContentLoadedTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(NetMajor)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(NetMinor)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(OS)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(OpenerName)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ParamCurrencyID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ParamPrice)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RedirectCount)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RedirectTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RefererHash)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Refresh)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RegionID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RemoteIP)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RequestNum)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(RequestTry)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionDepth)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionHeight)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionWidth)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResponseEndTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResponseStartTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Robotness)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SearchEngineID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SearchPhrase)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SendTiming)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(Sex)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion1)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion2)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion3)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SilverlightVersion4)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(SocialSourceNetworkID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(TraficSourceID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(URLHash)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgentMajor)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(UserID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(WatchID)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowClientHeight)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowClientWidth)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(WindowName)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(WithHash)) SETTINGS max_threads = 1", "SELECT count() FROM test.hits WHERE NOT ignore(toString(YCLID)) SETTINGS max_threads = 1"]}, "jit_large_requests": {"difference": [-0.0035, 0.0015], "newTime": [0.0438, 0.0242], "query": ["\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 0;\\n    ", "\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 1,\\n            min_count_to_compile_expression = 1\\n    "]}, "jit_small_requests": {"difference": [0.0002, -0.0006, 0.0006], "newTime": [0.0167, 0.0568, 0.0126], "query": ["\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(intHash64(number))\\n    ", "\\n        WITH\\n            bitXor(number, 0x4CF2D2BAAE6DA887) AS x0,\\n            bitXor(x0, bitShiftRight(x0, 33)) AS x1,\\n            x1 * 0xff51afd7ed558ccd AS x2,\\n            bitXor(x2, bitShiftRight(x2, 33)) AS x3,\\n            x3 * 0xc4ceb9fe1a85ec53 AS x4,\\n            bitXor(x4, bitShiftRight(x4, 33)) AS x5\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(x5)\\n        SETTINGS\\n            compile_expressions = 0\\n    ", "\\n        WITH\\n            bitXor(number, 0x4CF2D2BAAE6DA887) AS x0,\\n            bitXor(x0, bitShiftRight(x0, 33)) AS x1,\\n            x1 * 0xff51afd7ed558ccd AS x2,\\n            bitXor(x2, bitShiftRight(x2, 33)) AS x3,\\n            x3 * 0xc4ceb9fe1a85ec53 AS x4,\\n            bitXor(x4, bitShiftRight(x4, 33)) AS x5\\n        SELECT count() FROM numbers(10000000) WHERE NOT ignore(x5)\\n        SETTINGS\\n            compile_expressions = 1,\\n            min_count_to_compile_expression = 1\\n    "]}, "joins_in_memory": {"difference": [-0.0006, -0.0004, 0.0002, -0.0005, -0.0001, 0.0153, 0.0198, 0.0059, 0.0255, -0.0254, 0.0013, 0.0051, 0.0352, 0.0214, 0.0062, 0.0024, -0.027, 0.0294, 0.0043, 0.0009, -0.0021], "newTime": [0.0024, 0.0025, 0.0026, 0.0038, 0.0019, 0.8474, 0.848, 0.8797, 1.0146, 0.7806, 0.8069, 0.8105, 0.9755, 0.8058, 0.7848, 0.8099, 0.9464, 0.8253, 0.8047, 0.8559, 0.9958], "query": ["SELECT COUNT() FROM ints l ANY LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l CROSS JOIN (SELECT number as i64 FROM numbers(4)) r WHERE i32 = 42", "SELECT COUNT() FROM ints l FULL JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l RIGHT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"]}, "joins_in_memory_pmj": {"difference": [0.0003, -0.0004, 0.0, -0.0002, 0.001, 0.0022, -0.0022, 0.0017, 0.0012, 0.0026, 0.0, 0.0008], "newTime": [0.0034, 0.0029, 0.0034, 0.0046, 0.0959, 0.0953, 0.1044, 0.1232, 0.0945, 0.0954, 0.1022, 0.1218], "query": ["SELECT COUNT() FROM ints l ANY LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l ANY LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)", "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"]}, "json_extract_rapidjson": {"difference": [-0.003, 0.0092, -0.0035, 0.0344, -0.0077, -0.001, -0.0032, 0.0006, -0.0053, 0.0436, 0.0114, -0.0186, 0.0065], "newTime": [0.1606, 0.8175, 0.5559, 0.5811, 0.5566, 0.1579, 0.1548, 0.1595, 0.1557, 0.591, 0.5818, 0.561, 0.5426], "query": ["SELECT \\'rapidjson-1\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\'))", "SELECT \\'rapidjson-10\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractRaw(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))", "SELECT \\'rapidjson-11\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))", "SELECT \\'rapidjson-12\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\', \\'nested_2\\', -2))", "SELECT \\'rapidjson-13\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractBool(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'bparam\\'))", "SELECT \\'rapidjson-2\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\', \\'nested_1\\'))", "SELECT \\'rapidjson-3\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))", "SELECT \\'rapidjson-4\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))", "SELECT \\'rapidjson-5\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'fparam\\'))", "SELECT \\'rapidjson-6\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\'))", "SELECT \\'rapidjson-7\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\', \\'nested_1\\'))", "SELECT \\'rapidjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))", "SELECT \\'rapidjson-9\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"]}, "json_extract_simdjson": {"difference": [0.0025, -0.0141, 0.0, -0.0087, -0.002, 0.0027, -0.004, 0.0025, -0.0041, 0.0036, -0.0009, -0.0048, -0.0054], "newTime": [0.1284, 0.549, 0.2467, 0.2787, 0.2552, 0.1257, 0.1289, 0.1334, 0.1276, 0.2451, 0.2542, 0.2418, 0.2356], "query": ["SELECT \\'simdjson-1\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\'))", "SELECT \\'simdjson-10\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractRaw(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))", "SELECT \\'simdjson-11\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\'))", "SELECT \\'simdjson-12\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'fparam\\', \\'nested_2\\', -2))", "SELECT \\'simdjson-13\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractBool(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'bparam\\'))", "SELECT \\'simdjson-2\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'sparam\\', \\'nested_1\\'))", "SELECT \\'simdjson-3\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))", "SELECT \\'simdjson-4\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'nparam\\'))", "SELECT \\'simdjson-5\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractFloat(materialize(\\'{\"sparam\":\"test_string\",\"nparam\": 772}\\'), \\'fparam\\'))", "SELECT \\'simdjson-6\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\'))", "SELECT \\'simdjson-7\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractString(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'sparam\\', \\'nested_1\\'))", "SELECT \\'simdjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))", "SELECT \\'simdjson-9\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractUInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"]}, "linear_regression": {"difference": [0.0033, 0.0015, 0.0096, 0.0186, -0.0003], "newTime": [0.035, 0.0359, 0.2508, 0.372, 0.0932], "query": ["SELECT stochasticLinearRegression(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null", "SELECT stochasticLinearRegressionState(0.0001, 0, 15)(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null", "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Momentum\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null", "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Nesterov\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null", "WITH (SELECT state FROM test_model) AS model SELECT evalMLMethod(model, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null"]}, "logical_functions_large": {"difference": [0.0152, 0.0011, 0.0019, 0.0032, 0.0014, 0.0027, 0.0007, -0.0009, -0.0037, -0.0022], "newTime": [0.2492, 0.1859, 0.9307, 0.2232, 0.3912, 0.3404, 0.3592, 0.3695, 0.3361, 0.1738], "query": ["SELECT count() FROM\\n        (SELECT materialize(0) AS x1, materialize(0) AS x2, materialize(0) AS x3, materialize(0) AS x4, materialize(0) AS x5, materialize(0) AS x6, materialize(0) AS x7, materialize(0) AS x8, materialize(0) AS x9, materialize(0) AS x10 FROM zeros(150000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(0) AS x1, materialize(0) AS x2, materialize(0) AS x3, materialize(0) AS x4, materialize(0) AS x5, materialize(0) AS x6, materialize(0) AS x7, materialize(0) AS x8, materialize(0) AS x9, materialize(0) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(100000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(1) AS x1, materialize(1) AS x2, materialize(1) AS x3, materialize(1) AS x4, materialize(1) AS x5, materialize(1) AS x6, materialize(1) AS x7, materialize(1) AS x8, materialize(1) AS x9, materialize(1) AS x10 FROM zeros(500000000))\\n    WHERE NOT ignore(xor(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(toUInt8(0)) AS x1, materialize(toUInt16(0)) AS x2, materialize(toUInt32(0)) AS x3, materialize(toUInt64(0)) AS x4, materialize(toInt8(0)) AS x5, materialize(toInt16(0)) AS x6, materialize(toInt32(0)) AS x7, materialize(toInt64(0)) AS x8, materialize(toFloat32(0)) AS x9, materialize(toFloat64(0)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(toUInt8(0)) AS x1, materialize(toUInt16(0)) AS x2, materialize(toUInt32(0)) AS x3, materialize(toUInt64(0)) AS x4, materialize(toInt8(0)) AS x5, materialize(toInt16(0)) AS x6, materialize(toInt32(0)) AS x7, materialize(toInt64(0)) AS x8, materialize(toFloat32(0)) AS x9, materialize(toFloat64(0)) AS x10 FROM zeros(40000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(or(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))", "SELECT count() FROM\\n        (SELECT materialize(toUInt8(1)) AS x1, materialize(toUInt16(1)) AS x2, materialize(toUInt32(1)) AS x3, materialize(toUInt64(1)) AS x4, materialize(toInt8(1)) AS x5, materialize(toInt16(1)) AS x6, materialize(toInt32(1)) AS x7, materialize(toInt64(1)) AS x8, materialize(toFloat32(1)) AS x9, materialize(toFloat64(1)) AS x10 FROM zeros(20000000))\\n    WHERE NOT ignore(xor(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"]}, "math": {"difference": [0.0009, 0.0015, -0.0002, -0.0016, 0.0015, 0.0018, -0.0004, 0.0005, -0.0034, 0.0014, 0.0009, -0.0009, 0.0007, 0.0003, -0.004, -0.0004, 0.0008, -0.0014, -0.003, 0.0016, -0.0045, 0.0008, 0.0005, 0.0002, 0.0133, -0.0031, 0.002, 0.005, 0.0072, 0.0002, -0.0027, 0.0006, -0.0076, 0.0013, -0.0051, 0.0085, -0.0012, 0.003, 0.0003, 0.0016, 0.0043, -0.0006, 0.0039, -0.0004, -0.0022, 0.0006, -0.0029, 0.0017, 0.008, -0.0023, 0.008, 0.001, 0.0002, 0.0, 0.0066, -0.0026, -0.0057, -0.0003, 0.0, -0.0041], "newTime": [0.1015, 0.1047, 0.1012, 0.186, 0.1987, 0.1961, 0.1551, 0.1588, 0.1575, 0.1429, 0.147, 0.144, 0.1923, 0.1967, 0.1933, 0.1588, 0.1598, 0.1606, 0.3379, 0.3385, 0.3339, 0.1107, 0.1163, 0.117, 0.4989, 0.6127, 0.5587, 0.5433, 0.6345, 0.6069, 0.3646, 0.4331, 0.4329, 0.3663, 0.4395, 0.4216, 0.2347, 0.1648, 0.2276, 0.4371, 0.4727, 0.4944, 0.3623, 0.3962, 0.4247, 0.2287, 0.1596, 0.2218, 0.8691, 0.8899, 0.829, 0.2093, 0.1564, 0.2025, 0.2076, 0.2651, 0.2661, 0.2139, 0.1586, 0.2062], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(atan(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cos(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(lgamma(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(log10(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(sin(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tan(toFloat64(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(number))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(toFloat32(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(tgamma(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(acos(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(asin(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erf(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(erfc(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp10(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(log2(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sigmoid(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(sqrt(toFloat64(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(number))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(toFloat32(number)))", "SELECT count() FROM numbers(100000000) WHERE NOT ignore(tanh(toFloat64(number)))"]}, "merge_table_streams": {"difference": [0.0016], "newTime": [0.0662], "query": ["SELECT UserID FROM merge(default, \\'^(hits_100m_single|merge_table_streams_\\\\\\\\d)$\\') WHERE UserID = 12345678901234567890"]}, "merge_tree_huge_pk": {"difference": [-0.0002, -0.0024, 0.0, 0.0001], "newTime": [0.002, 0.0549, 0.0097, 0.005], "query": ["SELECT count() FROM huge_pk WHERE c001 > 10", "SELECT count() FROM huge_pk WHERE c001 in (2,3) and c400 in (10,0) and c100 < 2", "SELECT count() FROM huge_pk WHERE c700 > 10", "SELECT count() FROM huge_pk WHERE c701 > 10"]}, "merge_tree_many_partitions": {"difference": [0.0], "newTime": [0.0008], "query": ["SELECT count() FROM bad_partitions"]}, "merge_tree_many_partitions_2": {"difference": [0.0018], "newTime": [0.2061], "query": ["SELECT sum(ignore(*)) FROM bad_partitions"]}, "merge_tree_simple_select": {"difference": [0.0001], "newTime": [0.0007], "query": ["SELECT count() FROM simple_mergetree"]}, "mingroupby-orderbylimit1": {"difference": [0.0015, 0.0029, -0.0023, 0.0029, 0.0108, 0.0026, -0.0047, -0.0035], "newTime": [0.0224, 0.0478, 0.0104, 0.0288, 0.1027, 0.3006, 0.0802, 0.4327], "query": ["\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         group by key format Null;\\n    ", "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    ", "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_11111_key_value\\n         group by key format Null;\\n    ", "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_11111_tuple\\n         group by key format Null;\\n    ", "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     ", "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         order by key, value limit 1 by key format Null;\\n     ", "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_11111_key_value\\n         order by key, value limit 1 by key format Null;\\n     ", "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_11111_tuple\\n         order by key, value limit 1 by key format Null;\\n     "]}, "ngram_distance": {"difference": [0.001, -0.0011, -0.0004, -0.0004, -0.0016, 0.0009, 0.0018, -0.0012, 0.0005, -0.0012, 0.0025, -0.0004, -0.0011, 0.0002, -0.003, 0.0045], "newTime": [0.1841, 0.1806, 0.181, 0.1975, 0.2508, 0.1999, 0.2024, 0.1994, 0.3478, 0.3611, 0.3658, 0.3337, 0.3512, 0.5008, 0.3477, 0.3524], "query": ["SELECT ngramDistance(Title, \\'baby dont hurt me\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistance(Title, \\'no more\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistance(Title, \\'what is love\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistance(Title, SearchPhrase) AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistance(Title, URL) AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitive(Title, \\'BABY DonT hUrT me\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitive(Title, \\'nO MOrE\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitive(Title, \\'wHAt Is lovE\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitiveUTF8(Title, \\'\u041c\u0435\u0442\u0440\u0438\u043a\u0430\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitiveUTF8(URL, \\'\u0427\u0435\u043c \u0437\u0410\u043d\u0438\u043c\u0430\u0435\u0448\u042c\u0441\u044f\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceCaseInsensitiveUTF8(URL, \\'\u043a\u0430\u043a \u0434\u0415\u043b\u0410\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceUTF8(Title, \\'\u043c\u0435\u0442\u0440\u0438\u043a\u0430\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceUTF8(Title, SearchPhrase) AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceUTF8(Title, URL) AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceUTF8(URL, \\'\u043a\u0430\u043a \u0434\u0435\u043b\u0430\\') AS distance FROM hits_10m_single FORMAT Null", "SELECT ngramDistanceUTF8(URL, \\'\u0447\u0435\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0448\u044c\u0441\u044f\\') AS distance FROM hits_10m_single FORMAT Null"]}, "order_by_decimals": {"difference": [0.0007, -0.0003, -0.0003, -0.0012, -0.0007], "newTime": [0.1053, 0.0697, 0.066, 0.0688, 0.0368], "query": ["SELECT toDecimal128(number, 10) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null", "SELECT toDecimal32(number, 0) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null", "SELECT toDecimal32(number, 0) AS n FROM numbers(1000000) ORDER BY n FORMAT Null", "SELECT toDecimal64(number, 8) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null", "SELECT toInt32(number) AS n FROM numbers(1000000) ORDER BY n DESC FORMAT Null"]}, "order_by_read_in_order": {"difference": [-0.0038, -0.0058, -0.0266, -0.0004, -0.0016], "newTime": [0.1286, 0.1149, 0.3855, 0.07, 0.0628], "query": ["SELECT * FROM hits_100m_single ORDER BY CounterID DESC, toStartOfWeek(EventDate) DESC LIMIT 100", "SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate LIMIT 100", "SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate, URL LIMIT 100", "SELECT * FROM hits_100m_single WHERE CounterID IN (152220, 168777, 149234, 149234) ORDER BY CounterID DESC, EventDate DESC LIMIT 100", "SELECT * FROM hits_100m_single WHERE UserID=1988954671305023629 ORDER BY CounterID, EventDate LIMIT 100"]}, "order_by_single_column": {"difference": [-0.0001, 0.0034, 0.0014, -0.0001, -0.0005, -0.006, -0.0013], "newTime": [0.1008, 0.0589, 0.1181, 0.1363, 0.1789, 0.3526, 0.4296], "query": ["SELECT MobilePhoneModel as col FROM hits_100m_single ORDER BY col LIMIT 20000,1", "SELECT MobilePhoneModel as col FROM hits_100m_single WHERE notEmpty(col) ORDER BY col LIMIT 500000,1", "SELECT PageCharset as col FROM hits_100m_single ORDER BY col LIMIT 10000,1", "SELECT SearchPhrase as col FROM hits_100m_single ORDER BY col LIMIT 10000,1", "SELECT SearchPhrase as col FROM hits_100m_single WHERE notEmpty(col) ORDER BY col LIMIT 10000,1", "SELECT Title as col FROM hits_100m_single ORDER BY col LIMIT 1000,1", "SELECT URL as col FROM hits_100m_single ORDER BY col LIMIT 1000,1"]}, "parallel_insert": {"difference": [-0.0098], "newTime": [1.2099], "query": ["\\n        INSERT INTO hits2\\n        SELECT CounterID, EventDate, UserID, Title\\n        FROM hits_10m_single\\n    "]}, "pre_limit_no_sorting": {"difference": [0.0], "newTime": [0.063], "query": ["SELECT sum(number) FROM (select number from system.numbers_mt limit 1000000000)"]}, "prewhere": {"difference": [-0.0026], "newTime": [0.6886], "query": ["SELECT Title FROM hits_10m_single PREWHERE WatchID % 2 = 1 WHERE UserID = 10000 FORMAT Null"]}, "random_printable_ascii": {"difference": [-0.0109, -0.0071, -0.0002, -0.007, 0.0218, 0.0028, -0.0112], "newTime": [0.1791, 0.2008, 0.0187, 0.1311, 0.7075, 0.1465, 0.6784], "query": ["SELECT count() FROM zeros(10000) WHERE NOT ignore(randomPrintableASCII(10000))", "SELECT count() FROM zeros(100000) WHERE NOT ignore(randomPrintableASCII(1000))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(10))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(100))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(rand() % 1000))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(randomPrintableASCII(rand() % 10))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(randomPrintableASCII(rand() % 100))"]}, "range": {"difference": [-0.0028, 0.0009], "newTime": [0.2528, 0.1168], "query": ["SELECT range(0, number % 100, 1) FROM numbers(10000000) FORMAT Null", "SELECT range(number % 100)       FROM numbers(10000000) FORMAT Null"]}, "read_hits_with_aio": {"difference": [-0.0022, 0.0025, -0.0019, -0.0007], "newTime": [0.1333, 0.1734, 0.2757, 0.2519], "query": ["SELECT count() FROM hits_100m_single where EventDate between toDate(\\'2013-07-10\\') and toDate(\\'2013-07-16\\') and UserID=123 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 0, max_read_buffer_size = 10485760;", "SELECT count() FROM hits_100m_single where EventDate between toDate(\\'2013-07-10\\') and toDate(\\'2013-07-16\\') and UserID=123 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 1, max_read_buffer_size = 10485760;", "SELECT count() FROM hits_100m_single where UserID=1234567890 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 0, max_read_buffer_size = 10485760;", "SELECT count() FROM hits_100m_single where UserID=1234567890 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 1, max_read_buffer_size = 10485760;"]}, "right": {"difference": [0.0009, 0.0083], "newTime": [0.2706, 0.3149], "query": ["SELECT count() FROM hits_100m_single WHERE NOT ignore(right(URL, 16))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(substring(URL, greatest(minus(plus(length(URL), 1), 16), 1)))"]}, "round_down": {"difference": [-0.0142, 0.001, -0.0001, -0.0004, 0.0004], "newTime": [1.1853, 0.0609, 0.0964, 0.0907, 0.059], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore(roundDown(rand() % 65536, (SELECT groupArray(number) FROM numbers(65536))))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundAge(rand() % 100))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDown(rand() % 100, [0, 1, 18, 25, 35, 45, 55]))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDown(rand() % 65536, [0, 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000]))", "SELECT count() FROM zeros(10000000) WHERE NOT ignore(roundDuration(rand() % 65536))"]}, "round_methods": {"difference": [0.0, 0.0006, -0.0002, -0.0001, -0.0003, -0.0004, 0.0003, -0.0003, 0.0001, 0.0, 0.0002, 0.0001, -0.0001, -0.0001, -0.0001], "newTime": [0.0148, 0.0036, 0.0035, 0.0138, 0.0028, 0.0037, 0.0145, 0.0027, 0.0035, 0.0151, 0.0031, 0.0039, 0.0131, 0.0028, 0.0032], "query": ["SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toDecimal128(number, 0), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toFloat64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(ceil(toInt64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toDecimal128(number, 0), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toFloat64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(floor(toInt64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toDecimal128(number, 0), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toFloat64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(round(toInt64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toDecimal128(number, 0), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toFloat64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(roundBankers(toInt64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toDecimal128(number, 0), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toFloat64(number), -2))", "SELECT count() FROM numbers(1000000) WHERE NOT ignore(trunc(toInt64(number), -2))"]}, "scalar": {"difference": [-0.0001], "newTime": [0.0625], "query": ["WITH (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag1\\') AS bm1, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag2\\') AS bm2, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag3\\') AS bm3, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag4\\') AS bm4, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag5\\') AS bm5, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag6\\') AS bm6, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag7\\') AS bm7, (SELECT mid_seqs FROM cdp_tags WHERE tag_id=\\'tag8\\') AS bm8, toDateTime(\\'2000-01-01 00:00:00\\') AS ts_begin, addSeconds(toDateTime(\\'2000-01-01 00:00:00\\'), 1e8) AS ts_end SELECT multiIf(bitmapContains(bm1, mid_seq), 1, bitmapContains(bm2, mid_seq), 2, bitmapContains(bm3, mid_seq), 3, bitmapContains(bm4, mid_seq), 4, bitmapContains(bm5, mid_seq), 5, bitmapContains(bm6, mid_seq), 6, bitmapContains(bm7, mid_seq), 7, bitmapContains(bm8, mid_seq), 8, 0) AS tag, count() AS gc, sum(order_total_sales) AS total FROM cdp_orders PREWHERE order_complete_time >= ts_begin AND order_complete_time < ts_end GROUP BY tag ORDER BY tag"]}, "set_hits": {"difference": [-0.0023, -0.0005, 0.0011, 0.0013, -0.0036, 0.0], "newTime": [0.0706, 0.0439, 0.2794, 0.0908, 0.3235, 0.1422], "query": ["SELECT count() FROM hits_100m_single WHERE UserID IN (SELECT UserID FROM hits_100m_single WHERE AdvEngineID != 0)", "SELECT count() FROM hits_10m_single WHERE RegionID IN (SELECT RegionID FROM hits_10m_single)", "SELECT count() FROM hits_10m_single WHERE SearchPhrase IN (SELECT SearchPhrase FROM hits_10m_single)", "SELECT count() FROM hits_10m_single WHERE URL IN (SELECT URL FROM hits_10m_single WHERE AdvEngineID != 0)", "SELECT count() FROM hits_10m_single WHERE URL IN (SELECT URL FROM hits_10m_single WHERE SearchEngineID != 0)", "SELECT count() FROM hits_10m_single WHERE UserID IN (SELECT UserID FROM hits_10m_single)"]}, "set_index": {"difference": [0.004, -0.0002, 0.0053, -0.0021, 0.0029], "newTime": [0.0221, 0.0062, 0.1061, 0.034, 0.0552], "query": ["SELECT count() FROM numbers(1000) WHERE toString(number) IN (\\'41577\\', \\'83972\\', \\'51697\\', \\'50014\\', \\'37553\\', \\'93459\\', \\'87438\\', \\'95971\\', \\'83186\\', \\'74326\\', \\'67871\\', \\'50406\\', \\'83678\\', \\'29655\\', \\'18580\\', \\'83905\\', \\'61518\\', \\'29059\\', \\'56700\\', \\'82787\\', \\'98672\\', \\'30884\\', \\'81822\\', \\'39850\\', \\'80852\\', \\'57627\\', \\'91346\\', \\'64522\\', \\'17781\\', \\'49467\\', \\'41099\\', \\'41929\\', \\'85618\\', \\'91389\\', \\'68564\\', \\'91769\\', \\'81219\\', \\'52218\\', \\'37220\\', \\'97097\\', \\'2129\\', \\'9886\\', \\'52049\\', \\'34847\\', \\'25364\\', \\'36429\\', \\'76897\\', \\'71868\\', \\'58121\\', \\'71199\\', \\'84819\\', \\'69991\\', \\'34046\\', \\'64507\\', \\'34892\\', \\'24228\\', \\'36986\\', \\'28588\\', \\'51159\\', \\'53444\\', \\'80531\\', \\'9941\\', \\'20256\\', \\'48103\\', \\'32565\\', \\'62890\\', \\'5379\\', \\'60302\\', \\'46434\\', \\'3205\\', \\'18821\\', \\'31030\\', \\'19794\\', \\'71557\\', \\'71703\\', \\'15024\\', \\'14004\\', \\'82164\\', \\'95659\\', \\'40227\\', \\'83358\\', \\'24395\\', \\'9610\\', \\'19814\\', \\'48491\\', \\'66412\\', \\'16012\\', \\'71586\\', \\'42143\\', \\'51103\\', \\'24463\\', \\'89949\\', \\'35694\\', \\'39193\\', \\'63904\\', \\'40489\\', \\'77144\\', \\'94014\\', \\'84836\\', \\'9980\\', \\'46554\\', \\'43905\\', \\'25588\\', \\'25205\\', \\'72624\\', \\'10249\\', \\'35888\\', \\'98478\\', \\'99030\\', \\'26834\\', \\'31\\', \\'81499\\', \\'14847\\', \\'82997\\', \\'92357\\', \\'92893\\', \\'17426\\', \\'56630\\', \\'22252\\', \\'68119\\', \\'62710\\', \\'8740\\', \\'82144\\', \\'79916\\', \\'23391\\', \\'30192\\', \\'99271\\', \\'96435\\', \\'44237\\', \\'98327\\', \\'69481\\', \\'16691\\', \\'13643\\', \\'84554\\', \\'38571\\', \\'70926\\', \\'99283\\', \\'79000\\', \\'20926\\', \\'86495\\', \\'4834\\', \\'1222\\', \\'39486\\', \\'57697\\', \\'58002\\', \\'40790\\', \\'15623\\', \\'3999\\', \\'31515\\', \\'12694\\', \\'26143\\', \\'35951\\', \\'54085\\', \\'97534\\', \\'35329\\', \\'73535\\', \\'88715\\', \\'29572\\', \\'75799\\', \\'45166\\', \\'32066\\', \\'48023\\', \\'69523\\', \\'93150\\', \\'8740\\', \\'96790\\', \\'15534\\', \\'63252\\', \\'5142\\', \\'67045\\', \\'93992\\', \\'16663\\', \\'292\\', \\'63924\\', \\'6588\\', \\'12190\\', \\'31506\\', \\'69590\\', \\'35394\\', \\'55168\\', \\'65223\\', \\'79183\\', \\'32600\\', \\'69676\\', \\'28316\\', \\'72111\\', \\'53531\\', \\'15073\\', \\'41127\\', \\'73451\\', \\'24725\\', \\'61647\\', \\'65315\\', \\'41143\\', \\'26493\\', \\'95608\\', \\'34407\\', \\'76098\\', \\'53105\\', \\'83691\\', \\'48755\\', \\'35696\\', \\'62587\\', \\'81826\\', \\'3963\\', \\'45766\\', \\'82751\\', \\'12430\\', \\'97685\\', \\'29919\\', \\'78155\\', \\'71636\\', \\'50215\\', \\'89734\\', \\'9892\\', \\'47151\\', \\'54855\\', \\'3428\\', \\'9712\\', \\'52592\\', \\'2403\\', \\'79602\\', \\'81243\\', \\'79859\\', \\'57361\\', \\'82000\\', \\'42107\\', \\'28860\\', \\'99591\\', \\'28296\\', \\'57337\\', \\'64969\\', \\'32332\\', \\'25535\\', \\'30924\\', \\'21313\\', \\'32554\\', \\'17342\\', \\'87311\\', \\'19825\\', \\'24898\\', \\'61323\\', \\'83209\\', \\'79322\\', \\'79009\\', \\'50746\\', \\'33396\\', \\'62033\\', \\'16548\\', \\'17427\\', \\'24073\\', \\'34640\\', \\'52368\\', \\'4724\\', \\'80408\\', \\'40\\', \\'33787\\', \\'16666\\', \\'19665\\', \\'86751\\', \\'27264\\', \\'2241\\', \\'88134\\', \\'53566\\', \\'10589\\', \\'79711\\', \\'92823\\', \\'58972\\', \\'91767\\', \\'60885\\', \\'51659\\', \\'7867\\', \\'96849\\', \\'30360\\', \\'20914\\', \\'9584\\', \\'1250\\', \\'22871\\', \\'23282\\', \\'99312\\', \\'4683\\', \\'33429\\', \\'68361\\', \\'82614\\', \\'81440\\', \\'47863\\', \\'69790\\', \\'11968\\', \\'75210\\', \\'66854\\', \\'37002\\', \\'61142\\', \\'71514\\', \\'1588\\', \\'42336\\', \\'11069\\', \\'26291\\', \\'2261\\', \\'71056\\', \\'13492\\', \\'9133\\', \\'91216\\', \\'72207\\', \\'71586\\', \\'86535\\', \\'83898\\', \\'24392\\', \\'45384\\', \\'48545\\', \\'61972\\', \\'503\\', \\'80180\\', \\'35834\\', \\'97025\\', \\'70411\\', \\'55039\\', \\'35430\\', \\'27631\\', \\'82533\\', \\'96831\\', \\'74077\\', \\'42533\\', \\'14451\\', \\'26943\\', \\'53783\\', \\'69489\\', \\'71969\\', \\'8432\\', \\'37230\\', \\'61348\\', \\'19472\\', \\'59115\\', \\'9886\\', \\'50951\\', \\'57109\\', \\'7141\\', \\'1902\\', \\'84130\\', \\'4323\\', \\'55889\\', \\'47784\\', \\'2220\\', \\'75988\\', \\'66988\\', \\'63721\\', \\'8131\\', \\'95601\\', \\'95207\\', \\'2311\\', \\'26541\\', \\'50991\\', \\'6717\\', \\'2969\\', \\'71857\\', \\'51034\\', \\'65958\\', \\'94716\\', \\'90275\\', \\'21012\\', \\'46859\\', \\'7984\\', \\'31131\\', \\'46457\\', \\'69578\\', \\'44540\\', \\'7294\\', \\'80117\\', \\'9925\\', \\'60155\\', \\'90608\\', \\'82684\\', \\'32193\\', \\'87071\\', \\'28006\\', \\'87604\\', \\'24501\\', \\'79087\\', \\'2848\\', \\'29237\\', \\'11221\\', \\'81319\\', \\'40966\\', \\'87641\\', \\'35325\\', \\'78705\\', \\'88636\\', \\'78717\\', \\'62831\\', \\'56390\\', \\'99271\\', \\'43821\\', \\'14453\\', \\'17923\\', \\'62695\\', \\'77322\\', \\'21038\\', \\'67677\\', \\'41271\\', \\'4376\\', \\'65426\\', \\'46091\\', \\'19887\\', \\'97251\\', \\'55583\\', \\'58763\\', \\'3826\\', \\'35037\\', \\'73533\\', \\'64267\\', \\'82319\\', \\'9836\\', \\'42622\\', \\'96829\\', \\'16363\\', \\'10455\\', \\'49290\\', \\'99992\\', \\'98229\\', \\'66356\\', \\'59087\\', \\'73998\\', \\'25986\\', \\'4279\\', \\'56790\\', \\'69540\\', \\'588\\', \\'36620\\', \\'60358\\', \\'45056\\', \\'89297\\', \\'42740\\', \\'8323\\', \\'19245\\', \\'82417\\', \\'41431\\', \\'699\\', \\'11554\\', \\'73910\\', \\'44491\\', \\'56019\\', \\'68901\\', \\'45816\\', \\'68126\\', \\'89379\\', \\'23885\\', \\'13263\\', \\'56395\\', \\'73130\\', \\'19089\\', \\'23771\\', \\'10335\\', \\'48547\\', \\'16903\\', \\'6453\\', \\'33560\\', \\'89668\\', \\'38159\\', \\'43177\\', \\'90655\\', \\'49712\\', \\'62\\', \\'66920\\', \\'34180\\', \\'12150\\', \\'48564\\', \\'39538\\', \\'85026\\', \\'87195\\', \\'14928\\', \\'8956\\', \\'71157\\', \\'53287\\', \\'39161\\', \\'67583\\', \\'83309\\', \\'92054\\', \\'86977\\', \\'56188\\', \\'15229\\', \\'88170\\', \\'60894\\', \\'58497\\', \\'89254\\', \\'40082\\', \\'86890\\', \\'60161\\', \\'97291\\', \\'45878\\', \\'23368\\', \\'14577\\', \\'92870\\', \\'37017\\', \\'97356\\', \\'99426\\', \\'76061\\', \\'89186\\', \\'99751\\', \\'85153\\', \\'61580\\', \\'39360\\', \\'90107\\', \\'25603\\', \\'26798\\', \\'76224\\', \\'6469\\', \\'7912\\', \\'69838\\', \\'16404\\', \\'67497\\', \\'28965\\', \\'80836\\', \\'80365\\', \\'91249\\', \\'48713\\', \\'17113\\', \\'33090\\', \\'40793\\', \\'70450\\', \\'66689\\', \\'83698\\', \\'17802\\', \\'43869\\', \\'13355\\', \\'18959\\', \\'79411\\', \\'87930\\', \\'9265\\', \\'37504\\', \\'44876\\', \\'97234\\', \\'94149\\', \\'35040\\', \\'22049\\', \\'49248\\', \\'6535\\', \\'36080\\', \\'28346\\', \\'94437\\', \\'78319\\', \\'17961\\', \\'89056\\', \\'56161\\', \\'35810\\', \\'41632\\', \\'45494\\', \\'53351\\', \\'89729\\', \\'99510\\', \\'51584\\', \\'59688\\', \\'6193\\', \\'70809\\', \\'51093\\', \\'92589\\', \\'90247\\', \\'34910\\', \\'78235\\', \\'17362\\', \\'49423\\', \\'63324\\', \\'525\\', \\'37638\\', \\'72325\\', \\'89356\\', \\'15298\\', \\'59116\\', \\'17848\\', \\'65429\\', \\'27029\\', \\'84781\\', \\'70247\\', \\'8825\\', \\'35082\\', \\'70451\\', \\'22522\\', \\'58125\\', \\'91879\\', \\'90531\\', \\'2478\\', \\'463\\', \\'37902\\', \\'54405\\', \\'87267\\', \\'72688\\', \\'22803\\', \\'33134\\', \\'35177\\', \\'84551\\', \\'44974\\', \\'88375\\', \\'76407\\', \\'27774\\', \\'33849\\', \\'19915\\', \\'82014\\', \\'80434\\', \\'26380\\', \\'48777\\', \\'53811\\', \\'14838\\', \\'26829\\', \\'56441\\', \\'99869\\', \\'49574\\', \\'85476\\', \\'19723\\', \\'16907\\', \\'4018\\', \\'37338\\', \\'78510\\', \\'47912\\', \\'13030\\', \\'65277\\', \\'95716\\', \\'67363\\', \\'21393\\', \\'89887\\', \\'78842\\', \\'81650\\', \\'903\\', \\'17436\\', \\'30704\\', \\'49223\\', \\'27198\\', \\'25500\\', \\'52214\\', \\'54258\\', \\'70082\\', \\'53950\\', \\'49312\\', \\'43615\\', \\'99473\\', \\'94348\\', \\'53661\\', \\'96213\\', \\'96346\\', \\'62010\\', \\'38268\\', \\'32861\\', \\'75660\\', \\'10392\\', \\'89491\\', \\'68335\\', \\'29817\\', \\'88706\\', \\'24184\\', \\'36298\\', \\'43440\\', \\'21626\\', \\'26535\\', \\'44560\\', \\'46363\\', \\'12534\\', \\'99070\\', \\'95606\\', \\'33714\\', \\'73070\\', \\'8303\\', \\'29853\\', \\'23014\\', \\'99982\\', \\'4530\\', \\'14955\\', \\'45803\\', \\'50\\', \\'90750\\', \\'30394\\', \\'81276\\', \\'95563\\', \\'47314\\', \\'58520\\', \\'91299\\', \\'88944\\', \\'54402\\', \\'67405\\', \\'29253\\', \\'47079\\', \\'71734\\', \\'99728\\', \\'17652\\', \\'13307\\', \\'35556\\', \\'18962\\', \\'26780\\', \\'17771\\', \\'53712\\', \\'60055\\', \\'37628\\', \\'35830\\', \\'90739\\', \\'61151\\', \\'41309\\', \\'27652\\', \\'3051\\', \\'53167\\', \\'98417\\', \\'19382\\', \\'36833\\', \\'75085\\', \\'65374\\', \\'87732\\', \\'30352\\', \\'31776\\', \\'32765\\', \\'97565\\', \\'92199\\', \\'49050\\', \\'29503\\', \\'51024\\', \\'18834\\', \\'8515\\', \\'24069\\', \\'96216\\', \\'10777\\', \\'90680\\', \\'18974\\', \\'68884\\', \\'85305\\', \\'36007\\', \\'56707\\', \\'4212\\', \\'47352\\', \\'34426\\', \\'13185\\', \\'92939\\', \\'95782\\', \\'70577\\', \\'58080\\', \\'98279\\', \\'3906\\', \\'5065\\', \\'56896\\', \\'16382\\', \\'31273\\', \\'17117\\', \\'98602\\', \\'12786\\', \\'24086\\', \\'63970\\', \\'72756\\', \\'35798\\', \\'82367\\', \\'7356\\', \\'53398\\', \\'68503\\', \\'2962\\', \\'16425\\', \\'67334\\', \\'68461\\', \\'65439\\', \\'15620\\', \\'70906\\', \\'29649\\', \\'46461\\', \\'74602\\', \\'38012\\', \\'71714\\', \\'16825\\', \\'89480\\', \\'53386\\', \\'88532\\', \\'35104\\', \\'28556\\', \\'82120\\', \\'23155\\', \\'23347\\', \\'24797\\', \\'60061\\', \\'54962\\', \\'99427\\', \\'82248\\', \\'82447\\', \\'39968\\', \\'63727\\', \\'27431\\', \\'81511\\', \\'91168\\', \\'71425\\', \\'80740\\', \\'84127\\', \\'40717\\', \\'15503\\', \\'15419\\', \\'46594\\', \\'61263\\', \\'19212\\', \\'53175\\', \\'70724\\', \\'74445\\', \\'23034\\', \\'71818\\', \\'40246\\', \\'18886\\', \\'53066\\', \\'4880\\', \\'83701\\', \\'86107\\', \\'87862\\', \\'44751\\', \\'392\\', \\'73440\\', \\'90291\\', \\'93395\\', \\'20894\\', \\'38463\\', \\'32664\\', \\'55158\\', \\'20090\\', \\'50004\\', \\'79070\\', \\'98471\\', \\'85478\\', \\'96615\\', \\'68149\\', \\'78334\\', \\'97752\\', \\'73207\\', \\'71678\\', \\'91238\\', \\'96757\\', \\'82598\\', \\'194\\', \\'35797\\', \\'45120\\', \\'60782\\', \\'28721\\', \\'17676\\', \\'78066\\', \\'60957\\', \\'11826\\', \\'51563\\', \\'50516\\', \\'16485\\', \\'47053\\', \\'31738\\', \\'48923\\', \\'23554\\', \\'96850\\', \\'42033\\', \\'73701\\', \\'78607\\', \\'45979\\', \\'54571\\', \\'12415\\', \\'31693\\', \\'15356\\', \\'36902\\', \\'9126\\', \\'3767\\', \\'3295\\', \\'90402\\', \\'24005\\', \\'95350\\', \\'67033\\', \\'49137\\', \\'72606\\', \\'51899\\', \\'17522\\', \\'31957\\', \\'44641\\', \\'53982\\', \\'23767\\', \\'68257\\', \\'15766\\', \\'19995\\', \\'2107\\', \\'48788\\', \\'11765\\', \\'91055\\', \\'46576\\', \\'54651\\', \\'50381\\', \\'62827\\', \\'73636\\', \\'46606\\', \\'98753\\', \\'37631\\', \\'70441\\', \\'87916\\', \\'66983\\', \\'33870\\', \\'31125\\', \\'12904\\', \\'57040\\', \\'4874\\', \\'58632\\', \\'42037\\', \\'18782\\', \\'5998\\', \\'18974\\', \\'57949\\', \\'81010\\', \\'90407\\', \\'99874\\', \\'20462\\', \\'89949\\', \\'10952\\', \\'71454\\', \\'95130\\', \\'46115\\', \\'3518\\', \\'13384\\', \\'69039\\', \\'79482\\', \\'22076\\', \\'59782\\', \\'32042\\', \\'40930\\', \\'60243\\', \\'29298\\', \\'6790\\', \\'46985\\', \\'44398\\', \\'85631\\', \\'14380\\', \\'66179\\', \\'2629\\', \\'32126\\', \\'49833\\', \\'14118\\', \\'58492\\', \\'31493\\', \\'81172\\', \\'96638\\', \\'8745\\', \\'89663\\', \\'76842\\', \\'78633\\', \\'41373\\', \\'83721\\', \\'42886\\', \\'11123\\', \\'32739\\', \\'11051\\', \\'1303\\', \\'92314\\', \\'83324\\', \\'85600\\', \\'44276\\', \\'69064\\', \\'56125\\', \\'84650\\', \\'31028\\', \\'12628\\', \\'14502\\', \\'64764\\', \\'39405\\', \\'44855\\', \\'79046\\', \\'51716\\', \\'46824\\', \\'83389\\', \\'1941\\', \\'1257\\', \\'9280\\', \\'73176\\', \\'84729\\', \\'2579\\', \\'63366\\', \\'22606\\', \\'35541\\', \\'51096\\', \\'13447\\', \\'18355\\', \\'68037\\', \\'28436\\', \\'94116\\', \\'81070\\', \\'78355\\', \\'67897\\', \\'5296\\', \\'32742\\', \\'77645\\', \\'91853\\', \\'18767\\', \\'67949\\', \\'40963\\', \\'5792\\', \\'17278\\', \\'25597\\', \\'41884\\', \\'80829\\', \\'7099\\', \\'18645\\', \\'60295\\', \\'12082\\', \\'81800\\', \\'78415\\', \\'18082\\', \\'38789\\', \\'16295\\', \\'72377\\', \\'74949\\', \\'55583\\', \\'66853\\', \\'15402\\', \\'72977\\', \\'15123\\', \\'99434\\', \\'34999\\', \\'21687\\', \\'76049\\', \\'42987\\', \\'83748\\', \\'88256\\', \\'66688\\', \\'21766\\', \\'20304\\', \\'29271\\', \\'10069\\', \\'19822\\', \\'11792\\', \\'42526\\', \\'74143\\', \\'17289\\', \\'30253\\', \\'6367\\', \\'20888\\', \\'12975\\', \\'94073\\', \\'98639\\', \\'30134\\', \\'26320\\', \\'65507\\', \\'69002\\', \\'53120\\', \\'4550\\', \\'38893\\', \\'18954\\', \\'38283\\', \\'54863\\', \\'17698\\', \\'99670\\', \\'10521\\', \\'92467\\', \\'60994\\', \\'18052\\', \\'48673\\', \\'35811\\', \\'87282\\', \\'62706\\', \\'16061\\', \\'53112\\', \\'22652\\', \\'37780\\', \\'55662\\', \\'26331\\', \\'49410\\', \\'79074\\', \\'10623\\', \\'69577\\', \\'79613\\', \\'9491\\', \\'31229\\', \\'43922\\', \\'84231\\', \\'58409\\', \\'36386\\', \\'46875\\', \\'74431\\', \\'76735\\', \\'38776\\', \\'23350\\', \\'7314\\', \\'9079\\', \\'51519\\', \\'98544\\', \\'70216\\', \\'63380\\', \\'90381\\', \\'1295\\', \\'46901\\', \\'58225\\', \\'55339\\', \\'89918\\', \\'75522\\', \\'35431\\', \\'89460\\', \\'49552\\', \\'89302\\', \\'23068\\', \\'28493\\', \\'3042\\', \\'25194\\', \\'59520\\', \\'9810\\', \\'95706\\', \\'81297\\', \\'89638\\', \\'54794\\', \\'94527\\', \\'45262\\', \\'97932\\', \\'78685\\', \\'6947\\', \\'22818\\', \\'48700\\', \\'9153\\', \\'12289\\', \\'22011\\', \\'58825\\', \\'93854\\', \\'65438\\', \\'4509\\', \\'33741\\', \\'28208\\', \\'69061\\', \\'48578\\', \\'40247\\', \\'77725\\', \\'31837\\', \\'39003\\', \\'69363\\', \\'78113\\', \\'76398\\', \\'97262\\', \\'67795\\', \\n    \\'68446\\', \\'58896\\', \\'60969\\', \\'19849\\', \\'6722\\', \\'91854\\', \\'49519\\', \\'13949\\', \\'67109\\', \\'48824\\', \\'31723\\', \\'75554\\', \\'69575\\', \\'94986\\', \\'75350\\', \\'18628\\', \\'15284\\', \\'41943\\', \\'15433\\', \\'52607\\', \\'41\\', \\'22340\\', \\'29528\\', \\'24059\\', \\'34145\\', \\'72517\\', \\'46316\\', \\'10667\\', \\'54510\\', \\'19882\\', \\'47764\\', \\'69124\\', \\'41963\\', \\'84350\\', \\'48420\\', \\'4646\\', \\'24958\\', \\'69020\\', \\'97121\\', \\'26178\\', \\'62664\\', \\'50622\\', \\'32554\\', \\'49655\\', \\'45398\\', \\'11267\\', \\'72222\\', \\'73363\\', \\'89554\\', \\'89046\\', \\'57384\\', \\'29259\\', \\'37888\\', \\'24850\\', \\'74353\\', \\'57343\\', \\'34762\\', \\'2900\\', \\'11393\\', \\'42154\\', \\'94306\\', \\'70552\\', \\'75265\\', \\'921\\', \\'26003\\', \\'64352\\', \\'89857\\', \\'83171\\', \\'58249\\', \\'48940\\', \\'53512\\', \\'66335\\', \\'44865\\', \\'68729\\', \\'19299\\', \\'58003\\', \\'39854\\', \\'99122\\', \\'3860\\', \\'80173\\', \\'52242\\', \\'90966\\', \\'53183\\', \\'71982\\', \\'82325\\', \\'87842\\', \\'15000\\', \\'55627\\', \\'71132\\', \\'6354\\', \\'42402\\', \\'91719\\', \\'91644\\', \\'94533\\', \\'74925\\', \\'66278\\', \\'66911\\', \\'85576\\', \\'40495\\', \\'70919\\', \\'71797\\', \\'87835\\', \\'29845\\', \\'71832\\', \\'3390\\', \\'7994\\', \\'33499\\', \\'70715\\', \\'54897\\', \\'82710\\', \\'63077\\', \\'78105\\', \\'24758\\', \\'89585\\', \\'84607\\', \\'46477\\', \\'78618\\', \\'10989\\', \\'39222\\', \\'98749\\', \\'51685\\', \\'94664\\', \\'31008\\', \\'32823\\', \\'89521\\', \\'72160\\', \\'26952\\', \\'4001\\', \\'21421\\', \\'5737\\', \\'74027\\', \\'88179\\', \\'45553\\', \\'83743\\', \\'19913\\', \\'49435\\', \\'65616\\', \\'82641\\', \\'5149\\', \\'76959\\', \\'40681\\', \\'73023\\', \\'2670\\', \\'30845\\', \\'18863\\', \\'35094\\', \\'88400\\', \\'80963\\', \\'9154\\', \\'16571\\', \\'64192\\', \\'59694\\', \\'41317\\', \\'59942\\', \\'58856\\', \\'99281\\', \\'67260\\', \\'66971\\', \\'22716\\', \\'76089\\', \\'58047\\', \\'67071\\', \\'53707\\', \\'462\\', \\'52518\\', \\'72277\\', \\'10681\\', \\'69\\', \\'98855\\', \\'12593\\', \\'88842\\', \\'67242\\', \\'73543\\', \\'37439\\', \\'18413\\', \\'67211\\', \\'93495\\', \\'45576\\', \\'70614\\', \\'27988\\', \\'53210\\', \\'18618\\', \\'21318\\', \\'68059\\', \\'25518\\', \\'55917\\', \\'56522\\', \\'16548\\', \\'2404\\', \\'93538\\', \\'61452\\', \\'66358\\', \\'3709\\', \\'23914\\', \\'92426\\', \\'81439\\', \\'38070\\', \\'28988\\', \\'29939\\', \\'2948\\', \\'85720\\', \\'45628\\', \\'51101\\', \\'89431\\', \\'86365\\', \\'17571\\', \\'50987\\', \\'83849\\', \\'11015\\', \\'83812\\', \\'66187\\', \\'26362\\', \\'66786\\', \\'22024\\', \\'93866\\', \\'36161\\', \\'90080\\', \\'64874\\', \\'37294\\', \\'83860\\', \\'73821\\', \\'80279\\', \\'36766\\', \\'73117\\', \\'44620\\', \\'84556\\', \\'42070\\', \\'90383\\', \\'27862\\', \\'20665\\', \\'67576\\', \\'34997\\', \\'57958\\', \\'80638\\', \\'84351\\', \\'63961\\', \\'1362\\', \\'14338\\', \\'80377\\', \\'24192\\', \\'41294\\', \\'57368\\', \\'51189\\', \\'27287\\', \\'45764\\', \\'86289\\', \\'65600\\', \\'708\\', \\'84090\\', \\'96005\\', \\'55676\\', \\'84855\\', \\'72385\\', \\'70018\\', \\'9336\\', \\'82701\\', \\'3710\\', \\'52083\\', \\'74045\\', \\'96454\\', \\'30956\\', \\'67369\\', \\'78941\\', \\'81810\\', \\'71906\\', \\'23194\\', \\'33042\\', \\'50794\\', \\'61256\\', \\'24449\\', \\'48639\\', \\'22916\\', \\'78303\\', \\'13666\\', \\'40762\\', \\'43942\\', \\'51075\\', \\'89783\\', \\'95786\\', \\'90462\\', \\'6181\\', \\'36482\\', \\'40675\\', \\'4970\\', \\'6388\\', \\'91849\\', \\'72579\\', \\'94983\\', \\'86084\\', \\'20140\\', \\'68427\\', \\'48123\\', \\'43122\\', \\'98066\\', \\'37560\\', \\'6927\\', \\'72803\\', \\'5546\\', \\'62259\\', \\'98439\\', \\'6457\\', \\'98568\\', \\'70499\\', \\'33022\\', \\'28226\\', \\'29675\\', \\'20917\\', \\'75365\\', \\'20900\\', \\'8190\\', \\'56736\\', \\'99153\\', \\'77779\\', \\'49333\\', \\'50293\\', \\'97650\\', \\'4067\\', \\'47278\\', \\'42761\\', \\'71875\\', \\'13966\\', \\'11223\\', \\'46783\\', \\'18059\\', \\'61355\\', \\'29638\\', \\'75681\\', \\'24466\\', \\'89634\\', \\'20759\\', \\'83252\\', \\'37780\\', \\'15931\\', \\'74893\\', \\'6703\\', \\'64524\\', \\'80656\\', \\'85990\\', \\'78427\\', \\'18411\\', \\'20696\\', \\'86432\\', \\'93176\\', \\'69889\\', \\'15072\\', \\'15180\\', \\'9935\\', \\'10467\\', \\'60248\\', \\'42430\\', \\'62590\\', \\'89596\\', \\'27743\\', \\'26398\\', \\'79912\\', \\'60048\\', \\'50943\\', \\'38870\\', \\'69383\\', \\'72261\\', \\'98059\\', \\'55242\\', \\'74905\\', \\'5667\\', \\'54321\\', \\'70415\\', \\'39903\\', \\'49711\\', \\'85318\\', \\'79979\\', \\'59262\\', \\'82321\\', \\'15263\\', \\'17416\\', \\'74554\\', \\'94733\\', \\'72112\\', \\'49872\\', \\'54849\\', \\'73883\\', \\'78250\\', \\'74935\\', \\'68559\\', \\'57564\\', \\'50541\\', \\'45730\\', \\'41595\\', \\'5588\\', \\'83723\\', \\'42891\\', \\'11898\\', \\'14348\\', \\'99732\\', \\'14481\\', \\'85233\\', \\'21277\\', \\'94508\\', \\'52551\\', \\'74187\\', \\'7634\\', \\'42912\\', \\'25100\\', \\'43536\\', \\'35798\\', \\'48190\\', \\'86477\\', \\'22680\\', \\'48148\\', \\'59501\\', \\'56563\\', \\'16802\\', \\'81496\\', \\'97568\\', \\'68657\\', \\'51462\\', \\'67953\\', \\'99660\\', \\'39002\\', \\'54170\\', \\'57190\\', \\'68086\\', \\'52700\\', \\'6487\\', \\'55709\\', \\'70418\\', \\'62629\\', \\'70420\\', \\'35695\\', \\'36152\\', \\'45360\\', \\'53503\\', \\'46623\\', \\'76000\\', \\'50648\\', \\'97876\\', \\'44815\\', \\'29163\\', \\'1356\\', \\'64123\\', \\'71388\\', \\'17658\\', \\'99084\\', \\'58727\\', \\'59437\\', \\'38773\\', \\'71254\\', \\'81286\\', \\'97545\\', \\'18786\\', \\'56834\\', \\'20346\\', \\'36401\\', \\'62316\\', \\'58082\\', \\'67959\\', \\'99876\\', \\'69895\\', \\'80099\\', \\'62747\\', \\'20517\\', \\'99777\\', \\'6472\\', \\'49189\\', \\'31321\\', \\'39992\\', \\'68073\\', \\'13378\\', \\'51806\\', \\'21776\\', \\'52060\\', \\'96983\\', \\'25754\\', \\'93709\\', \\'96627\\', \\'8644\\', \\'93726\\', \\'14002\\', \\'37716\\', \\'87620\\', \\'34507\\', \\'76339\\', \\'24491\\', \\'5849\\', \\'44110\\', \\'522\\', \\'66521\\', \\'12776\\', \\'44887\\', \\'80535\\', \\'14548\\', \\'75248\\', \\'671\\', \\'73071\\', \\'35715\\', \\'59474\\', \\'7061\\', \\'82243\\', \\'56170\\', \\'20179\\', \\'59717\\', \\'1725\\', \\'24634\\', \\'11270\\', \\'77023\\', \\'63840\\', \\'46608\\', \\'44667\\', \\'22422\\', \\'59771\\', \\'94768\\', \\'73033\\', \\'82905\\', \\'16463\\', \\'40971\\', \\'22204\\', \\'58366\\', \\'28721\\', \\'14907\\', \\'76468\\', \\'81872\\', \\'38418\\', \\'36989\\', \\'61439\\', \\'10610\\', \\'131\\', \\'44296\\', \\'35453\\', \\'10117\\', \\'75856\\', \\'94603\\', \\'99602\\', \\'68075\\', \\'35949\\', \\'13599\\', \\'50030\\', \\'69633\\', \\'55956\\', \\'85465\\', \\'16429\\', \\'86081\\', \\'11145\\', \\'6195\\', \\'82207\\', \\'90598\\', \\'92814\\', \\'23725\\', \\'83204\\', \\'80346\\', \\'71542\\', \\'46634\\', \\'15820\\', \\'54123\\', \\'45397\\', \\'15322\\', \\'61743\\', \\'9273\\', \\'71347\\', \\'6835\\', \\'64006\\', \\'91718\\', \\'43677\\', \\'32923\\', \\'21486\\', \\'17098\\', \\'61694\\', \\'43347\\', \\'40019\\', \\'4071\\', \\'52443\\', \\'42386\\', \\'56839\\', \\'83514\\', \\'27633\\', \\'40780\\', \\'51749\\', \\'92101\\', \\'62384\\', \\'92206\\', \\'56044\\', \\'66174\\', \\'11137\\', \\'73966\\', \\'78471\\', \\'30468\\', \\'31643\\', \\'33197\\', \\'6888\\', \\'8066\\', \\'86603\\', \\'74383\\', \\'6098\\', \\'54411\\', \\'98819\\', \\'89862\\', \\'88639\\', \\'94422\\', \\'89371\\', \\'80526\\', \\'91747\\', \\'91220\\', \\'64944\\', \\'76658\\', \\'42046\\', \\'58518\\', \\'27249\\', \\'6646\\', \\'3028\\', \\'1346\\', \\'33763\\', \\'9734\\', \\'31737\\', \\'65527\\', \\'5892\\', \\'60813\\', \\'3410\\', \\'35464\\', \\'43009\\', \\'98382\\', \\'70580\\', \\'93898\\', \\'56404\\', \\'32995\\', \\'62771\\', \\'71556\\', \\'40538\\', \\'55612\\', \\'45656\\', \\'10758\\', \\'20268\\', \\'33603\\', \\'38310\\', \\'14242\\', \\'74397\\', \\'10722\\', \\'71575\\', \\'22590\\', \\'49043\\', \\'91439\\', \\'9055\\', \\'23668\\', \\'9101\\', \\'5268\\', \\'64133\\', \\'77501\\', \\'64684\\', \\'11337\\', \\'47575\\', \\'50732\\', \\'88680\\', \\'93730\\', \\'46785\\', \\'17589\\', \\'3520\\', \\'57595\\', \\'71241\\', \\'34994\\', \\'8753\\', \\'36147\\', \\'88844\\', \\'41914\\', \\'11250\\', \\'94632\\', \\'71927\\', \\'4624\\', \\'86279\\', \\'7664\\', \\'2659\\', \\'94853\\', \\'65386\\', \\'30438\\', \\'86005\\', \\'92883\\', \\'84629\\', \\'59910\\', \\'44484\\', \\'1306\\', \\'8404\\', \\'56962\\', \\'29990\\', \\'38445\\', \\'96191\\', \\'73013\\', \\'66590\\', \\'40951\\', \\'24712\\', \\'18825\\', \\'37268\\', \\'87843\\', \\'18972\\', \\'12154\\', \\'7779\\', \\'52149\\', \\'76152\\', \\'65799\\', \\'86011\\', \\'35475\\', \\'78083\\', \\'88232\\', \\'91551\\', \\'65532\\', \\'93516\\', \\'73827\\', \\'24227\\', \\'44687\\', \\'55759\\', \\'83819\\', \\'45088\\', \\'10856\\', \\'60488\\', \\'39051\\', \\'14103\\', \\'76650\\', \\'81181\\', \\'46731\\', \\'737\\', \\'58788\\', \\'78945\\', \\'42096\\', \\'66731\\', \\'66740\\', \\'72273\\', \\'88969\\', \\'5655\\', \\'86590\\', \\'41096\\', \\'80038\\', \\'32430\\', \\'51877\\', \\'23970\\', \\'91900\\', \\'13082\\', \\'45880\\', \\'94367\\', \\'19739\\', \\'61998\\', \\'71665\\', \\'16083\\', \\'57035\\', \\'26916\\', \\'10166\\', \\'18834\\', \\'46798\\', \\'66881\\', \\'28444\\', \\'68840\\', \\'10459\\', \\'81087\\', \\'4728\\', \\'76224\\', \\'39257\\', \\'23470\\', \\'93524\\', \\'37345\\', \\'30074\\', \\'49856\\', \\'22022\\', \\'55279\\', \\'5159\\', \\'5193\\', \\'58030\\', \\'57539\\', \\'12514\\', \\'49759\\', \\'96222\\', \\'52597\\', \\'67192\\', \\'88187\\', \\'53614\\', \\'16084\\', \\'79915\\', \\'28212\\', \\'79334\\', \\'85283\\', \\'32306\\', \\'31058\\', \\'43113\\', \\'74707\\', \\'74869\\', \\'2213\\', \\'32134\\', \\'6379\\', \\'85426\\', \\'87098\\', \\'35984\\', \\'51105\\', \\'69287\\', \\'16803\\', \\'83337\\', \\'14913\\', \\'62531\\', \\'58098\\', \\'7914\\', \\'20105\\', \\'28850\\', \\'1384\\', \\'43173\\', \\'62983\\', \\'87113\\', \\'76066\\', \\'86320\\', \\'77684\\', \\'45191\\', \\'95225\\', \\'41503\\', \\'36713\\', \\'48404\\', \\'91228\\', \\'53865\\', \\'98981\\', \\'59161\\', \\'61237\\', \\'84561\\', \\'17455\\', \\'14379\\', \\'57789\\', \\'80895\\', \\'99260\\', \\'84595\\', \\'72942\\', \\'53220\\', \\'84448\\', \\'81332\\', \\'49437\\', \\'83086\\', \\'93414\\', \\'54519\\', \\'52288\\', \\'74772\\', \\'22460\\', \\'49324\\', \\'11168\\', \\'96071\\', \\'61985\\', \\'38284\\', \\'6405\\', \\'54698\\', \\'71727\\', \\'60093\\', \\'37340\\', \\'87884\\', \\'83403\\', \\'4542\\', \\'94949\\', \\'19636\\', \\'15855\\', \\'39105\\', \\'10424\\', \\'67418\\', \\'91022\\', \\'69254\\', \\'8481\\', \\'38411\\', \\'3832\\', \\'44354\\', \\'93548\\', \\'57172\\', \\'28481\\', \\'372\\', \\'81497\\', \\'52179\\', \\'41060\\', \\'72141\\', \\'41396\\', \\'65590\\', \\'70432\\', \\'82819\\', \\'93814\\', \\'26118\\', \\'84780\\', \\'88485\\', \\'70821\\', \\'8222\\', \\'83000\\', \\'47067\\', \\'38516\\', \\'33347\\', \\'47681\\', \\'48202\\', \\'60749\\', \\'52112\\', \\'7937\\', \\'28105\\', \\'11394\\', \\'45746\\', \\'43252\\', \\'34494\\', \\'2979\\', \\'69715\\', \\'42486\\', \\'82315\\', \\'71760\\', \\'97413\\', \\'66137\\', \\'94487\\', \\'7429\\', \\'74434\\', \\'22964\\', \\'55251\\', \\'3448\\', \\'53534\\', \\'2574\\', \\'9693\\', \\'96157\\', \\'2955\\', \\'4348\\', \\'19566\\', \\'56930\\', \\'83319\\', \\'31310\\', \\'53905\\', \\'1148\\', \\'41726\\', \\'22233\\', \\'76045\\', \\'37351\\', \\'10545\\', \\'17581\\', \\'28047\\', \\'30199\\', \\'4741\\', \\'58111\\', \\'33497\\', \\'67796\\', \\'67730\\', \\'31247\\', \\'43772\\', \\'29461\\', \\'45970\\', \\'73353\\', \\'22534\\', \\'53962\\', \\'32147\\', \\'71392\\', \\'62579\\', \\'66345\\', \\'58246\\', \\'33442\\', \\'9581\\', \\'29705\\', \\'14058\\', \\'86471\\', \\'76125\\', \\'59363\\', \\'94982\\', \\'74810\\', \\'89149\\', \\'20066\\', \\'3366\\', \\'3568\\', \\'25752\\', \\'80036\\', \\'64119\\', \\'27270\\', \\'40061\\', \\'91052\\', \\'69022\\', \\'9852\\', \\'77112\\', \\'83075\\', \\'43924\\', \\'61661\\', \\'56133\\', \\'96652\\', \\'57944\\', \\'72576\\', \\'82170\\', \\'79236\\', \\'55745\\', \\'15309\\', \\'88878\\', \\'72761\\', \\'37647\\', \\'67465\\', \\'12777\\', \\'97309\\', \\'93202\\', \\'41470\\', \\'8787\\', \\'64920\\', \\'48514\\', \\'18917\\', \\'35157\\', \\'59151\\', \\'4640\\', \\'5317\\', \\'38134\\', \\'76548\\', \\'82788\\', \\'9214\\', \\'58418\\', \\'73185\\', \\'90554\\', \\'10543\\', \\'47182\\', \\'62936\\', \\'91765\\', \\'89751\\', \\'68931\\', \\'48865\\', \\'64607\\', \\'7150\\', \\'77862\\', \\'14297\\', \\'14828\\', \\'33013\\', \\'91698\\', \\'67593\\', \\'98096\\', \\'16595\\', \\'51639\\', \\'86531\\', \\'24719\\', \\'1703\\', \\'78788\\', \\'43810\\', \\'38918\\', \\'95491\\', \\'99903\\', \\'82671\\', \\'8291\\', \\'68288\\', \\'31224\\', \\'39863\\', \\'4265\\', \\'77798\\', \\'7698\\', \\'33804\\', \\'92286\\', \\'4744\\', \\'37038\\', \\'44203\\', \\'98212\\', \\'17369\\', \\'77442\\', \\'62879\\', \\'4145\\', \\'96881\\', \\'15646\\', \\'36824\\', \\'19959\\', \\'45451\\', \\'76049\\', \\'54272\\', \\'97577\\', \\'95298\\', \\'81115\\', \\'30204\\', \\'82041\\', \\'8037\\', \\'10052\\', \\'8756\\', \\'76833\\', \\'82851\\', \\'24276\\', \\'75574\\', \\'36037\\', \\'78079\\', \\'92807\\', \\'29064\\', \\'90000\\', \\'84150\\', \\'17102\\', \\'75092\\', \\'49424\\', \\'35597\\', \\'4693\\', \\'82853\\', \\'42511\\', \\'16119\\', \\'23478\\', \\'65240\\', \\'55585\\', \\'91762\\', \\'71671\\', \\'46682\\', \\'72479\\', \\'97696\\', \\'24615\\', \\'12579\\', \\'30274\\', \\'48255\\', \\'2336\\', \\'90202\\', \\'5808\\', \\'45426\\', \\'76308\\', \\'74639\\', \\'31245\\', \\'99894\\', \\'89638\\', \\'6233\\', \\'33893\\', \\'71899\\', \\'85273\\', \\'89429\\', \\'29761\\', \\'50231\\', \\'57249\\', \\'99347\\', \\'22642\\', \\'66972\\', \\'86221\\', \\'47514\\', \\'88274\\', \\'10819\\', \\'73150\\', \\'53754\\', \\'13304\\', \\'20478\\', \\'38099\\', \\'619\\', \\'14669\\', \\'8011\\', \\'97657\\', \\'26569\\', \\'65430\\', \\'13467\\', \\'38180\\', \\'23675\\', \\'72350\\', \\'42257\\', \\'39875\\', \\'23529\\', \\'53407\\', \\'11833\\', \\n    \\'29599\\', \\'95621\\', \\'7727\\', \\'59527\\', \\'86846\\', \\'22860\\', \\'5358\\', \\'3730\\', \\'87555\\', \\'362\\', \\'95755\\', \\'54565\\', \\'29935\\', \\'68950\\', \\'52349\\', \\'98344\\', \\'86576\\', \\'7420\\', \\'12236\\', \\'15844\\', \\'48099\\', \\'97535\\', \\'97081\\', \\'50261\\', \\'31187\\', \\'60496\\', \\'24123\\', \\'24042\\', \\'6376\\', \\'6679\\', \\'99806\\', \\'20306\\', \\'60676\\', \\'36881\\', \\'77309\\', \\'5247\\', \\'96569\\', \\'53417\\', \\'73252\\', \\'64179\\', \\'35318\\', \\'75732\\', \\'65119\\', \\'32621\\', \\'40464\\', \\'22887\\', \\'96152\\', \\'65161\\', \\'83381\\', \\'8915\\', \\'68142\\', \\'7328\\', \\'85031\\', \\'15688\\', \\'72519\\', \\'93992\\', \\'86927\\', \\'75538\\', \\'38205\\', \\'50877\\', \\'70039\\', \\'97538\\', \\'94822\\', \\'52131\\', \\'49643\\', \\'85206\\', \\'1347\\', \\'14574\\', \\'88736\\', \\'53442\\', \\'49991\\', \\'64925\\', \\'72283\\', \\'82213\\', \\'60905\\', \\'36118\\', \\'62963\\', \\'16983\\', \\'79185\\', \\'15111\\', \\'26059\\', \\'17792\\', \\'98218\\', \\'33214\\', \\'1094\\', \\'41754\\', \\'77275\\', \\'65173\\', \\'13190\\', \\'91004\\', \\'90422\\', \\'44387\\', \\'92672\\', \\'98641\\', \\'54609\\', \\'83295\\', \\'37395\\', \\'70104\\', \\'32986\\', \\'72524\\', \\'82478\\', \\'5837\\', \\'83916\\', \\'52736\\', \\'57112\\', \\'55985\\', \\'42642\\', \\'42136\\', \\'89642\\', \\'35712\\', \\'49489\\', \\'19726\\', \\'65824\\', \\'24384\\', \\'48112\\', \\'15366\\', \\'99206\\', \\'68384\\', \\'51389\\', \\'529\\', \\'21475\\', \\'75749\\', \\'95182\\', \\'60110\\', \\'70571\\', \\'74174\\', \\'38105\\', \\'78107\\', \\'4101\\', \\'8982\\', \\'11215\\', \\'23987\\', \\'3303\\', \\'28706\\', \\'54629\\', \\'98000\\', \\'67510\\', \\'30036\\', \\'99140\\', \\'48896\\', \\'40971\\', \\'7735\\', \\'79984\\', \\'50134\\', \\'94928\\', \\'57023\\', \\'52880\\', \\'83067\\', \\'41940\\', \\'62994\\', \\'89213\\', \\'38593\\', \\'19283\\', \\'68206\\', \\'22234\\', \\'19245\\', \\'26266\\', \\'32403\\', \\'65889\\', \\'17022\\', \\'64280\\', \\'42797\\', \\'27161\\', \\'57675\\', \\'42313\\', \\'93606\\', \\'93082\\', \\'20659\\', \\'90824\\', \\'1226\\', \\'66266\\', \\'12503\\', \\'57104\\', \\'15247\\', \\'51160\\', \\'92398\\', \\'71967\\', \\'59476\\', \\'44465\\', \\'35765\\', \\'10787\\', \\'47737\\', \\'45792\\', \\'2292\\', \\'47599\\', \\'89612\\', \\'8162\\', \\'87622\\', \\'69410\\', \\'45727\\', \\'31158\\', \\'99791\\', \\'89544\\', \\'27214\\', \\'99588\\', \\'40516\\', \\'75616\\', \\'36505\\', \\'46079\\', \\'95448\\', \\'97999\\', \\'47462\\', \\'47799\\', \\'82729\\', \\'34038\\', \\'60789\\', \\'96938\\', \\'22682\\', \\'79062\\', \\'93307\\', \\'36038\\', \\'49016\\', \\'90983\\', \\'48219\\', \\'50889\\', \\'32517\\', \\'72219\\', \\'71229\\', \\'82643\\', \\'1195\\', \\'70543\\', \\'17\\', \\'22178\\', \\'23544\\', \\'72371\\', \\'1163\\', \\'28527\\', \\'7336\\', \\'39846\\', \\'31956\\', \\'80963\\', \\'41804\\', \\'59791\\', \\'41831\\', \\'1940\\', \\'52377\\', \\'79494\\', \\'12531\\', \\'81112\\', \\'44320\\', \\'18746\\', \\'5774\\', \\'63869\\', \\'4085\\', \\'59922\\', \\'12751\\', \\'99443\\', \\'13530\\', \\'23872\\', \\'36026\\', \\'83360\\', \\'32711\\', \\'92980\\', \\'11140\\', \\'99323\\', \\'57263\\', \\'98149\\', \\'29265\\', \\'25548\\', \\'65995\\', \\'4818\\', \\'15593\\', \\'8535\\', \\'37863\\', \\'12217\\', \\'14474\\', \\'66584\\', \\'89272\\', \\'86690\\', \\'58777\\', \\'39666\\', \\'44756\\', \\'18442\\', \\'52586\\', \\'98030\\', \\'40850\\', \\'38708\\', \\'49304\\', \\'68923\\', \\'65008\\', \\'84388\\', \\'83639\\', \\'29866\\', \\'63675\\', \\'26793\\', \\'49227\\', \\'82099\\', \\'24090\\', \\'57535\\', \\'24201\\', \\'65776\\', \\'74054\\', \\'89833\\', \\'62979\\', \\'26613\\', \\'5851\\', \\'99766\\', \\'63484\\', \\'66605\\', \\'37179\\', \\'90760\\', \\'59336\\', \\'58390\\', \\'93239\\', \\'84578\\', \\'11396\\', \\'93994\\', \\'73818\\', \\'23972\\', \\'37720\\', \\'72369\\', \\'25063\\', \\'32952\\', \\'71036\\', \\'76612\\', \\'31285\\', \\'34090\\', \\'19136\\', \\'53783\\', \\'66436\\', \\'61478\\', \\'96749\\', \\'43658\\', \\'7399\\', \\'31574\\', \\'67073\\', \\'40480\\', \\'20727\\', \\'70993\\', \\'65549\\', \\'30800\\', \\'21507\\', \\'53785\\', \\'89574\\', \\'86381\\', \\'56492\\', \\'62603\\', \\'44856\\', \\'68687\\', \\'63794\\', \\'70996\\', \\'7475\\', \\'84238\\', \\'71939\\', \\'86886\\', \\'94792\\', \\'15036\\', \\'36936\\', \\'95722\\', \\'17771\\', \\'67850\\', \\'33371\\', \\'49314\\', \\'40744\\', \\'5432\\', \\'81057\\', \\'41201\\', \\'75986\\', \\'22961\\', \\'15323\\', \\'1570\\', \\'18657\\', \\'95219\\', \\'19130\\', \\'53127\\', \\'15867\\', \\'81135\\', \\'73206\\', \\'76668\\', \\'36386\\', \\'48828\\', \\'31417\\', \\'56916\\', \\'70891\\', \\'60534\\', \\'95777\\', \\'10022\\', \\'94053\\', \\'2928\\', \\'56326\\', \\'16559\\', \\'79656\\', \\'6414\\', \\'81247\\', \\'78270\\', \\'55687\\', \\'19151\\', \\'61597\\', \\'99857\\', \\'81142\\', \\'27725\\', \\'53493\\', \\'12185\\', \\'1455\\', \\'48501\\', \\'59425\\', \\'20591\\', \\'24900\\', \\'66079\\', \\'84889\\', \\'32024\\', \\'18919\\', \\'2043\\', \\'7076\\', \\'71201\\', \\'88258\\', \\'86521\\', \\'93348\\', \\'26395\\', \\'39646\\', \\'44145\\', \\'33911\\', \\'46231\\', \\'67054\\', \\'39979\\', \\'11630\\', \\'23020\\', \\'76278\\', \\'88056\\', \\'11480\\', \\'4723\\', \\'78612\\', \\'70211\\', \\'60622\\', \\'84687\\', \\'59092\\', \\'65675\\', \\'38479\\', \\'64399\\', \\'64699\\', \\'95964\\', \\'42764\\', \\'69060\\', \\'28189\\', \\'4193\\', \\'95805\\', \\'75462\\', \\'17245\\', \\'59640\\', \\'94773\\', \\'84292\\', \\'53092\\', \\'98507\\', \\'61353\\', \\'32483\\', \\'53027\\', \\'48912\\', \\'87221\\', \\'47788\\', \\'59263\\', \\'65196\\', \\'35567\\', \\'17494\\', \\'64253\\', \\'50223\\', \\'7057\\', \\'87467\\', \\'62414\\', \\'2523\\', \\'50910\\', \\'72353\\', \\'78986\\', \\'78104\\', \\'47719\\', \\'29108\\', \\'12957\\', \\'5114\\', \\'64435\\', \\'66707\\', \\'37449\\', \\'70399\\', \\'45334\\', \\'71606\\', \\'55338\\', \\'55072\\', \\'58765\\', \\'12151\\', \\'22012\\', \\'16954\\', \\'87366\\', \\'14240\\', \\'98041\\', \\'72296\\', \\'47408\\', \\'56879\\', \\'99584\\', \\'63172\\', \\'92316\\', \\'28071\\', \\'29880\\', \\'19608\\', \\'13839\\', \\'87484\\', \\'56541\\', \\'88662\\', \\'87098\\', \\'72124\\', \\'78282\\', \\'27653\\', \\'38993\\', \\'31870\\', \\'67239\\', \\'99445\\', \\'7376\\', \\'78487\\', \\'98880\\', \\'12180\\', \\'86773\\', \\'67773\\', \\'15416\\', \\'58172\\', \\'13075\\', \\'67559\\', \\'97510\\', \\'29705\\', \\'86985\\', \\'57024\\', \\'11827\\', \\'31236\\', \\'91920\\', \\'26116\\', \\'94614\\', \\'14486\\', \\'46252\\', \\'78847\\', \\'43786\\', \\'70048\\', \\'96739\\', \\'35240\\', \\'39933\\', \\'58209\\', \\'27852\\', \\'65669\\', \\'47323\\', \\'58150\\', \\'84444\\', \\'44344\\', \\'95882\\', \\'41258\\', \\'31314\\', \\'69060\\', \\'19916\\', \\'6979\\', \\'19436\\', \\'45572\\', \\'16259\\', \\'74566\\', \\'6306\\', \\'24705\\', \\'53422\\', \\'593\\', \\'97031\\', \\'22308\\', \\'26875\\', \\'23042\\', \\'78035\\', \\'34229\\', \\'61976\\', \\'23175\\', \\'50072\\', \\'90896\\', \\'50810\\', \\'71730\\', \\'86468\\', \\'94807\\', \\'8218\\', \\'36032\\', \\'58628\\', \\'60560\\', \\'51206\\', \\'37943\\', \\'27987\\', \\'15014\\', \\'49905\\', \\'70018\\', \\'66799\\', \\'80851\\', \\'23594\\', \\'29982\\', \\'6438\\', \\'97381\\', \\'47715\\', \\'96294\\', \\'17985\\', \\'48545\\', \\'12672\\', \\'5250\\', \\'9988\\', \\'24601\\', \\'3736\\', \\'97815\\', \\'54363\\', \\'64703\\', \\'44167\\', \\'68376\\', \\'16595\\', \\'38073\\', \\'29630\\', \\'59630\\', \\'1858\\', \\'71823\\', \\'75580\\', \\'70083\\', \\'14493\\', \\'93821\\', \\'93394\\', \\'85369\\', \\'3818\\', \\'8435\\', \\'59988\\', \\'43966\\', \\'13961\\', \\'15855\\', \\'83332\\', \\'80312\\', \\'27299\\', \\'88840\\', \\'76964\\', \\'56173\\', \\'62794\\', \\'79389\\', \\'82642\\', \\'85843\\', \\'47116\\', \\'43064\\', \\'16061\\', \\'28905\\', \\'54415\\', \\'72832\\', \\'91252\\', \\'93488\\', \\'79457\\', \\'99336\\', \\'70744\\', \\'80432\\', \\'6487\\', \\'880\\', \\'87701\\', \\'154\\', \\'86574\\', \\'86677\\', \\'17892\\', \\'81488\\', \\'95260\\', \\'12515\\', \\'43189\\', \\'9211\\', \\'55403\\', \\'41417\\', \\'60046\\', \\'54785\\', \\'83655\\', \\'28274\\', \\'65745\\', \\'63062\\', \\'44549\\', \\'36391\\', \\'48051\\', \\'7328\\', \\'3572\\', \\'33226\\', \\'49177\\', \\'25123\\', \\'59065\\', \\'19691\\', \\'15109\\', \\'10172\\', \\'95578\\', \\'29497\\', \\'48152\\', \\'20276\\', \\'36270\\', \\'78866\\', \\'48309\\', \\'53209\\', \\'55475\\', \\'30073\\', \\'19717\\', \\'16004\\', \\'45692\\', \\'83430\\', \\'9291\\', \\'45935\\', \\'57030\\', \\'92613\\', \\'91656\\', \\'67697\\', \\'34915\\', \\'28156\\', \\'56594\\', \\'3273\\', \\'11194\\', \\'98270\\', \\'34370\\', \\'2621\\', \\'66679\\', \\'97451\\', \\'97717\\', \\'87923\\', \\'48310\\', \\'37725\\', \\'69743\\', \\'75103\\', \\'84956\\', \\'75163\\', \\'16069\\', \\'65304\\', \\'19397\\', \\'18071\\', \\'27273\\', \\'49823\\', \\'57595\\', \\'98324\\', \\'82174\\', \\'10293\\', \\'80943\\', \\'64184\\', \\'19472\\', \\'4198\\', \\'9410\\', \\'25927\\', \\'65961\\', \\'33155\\', \\'95168\\', \\'33692\\', \\'61712\\', \\'69877\\', \\'13308\\', \\'17415\\', \\'10022\\', \\'2491\\', \\'67310\\', \\'96140\\', \\'68050\\', \\'76272\\', \\'17143\\', \\'76805\\', \\'57176\\', \\'7539\\', \\'22690\\', \\'95483\\', \\'87592\\', \\'27221\\', \\'90821\\', \\'51154\\', \\'99828\\', \\'68998\\', \\'54581\\', \\'74222\\', \\'10269\\', \\'65057\\', \\'45467\\', \\'96089\\', \\'55058\\', \\'89779\\', \\'60837\\', \\'74122\\', \\'52886\\', \\'58055\\', \\'14880\\', \\'93208\\', \\'66652\\', \\'68830\\', \\'24121\\', \\'62407\\', \\'87257\\', \\'18802\\', \\'14925\\', \\'45423\\', \\'98624\\', \\'55195\\', \\'59072\\', \\'41414\\', \\'77840\\', \\'66075\\', \\'62705\\', \\'26549\\', \\'19063\\', \\'57552\\', \\'2507\\', \\'52069\\', \\'57620\\', \\'66688\\', \\'14833\\', \\'33700\\', \\'90666\\', \\'98052\\', \\'5367\\', \\'2268\\', \\'43093\\', \\'69063\\', \\'22030\\', \\'85564\\', \\'92258\\', \\'1847\\', \\'24446\\', \\'65835\\', \\'38660\\', \\'91899\\', \\'87732\\', \\'52396\\', \\'31952\\', \\'36000\\', \\'86944\\', \\'16109\\', \\'80729\\', \\'53757\\', \\'60226\\', \\'59103\\', \\'84187\\', \\'36674\\', \\'72823\\', \\'29884\\', \\'4654\\', \\'69139\\', \\'20440\\', \\'57413\\', \\'3651\\', \\'39639\\', \\'44564\\', \\'57492\\', \\'84159\\', \\'751\\', \\'99748\\', \\'9659\\', \\'72661\\', \\'39220\\', \\'99742\\', \\'74734\\', \\'75729\\', \\'38071\\', \\'69934\\', \\'73640\\', \\'65294\\', \\'54524\\', \\'64372\\', \\'37927\\', \\'17187\\', \\'7863\\', \\'12732\\', \\'40296\\', \\'36197\\', \\'15821\\', \\'76831\\', \\'4400\\', \\'71933\\', \\'4040\\', \\'22072\\', \\'33064\\', \\'25702\\', \\'13324\\', \\'91275\\', \\'27388\\', \\'97729\\', \\'14620\\', \\'45989\\', \\'80737\\', \\'17934\\', \\'4219\\', \\'3032\\', \\'43457\\', \\'31051\\', \\'24469\\', \\'67041\\', \\'29328\\', \\'75499\\', \\'80951\\', \\'88212\\', \\'92595\\', \\'49969\\', \\'24612\\', \\'58732\\', \\'2718\\', \\'3805\\', \\'50918\\', \\'99426\\', \\'8614\\', \\'35580\\', \\'93273\\', \\'989\\', \\'24385\\', \\'41185\\', \\'25687\\', \\'47146\\', \\'25227\\', \\'95839\\', \\'56355\\', \\'98536\\', \\'79824\\', \\'31725\\', \\'46447\\', \\'26690\\', \\'68418\\', \\'47783\\', \\'33725\\', \\'21729\\', \\'70797\\', \\'59038\\', \\'60376\\', \\'25087\\', \\'68332\\', \\'67950\\', \\'12411\\', \\'95918\\', \\'64736\\', \\'65336\\', \\'74947\\', \\'64605\\', \\'4106\\', \\'42712\\', \\'96640\\', \\'28492\\', \\'28648\\', \\'42429\\', \\'821\\', \\'24333\\', \\'69677\\', \\'38959\\', \\'23484\\', \\'92005\\', \\'29352\\', \\'29159\\', \\'52873\\', \\'99947\\', \\'21834\\', \\'85347\\', \\'93479\\', \\'28298\\', \\'55608\\', \\'3226\\', \\'69714\\', \\'80283\\', \\'6577\\', \\'18849\\', \\'44605\\', \\'75286\\', \\'28139\\', \\'26541\\', \\'12867\\', \\'57500\\', \\'86617\\', \\'33005\\', \\'57498\\', \\'60223\\', \\'74954\\', \\'51401\\', \\'55246\\', \\'5648\\', \\'16513\\', \\'40930\\', \\'43821\\', \\'32090\\', \\'66002\\', \\'65530\\', \\'76083\\', \\'6047\\', \\'6879\\', \\'94987\\', \\'80787\\', \\'11688\\', \\'77161\\', \\'92670\\', \\'6696\\', \\'400\\', \\'28572\\', \\'47234\\', \\'51375\\', \\'88518\\', \\'762\\', \\'92617\\', \\'54260\\', \\'7560\\', \\'60180\\', \\'43331\\', \\'64059\\', \\'27616\\', \\'75839\\', \\'21392\\', \\'47756\\', \\'46254\\', \\'19486\\', \\'88533\\', \\'30130\\', \\'93694\\', \\'8557\\', \\'66534\\', \\'94447\\', \\'16910\\', \\'6480\\', \\'77440\\', \\'24366\\', \\'6195\\', \\'48946\\', \\'28597\\', \\'44429\\', \\'50300\\', \\'73556\\', \\'40638\\', \\'98709\\', \\'94413\\', \\'15987\\', \\'43860\\', \\'64871\\', \\'93953\\', \\'34506\\', \\'7296\\', \\'31753\\', \\'30626\\', \\'77510\\', \\'39829\\', \\'25696\\', \\'39776\\', \\'69185\\', \\'36540\\', \\'65413\\', \\'31528\\', \\'43446\\', \\'73532\\', \\'49776\\', \\'30282\\', \\'30004\\', \\'26725\\', \\'15200\\', \\'33958\\', \\'90320\\', \\'71836\\', \\'48051\\', \\'31970\\', \\'5326\\', \\'96194\\', \\'69695\\', \\'60898\\', \\'60945\\', \\'18271\\', \\'50868\\', \\'61468\\', \\'23593\\', \\'68985\\', \\'20628\\', \\'58044\\', \\'8942\\', \\'34849\\', \\'7384\\', \\'50500\\', \\'62895\\', \\'78780\\', \\'48946\\', \\'65278\\', \\'4067\\', \\'973\\', \\'34761\\', \\'15512\\', \\'73739\\', \\'23138\\', \\'47322\\', \\'55568\\', \\'32259\\', \\'71816\\', \\'49277\\', \\'75218\\', \\'76104\\', \\'19579\\', \\'68312\\', \\'67904\\', \\'33886\\', \\'53888\\', \\'26421\\', \\'43859\\', \\'40291\\', \\'39068\\', \\'31711\\', \\'36542\\', \\'10195\\', \\'39781\\', \\'72352\\', \\'13188\\', \\'34113\\', \\'9428\\', \\'60443\\', \\'4987\\', \\'13783\\', \\'80744\\', \\'63483\\', \\'18266\\', \\'11961\\', \\'87167\\', \\'46987\\', \\'28480\\', \\'74214\\', \\'39191\\', \\'8146\\', \\'38090\\', \\'75727\\', \\'79245\\', \\'47720\\', \\'52547\\', \\'45321\\', \\'4972\\', \\'49701\\', \\'74354\\', \\'69672\\', \\'63455\\', \\'41902\\', \\'5667\\', \\'54166\\', \\'4962\\', \\'25873\\', \\'44509\\', \\'73332\\', \\'73383\\', \\'29438\\', \\'21455\\', \\'12320\\', \\'11997\\', \\'16921\\', \\'49379\\', \\'63027\\', \\'86175\\', \\'8110\\', \\'76149\\', \\'2520\\', \\'11256\\', \\'25863\\', \\'50518\\', \\'69001\\',\\n    \\'79113\\', \\'9447\\', \\'91840\\', \\'5242\\', \\'10998\\', \\'46496\\', \\'2448\\', \\'56058\\', \\'20970\\', \\'10517\\', \\'17783\\', \\'25723\\', \\'97137\\', \\'62840\\', \\'1264\\', \\'78691\\', \\'81020\\', \\'55335\\', \\'48524\\', \\'2088\\', \\'90413\\', \\'76651\\', \\'26855\\', \\'16177\\', \\'14954\\', \\'62914\\', \\'21344\\', \\'5708\\', \\'75560\\', \\'39311\\', \\'95865\\', \\'28783\\', \\'64902\\', \\'95657\\', \\'46276\\', \\'33426\\', \\'4799\\', \\'11588\\', \\'57513\\', \\'73689\\', \\'77677\\', \\'63011\\', \\'97795\\', \\'34954\\', \\'76866\\', \\'32043\\', \\'32697\\', \\'26643\\', \\'36890\\', \\'53476\\', \\'3011\\', \\'13963\\', \\'49551\\', \\'87671\\', \\'67761\\', \\'17488\\', \\'94770\\', \\'50599\\', \\'33272\\', \\'23091\\', \\'38079\\', \\'41177\\', \\'22395\\', \\'91656\\', \\'79679\\', \\'38687\\', \\'57384\\', \\'80118\\', \\'42507\\', \\'4098\\', \\'78949\\', \\'45669\\', \\'48802\\', \\'83915\\', \\'78292\\', \\'4369\\', \\'57657\\', \\'49146\\', \\'45192\\', \\'98491\\', \\'72457\\', \\'46331\\', \\'207\\', \\'81601\\', \\'7409\\', \\'70856\\', \\'91605\\', \\'70295\\', \\'9171\\', \\'72293\\', \\'32997\\', \\'78025\\', \\'16795\\', \\'73534\\', \\'68780\\', \\'21284\\', \\'31767\\', \\'94381\\', \\'86439\\', \\'12420\\', \\'53285\\', \\'99563\\', \\'60502\\', \\'67954\\', \\'55012\\', \\'99809\\', \\'5431\\', \\'69978\\', \\'99712\\', \\'14401\\', \\'79498\\', \\'4495\\', \\'3045\\', \\'528\\', \\'72542\\', \\'91604\\', \\'72725\\', \\'39378\\', \\'80378\\', \\'41996\\', \\'20138\\', \\'54545\\', \\'59730\\', \\'36951\\', \\'45157\\', \\'37964\\', \\'97690\\', \\'12184\\', \\'4944\\', \\'53803\\', \\'93605\\', \\'60851\\', \\'68938\\', \\'46285\\', \\'89663\\', \\'90309\\', \\'6907\\', \\'87239\\', \\'81791\\', \\'83292\\', \\'90013\\', \\'68927\\', \\'14725\\', \\'81840\\', \\'63836\\', \\'52068\\', \\'43830\\', \\'4794\\', \\'931\\', \\'59255\\', \\'8263\\', \\'99057\\', \\'94401\\', \\'69033\\', \\'7437\\', \\'20364\\', \\'92884\\', \\'28193\\', \\'43932\\', \\'37629\\', \\'59426\\', \\'18891\\', \\'8583\\', \\'79551\\', \\'87242\\', \\'1483\\', \\'6725\\', \\'65786\\', \\'16844\\', \\'12650\\', \\'99305\\', \\'42841\\', \\'9811\\', \\'18800\\', \\'39313\\', \\'51373\\', \\'31874\\', \\'84558\\', \\'27831\\', \\'48614\\', \\'48975\\', \\'55509\\', \\'83363\\', \\'31854\\', \\'64001\\', \\'94028\\', \\'76125\\', \\'79314\\', \\'24893\\', \\'81132\\', \\'9441\\', \\'86015\\', \\'28356\\', \\'40358\\', \\'10160\\', \\'23328\\', \\'7330\\', \\'76538\\', \\'37611\\', \\'89351\\', \\'84132\\', \\'97047\\', \\'26109\\', \\'95222\\', \\'35130\\', \\'75600\\', \\'88602\\', \\'15073\\', \\'87835\\', \\'71649\\', \\'28948\\', \\'81615\\', \\'37498\\', \\'28674\\', \\'59776\\', \\'44095\\', \\'65924\\', \\'64368\\', \\'94536\\', \\'12518\\', \\'61711\\', \\'55619\\', \\'82949\\', \\'4114\\', \\'21540\\', \\'70544\\', \\'28022\\', \\'79983\\', \\'28781\\', \\'7749\\', \\'97873\\', \\'4951\\', \\'50076\\', \\'47611\\', \\'99522\\', \\'56820\\', \\'38653\\', \\'49047\\', \\'36283\\', \\'83908\\', \\'72452\\', \\'85625\\', \\'10811\\', \\'36998\\', \\'44083\\', \\'34864\\', \\'44975\\', \\'39057\\', \\'4551\\', \\'68450\\', \\'24781\\', \\'1503\\', \\'9871\\', \\'46885\\', \\'11424\\', \\'21259\\', \\'54900\\', \\'97669\\', \\'85669\\', \\'6015\\', \\'2521\\', \\'37661\\', \\'14915\\', \\'57423\\', \\'91903\\', \\'94789\\', \\'32059\\', \\'64972\\', \\'4600\\', \\'61465\\', \\'27118\\', \\'79785\\', \\'13547\\', \\'49766\\', \\'38410\\', \\'68860\\', \\'63756\\', \\'23621\\', \\'64387\\', \\'46255\\', \\'63408\\', \\'11297\\', \\'41081\\', \\'56326\\', \\'58349\\', \\'98703\\', \\'72268\\', \\'73574\\', \\'32098\\', \\'42534\\', \\'91502\\', \\'38083\\', \\'11241\\', \\'56828\\', \\'12098\\', \\'25377\\', \\'37054\\', \\'56328\\', \\'30034\\', \\'26922\\', \\'68401\\', \\'93478\\', \\'63275\\', \\'62650\\', \\'81407\\', \\'773\\', \\'79499\\', \\'14970\\', \\'47217\\', \\'1187\\', \\'57428\\', \\'69980\\', \\'77764\\', \\'74791\\', \\'22107\\', \\'54363\\', \\'39247\\', \\'56028\\', \\'56982\\', \\'84244\\', \\'21464\\', \\'18716\\', \\'25533\\', \\'94589\\', \\'94768\\', \\'21537\\', \\'18436\\', \\'81135\\', \\'27654\\', \\'79713\\', \\'56630\\', \\'61571\\', \\'58453\\', \\'26758\\', \\'68450\\', \\'68449\\', \\'2994\\', \\'15347\\', \\'83954\\', \\'71823\\', \\'6428\\', \\'44210\\', \\'79597\\', \\'95144\\', \\'32871\\', \\'1991\\', \\'320\\', \\'77157\\', \\'63607\\', \\'31154\\', \\'48846\\', \\'71125\\', \\'61750\\', \\'59608\\', \\'33038\\', \\'35733\\', \\'68915\\', \\'94127\\', \\'50383\\', \\'64242\\', \\'49708\\', \\'57270\\', \\'65019\\', \\'8581\\', \\'12111\\', \\'18487\\', \\'50013\\', \\'58664\\', \\'22214\\', \\'19033\\', \\'33681\\', \\'44754\\', \\'28830\\', \\'10381\\', \\'52318\\', \\'34959\\', \\'20682\\', \\'55453\\', \\'53800\\', \\'65774\\', \\'99164\\', \\'72102\\', \\'36986\\', \\'44157\\', \\'56716\\', \\'7974\\', \\'81475\\', \\'25926\\', \\'39402\\', \\'33688\\', \\'99671\\', \\'95312\\', \\'42268\\', \\'26536\\', \\'14482\\', \\'67377\\', \\'57993\\', \\'89147\\', \\'15834\\', \\'64995\\', \\'4700\\', \\'18714\\', \\'30221\\', \\'39095\\', \\'32749\\', \\'69257\\', \\'55204\\', \\'30497\\', \\'31839\\', \\'63045\\', \\'30009\\', \\'62683\\', \\'31232\\', \\'77680\\', \\'93551\\', \\'63589\\', \\'6989\\', \\'77246\\', \\'42169\\', \\'46117\\', \\'73226\\', \\'37427\\', \\'1858\\', \\'83649\\', \\'37410\\', \\'86369\\', \\'4641\\', \\'74481\\', \\'66168\\', \\'48041\\', \\'22597\\', \\'14670\\', \\'27464\\', \\'57165\\', \\'20939\\', \\'36282\\', \\'76940\\', \\'73358\\', \\'50521\\', \\'69603\\', \\'8895\\', \\'81793\\', \\'57743\\', \\'81903\\', \\'64025\\', \\'91641\\', \\'25276\\', \\'34040\\', \\'62642\\', \\'64015\\', \\'57657\\', \\'84890\\', \\'73832\\', \\'782\\', \\'60160\\', \\'16998\\', \\'40023\\', \\'24590\\', \\'88613\\', \\'76640\\', \\'53091\\', \\'67600\\', \\'80183\\', \\'45674\\', \\'64464\\', \\'25163\\', \\'42384\\', \\'66972\\', \\'13953\\', \\'41966\\', \\'66048\\', \\'15135\\', \\'73745\\', \\'19466\\', \\'53657\\', \\'34619\\', \\'13462\\', \\'15905\\', \\'48257\\', \\'73297\\', \\'238\\', \\'93525\\', \\'80556\\', \\'5942\\', \\'5411\\', \\'66169\\', \\'9090\\', \\'95130\\', \\'74316\\', \\'57321\\', \\'48083\\', \\'62355\\', \\'68113\\', \\'15239\\', \\'36644\\', \\'80326\\', \\'65817\\', \\'54428\\', \\'61955\\', \\'58849\\', \\'77206\\', \\'16073\\', \\'98261\\', \\'92091\\', \\'39178\\', \\'35464\\', \\'85109\\', \\'85452\\', \\'21128\\', \\'25665\\', \\'81860\\', \\'44664\\', \\'24024\\', \\'56960\\', \\'95124\\', \\'39786\\', \\'18836\\', \\'11121\\', \\'44163\\', \\'81074\\', \\'79064\\', \\'46219\\', \\'94694\\', \\'44233\\', \\'81469\\', \\'24642\\', \\'15030\\', \\'21995\\', \\'13587\\', \\'40755\\', \\'6669\\', \\'81093\\', \\'74305\\', \\'1881\\', \\'55649\\', \\'37273\\', \\'80827\\', \\'98643\\', \\'46694\\', \\'59281\\', \\'79231\\', \\'42813\\', \\'84984\\', \\'7052\\', \\'98113\\', \\'17296\\', \\'84434\\', \\'31205\\', \\'46894\\', \\'71219\\', \\'74530\\', \\'44686\\', \\'70744\\', \\'91388\\', \\'20692\\', \\'96853\\', \\'73803\\', \\'15836\\', \\'18126\\', \\'49686\\', \\'4179\\', \\'47588\\', \\'87892\\', \\'65425\\', \\'68012\\', \\'97468\\', \\'92510\\', \\'99271\\', \\'58694\\', \\'11918\\', \\'37051\\', \\'18644\\', \\'57228\\', \\'14265\\', \\'57572\\', \\'57022\\', \\'52186\\', \\'30193\\', \\'93570\\', \\'87872\\', \\'5257\\', \\'26784\\', \\'6476\\', \\'61746\\', \\'68559\\', \\'1720\\', \\'26202\\', \\'16519\\', \\'27688\\', \\'10645\\', \\'87174\\', \\'60845\\', \\'73385\\', \\'82075\\', \\'6933\\', \\'98828\\', \\'56895\\', \\'17344\\', \\'84253\\', \\'36561\\', \\'51648\\', \\'24939\\', \\'63470\\', \\'31034\\', \\'95052\\', \\'51090\\', \\'51465\\', \\'87979\\', \\'68650\\', \\'30181\\', \\'29598\\', \\'19137\\', \\'43221\\', \\'81353\\', \\'90170\\', \\'96985\\', \\'61115\\', \\'17385\\', \\'92314\\', \\'80650\\', \\'55821\\', \\'17874\\', \\'84333\\', \\'93272\\', \\'48260\\', \\'87272\\', \\'22764\\', \\'59957\\', \\'51870\\', \\'85988\\', \\'39222\\', \\'77241\\', \\'62535\\', \\'28344\\', \\'6011\\', \\'80831\\', \\'64551\\', \\'46299\\', \\'75195\\', \\'71177\\', \\'8660\\', \\'58943\\', \\'57003\\', \\'3306\\', \\'74413\\', \\'74068\\', \\'15073\\', \\'89016\\', \\'93140\\', \\'13911\\', \\'57170\\', \\'19880\\', \\'41870\\', \\'9131\\', \\'57495\\', \\'73032\\', \\'86979\\', \\'60094\\', \\'87026\\', \\'30880\\', \\'4736\\', \\'86301\\', \\'92707\\', \\'21689\\', \\'83565\\', \\'71275\\', \\'47665\\', \\'65687\\', \\'71184\\', \\'89897\\', \\'32490\\', \\'97577\\', \\'38723\\', \\'79113\\', \\'37531\\', \\'97500\\', \\'94450\\', \\'15699\\', \\'58019\\', \\'84423\\', \\'27057\\', \\'56017\\', \\'97148\\', \\'47365\\', \\'30669\\', \\'33818\\', \\'80406\\', \\'99690\\', \\'33012\\', \\'95178\\', \\'46809\\', \\'48448\\', \\'79350\\', \\'9146\\', \\'99701\\', \\'98976\\', \\'71197\\', \\'44161\\', \\'75069\\', \\'36602\\', \\'79650\\', \\'97301\\', \\'12020\\', \\'56658\\', \\'25701\\', \\'46392\\', \\'78609\\', \\'63073\\', \\'69419\\', \\'57736\\', \\'20102\\', \\'42415\\', \\'79044\\', \\'20277\\', \\'56280\\', \\'47903\\', \\'94311\\', \\'25558\\', \\'40336\\', \\'91305\\', \\'90505\\', \\'66769\\', \\'64562\\', \\'83737\\', \\'62892\\', \\'10375\\', \\'71024\\', \\'19988\\', \\'56946\\', \\'76110\\', \\'21847\\', \\'43162\\', \\'50578\\', \\'46086\\', \\'54167\\', \\'61722\\', \\'53463\\', \\'63134\\', \\'69288\\', \\'12838\\', \\'14116\\', \\'71687\\', \\'50846\\', \\'59810\\', \\'24826\\', \\'84138\\', \\'82885\\', \\'91496\\', \\'98600\\', \\'82769\\', \\'40049\\', \\'4125\\', \\'50694\\', \\'1294\\', \\'2805\\', \\'29691\\', \\'82321\\', \\'76462\\', \\'85945\\', \\'115\\', \\'29188\\', \\'66918\\', \\'71340\\', \\'31585\\', \\'61638\\', \\'95472\\', \\'52978\\', \\'50622\\', \\'81990\\', \\'60955\\', \\'70519\\', \\'22270\\', \\'35610\\', \\'95871\\', \\'89222\\', \\'41038\\', \\'52546\\', \\'1163\\', \\'67943\\', \\'1793\\', \\'92010\\', \\'35755\\', \\'74509\\', \\'66665\\', \\'95759\\', \\'8568\\', \\'44299\\', \\'67822\\', \\'5806\\', \\'85839\\', \\'13895\\', \\'87675\\', \\'31357\\', \\'88014\\', \\'40026\\', \\'53050\\', \\'28951\\', \\'31992\\', \\'42495\\', \\'82892\\', \\'51567\\', \\'2869\\', \\'45808\\', \\'20238\\', \\'20781\\', \\'56098\\', \\'66307\\', \\'95701\\', \\'614\\', \\'60833\\', \\'3091\\', \\'81339\\', \\'24195\\', \\'65639\\', \\'85976\\', \\'28116\\', \\'66224\\', \\'51502\\', \\'73637\\', \\'13207\\', \\'88302\\', \\'36488\\', \\'65518\\', \\'98187\\', \\'26\\', \\'74367\\', \\'64706\\', \\'53943\\', \\'86760\\', \\'25783\\', \\'82112\\', \\'34958\\', \\'86621\\', \\'20848\\', \\'63459\\', \\'14049\\', \\'84943\\', \\'91873\\', \\'50238\\', \\'77773\\', \\'64109\\', \\'8602\\', \\'87934\\', \\'47583\\', \\'66053\\', \\'30287\\', \\'5507\\', \\'80312\\', \\'37464\\', \\'57457\\', \\'86200\\', \\'17806\\', \\'16522\\', \\'38843\\', \\'94334\\', \\'59958\\', \\'63864\\', \\'53427\\', \\'74506\\', \\'33980\\', \\'90449\\', \\'30842\\', \\'53616\\', \\'36738\\', \\'52\\', \\'13595\\', \\'53051\\', \\'13174\\', \\'60163\\', \\'71420\\', \\'73835\\', \\'67119\\', \\'79018\\', \\'42782\\', \\'45059\\', \\'952\\', \\'46360\\', \\'85879\\', \\'71552\\', \\'84741\\', \\'29746\\', \\'32577\\', \\'10041\\', \\'7208\\', \\'97528\\', \\'51256\\', \\'916\\', \\'55973\\', \\'17684\\', \\'99046\\', \\'38782\\', \\'58660\\', \\'97798\\', \\'66032\\', \\'48339\\', \\'51329\\', \\'12532\\', \\'97904\\', \\'95454\\', \\'42737\\', \\'62541\\', \\'96702\\', \\'82953\\', \\'94610\\', \\'26645\\', \\'86813\\', \\'25480\\', \\'99713\\', \\'26078\\', \\'23028\\', \\'93056\\', \\'21445\\', \\'73209\\', \\'89318\\', \\'69987\\', \\'34705\\', \\'30064\\', \\'17094\\', \\'51135\\', \\'54141\\', \\'26625\\', \\'1086\\', \\'13082\\', \\'30843\\', \\'98672\\', \\'56864\\', \\'42605\\', \\'5833\\', \\'60850\\', \\'69366\\', \\'27351\\', \\'16456\\', \\'92609\\', \\'48030\\', \\'54322\\', \\'69891\\', \\'46502\\', \\'34578\\', \\'77918\\', \\'63276\\', \\'75958\\', \\'42519\\', \\'60266\\', \\'85576\\', \\'4855\\', \\'14258\\', \\'67017\\', \\'10545\\', \\'35078\\', \\'53012\\', \\'71922\\', \\'85784\\', \\'73402\\', \\'74363\\', \\'58457\\', \\'94102\\', \\'23510\\', \\'51559\\', \\'39482\\', \\'87057\\', \\'9377\\', \\'10106\\', \\'82985\\', \\'33931\\', \\'16523\\', \\'6484\\', \\'97749\\', \\'83172\\', \\'53753\\', \\'27466\\', \\'23073\\', \\'96083\\', \\'67302\\', \\'57465\\', \\'21877\\', \\'18013\\', \\'99804\\', \\'32873\\', \\'43123\\', \\'72365\\', \\'53197\\', \\'80578\\', \\'69770\\', \\'97471\\', \\'86954\\', \\'67183\\', \\'98497\\', \\'78474\\', \\'28450\\', \\'63183\\', \\'98699\\', \\'42738\\', \\'61433\\', \\'3491\\', \\'27304\\', \\'49311\\', \\'94980\\', \\'92740\\', \\'43272\\', \\'86549\\', \\'11406\\', \\'79636\\', \\'85582\\', \\'38086\\', \\'657\\', \\'2354\\', \\'26567\\', \\'77450\\', \\'42086\\', \\'21600\\', \\'49011\\', \\'44059\\', \\'47872\\', \\'75761\\', \\'96577\\', \\'11642\\', \\'83471\\', \\'79616\\', \\'23749\\', \\'77082\\', \\'96876\\', \\'65302\\', \\'84027\\', \\'48955\\', \\'59887\\', \\'20657\\', \\'75090\\', \\'9058\\', \\'50347\\', \\'66088\\', \\'70745\\', \\'76342\\', \\'58026\\', \\'95568\\', \\'61504\\', \\'93473\\', \\'84590\\', \\'47089\\', \\'74717\\', \\'93090\\', \\'46334\\', \\'68273\\', \\'59500\\', \\'54345\\', \\'72608\\', \\'54048\\', \\'86156\\', \\'40296\\', \\'74046\\', \\'6813\\', \\'36369\\', \\'74543\\', \\'18305\\', \\'85236\\', \\'31316\\', \\'37061\\', \\'96893\\', \\'23112\\', \\'5529\\', \\'10166\\', \\'19037\\', \\'1467\\', \\'70810\\', \\'30932\\', \\'18410\\', \\'92837\\', \\'81324\\', \\'12268\\', \\'54705\\', \\'25207\\', \\'90366\\', \\'56528\\', \\'3392\\', \\'88747\\', \\'39951\\', \\'97957\\', \\'99404\\', \\'23685\\', \\'13533\\', \\'15640\\', \\'11434\\', \\'66516\\', \\'71025\\', \\'65770\\', \\'88000\\', \\'52232\\', \\'32360\\', \\'10787\\', \\'37438\\', \\'2264\\', \\'94460\\', \\'80214\\', \\'42288\\', \\'59062\\', \\'29010\\', \\'64093\\', \\'21225\\', \\'22297\\', \\'36935\\', \\'19202\\', \\'5925\\', \\'85373\\', \\'27414\\', \\'28991\\', \\'9191\\', \\'42273\\', \\'56587\\', \\'89719\\', \\'77191\\', \\'64334\\', \\'61542\\', \\'28763\\', \\'28978\\', \\'79184\\', \\'59815\\', \\'95200\\', \\'30246\\', \\'54022\\', \\'287\\', \\'91808\\', \\'66347\\', \\'50833\\', \\'15356\\', \\'78614\\',\\n    \\'65087\\', \\'9664\\', \\'67555\\', \\'58222\\', \\'20787\\', \\'72382\\', \\'83712\\', \\'15858\\', \\'72040\\', \\'59451\\', \\'7428\\', \\'47586\\', \\'83509\\', \\'45969\\', \\'28759\\', \\'94033\\', \\'88618\\', \\'46\\', \\'1753\\', \\'28290\\', \\'71934\\', \\'99070\\', \\'52517\\', \\'65865\\', \\'15904\\', \\'68134\\', \\'87595\\', \\'39779\\', \\'99174\\', \\'13366\\', \\'50847\\', \\'69037\\', \\'77911\\', \\'19709\\', \\'84404\\', \\'24370\\', \\'18920\\', \\'1746\\', \\'28059\\', \\'4653\\', \\'6892\\', \\'25496\\', \\'48810\\', \\'82943\\', \\'7069\\', \\'44018\\', \\'1617\\', \\'56497\\', \\'27582\\', \\'29576\\', \\'47883\\', \\'8385\\', \\'54975\\', \\'96245\\', \\'77257\\', \\'31194\\', \\'34512\\', \\'19198\\', \\'50926\\', \\'50886\\', \\'91577\\', \\'49260\\', \\'49604\\', \\'58464\\', \\'18198\\', \\'90887\\', \\'15379\\', \\'74883\\', \\'36644\\', \\'63967\\', \\'34545\\', \\'20539\\', \\'12884\\', \\'6010\\', \\'98636\\', \\'94832\\', \\'47702\\', \\'98318\\', \\'6078\\', \\'42517\\', \\'97030\\', \\'93707\\', \\'39286\\', \\'10245\\', \\'66230\\', \\'99574\\', \\'74563\\', \\'81937\\', \\'22153\\', \\'10659\\', \\'67579\\', \\'85147\\', \\'69686\\', \\'32017\\', \\'8199\\', \\'20027\\', \\'64266\\', \\'60707\\', \\'55426\\', \\'22027\\', \\'13823\\', \\'81404\\', \\'86757\\', \\'3754\\', \\'197\\', \\'45469\\', \\'68736\\', \\'17656\\', \\'92453\\', \\'6784\\', \\'35531\\', \\'33538\\', \\'27558\\', \\'35825\\', \\'13471\\', \\'16377\\', \\'66978\\', \\'44601\\', \\'69943\\', \\'84635\\', \\'7335\\', \\'67725\\', \\'88064\\', \\'78201\\', \\'64380\\', \\'66771\\', \\'62221\\', \\'60427\\', \\'32028\\', \\'37857\\', \\'5491\\', \\'2757\\', \\'10537\\', \\'2199\\', \\'60244\\', \\'14726\\', \\'29734\\', \\'34433\\', \\'81241\\', \\'39778\\', \\'65831\\', \\'56153\\', \\'81696\\', \\'25113\\', \\'17371\\', \\'79022\\', \\'3587\\', \\'60439\\', \\'96582\\', \\'37801\\', \\'82496\\', \\'68242\\', \\'19561\\', \\'53140\\', \\'17171\\', \\'13165\\', \\'58750\\', \\'80612\\', \\'19818\\', \\'16753\\', \\'70009\\', \\'75290\\', \\'48846\\', \\'89851\\', \\'25190\\', \\'35525\\', \\'84348\\', \\'65298\\', \\'23161\\', \\'60583\\', \\'89611\\', \\'18798\\', \\'85422\\', \\'60713\\', \\'17660\\', \\'41915\\', \\'65757\\', \\'4781\\', \\'48374\\', \\'10712\\', \\'40330\\', \\'2409\\', \\'41020\\', \\'28042\\', \\'51857\\', \\'81224\\', \\'93917\\', \\'90366\\', \\'58848\\', \\'8012\\', \\'92070\\', \\'75349\\', \\'80066\\', \\'83228\\', \\'55170\\', \\'78376\\', \\'94127\\', \\'29418\\', \\'58660\\', \\'74006\\', \\'63909\\', \\'59502\\', \\'63255\\', \\'32318\\', \\'28904\\', \\'26117\\', \\'88103\\', \\'50656\\', \\'58517\\', \\'16372\\', \\'43392\\', \\'77876\\', \\'65997\\', \\'63501\\', \\'45927\\', \\'17444\\', \\'84021\\', \\'54886\\', \\'57082\\', \\'47456\\', \\'73816\\', \\'66900\\', \\'82958\\', \\'49722\\', \\'95843\\', \\'23458\\', \\'4560\\', \\'67276\\', \\'59080\\', \\'81486\\', \\'2967\\', \\'26133\\', \\'87694\\', \\'74183\\', \\'22100\\', \\'45306\\', \\'33895\\', \\'26512\\', \\'71426\\', \\'54994\\', \\'47367\\', \\'10171\\', \\'45681\\', \\'36268\\', \\'3166\\', \\'2179\\', \\'64197\\', \\'90037\\', \\'4641\\', \\'96073\\', \\'72989\\', \\'55123\\', \\'48825\\', \\'2862\\', \\'66974\\', \\'30115\\', \\'41554\\', \\'26727\\', \\'54025\\', \\'69504\\', \\'38284\\', \\'7816\\', \\'36370\\', \\'75764\\', \\'69774\\', \\'43208\\', \\'43598\\', \\'39461\\', \\'21655\\', \\'12169\\', \\'77790\\', \\'44578\\', \\'70959\\', \\'13500\\', \\'40823\\', \\'52952\\', \\'88095\\', \\'82193\\', \\'66424\\', \\'79814\\', \\'25651\\', \\'58125\\', \\'42724\\', \\'11752\\', \\'64533\\', \\'34827\\', \\'72755\\', \\'96727\\', \\'82066\\', \\'60268\\', \\'55535\\', \\'4230\\', \\'73018\\', \\'69602\\', \\'16912\\', \\'66088\\', \\'21859\\', \\'38654\\', \\'38638\\', \\'51444\\', \\'37999\\', \\'18595\\', \\'15209\\', \\'21801\\', \\'21130\\', \\'53741\\', \\'54954\\', \\'91590\\', \\'83660\\', \\'74071\\', \\'82627\\', \\'4311\\', \\'45268\\', \\'94735\\', \\'65747\\', \\'72428\\', \\'22621\\', \\'70828\\', \\'64394\\', \\'647\\', \\'23570\\', \\'17677\\', \\'84377\\', \\'63993\\', \\'10268\\', \\'47426\\', \\'72750\\', \\'83772\\', \\'29090\\', \\'73284\\', \\'36683\\', \\'91143\\', \\'64546\\', \\'99836\\', \\'21999\\', \\'61793\\', \\'41557\\', \\'16714\\', \\'20586\\', \\'14251\\', \\'56633\\', \\'46146\\', \\'84730\\', \\'5445\\', \\'8367\\', \\'52621\\', \\'79252\\', \\'89737\\', \\'18431\\', \\'32134\\', \\'86975\\', \\'58939\\', \\'63385\\', \\'8504\\', \\'25998\\', \\'79549\\', \\'70558\\', \\'4870\\', \\'57604\\', \\'48374\\', \\'32388\\', \\'97871\\', \\'75590\\', \\'10919\\', \\'43825\\', \\'82858\\', \\'25807\\', \\'50366\\', \\'2841\\', \\'2716\\', \\'51315\\', \\'79719\\', \\'33159\\', \\'63382\\', \\'11327\\', \\'65184\\', \\'87243\\', \\'17850\\', \\'40149\\', \\'12171\\', \\'48486\\', \\'26380\\', \\'85432\\', \\'35427\\', \\'59256\\', \\'57601\\', \\'29529\\', \\'20553\\', \\'3006\\', \\'69997\\', \\'87919\\', \\'47626\\', \\'96026\\', \\'37445\\', \\'51735\\', \\'89296\\', \\'26702\\', \\'22837\\', \\'61279\\', \\'85193\\', \\'30624\\', \\'10676\\', \\'83075\\', \\'21477\\', \\'54708\\', \\'47485\\', \\'80297\\', \\'86204\\', \\'25192\\', \\'55197\\', \\'81177\\', \\'70551\\', \\'11003\\', \\'7001\\', \\'55017\\', \\'487\\', \\'40926\\', \\'99463\\', \\'79514\\', \\'69697\\', \\'52854\\', \\'88640\\', \\'44464\\', \\'66314\\', \\'48240\\', \\'49787\\', \\'81333\\', \\'14914\\', \\'12919\\', \\'51037\\', \\'88609\\', \\'25572\\', \\'61019\\', \\'85184\\', \\'12051\\', \\'61246\\', \\'52108\\', \\'98895\\', \\'24549\\', \\'86944\\', \\'73303\\', \\'9012\\', \\'25151\\', \\'97424\\', \\'43531\\', \\'44790\\', \\'63034\\', \\'86713\\', \\'76483\\', \\'17499\\', \\'86891\\', \\'3267\\', \\'45091\\', \\'39126\\', \\'94419\\', \\'35750\\', \\'35239\\', \\'49413\\', \\'62381\\', \\'92010\\', \\'7246\\', \\'26997\\', \\'47446\\', \\'26930\\', \\'22668\\', \\'43961\\', \\'51741\\', \\'63058\\', \\'41977\\', \\'62933\\', \\'9197\\', \\'94303\\', \\'29044\\', \\'53755\\', \\'22391\\', \\'85373\\', \\'66572\\', \\'74650\\', \\'7824\\', \\'49712\\', \\'40021\\', \\'99958\\', \\'60404\\', \\'37370\\', \\'89264\\', \\'52343\\', \\'90901\\', \\'44730\\', \\'4252\\', \\'5811\\', \\'22283\\', \\'25102\\', \\'86636\\', \\'75509\\', \\'47088\\', \\'62971\\', \\'85519\\', \\'7495\\', \\'16798\\', \\'25708\\', \\'59258\\', \\'89361\\', \\'43455\\', \\'86768\\', \\'29961\\', \\'4362\\', \\'60956\\', \\'81059\\', \\'87604\\', \\'46241\\', \\'98362\\', \\'21030\\', \\'76182\\', \\'83545\\', \\'59150\\', \\'99333\\', \\'68271\\', \\'32629\\', \\'3364\\', \\'96467\\', \\'40427\\', \\'307\\', \\'84267\\', \\'239\\', \\'11711\\', \\'40933\\', \\'24518\\', \\'33854\\', \\'60291\\', \\'94179\\', \\'5564\\', \\'33196\\', \\'73818\\', \\'22201\\', \\'97078\\', \\'69360\\', \\'94513\\', \\'42623\\', \\'6510\\', \\'67378\\', \\'79468\\', \\'10394\\', \\'96430\\', \\'87701\\', \\'2667\\', \\'64162\\', \\'93266\\', \\'48941\\', \\'55345\\', \\'56127\\', \\'22704\\', \\'8793\\', \\'57008\\', \\'36920\\', \\'80845\\', \\'81203\\', \\'98715\\', \\'84158\\', \\'49194\\', \\'72718\\', \\'52919\\', \\'4951\\', \\'8715\\', \\'82384\\', \\'8570\\', \\'26733\\', \\'62399\\', \\'27297\\', \\'79038\\', \\'57916\\', \\'46155\\', \\'82381\\', \\'1027\\', \\'20541\\', \\'40580\\', \\'44836\\', \\'17336\\', \\'55548\\', \\'87454\\', \\'63549\\', \\'61401\\', \\'88819\\', \\'23326\\', \\'37546\\', \\'49089\\', \\'50707\\', \\'23099\\', \\'20724\\', \\'67184\\', \\'3394\\', \\'95941\\', \\'76045\\', \\'20523\\', \\'30393\\', \\'14157\\', \\'69381\\', \\'94104\\', \\'15406\\', \\'46707\\', \\'36234\\', \\'9136\\', \\'96805\\', \\'4904\\', \\'20310\\', \\'77164\\', \\'15400\\', \\'87198\\', \\'48310\\', \\'59729\\', \\'35230\\', \\'61503\\', \\'42015\\', \\'86910\\', \\'23264\\', \\'23542\\', \\'49105\\', \\'58334\\', \\'52855\\', \\'78865\\', \\'73516\\', \\'43820\\', \\'96593\\', \\'33168\\', \\'26170\\', \\'88241\\', \\'4016\\', \\'79862\\', \\'39617\\', \\'95329\\', \\'57881\\', \\'71750\\', \\'89690\\', \\'22519\\', \\'59367\\', \\'19825\\', \\'12638\\', \\'36100\\', \\'14355\\', \\'79540\\', \\'8411\\', \\'94571\\', \\'80462\\', \\'11953\\', \\'55629\\', \\'14598\\', \\'81066\\', \\'48968\\', \\'74149\\', \\'36938\\', \\'4564\\', \\'59157\\', \\'75517\\', \\'14309\\', \\'64905\\', \\'59893\\', \\'62803\\', \\'6968\\', \\'33003\\', \\'40894\\', \\'48816\\', \\'77710\\', \\'16692\\', \\'19135\\', \\'98381\\', \\'49397\\', \\'24048\\', \\'17804\\', \\'26829\\', \\'24046\\', \\'44546\\', \\'28174\\', \\'2639\\', \\'27957\\', \\'38625\\', \\'85902\\', \\'9908\\', \\'77666\\', \\'14096\\', \\'89851\\', \\'23600\\', \\'20717\\', \\'32860\\', \\'44070\\', \\'67853\\', \\'85907\\', \\'23761\\', \\'789\\', \\'73370\\', \\'15649\\', \\'26472\\', \\'9174\\', \\'20081\\', \\'49415\\', \\'97463\\', \\'14565\\', \\'19834\\', \\'94738\\', \\'68045\\', \\'67542\\', \\'3552\\', \\'77093\\', \\'99071\\', \\'16832\\', \\'95177\\', \\'49571\\', \\'85821\\', \\'9368\\', \\'85170\\', \\'58449\\', \\'89633\\', \\'99302\\', \\'94158\\', \\'50274\\', \\'50223\\', \\'51128\\', \\'52847\\', \\'53598\\', \\'47826\\', \\'2883\\', \\'28192\\', \\'84324\\', \\'9530\\', \\'14385\\', \\'37292\\', \\'74795\\', \\'16821\\', \\'5010\\', \\'77101\\', \\'96596\\', \\'72384\\', \\'41399\\', \\'83046\\', \\'37927\\', \\'48213\\', \\'84574\\', \\'55438\\', \\'79315\\', \\'71005\\', \\'45190\\', \\'56133\\', \\'14016\\', \\'92180\\', \\'28365\\', \\'34307\\', \\'90665\\', \\'74758\\', \\'45080\\', \\'38017\\', \\'80599\\', \\'91174\\', \\'47907\\', \\'19299\\', \\'9707\\', \\'92260\\', \\'36784\\', \\'55855\\', \\'25939\\', \\'74472\\', \\'47402\\', \\'12352\\', \\'75591\\', \\'31459\\', \\'76711\\', \\'57940\\', \\'95535\\', \\'55231\\', \\'80645\\', \\'84613\\', \\'90280\\', \\'3500\\', \\'83695\\', \\'42992\\', \\'77226\\', \\'25326\\', \\'8093\\', \\'49838\\', \\'6457\\', \\'44814\\', \\'82819\\', \\'94986\\', \\'81818\\', \\'65186\\', \\'21378\\', \\'49711\\', \\'66248\\', \\'72391\\', \\'65826\\', \\'21284\\', \\'41399\\', \\'72858\\', \\'32223\\', \\'35915\\', \\'45221\\', \\'36871\\', \\'16193\\', \\'2522\\', \\'52963\\', \\'24506\\', \\'98239\\', \\'56752\\', \\'15192\\', \\'8451\\', \\'62802\\', \\'54777\\', \\'67983\\', \\'82177\\', \\'7303\\', \\'71445\\', \\'40559\\', \\'58655\\', \\'73468\\', \\'40491\\', \\'52864\\', \\'81558\\', \\'36789\\', \\'53134\\', \\'38801\\', \\'90600\\', \\'36385\\', \\'90996\\', \\'20526\\', \\'13627\\', \\'62253\\', \\'96989\\', \\'88864\\', \\'11928\\', \\'14681\\', \\'77082\\', \\'95659\\', \\'47182\\', \\'16085\\', \\'26894\\', \\'39758\\', \\'32803\\', \\'26458\\', \\'65779\\', \\'66110\\', \\'38888\\', \\'15490\\', \\'48120\\', \\'90238\\', \\'8736\\', \\'233\\', \\'76851\\', \\'86938\\', \\'8873\\', \\'95387\\', \\'33400\\', \\'50788\\', \\'13568\\', \\'43139\\', \\'29821\\', \\'70427\\', \\'21022\\', \\'93285\\', \\'57243\\', \\'51675\\', \\'77459\\', \\'33170\\', \\'81485\\', \\'85303\\', \\'44133\\', \\'203\\', \\'44175\\', \\'89151\\', \\'26705\\', \\'32990\\', \\'10885\\', \\'10208\\', \\'58477\\', \\'97729\\', \\'699\\', \\'40581\\', \\'8065\\', \\'95864\\', \\'89797\\', \\'47506\\', \\'19160\\', \\'85728\\', \\'58599\\', \\'96271\\', \\'75849\\', \\'30736\\', \\'18808\\', \\'25828\\', \\'52011\\', \\'66179\\', \\'70244\\', \\'81312\\', \\'19570\\', \\'14287\\', \\'61078\\', \\'81922\\', \\'63361\\', \\'80858\\', \\'306\\', \\'22156\\', \\'82923\\', \\'53176\\', \\'24864\\', \\'49193\\', \\'2961\\', \\'96536\\', \\'62449\\', \\'13213\\', \\'85347\\', \\'11442\\', \\'76615\\', \\'43037\\', \\'86122\\', \\'99676\\', \\'74309\\', \\'46017\\', \\'16175\\', \\'12685\\', \\'53550\\', \\'19080\\', \\'37283\\', \\'44921\\', \\'34991\\', \\'4433\\', \\'99561\\', \\'38215\\', \\'35662\\', \\'13892\\', \\'7814\\', \\'41718\\', \\'41231\\', \\'85589\\', \\'74048\\', \\'72169\\', \\'26946\\', \\'61732\\', \\'9135\\', \\'39009\\', \\'63534\\', \\'4114\\', \\'40417\\', \\'83412\\', \\'22562\\', \\'65546\\', \\'720\\', \\'90064\\', \\'73027\\', \\'50736\\', \\'71086\\', \\'12445\\', \\'3681\\', \\'65140\\', \\'56291\\', \\'47452\\', \\'48916\\', \\'65136\\', \\'53941\\', \\'15484\\', \\'21038\\', \\'47251\\', \\'78461\\', \\'31031\\', \\'4838\\', \\'87483\\', \\'732\\', \\'16111\\', \\'68263\\', \\'4811\\', \\'65979\\', \\'44283\\', \\'51659\\', \\'29997\\', \\'11280\\', \\'3880\\', \\'12399\\', \\'63450\\', \\'93862\\', \\'50981\\', \\'62790\\', \\'76784\\', \\'76696\\', \\'40906\\', \\'49261\\', \\'35863\\', \\'43747\\', \\'65954\\', \\'36125\\', \\'73713\\', \\'98678\\', \\'13409\\', \\'38773\\', \\'59417\\', \\'9763\\', \\'429\\', \\'66203\\', \\'7350\\', \\'32754\\', \\'36079\\', \\'72447\\', \\'63925\\', \\'12958\\', \\'65292\\', \\'80270\\', \\'78432\\', \\'50925\\', \\'74946\\', \\'7649\\', \\'13689\\', \\'68001\\', \\'52318\\', \\'5804\\', \\'51584\\', \\'63637\\', \\'85697\\', \\'50929\\', \\'25279\\', \\'20963\\', \\'83038\\', \\'31199\\', \\'64189\\', \\'17152\\', \\'20459\\', \\'66108\\', \\'66005\\', \\'53159\\', \\'53971\\', \\'32528\\', \\'77145\\', \\'52981\\', \\'88941\\', \\'68593\\', \\'86343\\', \\'97770\\', \\'25625\\', \\'17598\\', \\'55249\\', \\'89640\\', \\'94162\\', \\'65874\\', \\'36511\\', \\'21906\\', \\'70401\\', \\'30914\\', \\'24085\\', \\'42945\\', \\'55597\\', \\'78393\\', \\'98120\\', \\'38283\\', \\'44967\\', \\'76077\\', \\'45739\\', \\'92432\\', \\'11846\\', \\'59131\\', \\'26322\\', \\'82651\\', \\'94792\\', \\'37726\\', \\'23301\\', \\'11275\\', \\'98813\\', \\'34229\\', \\'65440\\', \\'51369\\', \\'55580\\', \\'35207\\', \\'84314\\', \\'35696\\', \\'50231\\', \\'9399\\', \\'18679\\', \\'27219\\', \\'22519\\', \\'26725\\', \\'63451\\', \\'79357\\', \\'55915\\', \\'77027\\', \\'30354\\', \\'45890\\', \\'10745\\', \\'60035\\', \\'7914\\', \\'43562\\', \\'12219\\', \\'30220\\', \\'29382\\', \\'72520\\', \\'87475\\', \\'83634\\', \\'15163\\', \\'32468\\', \\'72904\\', \\'18200\\', \\'84666\\', \\'43560\\', \\'58483\\', \\'64613\\', \\'52170\\', \\'55490\\', \\'45954\\', \\'99323\\', \\'26401\\', \\'61210\\', \\'10450\\', \\'70360\\', \\'42906\\', \\'32851\\', \\'70022\\', \\'49966\\', \\'62331\\', \\'84249\\', \\'98093\\', \\'62146\\', \\'88171\\', \\'73246\\', \\'48314\\', \\'45730\\', \\'56348\\', \\'59081\\', \\'16642\\', \\'57872\\', \\'81564\\', \\'32305\\', \\'4158\\', \\'47263\\',\\n    \\'97234\\', \\'74415\\', \\'36159\\', \\'30014\\', \\'22241\\', \\'77574\\', \\'27990\\', \\'67395\\', \\'81471\\', \\'18512\\', \\'47546\\', \\'23386\\', \\'6156\\', \\'72893\\', \\'15332\\', \\'57667\\', \\'92657\\', \\'35148\\', \\'45316\\', \\'90482\\', \\'93819\\', \\'38065\\', \\'74899\\', \\'10850\\', \\'63285\\', \\'50968\\', \\'88081\\', \\'42486\\', \\'56089\\', \\'43288\\', \\'11239\\', \\'55127\\', \\'26637\\', \\'85974\\', \\'93879\\', \\'78540\\', \\'42451\\', \\'35082\\', \\'93809\\', \\'63793\\', \\'51039\\', \\'13518\\', \\'20239\\', \\'26933\\', \\'19322\\', \\'26648\\', \\'83711\\', \\'93163\\', \\'95951\\', \\'77389\\', \\'43771\\', \\'36873\\', \\'66976\\', \\'38082\\', \\'59476\\', \\'53984\\', \\'6951\\', \\'42615\\', \\'80733\\', \\'1120\\', \\'80595\\', \\'10500\\', \\'67420\\', \\'38885\\', \\'8892\\', \\'36205\\', \\'17170\\', \\'46564\\', \\'66415\\', \\'36372\\', \\'68305\\', \\'41470\\', \\'38699\\', \\'60900\\', \\'23468\\', \\'6927\\', \\'498\\', \\'55896\\', \\'4005\\', \\'50692\\', \\'67984\\', \\'91012\\', \\'97314\\', \\'94177\\', \\'57676\\', \\'36734\\', \\'32671\\', \\'44733\\', \\'34981\\', \\'52186\\', \\'15599\\', \\'75642\\', \\'82652\\', \\'22773\\', \\'97106\\', \\'20691\\', \\'38085\\', \\'50368\\', \\'74916\\', \\'76281\\', \\'54002\\', \\'85721\\', \\'99186\\', \\'78438\\', \\'27865\\', \\'34827\\', \\'61315\\', \\'8817\\', \\'93105\\', \\'71539\\', \\'35484\\', \\'58033\\', \\'17540\\', \\'32806\\', \\'87253\\', \\'15780\\', \\'80123\\', \\'34241\\', \\'70383\\', \\'95515\\', \\'27998\\', \\'47682\\', \\'32682\\', \\'93658\\', \\'15116\\', \\'93030\\', \\'71866\\', \\'35516\\', \\'70161\\', \\'7556\\', \\'64122\\', \\'54622\\', \\'14312\\', \\'64375\\', \\'28863\\', \\'27886\\', \\'34040\\', \\'10010\\', \\'1460\\', \\'58765\\', \\'71496\\', \\'37785\\', \\'5616\\', \\'84850\\', \\'2194\\', \\'55514\\', \\'33636\\', \\'7138\\', \\'36937\\', \\'44763\\', \\'61308\\', \\'63574\\', \\'8069\\', \\'24109\\', \\'17821\\', \\'82144\\', \\'53309\\', \\'26183\\', \\'84238\\', \\'36684\\', \\'45285\\', \\'41353\\', \\'29380\\', \\'93726\\', \\'59560\\', \\'96422\\', \\'34218\\', \\'66851\\', \\'49001\\', \\'4855\\', \\'46849\\', \\'19877\\', \\'76540\\', \\'61415\\', \\'32053\\', \\'38801\\', \\'74623\\', \\'92808\\', \\'6660\\', \\'85031\\', \\'97706\\', \\'34417\\', \\'51085\\', \\'72292\\', \\'30903\\', \\'45126\\', \\'69978\\', \\'11572\\', \\'68622\\', \\'64123\\', \\'59344\\', \\'67118\\', \\'46014\\', \\'59248\\', \\'69321\\', \\'31897\\', \\'72232\\', \\'48016\\', \\'36455\\', \\'87125\\', \\'85356\\', \\'96888\\', \\'28316\\', \\'23149\\', \\'34823\\', \\'29944\\', \\'18522\\', \\'14045\\', \\'973\\', \\'49472\\', \\'89165\\', \\'84112\\', \\'94087\\', \\'47881\\', \\'87600\\', \\'86330\\', \\'13384\\', \\'4528\\', \\'94572\\', \\'30634\\', \\'86728\\', \\'48525\\', \\'53243\\', \\'35911\\', \\'96382\\', \\'22525\\', \\'89914\\', \\'52213\\', \\'23007\\', \\'54827\\', \\'35721\\', \\'49121\\', \\'40203\\', \\'99040\\', \\'55039\\', \\'94543\\', \\'85440\\', \\'75098\\', \\'12566\\', \\'15579\\', \\'40603\\', \\'51321\\', \\'28805\\', \\'46550\\', \\'42499\\', \\'69794\\', \\'51322\\', \\'37286\\', \\'72035\\', \\'15494\\', \\'39787\\', \\'97639\\', \\'24343\\', \\'36299\\', \\'72759\\', \\'96672\\', \\'58801\\', \\'57467\\', \\'97185\\', \\'19493\\', \\'4431\\', \\'33940\\', \\'950\\', \\'46713\\', \\'12503\\', \\'35185\\', \\'31106\\', \\'93821\\', \\'1086\\', \\'31767\\', \\'17484\\', \\'52751\\', \\'70411\\', \\'12196\\', \\'502\\', \\'45391\\', \\'70720\\', \\'27507\\', \\'1282\\', \\'18633\\', \\'45031\\', \\'10475\\', \\'83570\\', \\'29539\\', \\'16753\\', \\'63494\\', \\'17010\\', \\'76069\\', \\'38913\\', \\'53948\\', \\'34175\\', \\'36761\\', \\'37575\\', \\'73655\\', \\'76272\\', \\'1069\\', \\'74456\\', \\'10440\\', \\'65502\\', \\'95286\\', \\'39384\\', \\'83461\\', \\'76477\\', \\'4167\\', \\'46503\\', \\'22373\\', \\'24523\\', \\'46024\\', \\'28959\\', \\'83219\\', \\'27807\\', \\'80905\\', \\'88626\\', \\'70234\\', \\'86888\\', \\'60954\\', \\'95397\\', \\'47973\\', \\'47944\\', \\'30154\\', \\'42698\\', \\'15144\\', \\'53223\\', \\'21123\\', \\'19281\\', \\'62933\\', \\'24952\\', \\'84744\\', \\'58456\\', \\'38446\\', \\'26768\\', \\'40797\\', \\'107\\', \\'52101\\', \\'8348\\', \\'8531\\', \\'17772\\', \\'97826\\', \\'34009\\', \\'15825\\', \\'48977\\', \\'54939\\', \\'78886\\', \\'31784\\', \\'42842\\', \\'22773\\', \\'9095\\', \\'25113\\', \\'65362\\', \\'83953\\', \\'55921\\', \\'92797\\', \\'26776\\', \\'59312\\', \\'56428\\', \\'52218\\', \\'50141\\', \\'52535\\', \\'22564\\', \\'50708\\', \\'50384\\', \\'16261\\', \\'529\\', \\'31406\\', \\'46452\\', \\'30954\\', \\'5385\\', \\'60190\\', \\'38790\\', \\'65440\\', \\'11891\\', \\'2196\\', \\'83560\\', \\'68884\\', \\'72400\\', \\'47795\\', \\'7501\\', \\'8916\\', \\'63267\\', \\'35567\\', \\'39889\\', \\'61818\\', \\'94343\\', \\'46612\\', \\'75029\\', \\'46988\\', \\'12411\\', \\'6123\\', \\'60904\\', \\'43704\\', \\'31143\\', \\'72544\\', \\'45919\\', \\'67953\\', \\'97776\\', \\'49517\\', \\'60476\\', \\'54437\\', \\'46261\\', \\'99778\\', \\'18541\\', \\'77626\\', \\'12537\\', \\'68459\\', \\'12688\\', \\'36284\\', \\'54901\\', \\'89375\\', \\'10538\\', \\'38415\\', \\'33160\\', \\'78777\\', \\'33532\\', \\'82538\\', \\'21329\\', \\'34359\\', \\'29544\\', \\'57035\\', \\'61945\\', \\'49098\\', \\'32484\\', \\'68236\\', \\'11088\\', \\'57533\\', \\'11044\\', \\'96786\\', \\'58861\\', \\'51390\\', \\'9582\\', \\'24229\\', \\'32604\\', \\'66195\\', \\'7311\\', \\'46441\\', \\'73383\\', \\'58033\\', \\'41866\\', \\'19293\\', \\'73085\\', \\'50627\\', \\'19818\\', \\'40498\\', \\'56436\\', \\'99865\\', \\'55516\\', \\'38917\\', \\'89889\\', \\'49571\\', \\'99408\\', \\'20144\\', \\'76122\\', \\'49593\\', \\'47906\\', \\'94763\\', \\'26488\\', \\'86343\\', \\'98334\\', \\'70112\\', \\'85244\\', \\'45622\\', \\'47828\\', \\'35306\\', \\'86838\\', \\'57186\\', \\'69907\\', \\'90594\\', \\'68206\\', \\'25118\\', \\'75445\\', \\'71715\\', \\'15800\\', \\'67558\\', \\'17783\\', \\'56525\\', \\'22970\\', \\'17354\\', \\'17139\\', \\'76827\\', \\'50325\\', \\'95314\\', \\'65432\\', \\'44045\\', \\'57928\\', \\'66247\\', \\'10673\\', \\'69744\\', \\'99485\\', \\'57467\\', \\'66889\\', \\'55246\\', \\'15095\\', \\'23540\\', \\'32890\\', \\'22959\\', \\'59472\\', \\'62237\\', \\'6956\\', \\'34669\\', \\'16547\\', \\'54868\\', \\'22598\\', \\'65120\\', \\'48525\\', \\'72750\\', \\'70559\\', \\'75706\\', \\'61831\\', \\'14032\\', \\'36146\\', \\'90211\\', \\'36082\\', \\'79712\\', \\'43018\\', \\'53903\\', \\'82490\\', \\'45698\\', \\'54202\\', \\'83079\\', \\'4867\\', \\'18044\\', \\'55144\\', \\'49189\\', \\'33278\\', \\'48387\\', \\'68822\\', \\'73057\\', \\'58118\\', \\'89796\\', \\'47318\\', \\'98383\\', \\'58759\\', \\'172\\', \\'56627\\', \\'79861\\', \\'86734\\', \\'25758\\', \\'80779\\', \\'55741\\', \\'40924\\', \\'24568\\', \\'23090\\', \\'62934\\', \\'94264\\', \\'58331\\', \\'18747\\', \\'15802\\', \\'81585\\', \\'92542\\', \\'97426\\', \\'18205\\', \\'11820\\', \\'62702\\', \\'16439\\', \\'18613\\', \\'45918\\', \\'47584\\', \\'98743\\', \\'39808\\', \\'33357\\', \\'16033\\', \\'87378\\', \\'87036\\', \\'88920\\', \\'99300\\', \\'89343\\', \\'7384\\', \\'36867\\', \\'36712\\', \\'96947\\', \\'92141\\', \\'85779\\', \\'81735\\', \\'86121\\', \\'19511\\', \\'70519\\', \\'62537\\', \\'10398\\', \\'99308\\', \\'63922\\', \\'45419\\', \\'17708\\', \\'2093\\', \\'85127\\', \\'55753\\', \\'97149\\', \\'82877\\', \\'64642\\', \\'30417\\', \\'151\\', \\'75464\\', \\'75992\\', \\'99440\\', \\'58040\\', \\'32083\\', \\'90604\\', \\'47830\\', \\'40087\\', \\'78899\\', \\'43638\\', \\'59066\\', \\'46579\\', \\'44828\\', \\'35130\\', \\'10670\\', \\'62051\\', \\'94127\\', \\'32024\\', \\'85455\\', \\'80408\\', \\'18295\\', \\'8106\\', \\'89380\\', \\'90499\\', \\'3196\\', \\'3826\\', \\'63462\\', \\'64317\\', \\'55570\\', \\'77162\\', \\'48564\\', \\'59842\\', \\'80241\\', \\'76221\\', \\'57327\\', \\'48049\\', \\'74336\\', \\'43168\\', \\'19559\\', \\'32059\\', \\'99226\\', \\'46384\\', \\'48111\\', \\'56013\\', \\'58953\\', \\'68426\\', \\'22\\', \\'72641\\', \\'16207\\', \\'595\\', \\'71706\\', \\'61213\\', \\'65921\\', \\'67517\\', \\'92618\\', \\'57660\\', \\'76414\\', \\'60998\\', \\'1829\\', \\'90176\\', \\'62932\\', \\'15052\\', \\'94997\\', \\'41\\', \\'58848\\', \\'56411\\', \\'18129\\', \\'86542\\', \\'16330\\', \\'2803\\', \\'5651\\', \\'47351\\', \\'57866\\', \\'3560\\', \\'97530\\', \\'8338\\', \\'59434\\', \\'50183\\', \\'39076\\', \\'2516\\', \\'16293\\', \\'6559\\', \\'31189\\', \\'83713\\', \\'58214\\', \\'32016\\', \\'56581\\', \\'46226\\', \\'74599\\', \\'33513\\', \\'51530\\', \\'20163\\', \\'56512\\', \\'1694\\', \\'8165\\', \\'17370\\', \\'2510\\', \\'46015\\', \\'80417\\', \\'77195\\', \\'69062\\', \\'717\\', \\'33699\\', \\'37638\\', \\'82238\\', \\'5436\\', \\'67991\\', \\'98554\\', \\'26668\\', \\'19565\\', \\'26500\\', \\'30133\\', \\'54349\\', \\'36668\\', \\'56773\\', \\'55187\\', \\'25458\\', \\'54126\\', \\'11833\\', \\'32007\\', \\'38881\\', \\'20038\\', \\'42186\\', \\'67850\\', \\'12001\\', \\'96089\\', \\'63397\\', \\'75035\\', \\'16744\\', \\'45208\\', \\'84186\\', \\'82044\\', \\'34818\\', \\'55858\\', \\'1623\\', \\'41600\\', \\'34753\\', \\'92242\\', \\'16416\\', \\'49800\\', \\'45309\\', \\'56520\\', \\'38893\\', \\'42865\\', \\'37476\\', \\'78860\\', \\'32503\\', \\'18086\\', \\'55004\\', \\'65795\\', \\'82926\\', \\'75725\\', \\'52917\\', \\'75463\\', \\'82202\\', \\'35158\\', \\'67065\\', \\'38454\\', \\'90106\\', \\'79681\\', \\'57317\\', \\'68357\\', \\'66487\\', \\'99640\\', \\'13182\\', \\'68684\\', \\'96739\\', \\'89887\\', \\'54307\\', \\'98357\\', \\'4597\\', \\'47645\\', \\'38560\\', \\'17334\\', \\'46291\\', \\'91096\\', \\'22675\\', \\'12995\\', \\'35767\\', \\'76173\\', \\'54754\\', \\'75206\\', \\'13345\\', \\'78860\\', \\'19929\\', \\'12740\\', \\'13007\\', \\'69737\\', \\'52454\\', \\'6784\\', \\'77198\\', \\'59565\\', \\'44548\\', \\'22924\\', \\'38773\\', \\'9522\\', \\'59392\\', \\'45244\\', \\'64754\\', \\'39640\\', \\'75795\\', \\'22725\\', \\'78314\\', \\'24738\\', \\'83167\\', \\'31049\\', \\'92122\\', \\'62117\\', \\'47314\\', \\'34032\\', \\'76951\\', \\'63164\\', \\'22515\\', \\'46057\\', \\'81625\\', \\'72164\\', \\'60013\\', \\'26171\\', \\'55608\\', \\'50486\\', \\'51422\\', \\'18277\\', \\'13682\\', \\'70130\\', \\'49689\\', \\'32278\\', \\'25430\\', \\'84394\\', \\'57371\\', \\'93398\\', \\'14139\\', \\'461\\', \\'37302\\', \\'25705\\', \\'25642\\', \\'70311\\', \\'81778\\', \\'66948\\', \\'51187\\', \\'99649\\', \\'44509\\', \\'12753\\', \\'39827\\', \\'57393\\', \\'40288\\', \\'26496\\', \\'1500\\', \\'32979\\', \\'62062\\', \\'5170\\', \\'25273\\', \\'26343\\', \\'21058\\', \\'66749\\', \\'52257\\', \\'26335\\', \\'4347\\', \\'82427\\', \\'51381\\', \\'66857\\', \\'58330\\', \\'15097\\', \\'23881\\', \\'93865\\', \\'97929\\', \\'11233\\', \\'67910\\', \\'22731\\', \\'70911\\', \\'93941\\', \\'46169\\', \\'31920\\', \\'16027\\', \\'1635\\', \\'16338\\', \\'49712\\', \\'29345\\', \\'26316\\', \\'15221\\', \\'54771\\', \\'34715\\', \\'35399\\', \\'80287\\', \\'90881\\', \\'33758\\', \\'46569\\', \\'52450\\', \\'40564\\', \\'34885\\', \\'5679\\', \\'53232\\', \\'85632\\', \\'87510\\', \\'4008\\', \\'87014\\', \\'49611\\', \\'94569\\', \\'96432\\', \\'57394\\', \\'66064\\', \\'34144\\', \\'67269\\', \\'83546\\', \\'5901\\', \\'25386\\', \\'57588\\', \\'55055\\', \\'6940\\', \\'8414\\', \\'31432\\', \\'75407\\', \\'86922\\', \\'33925\\', \\'24600\\', \\'48261\\', \\'94439\\', \\'34234\\', \\'69028\\', \\'37145\\', \\'32386\\', \\'68275\\', \\'13237\\', \\'3521\\', \\'57395\\', \\'55029\\', \\'16426\\', \\'87797\\', \\'18559\\', \\'72744\\', \\'1155\\', \\'30384\\', \\'19799\\', \\'50001\\', \\'85831\\', \\'19583\\', \\'83898\\', \\'13465\\', \\'58160\\', \\'51160\\', \\'89216\\', \\'90725\\', \\'37151\\', \\'32241\\', \\'6319\\', \\'95146\\', \\'10376\\', \\'55137\\', \\'64094\\', \\'14990\\', \\'19747\\', \\'85852\\', \\'50692\\', \\'63214\\', \\'53123\\', \\'97058\\', \\'60203\\', \\'29272\\', \\'14439\\', \\'69712\\', \\'13023\\', \\'75808\\', \\'67150\\', \\'76276\\', \\'54521\\', \\'46621\\', \\'78807\\', \\'89302\\', \\'30273\\', \\'85103\\', \\'63180\\', \\'75468\\', \\'98474\\', \\'37749\\', \\'66275\\', \\'61712\\', \\'39381\\', \\'2740\\', \\'83025\\', \\'18083\\', \\'42030\\', \\'3391\\', \\'56204\\', \\'3960\\', \\'34780\\', \\'22476\\', \\'50074\\', \\'79854\\', \\'89447\\', \\'3695\\', \\'2986\\', \\'85090\\', \\'71529\\', \\'77995\\', \\'51572\\', \\'60278\\', \\'69314\\', \\'70777\\', \\'46754\\', \\'22085\\', \\'94517\\', \\'98052\\', \\'5700\\', \\'43157\\', \\'12345\\', \\'34663\\', \\'40350\\', \\'5739\\', \\'84384\\', \\'8354\\', \\'81566\\', \\'75500\\', \\'88934\\', \\'67062\\', \\'52877\\', \\'30428\\', \\'95593\\', \\'13288\\', \\'51836\\', \\'25264\\', \\'19278\\', \\'81290\\', \\'47555\\', \\'7606\\', \\'46694\\', \\'29735\\', \\'25723\\', \\'81597\\', \\'26221\\', \\'24545\\', \\'98576\\', \\'63395\\', \\'36061\\', \\'58752\\', \\'8486\\', \\'97817\\', \\'27235\\', \\'18579\\', \\'2387\\', \\'88017\\', \\'42855\\', \\'5111\\', \\'49094\\', \\'28448\\', \\'82227\\', \\'63436\\', \\'89135\\', \\'86591\\', \\'2922\\', \\'72163\\', \\'83000\\', \\'14378\\', \\'81829\\', \\'5610\\', \\'93513\\', \\'78135\\', \\'55292\\', \\'80776\\', \\'21212\\', \\'40604\\', \\'44442\\', \\'50505\\', \\'22750\\', \\'47985\\', \\'19367\\', \\'63494\\', \\'4363\\', \\'64500\\', \\'79444\\', \\'36504\\', \\'43418\\', \\'72523\\', \\'85981\\', \\'13740\\', \\'302\\', \\'76267\\', \\'14962\\', \\'79643\\', \\'26144\\', \\'27125\\', \\'13364\\', \\'82935\\', \\'8936\\', \\'8340\\', \\'38025\\', \\'80742\\', \\'42829\\', \\'95357\\', \\'11131\\', \\'6806\\', \\'10497\\', \\'70527\\', \\'3004\\', \\'54217\\', \\'51051\\', \\'34722\\', \\'57348\\', \\'50489\\', \\'76514\\', \\'76546\\', \\'29498\\', \\'40587\\', \\'52697\\', \\'37808\\', \\'32509\\', \\'68927\\', \\'68051\\', \\'53328\\', \\'41926\\', \\'9344\\', \\'67795\\', \\'98626\\', \\'44058\\', \\'46817\\', \\'95773\\', \\'57539\\', \\'13352\\', \\'96292\\', \\'72647\\', \\'47111\\', \\'48595\\', \\'82684\\', \\'43566\\', \\'93381\\', \\'3081\\', \\'27653\\', \\'25045\\', \\'34753\\', \\'80870\\', \\'92013\\', \\'21935\\', \\'89454\\', \\'14127\\', \\'73278\\', \\'87015\\',\\n    \\'65232\\', \\'97216\\', \\'26840\\', \\'21272\\', \\'8226\\', \\'42347\\', \\'44358\\', \\'26715\\', \\'7860\\', \\'31989\\', \\'14091\\', \\'15648\\', \\'85801\\', \\'20463\\', \\'85221\\', \\'77969\\', \\'87196\\', \\'28563\\', \\'69663\\', \\'55169\\', \\'11372\\', \\'38915\\', \\'74678\\', \\'1183\\', \\'14845\\', \\'85696\\', \\'54995\\', \\'62342\\', \\'83227\\', \\'73536\\', \\'64251\\', \\'46556\\', \\'78421\\', \\'89058\\', \\'41036\\', \\'79746\\', \\'42148\\', \\'77720\\', \\'33923\\', \\'24979\\', \\'98428\\', \\'80202\\', \\'36845\\', \\'20584\\', \\'13506\\', \\'97375\\', \\'48434\\', \\'14863\\', \\'29237\\', \\'99014\\', \\'20650\\', \\'48496\\', \\'61825\\', \\'89100\\', \\'51501\\', \\'22632\\', \\'89030\\', \\'22901\\', \\'54072\\', \\'68093\\', \\'98140\\', \\'1631\\', \\'43266\\', \\'34532\\', \\'35780\\', \\'17763\\', \\'41731\\', \\'19580\\', \\'72266\\', \\'66530\\', \\'55650\\', \\'51506\\', \\'92256\\', \\'5332\\', \\'85143\\', \\'65002\\', \\'30530\\', \\'21358\\', \\'88420\\', \\'81349\\', \\'94086\\', \\'68143\\', \\'95343\\', \\'30490\\', \\'61605\\', \\'40296\\', \\'61665\\', \\'21032\\', \\'498\\', \\'67165\\', \\'3151\\', \\'94788\\', \\'36502\\', \\'77434\\', \\'88776\\', \\'67565\\', \\'4404\\', \\'51177\\', \\'49030\\', \\'88502\\', \\'92552\\', \\'31170\\', \\'92051\\', \\'79960\\', \\'43784\\', \\'17864\\', \\'54179\\', \\'91590\\', \\'39153\\', \\'75017\\', \\'11161\\', \\'31100\\', \\'27964\\', \\'30263\\', \\'54908\\', \\'57991\\', \\'89272\\', \\'14642\\', \\'40576\\', \\'20224\\', \\'48887\\', \\'93479\\', \\'87862\\', \\'19858\\', \\'78238\\', \\'4113\\', \\'32369\\', \\'70072\\', \\'82752\\', \\'85122\\', \\'72450\\', \\'53113\\', \\'53806\\', \\'45347\\', \\'55032\\', \\'77242\\', \\'70401\\', \\'83685\\', \\'41229\\', \\'47489\\', \\'36964\\', \\'40556\\', \\'2619\\', \\'64080\\', \\'7354\\', \\'10159\\', \\'74827\\', \\'11846\\', \\'64587\\', \\'88667\\', \\'20940\\', \\'93594\\', \\'43669\\', \\'38592\\', \\'20211\\', \\'96055\\', \\'65995\\', \\'89957\\', \\'18941\\', \\'82750\\', \\'90753\\', \\'49989\\', \\'63331\\', \\'52911\\', \\'1675\\', \\'98447\\', \\'35516\\', \\'28539\\', \\'91592\\', \\'80615\\', \\'68066\\', \\'63922\\', \\'52509\\', \\'26025\\', \\'14634\\', \\'69439\\', \\'19820\\', \\'89983\\', \\'38306\\', \\'84048\\', \\'66264\\', \\'26855\\', \\'3634\\', \\'92094\\', \\'61088\\', \\'28293\\', \\'11428\\', \\'68748\\', \\'10665\\', \\'27114\\', \\'20151\\', \\'65883\\', \\'86423\\', \\'77069\\', \\'74997\\', \\'147\\', \\'41427\\', \\'26124\\', \\'22163\\', \\'82452\\', \\'61186\\', \\'89370\\', \\'58583\\', \\'2692\\', \\'54969\\', \\'84679\\', \\'26237\\', \\'46229\\', \\'16041\\', \\'28473\\', \\'38684\\', \\'43587\\', \\'37886\\', \\'68790\\', \\'92030\\', \\'85066\\', \\'13673\\', \\'30280\\', \\'91844\\', \\'43115\\', \\'10005\\', \\'1481\\', \\'84393\\', \\'10008\\', \\'60291\\', \\'90687\\', \\'99338\\', \\'95570\\', \\'39916\\', \\'68643\\', \\'41309\\', \\'24724\\', \\'57188\\', \\'75473\\', \\'21647\\', \\'50206\\', \\'6820\\', \\'73756\\', \\'51102\\', \\'76169\\', \\'99840\\', \\'32863\\', \\'17306\\', \\'43063\\', \\'90483\\', \\'15894\\', \\'59042\\', \\'53797\\', \\'93961\\', \\'12248\\', \\'12125\\', \\'39393\\', \\'17056\\', \\'11576\\', \\'6145\\', \\'43960\\', \\'74245\\', \\'86805\\', \\'95665\\', \\'58855\\', \\'50039\\', \\'14867\\', \\'85076\\', \\'3939\\', \\'55501\\', \\'18184\\', \\'62019\\', \\'16312\\', \\'37518\\', \\'18544\\', \\'67431\\', \\'68250\\', \\'70766\\', \\'74635\\', \\'41835\\', \\'74538\\', \\'77822\\', \\'47918\\', \\'90863\\', \\'17526\\', \\'78930\\', \\'47473\\', \\'67945\\', \\'70385\\', \\'19404\\', \\'45030\\', \\'13476\\', \\'46186\\', \\'28191\\', \\'22019\\', \\'18700\\', \\'90915\\', \\'41408\\', \\'63333\\', \\'52902\\', \\'87336\\', \\'72833\\', \\'47707\\', \\'46692\\', \\'47873\\', \\'82012\\', \\'22597\\', \\'46379\\', \\'69109\\', \\'72108\\', \\'47439\\', \\'51130\\', \\'41894\\', \\'29827\\', \\'88403\\', \\'75040\\', \\'37504\\', \\'69925\\', \\'19034\\', \\'57998\\', \\'46633\\', \\'1021\\', \\'48358\\', \\'55923\\', \\'3536\\', \\'26350\\', \\'36696\\', \\'29658\\', \\'25247\\', \\'65614\\', \\'19042\\', \\'34463\\', \\'85938\\', \\'26155\\', \\'49801\\', \\'74604\\', \\'17581\\', \\'91632\\', \\'12935\\', \\'97966\\', \\'14947\\', \\'71196\\', \\'32270\\', \\'51915\\', \\'41692\\', \\'83274\\', \\'6608\\', \\'37190\\', \\'35363\\', \\'85313\\', \\'97545\\', \\'5696\\', \\'23700\\', \\'39334\\', \\'38434\\', \\'20192\\', \\'27349\\', \\'71340\\', \\'19732\\', \\'96142\\', \\'17152\\', \\'32995\\', \\'34829\\', \\'71157\\', \\'36376\\', \\'11522\\', \\'26646\\', \\'19239\\', \\'34033\\', \\'4200\\', \\'39023\\', \\'64291\\', \\'7931\\', \\'42807\\', \\'2800\\', \\'75490\\', \\'4515\\', \\'84571\\', \\'59557\\', \\'13421\\', \\'69465\\', \\'69121\\', \\'82358\\', \\'18134\\', \\'18536\\', \\'74294\\', \\'24013\\', \\'43777\\', \\'94192\\', \\'77031\\', \\'33341\\', \\'98070\\', \\'27534\\', \\'34419\\', \\'40107\\', \\'17826\\', \\'48196\\', \\'82843\\', \\'37592\\', \\'40484\\', \\'49019\\', \\'59822\\', \\'26118\\', \\'89788\\', \\'5990\\', \\'99595\\', \\'35178\\', \\'49473\\', \\'54699\\', \\'81618\\', \\'23497\\', \\'87025\\', \\'29421\\', \\'1685\\', \\'31406\\', \\'54115\\', \\'25193\\', \\'44525\\', \\'44886\\', \\'4885\\', \\'74482\\', \\'63280\\', \\'57532\\', \\'29773\\', \\'83104\\', \\'5354\\', \\'35313\\', \\'12558\\', \\'16165\\', \\'52712\\', \\'82282\\', \\'73541\\', \\'97334\\', \\'7283\\', \\'29405\\', \\'87694\\', \\'64717\\', \\'98840\\', \\'2868\\', \\'17727\\', \\'61847\\', \\'32417\\', \\'91009\\', \\'12117\\', \\'35077\\', \\'36279\\', \\'87552\\', \\'12441\\', \\'70576\\', \\'505\\', \\'57332\\', \\'56191\\', \\'33846\\', \\'78645\\', \\'58506\\', \\'48692\\', \\'27712\\', \\'86722\\', \\'46677\\', \\'81512\\', \\'14807\\', \\'30337\\', \\'7863\\', \\'457\\', \\'71893\\', \\'32256\\', \\'21897\\', \\'95811\\', \\'73552\\', \\'24929\\', \\'4893\\', \\'49448\\', \\'33836\\', \\'24781\\', \\'43236\\', \\'30853\\', \\'81985\\', \\'60625\\', \\'20087\\', \\'30674\\', \\'39280\\', \\'10779\\', \\'97785\\', \\'11298\\', \\'65057\\', \\'17589\\', \\'44085\\', \\'10126\\', \\'72351\\', \\'4165\\', \\'30539\\', \\'97124\\', \\'20545\\', \\'50087\\', \\'13490\\', \\'4055\\', \\'62365\\', \\'24046\\', \\'63110\\', \\'99045\\', \\'47122\\', \\'74389\\', \\'29843\\', \\'89082\\', \\'71686\\', \\'40321\\', \\'15789\\', \\'63062\\', \\'23403\\', \\'27718\\', \\'72550\\', \\'36098\\', \\'47309\\', \\'60568\\', \\'22266\\', \\'20542\\', \\'59018\\', \\'76386\\', \\'89381\\', \\'9164\\', \\'42093\\', \\'19931\\', \\'90426\\', \\'73695\\', \\'26948\\', \\'17363\\', \\'15727\\', \\'75439\\', \\'45425\\', \\'42518\\', \\'32966\\', \\'80703\\', \\'4659\\', \\'74566\\', \\'22464\\', \\'49383\\', \\'53167\\', \\'80720\\', \\'45464\\', \\'179\\', \\'29789\\', \\'19444\\', \\'97663\\', \\'6466\\', \\'51290\\', \\'56374\\', \\'17869\\', \\'97520\\', \\'45148\\', \\'92149\\', \\'54757\\', \\'94455\\', \\'80125\\', \\'98584\\', \\'70174\\', \\'77708\\', \\'59260\\', \\'50275\\', \\'49211\\', \\'60730\\', \\'29875\\', \\'90935\\', \\'29676\\', \\'95390\\', \\'18263\\', \\'73189\\', \\'41364\\', \\'39707\\', \\'75110\\', \\'59156\\', \\'11770\\', \\'38655\\', \\'55173\\', \\'62547\\', \\'16328\\', \\'70585\\', \\'81958\\', \\'61191\\', \\'90906\\', \\'45978\\', \\'59134\\', \\'24609\\', \\'32956\\', \\'30518\\', \\'27341\\', \\'84512\\', \\'24987\\', \\'65295\\', \\'75210\\', \\'97931\\', \\'56717\\', \\'6751\\', \\'83338\\', \\'82808\\', \\'96570\\', \\'27038\\', \\'93274\\', \\'399\\', \\'9330\\', \\'54319\\', \\'24848\\', \\'39269\\', \\'92692\\', \\'50625\\', \\'52306\\', \\'93262\\', \\'48756\\', \\'66694\\', \\'50517\\', \\'41763\\', \\'42231\\', \\'8589\\', \\'41923\\', \\'87839\\', \\'9579\\', \\'5104\\', \\'41634\\', \\'63030\\', \\'15100\\', \\'59593\\', \\'38288\\', \\'88852\\', \\'81957\\', \\'84267\\', \\'56380\\', \\'89329\\', \\'74372\\', \\'16026\\', \\'15795\\', \\'29456\\', \\'93173\\', \\'76367\\', \\'37598\\', \\'68153\\', \\'72405\\', \\'55181\\', \\'77543\\', \\'30730\\', \\'27564\\', \\'98764\\', \\'48711\\', \\'22180\\', \\'51352\\', \\'80150\\', \\'50091\\', \\'19481\\', \\'97962\\', \\'74879\\', \\'75369\\', \\'84410\\', \\'54712\\', \\'68399\\', \\'60910\\', \\'57922\\', \\'8896\\', \\'94118\\', \\'5276\\', \\'54049\\', \\'11614\\', \\'98854\\', \\'65979\\', \\'75156\\', \\'39456\\', \\'30226\\', \\'27357\\', \\'71087\\', \\'30814\\', \\'6416\\', \\'56480\\', \\'70259\\', \\'56525\\', \\'69945\\', \\'63874\\', \\'87262\\', \\'97398\\', \\'77972\\', \\'76745\\', \\'97191\\', \\'26739\\', \\'10957\\', \\'48743\\', \\'18175\\', \\'74688\\', \\'49853\\', \\'83675\\', \\'79232\\', \\'72211\\', \\'77255\\', \\'44445\\', \\'81053\\', \\'5506\\', \\'21366\\', \\'99015\\', \\'57598\\', \\'9467\\', \\'65131\\', \\'73794\\', \\'25679\\', \\'3609\\', \\'70041\\', \\'14653\\', \\'93792\\', \\'7076\\', \\'87326\\', \\'12978\\', \\'20886\\', \\'24089\\', \\'82187\\', \\'55203\\', \\'96649\\', \\'51205\\', \\'26250\\', \\'98219\\', \\'64275\\', \\'18634\\', \\'94004\\', \\'50999\\', \\'99611\\', \\'72380\\', \\'28685\\', \\'33246\\', \\'49116\\', \\'44972\\', \\'44273\\', \\'26558\\', \\'84799\\', \\'51310\\', \\'39480\\', \\'16713\\', \\'34371\\', \\'94308\\', \\'38743\\', \\'14592\\', \\'47430\\', \\'74505\\', \\'38866\\', \\'69596\\', \\'84705\\', \\'20236\\', \\'49353\\', \\'28259\\', \\'16255\\', \\'27665\\', \\'94271\\', \\'98652\\', \\'18279\\', \\'4805\\', \\'57471\\', \\'7944\\', \\'72567\\', \\'55603\\', \\'47327\\', \\'32268\\', \\'1256\\', \\'47608\\', \\'80225\\', \\'15744\\', \\'75492\\', \\'74652\\', \\'96812\\', \\'77976\\', \\'72595\\', \\'86791\\', \\'97736\\', \\'83149\\', \\'57030\\', \\'58553\\', \\'7121\\', \\'53544\\', \\'94894\\', \\'57236\\', \\'55850\\', \\'52762\\', \\'36303\\', \\'97740\\', \\'25314\\', \\'43196\\', \\'74248\\', \\'52320\\', \\'60448\\', \\'10606\\', \\'7010\\', \\'21765\\', \\'20357\\', \\'61825\\', \\'34331\\', \\'15898\\', \\'67485\\', \\'70353\\', \\'41657\\', \\'49212\\', \\'21628\\', \\'11783\\', \\'90514\\', \\'33883\\', \\'85668\\', \\'73432\\', \\'55374\\', \\'53880\\', \\'864\\', \\'66975\\', \\'51190\\', \\'18268\\', \\'45344\\', \\'99680\\', \\'91098\\', \\'3893\\', \\'90773\\', \\'55611\\', \\'5914\\', \\'14977\\', \\'29463\\', \\'38339\\', \\'94390\\', \\'15379\\', \\'74717\\', \\'78721\\', \\'10689\\', \\'90966\\', \\'33191\\', \\'32384\\', \\'4363\\', \\'61992\\', \\'37456\\', \\'28402\\', \\'51633\\', \\'14358\\', \\'99226\\', \\'23024\\', \\'22114\\', \\'86438\\', \\'70682\\', \\'27242\\', \\'46237\\', \\'92467\\', \\'83997\\', \\'71994\\', \\'59256\\', \\'44728\\', \\'51372\\', \\'50328\\', \\'66925\\', \\'16487\\', \\'7348\\', \\'69501\\', \\'23328\\', \\'55945\\', \\'98064\\', \\'92561\\', \\'5275\\', \\'67097\\', \\'37616\\', \\'8561\\', \\'14378\\', \\'83858\\', \\'44306\\', \\'60514\\', \\'89238\\', \\'28781\\', \\'11864\\', \\'31540\\', \\'3809\\', \\'16629\\', \\'4336\\', \\'70961\\', \\'10787\\', \\'58719\\', \\'39587\\', \\'46840\\', \\'48993\\', \\'18578\\', \\'30890\\', \\'71438\\', \\'29672\\', \\'54785\\', \\'77570\\', \\'25012\\', \\'70696\\', \\'25935\\', \\'279\\', \\'74327\\', \\'33944\\', \\'55060\\', \\'72194\\', \\'28269\\', \\'47600\\', \\'2132\\', \\'56618\\', \\'77029\\', \\'26410\\', \\'25682\\', \\'13744\\', \\'31968\\', \\'27115\\', \\'57065\\', \\'49313\\', \\'31237\\', \\'70475\\', \\'38549\\', \\'33723\\', \\'66622\\', \\'19646\\', \\'93518\\', \\'4052\\', \\'29390\\', \\'10163\\', \\'19879\\', \\'10765\\', \\'71024\\', \\'71339\\', \\'69114\\', \\'78385\\', \\'64440\\', \\'79577\\', \\'48109\\', \\'81114\\', \\'4708\\', \\'44863\\', \\'72410\\', \\'71161\\', \\'55491\\', \\'3433\\', \\'88675\\', \\'48496\\', \\'97875\\', \\'17184\\', \\'840\\', \\'16960\\', \\'32880\\', \\'48533\\', \\'82430\\', \\'44005\\', \\'36654\\', \\'96011\\', \\'16158\\', \\'21530\\', \\'88485\\', \\'91231\\', \\'77831\\', \\'39266\\', \\'9833\\', \\'96154\\', \\'89200\\', \\'2021\\', \\'57813\\', \\'897\\', \\'27643\\', \\'65750\\', \\'27447\\', \\'29043\\', \\'50691\\', \\'74683\\', \\'78027\\', \\'99590\\', \\'6052\\', \\'22867\\', \\'4567\\', \\'3918\\', \\'27143\\', \\'77750\\', \\'32003\\', \\'14011\\', \\'59006\\', \\'33140\\', \\'12165\\', \\'72413\\', \\'89931\\', \\'59389\\', \\'45281\\', \\'52596\\', \\'31993\\', \\'88613\\', \\'85332\\', \\'8016\\', \\'34419\\', \\'80901\\', \\'76317\\', \\'34932\\', \\'71099\\', \\'23354\\', \\'19296\\', \\'42671\\', \\'12646\\', \\'47189\\', \\'67982\\', \\'79803\\', \\'28449\\', \\'6229\\', \\'44873\\', \\'48970\\', \\'10012\\', \\'6871\\', \\'88240\\', \\'1277\\', \\'71039\\', \\'47959\\', \\'45051\\', \\'74358\\', \\'68394\\', \\'49093\\', \\'78063\\', \\'26981\\', \\'8704\\', \\'18470\\', \\'14458\\', \\'38195\\', \\'75691\\', \\'64683\\', \\'44910\\', \\'93423\\', \\'67591\\', \\'36833\\', \\'63204\\', \\'29507\\', \\'38894\\', \\'59524\\', \\'12141\\', \\'36543\\', \\'86914\\', \\'91250\\', \\'45459\\', \\'30156\\', \\'119\\', \\'95390\\', \\'75872\\', \\'28827\\', \\'67609\\', \\'99869\\', \\'91237\\', \\'70358\\', \\'60292\\', \\'3499\\', \\'3133\\', \\'45478\\', \\'5800\\', \\'47576\\', \\'50558\\', \\'71500\\', \\'65579\\', \\'84252\\', \\'68999\\', \\'59495\\', \\'79395\\', \\'28634\\', \\'44121\\', \\'26503\\', \\'11922\\', \\'22058\\', \\'34164\\', \\'32668\\', \\'10422\\', \\'62793\\', \\'41303\\', \\'2030\\', \\'76875\\', \\'17151\\', \\'42101\\', \\'22133\\', \\'82998\\', \\'19499\\', \\'14247\\', \\'95259\\', \\'746\\', \\'38449\\', \\'72450\\', \\'99138\\', \\'61259\\', \\'65623\\', \\'13439\\', \\'45597\\', \\'55234\\', \\'19347\\', \\'70266\\', \\'4828\\', \\'79316\\', \\'16983\\', \\'49723\\', \\'95468\\', \\'9747\\', \\'81126\\', \\'31999\\', \\'33796\\', \\'15270\\', \\'60644\\', \\'61048\\', \\'98848\\', \\'26685\\', \\'40980\\', \\'23733\\', \\'13676\\', \\'98363\\', \\'17970\\', \\'76451\\', \\'42657\\', \\'13165\\', \\'27870\\', \\'49193\\', \\'56279\\', \\'34647\\', \\'1652\\', \\'47674\\', \\'95555\\', \\'80556\\', \\'52419\\', \\'61110\\', \\'26124\\', \\'49097\\', \\'90600\\', \\'53605\\', \\'97544\\', \\'8694\\', \\'94739\\', \\'59652\\', \\'41807\\', \\'87155\\', \\'83539\\', \\'61468\\', \\'20614\\', \\'12652\\', \\'86562\\', \\'82894\\', \\'94360\\', \\'56182\\', \\'30513\\', \\'65379\\', \\'6522\\', \\'86486\\',\\n    \\'37674\\', \\'44977\\', \\'54370\\', \\'97381\\', \\'60218\\', \\'2423\\', \\'99591\\', \\'69913\\', \\'26507\\', \\'19708\\', \\'6279\\', \\'58955\\', \\'20126\\', \\'1495\\', \\'57894\\', \\'7638\\', \\'38700\\', \\'77148\\', \\'36844\\', \\'7539\\', \\'91452\\', \\'6914\\', \\'74349\\', \\'66850\\', \\'49104\\', \\'6516\\', \\'58535\\', \\'20851\\', \\'27859\\', \\'32881\\', \\'72919\\', \\'28203\\', \\'32882\\', \\'2419\\', \\'77583\\', \\'63822\\', \\'37703\\', \\'66793\\', \\'65784\\', \\'62281\\', \\'55867\\', \\'70703\\', \\'89344\\', \\'1498\\', \\'33770\\', \\'87176\\', \\'95636\\', \\'64891\\', \\'90736\\', \\'95521\\', \\'10989\\', \\'5237\\', \\'99010\\', \\'21106\\', \\'11422\\', \\'1831\\', \\'67239\\', \\'52557\\', \\'36468\\', \\'71713\\', \\'39637\\', \\'49574\\', \\'50455\\', \\'14953\\', \\'96900\\', \\'70852\\', \\'96982\\', \\'4341\\', \\'44585\\', \\'95651\\', \\'79669\\', \\'29652\\', \\'87294\\', \\'74692\\', \\'16221\\', \\'768\\', \\'35380\\', \\'21352\\', \\'50907\\', \\'27259\\', \\'11718\\', \\'5017\\', \\'55964\\', \\'94137\\', \\'52347\\', \\'10595\\', \\'12968\\', \\'85602\\', \\'97965\\', \\'18836\\', \\'90511\\', \\'70960\\', \\'97336\\', \\'44575\\', \\'23791\\', \\'42195\\', \\'64776\\', \\'29363\\', \\'42379\\', \\'1805\\', \\'28919\\', \\'6772\\', \\'78143\\', \\'54797\\', \\'27362\\', \\'56149\\', \\'59048\\', \\'38567\\', \\'6339\\', \\'27787\\', \\'42167\\', \\'45990\\', \\'95532\\', \\'54839\\', \\'26572\\', \\'38496\\', \\'89797\\', \\'6634\\', \\'16468\\', \\'24898\\', \\'66814\\', \\'98126\\', \\'31762\\', \\'36133\\', \\'64539\\', \\'43167\\', \\'87022\\', \\'61295\\', \\'30364\\', \\'89249\\', \\'25756\\', \\'63570\\', \\'91484\\', \\'10564\\', \\'79648\\', \\'5756\\', \\'41376\\', \\'61897\\', \\'40388\\', \\'88927\\', \\'62891\\', \\'79708\\', \\'25495\\', \\'22204\\', \\'33892\\', \\'36871\\', \\'19879\\', \\'58646\\', \\'57061\\', \\'73100\\', \\'75831\\', \\'20029\\', \\'67462\\', \\'54675\\', \\'7766\\', \\'2409\\', \\'24506\\', \\'7877\\', \\'11720\\', \\'86252\\', \\'9897\\', \\'8080\\', \\'70684\\', \\'74497\\', \\'2242\\', \\'24604\\', \\'31969\\', \\'83999\\', \\'56635\\', \\'5283\\', \\'64971\\', \\'79152\\', \\'27470\\', \\'89042\\', \\'22835\\', \\'21476\\', \\'50292\\', \\'56081\\', \\'96342\\', \\'32763\\', \\'84487\\', \\'64856\\', \\'79152\\', \\'64656\\', \\'72169\\', \\'69971\\', \\'93094\\', \\'52804\\', \\'80917\\', \\'53152\\', \\'56016\\', \\'28496\\', \\'79110\\', \\'17133\\', \\'12581\\', \\'91742\\', \\'78929\\', \\'2676\\', \\'46700\\', \\'59528\\', \\'93808\\', \\'4535\\', \\'54035\\', \\'40161\\', \\'62796\\', \\'3598\\', \\'97088\\', \\'13599\\', \\'36337\\', \\'73395\\', \\'17494\\', \\'86275\\', \\'62058\\', \\'61937\\', \\'87747\\', \\'94883\\', \\'90677\\', \\'88544\\', \\'72553\\', \\'50210\\', \\'75481\\', \\'64378\\', \\'74464\\', \\'21659\\', \\'30970\\', \\'71989\\', \\'84846\\', \\'72289\\', \\'88716\\', \\'39143\\', \\'8487\\', \\'4912\\', \\'91013\\', \\'18623\\', \\'19122\\', \\'36507\\', \\'76438\\', \\'7516\\', \\'67970\\', \\'72350\\', \\'69873\\', \\'33635\\', \\'55983\\', \\'69008\\', \\'49545\\', \\'3134\\', \\'60056\\', \\'52509\\', \\'63304\\', \\'15560\\', \\'23651\\', \\'81090\\', \\'7027\\', \\'8317\\', \\'33060\\', \\'37295\\', \\'51961\\', \\'53037\\', \\'97431\\', \\'40512\\', \\'23536\\', \\'25168\\', \\'78455\\', \\'85613\\', \\'12304\\', \\'40733\\', \\'99890\\', \\'51238\\', \\'55439\\', \\'96201\\', \\'73559\\', \\'92533\\', \\'90173\\', \\'16721\\', \\'6078\\', \\'29854\\', \\'38894\\', \\'31117\\', \\'63040\\', \\'86795\\', \\'81786\\', \\'21149\\', \\'38998\\', \\'61811\\', \\'48622\\', \\'73019\\', \\'59296\\', \\'13576\\', \\'92559\\', \\'36300\\', \\'77294\\', \\'26794\\', \\'50912\\', \\'98380\\', \\'13176\\', \\'57746\\', \\'75286\\', \\'15330\\', \\'40921\\', \\'7337\\', \\'4664\\', \\'20384\\', \\'4674\\', \\'44516\\', \\'27633\\', \\'31950\\', \\'88210\\', \\'54536\\', \\'9839\\', \\'80137\\', \\'77491\\', \\'18434\\', \\'45152\\', \\'96942\\', \\'41005\\', \\'76103\\', \\'34825\\', \\'86869\\', \\'14772\\', \\'13384\\', \\'21051\\', \\'37348\\', \\'34434\\', \\'97210\\', \\'54960\\', \\'26598\\', \\'60981\\', \\'41889\\', \\'6446\\', \\'64492\\', \\'95310\\', \\'86236\\', \\'81885\\', \\'35684\\', \\'16539\\', \\'98476\\', \\'32028\\', \\'96470\\', \\'6318\\', \\'99576\\', \\'93935\\', \\'48609\\', \\'86090\\', \\'2476\\', \\'65576\\', \\'80636\\', \\'44817\\', \\'99646\\', \\'98963\\', \\'20486\\', \\'26261\\', \\'27334\\', \\'72946\\', \\'82023\\', \\'33506\\', \\'80193\\', \\'13762\\', \\'98133\\', \\'21134\\', \\'33268\\', \\'63477\\', \\'74609\\', \\'30454\\', \\'51477\\', \\'93391\\', \\'96805\\', \\'68653\\', \\'2714\\', \\'63642\\', \\'51520\\', \\'22972\\', \\'13305\\', \\'96058\\', \\'42336\\', \\'74461\\', \\'31597\\', \\'12050\\', \\'81712\\', \\'37977\\', \\'25718\\', \\'4834\\', \\'56608\\', \\'75731\\', \\'406\\', \\'28585\\', \\'63924\\', \\'23702\\', \\'29849\\', \\'16941\\', \\'91921\\', \\'65842\\', \\'76525\\', \\'68534\\', \\'50902\\', \\'17609\\', \\'23852\\', \\'53703\\', \\'31286\\', \\'58526\\', \\'9633\\', \\'87596\\', \\'10654\\', \\'2085\\', \\'52766\\', \\'22135\\', \\'76524\\', \\'32295\\', \\'90072\\', \\'70078\\', \\'77786\\', \\'93741\\', \\'87320\\', \\'70309\\', \\'44024\\', \\'95286\\', \\'12361\\', \\'29682\\', \\'59766\\', \\'26685\\', \\'90686\\', \\'81691\\', \\'49704\\', \\'23431\\', \\'53955\\', \\'39023\\', \\'47261\\', \\'1530\\', \\'58265\\', \\'80065\\', \\'95620\\', \\'90621\\', \\'63760\\', \\'90676\\', \\'81653\\', \\'36397\\', \\'20252\\', \\'81754\\', \\'20256\\', \\'67098\\', \\'7838\\', \\'49408\\', \\'88400\\', \\'87941\\', \\'84533\\', \\'6570\\', \\'22567\\', \\'18850\\', \\'55472\\', \\'40129\\', \\'48425\\', \\'23497\\', \\'39308\\', \\'34698\\', \\'53092\\', \\'89480\\', \\'47785\\', \\'57282\\', \\'25508\\', \\'19006\\', \\'50604\\', \\'86917\\', \\'9436\\', \\'88921\\', \\'3168\\', \\'70537\\', \\'3185\\', \\'34988\\', \\'5462\\', \\'69482\\', \\'45768\\', \\'91955\\', \\'56898\\', \\'15307\\', \\'99731\\', \\'89292\\', \\'19356\\', \\'20646\\', \\'66712\\', \\'7281\\', \\'12856\\', \\'31174\\', \\'19577\\', \\'8726\\', \\'62971\\', \\'33008\\', \\'37118\\', \\'59055\\', \\'84101\\', \\'68445\\', \\'91957\\', \\'47526\\', \\'15627\\', \\'79914\\', \\'20013\\', \\'26147\\', \\'80821\\', \\'56372\\', \\'74205\\', \\'28531\\', \\'25352\\', \\'51775\\', \\'93948\\', \\'55212\\', \\'17863\\', \\'91521\\', \\'74911\\', \\'88160\\', \\'2360\\', \\'98260\\', \\'18294\\', \\'62402\\', \\'84268\\', \\'9580\\', \\'42668\\', \\'1467\\', \\'40059\\', \\'5221\\', \\'4216\\', \\'9917\\', \\'35420\\', \\'16496\\', \\'34369\\', \\'50253\\', \\'95234\\', \\'95114\\', \\'84193\\', \\'28322\\', \\'37031\\', \\'81284\\', \\'88628\\', \\'36782\\', \\'42572\\', \\'73347\\', \\'66188\\', \\'43342\\', \\'77285\\', \\'16513\\', \\'89064\\', \\'63066\\', \\'72645\\', \\'67075\\', \\'48208\\', \\'18181\\', \\'77898\\', \\'65795\\', \\'53707\\', \\'39856\\', \\'92883\\', \\'92567\\', \\'49733\\', \\'30236\\', \\'10273\\', \\'53029\\', \\'69773\\', \\'78379\\', \\'72108\\', \\'47696\\', \\'97557\\', \\'95184\\', \\'14688\\', \\'29853\\', \\'62694\\', \\'70431\\', \\'88435\\', \\'58799\\', \\'21883\\', \\'99866\\', \\'69178\\', \\'55870\\', \\'14414\\', \\'85274\\', \\'27321\\', \\'55555\\', \\'613\\', \\'15067\\', \\'88217\\', \\'73655\\', \\'99548\\', \\'13631\\', \\'78789\\', \\'36690\\', \\'7952\\', \\'60830\\', \\'77438\\', \\'40059\\', \\'95602\\', \\'43097\\', \\'3429\\', \\'93731\\', \\'90537\\', \\'2932\\', \\'35702\\', \\'16125\\', \\'6652\\', \\'39632\\', \\'39349\\', \\'9910\\', \\'38103\\', \\'78608\\', \\'73565\\', \\'48556\\', \\'28978\\', \\'7128\\', \\'82326\\', \\'53980\\', \\'28059\\', \\'28212\\', \\'87101\\', \\'77752\\', \\'99170\\', \\'56753\\', \\'30484\\', \\'71470\\', \\'32607\\', \\'24674\\', \\'32687\\', \\'25098\\', \\'94712\\', \\'64024\\', \\'48239\\', \\'90408\\', \\'17316\\', \\'99243\\', \\'3656\\', \\'67402\\', \\'48009\\', \\'98427\\', \\'52800\\', \\'56024\\', \\'4417\\', \\'89747\\', \\'93338\\', \\'18758\\', \\'56411\\', \\'44810\\', \\'82456\\', \\'30808\\', \\'75470\\', \\'67115\\', \\'66876\\', \\'53906\\', \\'78403\\', \\'56059\\', \\'34383\\', \\'60056\\', \\'89136\\', \\'7237\\', \\'11129\\', \\'21351\\', \\'78662\\', \\'43606\\', \\'37454\\', \\'45465\\', \\'9292\\', \\'38099\\', \\'81699\\', \\'50195\\', \\'49368\\', \\'47503\\', \\'44605\\', \\'6523\\', \\'81478\\', \\'37910\\', \\'397\\', \\'20256\\', \\'6835\\', \\'2787\\', \\'80383\\', \\'4241\\', \\'65986\\', \\'83870\\', \\'21205\\', \\'10879\\', \\'26593\\', \\'44357\\', \\'72604\\', \\'56131\\', \\'43423\\', \\'80206\\', \\'26240\\', \\'87198\\', \\'99445\\', \\'53504\\', \\'10632\\', \\'2465\\', \\'31793\\', \\'89575\\', \\'64184\\', \\'39988\\', \\'60049\\', \\'87100\\', \\'37151\\', \\'61585\\', \\'82180\\', \\'52065\\', \\'72519\\', \\'72935\\', \\'3201\\', \\'5862\\', \\'20560\\', \\'95339\\', \\'21661\\', \\'17533\\', \\'17182\\', \\'71189\\', \\'91564\\', \\'57999\\', \\'35490\\', \\'94773\\', \\'95056\\', \\'51583\\', \\'59394\\', \\'10727\\', \\'8655\\', \\'48123\\', \\'10701\\', \\'25314\\', \\'20100\\', \\'6533\\', \\'46435\\', \\'43188\\', \\'23001\\', \\'23018\\', \\'76637\\', \\'32018\\', \\'36603\\', \\'18701\\', \\'9550\\', \\'61550\\', \\'47541\\', \\'36500\\', \\'67507\\', \\'81574\\', \\'95490\\', \\'69169\\', \\'32584\\', \\'30045\\', \\'64699\\', \\'83539\\', \\'89396\\', \\'42517\\', \\'61979\\', \\'41528\\', \\'8271\\', \\'88377\\', \\'61423\\', \\'1158\\', \\'89724\\', \\'70789\\', \\'14886\\', \\'64823\\', \\'56675\\', \\'97747\\', \\'23990\\', \\'58495\\', \\'82064\\', \\'17062\\', \\'90258\\', \\'86854\\', \\'93304\\', \\'12925\\', \\'49975\\', \\'45074\\', \\'87155\\', \\'72223\\', \\'67344\\', \\'42733\\', \\'42516\\', \\'40110\\', \\'15444\\', \\'88285\\', \\'39371\\', \\'23198\\', \\'61544\\', \\'90205\\', \\'6192\\', \\'15718\\', \\'19803\\', \\'92712\\', \\'20081\\', \\'31397\\', \\'5555\\', \\'70463\\', \\'19521\\', \\'80401\\', \\'74097\\', \\'32060\\', \\'26495\\', \\'20507\\', \\'40473\\', \\'1449\\', \\'57215\\', \\'46142\\', \\'39303\\', \\'50359\\', \\'35898\\', \\'46908\\', \\'90752\\', \\'7823\\', \\'27416\\', \\'73770\\', \\'98790\\', \\'17907\\', \\'29999\\', \\'76417\\', \\'49926\\', \\'76752\\', \\'21608\\', \\'26524\\', \\'88209\\', \\'6000\\', \\'88897\\', \\'19541\\', \\'41451\\', \\'59538\\', \\'56560\\', \\'1456\\', \\'67828\\', \\'82407\\', \\'45722\\', \\'93344\\', \\'54279\\', \\'78594\\', \\'38354\\', \\'93807\\', \\'10929\\', \\'91560\\', \\'60681\\', \\'70615\\', \\'32527\\', \\'10108\\', \\'48303\\', \\'63134\\', \\'28500\\', \\'18257\\', \\'57081\\', \\'24801\\', \\'99077\\', \\'52197\\', \\'15390\\', \\'52300\\', \\'57116\\', \\'417\\', \\'7503\\', \\'20054\\', \\'75315\\', \\'81359\\', \\'69091\\', \\'18853\\', \\'2465\\', \\'25600\\', \\'13522\\', \\'74575\\', \\'12661\\', \\'83071\\', \\'15191\\', \\'27543\\', \\'21730\\', \\'60853\\', \\'18961\\', \\'14773\\', \\'89185\\', \\'33694\\', \\'51143\\', \\'1449\\', \\'68831\\', \\'78062\\', \\'65173\\', \\'32697\\', \\'41674\\', \\'9429\\', \\'22156\\', \\'96022\\', \\'46305\\', \\'97534\\', \\'5685\\', \\'48870\\', \\'89988\\', \\'20686\\', \\'66705\\', \\'6865\\', \\'94250\\', \\'16872\\', \\'13178\\', \\'7420\\', \\'73531\\', \\'92723\\', \\'60620\\', \\'48843\\', \\'74207\\', \\'60016\\', \\'50943\\', \\'62699\\', \\'63507\\', \\'76537\\', \\'87066\\', \\'76922\\', \\'24711\\', \\'34809\\', \\'5021\\', \\'31293\\', \\'53854\\', \\'77607\\', \\'52322\\', \\'10934\\', \\'50284\\', \\'87804\\', \\'36730\\', \\'86946\\', \\'80749\\', \\'43325\\', \\'97958\\', \\'7362\\', \\'39582\\', \\'10042\\', \\'42053\\', \\'66236\\', \\'69931\\', \\'23463\\', \\'87996\\', \\'33563\\', \\'4468\\', \\'32905\\', \\'50815\\', \\'79478\\', \\'28658\\', \\'46018\\', \\'23186\\', \\'26080\\', \\'13494\\', \\'6237\\', \\'42762\\', \\'86440\\', \\'77407\\', \\'10426\\', \\'62902\\', \\'73251\\', \\'36861\\', \\'92357\\', \\'98754\\', \\'1839\\', \\'46391\\', \\'11420\\', \\'27132\\', \\'93028\\', \\'39609\\', \\'42015\\', \\'68218\\', \\'54228\\', \\'5456\\', \\'38705\\', \\'64307\\', \\'49483\\', \\'878\\', \\'54360\\', \\'54480\\', \\'66684\\', \\'55089\\', \\'4537\\', \\'82073\\', \\'72602\\', \\'96238\\', \\'56708\\', \\'58625\\', \\'32991\\', \\'74205\\', \\'72868\\', \\'79086\\', \\'64250\\', \\'56376\\', \\'10621\\', \\'76607\\', \\'47706\\', \\'72760\\', \\'70303\\', \\'60715\\', \\'14644\\', \\'44186\\', \\'36264\\', \\'29489\\', \\'14184\\', \\'62699\\', \\'30567\\', \\'16700\\', \\'31222\\', \\'15650\\', \\'1500\\', \\'22950\\', \\'54628\\', \\'41004\\', \\'96094\\', \\'70028\\', \\'74178\\', \\'65328\\', \\'26605\\', \\'63076\\', \\'75271\\', \\'79285\\', \\'8151\\', \\'42101\\', \\'56362\\', \\'25961\\', \\'87864\\', \\'972\\', \\'29510\\', \\'2747\\', \\'8877\\', \\'9780\\', \\'61052\\', \\'84105\\', \\'15573\\', \\'27475\\', \\'44570\\', \\'25334\\', \\'18517\\', \\'44237\\', \\'84094\\', \\'67524\\', \\'76761\\', \\'65678\\', \\'79284\\', \\'2462\\', \\'42631\\', \\'22696\\', \\'19223\\', \\'29728\\', \\'67742\\', \\'11883\\', \\'59027\\', \\'12377\\', \\'80538\\', \\'2165\\', \\'17377\\', \\'15030\\', \\'49838\\', \\'23920\\', \\'26025\\', \\'68179\\', \\'75894\\', \\'43783\\', \\'97106\\', \\'75558\\', \\'35528\\', \\'52081\\', \\'16951\\', \\'68855\\', \\'402\\', \\'21459\\', \\'97550\\', \\'16948\\', \\'5369\\', \\'4641\\', \\'2663\\', \\'15233\\', \\'79974\\', \\'71093\\', \\'15234\\', \\'42690\\', \\'22322\\', \\'54282\\', \\'95845\\', \\'90010\\', \\'40530\\', \\'88298\\', \\'41885\\', \\'7079\\', \\'6098\\', \\'72786\\', \\'36603\\', \\'77378\\', \\'48393\\', \\'45723\\', \\'41996\\', \\'96025\\', \\'89297\\', \\'75586\\', \\'8422\\', \\'24360\\', \\'170\\', \\'46036\\', \\'46725\\', \\'67944\\', \\'74029\\', \\'73069\\', \\'45371\\', \\'99916\\', \\'71085\\', \\'42608\\', \\'89904\\', \\'6393\\', \\'51274\\', \\'42729\\', \\'58924\\', \\'82497\\', \\'64143\\', \\'88622\\', \\'18818\\', \\'89041\\', \\'56090\\', \\'21369\\', \\'78224\\', \\'90450\\', \\'45488\\', \\'58830\\', \\'4133\\', \\'98062\\', \\'81113\\', \\'11285\\', \\'51457\\', \\'3183\\', \\'38800\\', \\'65278\\', \\'42169\\', \\'28602\\', \\'52648\\', \\'44683\\', \\'75647\\', \\'11778\\', \\'32151\\', \\'33528\\', \\'23773\\', \\'68268\\', \\'23367\\', \\'70964\\', \\'23548\\',\\n    \\'35575\\', \\'67570\\', \\'77681\\', \\'74158\\', \\'25374\\', \\'62714\\', \\'43100\\', \\'4977\\', \\'51678\\', \\'83460\\', \\'29755\\', \\'15890\\', \\'64626\\', \\'54044\\', \\'14793\\', \\'64339\\', \\'94008\\', \\'97126\\', \\'49202\\', \\'33889\\', \\'12601\\', \\'12275\\', \\'56123\\', \\'94557\\', \\'68226\\', \\'67200\\', \\'9374\\', \\'70687\\', \\'29211\\', \\'8039\\', \\'14598\\', \\'74548\\', \\'37433\\', \\'98991\\', \\'29933\\', \\'37203\\', \\'23973\\', \\'96482\\', \\'64774\\', \\'58350\\', \\'61781\\', \\'31824\\', \\'57193\\', \\'26476\\', \\'21814\\', \\'32297\\', \\'32627\\', \\'44277\\', \\'33876\\', \\'55468\\', \\'81715\\', \\'82505\\', \\'61462\\', \\'20324\\', \\'84293\\', \\'40116\\', \\'51087\\', \\'43594\\', \\'6854\\', \\'59077\\', \\'39841\\', \\'26023\\', \\'22777\\', \\'66859\\', \\'82460\\', \\'89515\\', \\'41712\\', \\'33711\\', \\'71875\\', \\'10685\\', \\'12655\\', \\'50138\\', \\'31063\\', \\'37040\\', \\'95819\\', \\'38919\\', \\'27391\\', \\'29833\\', \\'34350\\', \\'65646\\', \\'7697\\', \\'2688\\', \\'41146\\', \\'13241\\', \\'50305\\', \\'86568\\', \\'24487\\', \\'78741\\', \\'96370\\', \\'21015\\', \\'31719\\', \\'39750\\', \\'25014\\', \\'72415\\', \\'8486\\', \\'90668\\', \\'51143\\', \\'49488\\', \\'21057\\', \\'92803\\', \\'53528\\', \\'39550\\', \\'76039\\', \\'44185\\', \\'32404\\', \\'30217\\', \\'19796\\', \\'38084\\', \\'49161\\', \\'80140\\', \\'20241\\', \\'39357\\', \\'68908\\', \\'93083\\', \\'77231\\', \\'6952\\', \\'36322\\', \\'50790\\', \\'623\\', \\'29730\\', \\'13616\\', \\'57546\\', \\'17434\\', \\'93811\\', \\'35148\\', \\'81419\\', \\'40250\\', \\'40329\\', \\'89126\\', \\'72402\\', \\'16053\\', \\'27107\\', \\'28919\\', \\'16829\\', \\'96582\\', \\'65057\\', \\'28416\\', \\'30801\\', \\'77742\\', \\'27420\\', \\'73118\\', \\'89352\\', \\'54706\\', \\'23035\\', \\'88413\\', \\'64608\\', \\'61930\\', \\'15037\\', \\'47327\\', \\'59596\\', \\'18700\\', \\'57576\\', \\'63628\\', \\'56823\\', \\'60091\\', \\'68209\\', \\'21001\\', \\'14962\\', \\'72257\\', \\'83802\\', \\'33721\\', \\'86343\\', \\'11133\\', \\'65737\\', \\'68477\\', \\'90725\\', \\'86869\\', \\'98403\\', \\'47393\\', \\'25356\\', \\'61372\\', \\'8873\\', \\'19888\\', \\'48836\\', \\'66005\\', \\'23531\\', \\'72520\\', \\'26461\\', \\'78508\\', \\'28213\\', \\'96394\\', \\'22983\\', \\'37856\\', \\'71814\\', \\'27425\\', \\'72753\\', \\'27511\\', \\'65471\\', \\'38592\\', \\'3683\\', \\'24652\\', \\'64505\\', \\'92543\\', \\'53201\\', \\'40639\\', \\'99542\\', \\'53425\\', \\'35321\\', \\'47669\\', \\'14134\\', \\'47727\\', \\'48202\\', \\'71931\\', \\'32119\\', \\'50086\\', \\'50266\\', \\'67159\\', \\'89317\\', \\'81905\\', \\'30315\\', \\'49154\\', \\'8690\\', \\'69365\\', \\'56881\\', \\'46473\\', \\'64100\\', \\'38365\\', \\'59377\\', \\'65630\\', \\'54871\\', \\'52745\\', \\'91536\\', \\'16106\\', \\'70066\\', \\'62063\\', \\'84530\\', \\'88103\\', \\'33599\\', \\'51063\\', \\'87299\\', \\'41880\\', \\'25335\\', \\'51252\\', \\'42788\\', \\'13568\\', \\'1721\\', \\'62424\\', \\'83308\\', \\'36787\\', \\'91536\\', \\'92555\\', \\'27600\\', \\'24030\\', \\'12267\\', \\'66336\\', \\'30242\\', \\'7183\\', \\'67624\\', \\'28471\\', \\'48593\\', \\'79766\\', \\'31178\\', \\'47818\\', \\'94522\\', \\'88855\\', \\'45262\\', \\'43670\\', \\'18065\\', \\'25062\\', \\'44558\\', \\'37189\\', \\'69225\\', \\'35216\\', \\'42683\\', \\'26289\\', \\'72816\\', \\'31947\\', \\'65871\\', \\'45715\\', \\'59452\\', \\'22014\\', \\'56669\\', \\'60331\\', \\'33450\\', \\'60601\\', \\'95047\\', \\'30789\\', \\'90107\\', \\'81565\\', \\'32266\\', \\'3252\\', \\'5446\\', \\'58756\\', \\'55370\\', \\'34034\\', \\'81071\\', \\'2560\\', \\'39054\\', \\'39564\\', \\'15010\\', \\'5389\\', \\'60002\\', \\'53320\\', \\'49545\\', \\'48444\\', \\'31415\\', \\'39278\\', \\'79879\\', \\'30148\\', \\'10186\\', \\'60358\\', \\'29011\\', \\'14419\\', \\'95159\\', \\'94815\\', \\'55251\\', \\'90910\\', \\'80582\\', \\'92304\\', \\'11697\\', \\'60061\\', \\'38577\\', \\'84439\\', \\'76196\\', \\'34542\\', \\'50963\\', \\'36294\\', \\'11123\\', \\'59763\\', \\'29873\\', \\'47383\\', \\'12979\\', \\'22119\\', \\'21723\\', \\'64725\\', \\'48377\\', \\'77132\\', \\'9817\\', \\'79920\\', \\'47653\\', \\'60069\\', \\'12924\\', \\'53808\\', \\'55962\\', \\'66969\\', \\'13757\\', \\'60615\\', \\'10994\\', \\'9138\\', \\'34119\\', \\'58436\\', \\'64407\\', \\'75170\\', \\'73524\\', \\'51864\\', \\'94183\\', \\'86847\\', \\'15585\\', \\'57616\\', \\'96267\\', \\'5340\\', \\'52929\\', \\'49096\\', \\'50291\\', \\'5559\\', \\'32382\\', \\'84077\\', \\'6598\\', \\'87921\\', \\'59719\\', \\'31726\\', \\'44772\\', \\'63373\\', \\'75420\\', \\'66829\\', \\'47275\\', \\'98264\\', \\'61387\\', \\'94945\\', \\'44540\\', \\'50098\\', \\'13078\\', \\'44729\\', \\'95332\\', \\'63555\\', \\'30782\\', \\'63203\\', \\'15071\\', \\'60996\\', \\'72812\\', \\'17418\\', \\'80215\\', \\'37610\\', \\'30670\\', \\'44674\\', \\'74822\\', \\'15471\\', \\'25236\\', \\'16266\\', \\'76213\\', \\'35820\\', \\'19567\\', \\'8715\\', \\'72003\\', \\'90606\\', \\'1434\\', \\'53545\\', \\'88170\\', \\'75014\\', \\'62287\\', \\'35436\\', \\'38669\\', \\'12927\\', \\'83877\\', \\'38622\\', \\'28313\\', \\'82884\\', \\'73969\\', \\'38671\\', \\'10450\\', \\'24158\\', \\'22941\\', \\'73162\\', \\'86548\\', \\'42482\\', \\'95315\\', \\'92016\\', \\'96156\\', \\'44012\\', \\'35962\\', \\'6366\\', \\'3881\\', \\'74300\\', \\'26248\\', \\'30182\\', \\'19164\\', \\'67105\\', \\'66771\\', \\'52587\\', \\'69894\\', \\'61820\\', \\'16551\\', \\'50743\\', \\'10096\\', \\'69030\\', \\'24451\\', \\'89165\\', \\'23929\\', \\'96291\\', \\'30685\\', \\'64413\\', \\'19913\\', \\'9049\\', \\'71383\\', \\'61684\\', \\'45384\\', \\'45927\\', \\'81840\\', \\'49521\\', \\'89594\\', \\'30055\\', \\'83430\\', \\'14930\\', \\'60316\\', \\'86585\\', \\'99375\\', \\'80170\\', \\'14207\\', \\'19584\\', \\'20067\\', \\'82874\\', \\'30159\\', \\'46647\\', \\'6942\\', \\'66777\\', \\'32638\\', \\'55662\\', \\'75470\\', \\'77622\\', \\'26893\\', \\'96149\\', \\'14373\\', \\'33252\\', \\'50574\\', \\'7945\\', \\'20696\\', \\'56662\\', \\'94348\\', \\'3384\\', \\'20956\\', \\'89668\\', \\'99052\\', \\'65131\\', \\'56847\\', \\'17589\\', \\'16419\\', \\'2670\\', \\'10705\\', \\'59587\\', \\'92902\\', \\'92424\\', \\'48570\\', \\'11034\\', \\'69149\\', \\'35733\\', \\'17315\\', \\'84966\\', \\'69353\\', \\'69590\\', \\'52834\\', \\'32561\\', \\'6049\\', \\'50156\\', \\'71676\\', \\'76423\\', \\'32361\\', \\'61509\\', \\'8845\\', \\'75709\\', \\'35956\\', \\'21912\\', \\'31188\\', \\'59083\\', \\'43459\\', \\'38614\\', \\'92206\\', \\'55645\\', \\'38737\\', \\'34193\\', \\'6451\\', \\'94163\\', \\'24326\\', \\'49976\\', \\'71600\\', \\'58024\\', \\'67160\\', \\'4365\\', \\'38270\\', \\'59558\\', \\'80834\\', \\'60739\\', \\'54318\\', \\'19738\\', \\'42196\\', \\'43191\\', \\'13463\\', \\'88914\\', \\'99239\\', \\'66869\\', \\'75691\\', \\'33085\\', \\'4323\\', \\'7170\\', \\'46184\\', \\'41423\\', \\'89835\\', \\'46877\\', \\'20349\\', \\'14365\\', \\'32727\\', \\'35322\\', \\'841\\', \\'23597\\', \\'43370\\', \\'57527\\', \\'73250\\', \\'32553\\', \\'71489\\', \\'44617\\', \\'98323\\', \\'37672\\', \\'59549\\', \\'96023\\', \\'63176\\', \\'13524\\', \\'15621\\', \\'30448\\', \\'28136\\', \\'45549\\', \\'3513\\', \\'64153\\', \\'19839\\', \\'24219\\', \\'41987\\', \\'51083\\', \\'90268\\', \\'52052\\', \\'31430\\', \\'4727\\', \\'99409\\', \\'43595\\', \\'82374\\', \\'61251\\', \\'51470\\', \\'66562\\', \\'98724\\', \\'23529\\', \\'53895\\', \\'67562\\', \\'87573\\', \\'89964\\', \\'30821\\', \\'15733\\', \\'33062\\', \\'86963\\', \\'33450\\', \\'75338\\', \\'32570\\', \\'14453\\', \\'38080\\', \\'36335\\', \\'84226\\', \\'52790\\', \\'42883\\', \\'61156\\', \\'42789\\', \\'57846\\', \\'60096\\', \\'29946\\', \\'80178\\', \\'15882\\', \\'1971\\', \\'60722\\', \\'62458\\', \\'8754\\', \\'59991\\', \\'89321\\', \\'584\\', \\'70565\\', \\'36458\\', \\'21226\\', \\'23561\\', \\'9837\\', \\'39364\\', \\'23065\\', \\'30675\\', \\'9306\\', \\'40085\\', \\'52082\\', \\'89976\\', \\'73283\\', \\'77851\\', \\'36174\\', \\'54470\\', \\'63250\\', \\'72111\\', \\'70853\\', \\'26723\\', \\'42590\\', \\'91230\\', \\'47512\\', \\'13983\\', \\'70898\\', \\'70927\\', \\'40721\\', \\'30642\\', \\'41628\\', \\'90010\\', \\'27306\\', \\'1933\\', \\'43304\\', \\'44499\\', \\'87890\\', \\'22201\\', \\'89249\\', \\'63935\\', \\'48438\\', \\'58588\\', \\'1061\\', \\'70061\\', \\'63075\\', \\'9676\\', \\'65820\\', \\'82156\\', \\'82668\\', \\'111\\', \\'54350\\', \\'10328\\', \\'23466\\', \\'98936\\', \\'18285\\', \\'53919\\', \\'32422\\', \\'84859\\', \\'58387\\', \\'24022\\', \\'32423\\', \\'6010\\', \\'56417\\', \\'49452\\', \\'69999\\', \\'14885\\', \\'47102\\', \\'59577\\', \\'24999\\', \\'75984\\', \\'96464\\', \\'59088\\', \\'85987\\', \\'71442\\', \\'88789\\', \\'4753\\', \\'8229\\', \\'76883\\', \\'15284\\', \\'90610\\', \\'40507\\', \\'78882\\', \\'55575\\', \\'25315\\', \\'7214\\', \\'70602\\', \\'4796\\', \\'35767\\', \\'54657\\', \\'42153\\', \\'16050\\', \\'93607\\', \\'99249\\', \\'77236\\', \\'59949\\', \\'52871\\', \\'47837\\', \\'33534\\', \\'30023\\', \\'89137\\', \\'99938\\', \\'35824\\', \\'50775\\', \\'30282\\', \\'82798\\', \\'53312\\', \\'65277\\', \\'68375\\', \\'91445\\', \\'58166\\', \\'43344\\', \\'6589\\', \\'82515\\', \\'34632\\', \\'78588\\', \\'152\\', \\'67554\\', \\'15877\\', \\'74334\\', \\'32783\\', \\'45147\\', \\'39483\\', \\'92067\\', \\'59029\\', \\'38298\\', \\'55229\\', \\'28268\\', \\'85140\\', \\'33451\\', \\'15424\\', \\'46695\\', \\'23201\\', \\'83329\\', \\'28372\\', \\'19518\\', \\'89198\\', \\'33305\\', \\'43892\\', \\'470\\', \\'37662\\', \\'9407\\', \\'14376\\', \\'80310\\', \\'21459\\', \\'72381\\', \\'80414\\', \\'88305\\', \\'69073\\', \\'63101\\', \\'91054\\', \\'47190\\', \\'48595\\', \\'24696\\', \\'41426\\', \\'35133\\', \\'94399\\', \\'21790\\', \\'55040\\', \\'73279\\', \\'20809\\', \\'67805\\', \\'94115\\', \\'58633\\', \\'78053\\', \\'89444\\', \\'4112\\', \\'8\\', \\'34517\\', \\'22106\\', \\'85934\\', \\'86814\\', \\'53333\\', \\'93437\\', \\'85062\\', \\'32791\\', \\'72744\\', \\'99843\\', \\'51161\\', \\'22730\\', \\'34908\\', \\'82918\\', \\'92566\\', \\'22467\\', \\'41226\\', \\'98518\\', \\'29235\\', \\'94042\\', \\'84371\\', \\'79100\\', \\'25214\\', \\'7764\\', \\'59427\\', \\'47891\\', \\'61092\\', \\'23775\\', \\'13641\\', \\'30837\\', \\'77377\\', \\'43032\\', \\'38441\\', \\'29462\\', \\'20300\\', \\'19070\\', \\'20982\\', \\'73987\\', \\'87836\\', \\'68062\\', \\'6419\\', \\'51563\\', \\'40084\\', \\'85694\\', \\'86677\\', \\'47142\\', \\'27222\\', \\'17844\\', \\'19158\\', \\'45120\\', \\'88524\\', \\'74724\\', \\'73229\\', \\'42470\\', \\'38751\\', \\'1132\\', \\'28603\\', \\'61188\\', \\'55021\\', \\'88825\\', \\'58005\\', \\'62411\\', \\'8843\\', \\'94852\\', \\'93664\\', \\'39253\\', \\'27473\\', \\'247\\', \\'43824\\', \\'1804\\', \\'8905\\', \\'11509\\', \\'95659\\', \\'7811\\', \\'80691\\', \\'15779\\', \\'49794\\', \\'8991\\', \\'76099\\', \\'29223\\', \\'36060\\', \\'85399\\', \\'41369\\', \\'22885\\', \\'38473\\', \\'22376\\', \\'50446\\', \\'89578\\', \\'25818\\', \\'61333\\', \\'78787\\', \\'47605\\', \\'83654\\', \\'99068\\', \\'52120\\', \\'48367\\', \\'86381\\', \\'19803\\', \\'72600\\', \\'31998\\', \\'37755\\', \\'88031\\', \\'83969\\', \\'42319\\', \\'27974\\', \\'35780\\', \\'93662\\', \\'46808\\', \\'60529\\', \\'15491\\', \\'10447\\', \\'48829\\', \\'33886\\', \\'68333\\', \\'44855\\', \\'86554\\', \\'64794\\', \\'66376\\', \\'58222\\', \\'14021\\', \\'52043\\', \\'56375\\', \\'1300\\', \\'38105\\', \\'89159\\', \\'97456\\', \\'26800\\', \\'93124\\', \\'3673\\', \\'32279\\', \\'30658\\', \\'84475\\', \\'3708\\', \\'93952\\', \\'39245\\', \\'91980\\', \\'55333\\', \\'79440\\', \\'64407\\', \\'46559\\', \\'60759\\', \\'10688\\', \\'49872\\', \\'45810\\', \\'87405\\', \\'66932\\', \\'56530\\', \\'57751\\', \\'9619\\', \\'27361\\', \\'6356\\', \\'65848\\', \\'7524\\', \\'20273\\', \\'22362\\', \\'20504\\', \\'28042\\', \\'39475\\', \\'51677\\', \\'85733\\', \\'32426\\', \\'54558\\', \\'17222\\', \\'56485\\', \\'34928\\', \\'90917\\', \\'70528\\', \\'51732\\', \\'61014\\', \\'98420\\', \\'67265\\', \\'41383\\', \\'3883\\', \\'47642\\', \\'53324\\', \\'93679\\', \\'93088\\', \\'57534\\', \\'44449\\', \\'46779\\', \\'81482\\', \\'54279\\', \\'80135\\', \\'11216\\', \\'92545\\', \\'18426\\', \\'96005\\', \\'57801\\', \\'21898\\', \\'5104\\', \\'83467\\', \\'72015\\', \\'43783\\', \\'89674\\', \\'57468\\', \\'96686\\', \\'95167\\', \\'38507\\', \\'95187\\', \\'64923\\', \\'71214\\', \\'42834\\', \\'93219\\', \\'47342\\', \\'24476\\', \\'84834\\', \\'29080\\', \\'86533\\', \\'30687\\', \\'68400\\', \\'26933\\', \\'37396\\', \\'65169\\', \\'89767\\', \\'20642\\', \\'53843\\', \\'85167\\', \\'77306\\', \\'46723\\', \\'68501\\', \\'4243\\', \\'35044\\', \\'15950\\', \\'40388\\', \\'53630\\', \\'76125\\', \\'10816\\', \\'83285\\', \\'4120\\', \\'11402\\', \\'91344\\', \\'95169\\')", "SELECT count() FROM test_in WHERE -toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'", "SELECT count() FROM test_in WHERE -toInt64(a) NOT IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'", "SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'break\\'", "SELECT count() FROM test_in WHERE toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'"]}, "simple_join_query": {"difference": [-0.0009, -0.0025, -0.0025, -0.002], "newTime": [0.0379, 0.0439, 0.0438, 0.048], "query": ["SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A", "SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A", "SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A", "SELECT COUNT() FROM join_table LEFT JOIN join_table USING A"]}, "slices_hits": {"difference": [-0.0007, -0.0001], "newTime": [0.0107, 0.0438], "query": ["SELECT count() FROM test.hits WHERE NOT ignore(substring(PageCharset, 1, 2))", "SELECT count() FROM test.hits WHERE NOT ignore(substring(URL, 10, 20))"]}, "sort": {"difference": [-0.0022, 0.0029, -0.0034, -0.0001, -0.0049, 0.0024, -0.0025, -0.0082, 0.0171, -0.0005], "newTime": [0.2011, 0.2199, 0.2802, 0.165, 0.1585, 0.2222, 0.2013, 0.5436, 0.6118, 0.1661], "query": ["SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_16 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_32 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_100k_10m_64 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_16 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_32 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_64 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_16 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_32 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_64 ORDER BY key)", "SELECT sum(key) FROM (SELECT * FROM rand_unlimited_10m_8 ORDER BY key)"]}, "string_join": {"difference": [-0.0006, -0.0037, 0.0012], "newTime": [0.3735, 0.3243, 0.1993], "query": ["SELECT 1 FROM hits_10m_words AS l ANY LEFT JOIN hits_10m_words AS r USING (word) FORMAT Null", "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (long) FORMAT Null", "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (short) FORMAT Null"]}, "string_set": {"difference": [0.0087, -0.0019, 0.0228, -0.0224, -0.0015, 0.0049, 0.0023], "newTime": [0.2967, 0.2219, 0.3636, 0.246, 0.1604, 0.1998, 0.1444], "query": ["SELECT 1 FROM hits_10m_words WHERE word IN (SELECT long FROM strings) FORMAT Null", "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT short FROM strings) FORMAT Null", "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT word FROM hits_10m_words) FORMAT Null", "SELECT 1 FROM strings WHERE long IN (SELECT long FROM strings) FORMAT Null", "SELECT 1 FROM strings WHERE long IN (SELECT short FROM strings) FORMAT Null", "SELECT 1 FROM strings WHERE short IN (SELECT long FROM strings) FORMAT Null", "SELECT 1 FROM strings WHERE short IN (SELECT short FROM strings) FORMAT Null"]}, "string_sort": {"difference": [0.0006, -0.0005, -0.0006, 0.0019, 0.0052, 0.0026, -0.0017, 0.0385, 0.0005, 0.0056, -0.0009, -0.0353, -0.0086, -0.0245, 0.0006, -0.0019, -0.0005, 0.0064, -0.0001, 0.0022, 0.0045, 0.001, -0.0023, -0.0148, 0.0018, -0.023, -0.0035, 0.0108, -0.0028, -0.0187, -0.0003, 0.0184, 0.0016, 0.02, -0.0009, 0.0181, 0.0023, -0.0048, 0.0079, 0.0127, 0.014, -0.0353, 0.0, -0.0184, -0.0002, 0.0028, -0.004, -0.0064, -0.0025, -0.0137, -0.0004, -0.0037, 0.0042, 0.0315, 0.0001, -0.0154, 0.0025, 0.0084, 0.0027, -0.0134, -0.0057, 0.0127, 0.0016, 0.0204, 0.0015, 0.0102, 0.0034, 0.0015, -0.0154, -0.0098, -0.0005, 0.0154, 0.0035, -0.0052, 0.0089, -0.0039, 0.0, 0.0274, 0.0004, -0.0134, 0.0098, -0.0758, -0.0055, 0.0117], "newTime": [0.0264, 0.1434, 0.0259, 0.1454, 0.0936, 0.4415, 0.2143, 1.0933, 0.1096, 0.5772, 0.2491, 0.988, 0.268, 0.9642, 0.0436, 0.2229, 0.085, 0.4574, 0.0426, 0.2227, 0.2285, 1.1167, 0.1134, 0.6593, 0.2584, 1.0387, 0.279, 1.0376, 0.1555, 0.7976, 0.2021, 1.0049, 0.2224, 1.0718, 0.1593, 0.8153, 0.232, 1.111, 0.468, 1.5733, 0.4876, 1.4785, 0.0543, 0.2836, 0.1067, 0.4943, 0.1218, 0.6083, 0.2479, 0.9555, 0.0554, 0.28, 0.2819, 1.0697, 0.3115, 1.0257, 0.1882, 0.7736, 0.2356, 0.9831, 0.2627, 1.0253, 0.4723, 1.5724, 0.2661, 1.0568, 0.1892, 0.7907, 0.5417, 1.4512, 0.2183, 0.7153, 0.2643, 0.8917, 0.2884, 0.9248, 0.4646, 1.4426, 0.2923, 0.9828, 0.5528, 1.3613, 0.2175, 0.7084], "query": ["SELECT MobilePhoneModel FROM hits_100m_single ORDER BY MobilePhoneModel LIMIT 10", "SELECT MobilePhoneModel FROM hits_10m_single ORDER BY MobilePhoneModel LIMIT 9000000, 10", "SELECT MobilePhoneModel, MobilePhoneModel FROM hits_100m_single ORDER BY MobilePhoneModel, MobilePhoneModel LIMIT 10", "SELECT MobilePhoneModel, MobilePhoneModel FROM hits_10m_single ORDER BY MobilePhoneModel, MobilePhoneModel LIMIT 9000000, 10", "SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10", "SELECT MobilePhoneModel, PageCharset FROM hits_10m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 9000000, 10", "SELECT MobilePhoneModel, Referer FROM hits_100m_single ORDER BY MobilePhoneModel, Referer LIMIT 10", "SELECT MobilePhoneModel, Referer FROM hits_10m_single ORDER BY MobilePhoneModel, Referer LIMIT 9000000, 10", "SELECT MobilePhoneModel, SearchPhrase FROM hits_100m_single ORDER BY MobilePhoneModel, SearchPhrase LIMIT 10", "SELECT MobilePhoneModel, SearchPhrase FROM hits_10m_single ORDER BY MobilePhoneModel, SearchPhrase LIMIT 9000000, 10", "SELECT MobilePhoneModel, Title FROM hits_100m_single ORDER BY MobilePhoneModel, Title LIMIT 10", "SELECT MobilePhoneModel, Title FROM hits_10m_single ORDER BY MobilePhoneModel, Title LIMIT 9000000, 10", "SELECT MobilePhoneModel, URL FROM hits_100m_single ORDER BY MobilePhoneModel, URL LIMIT 10", "SELECT MobilePhoneModel, URL FROM hits_10m_single ORDER BY MobilePhoneModel, URL LIMIT 9000000, 10", "SELECT PageCharset FROM hits_100m_single ORDER BY PageCharset LIMIT 10", "SELECT PageCharset FROM hits_10m_single ORDER BY PageCharset LIMIT 9000000, 10", "SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10", "SELECT PageCharset, MobilePhoneModel FROM hits_10m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 9000000, 10", "SELECT PageCharset, PageCharset FROM hits_100m_single ORDER BY PageCharset, PageCharset LIMIT 10", "SELECT PageCharset, PageCharset FROM hits_10m_single ORDER BY PageCharset, PageCharset LIMIT 9000000, 10", "SELECT PageCharset, Referer FROM hits_100m_single ORDER BY PageCharset, Referer LIMIT 10", "SELECT PageCharset, Referer FROM hits_10m_single ORDER BY PageCharset, Referer LIMIT 9000000, 10", "SELECT PageCharset, SearchPhrase FROM hits_100m_single ORDER BY PageCharset, SearchPhrase LIMIT 10", "SELECT PageCharset, SearchPhrase FROM hits_10m_single ORDER BY PageCharset, SearchPhrase LIMIT 9000000, 10", "SELECT PageCharset, Title FROM hits_100m_single ORDER BY PageCharset, Title LIMIT 10", "SELECT PageCharset, Title FROM hits_10m_single ORDER BY PageCharset, Title LIMIT 9000000, 10", "SELECT PageCharset, URL FROM hits_100m_single ORDER BY PageCharset, URL LIMIT 10", "SELECT PageCharset, URL FROM hits_10m_single ORDER BY PageCharset, URL LIMIT 9000000, 10", "SELECT Referer FROM hits_100m_single ORDER BY Referer LIMIT 10", "SELECT Referer FROM hits_10m_single ORDER BY Referer LIMIT 9000000, 10", "SELECT Referer, MobilePhoneModel FROM hits_100m_single ORDER BY Referer, MobilePhoneModel LIMIT 10", "SELECT Referer, MobilePhoneModel FROM hits_10m_single ORDER BY Referer, MobilePhoneModel LIMIT 9000000, 10", "SELECT Referer, PageCharset FROM hits_100m_single ORDER BY Referer, PageCharset LIMIT 10", "SELECT Referer, PageCharset FROM hits_10m_single ORDER BY Referer, PageCharset LIMIT 9000000, 10", "SELECT Referer, Referer FROM hits_100m_single ORDER BY Referer, Referer LIMIT 10", "SELECT Referer, Referer FROM hits_10m_single ORDER BY Referer, Referer LIMIT 9000000, 10", "SELECT Referer, SearchPhrase FROM hits_100m_single ORDER BY Referer, SearchPhrase LIMIT 10", "SELECT Referer, SearchPhrase FROM hits_10m_single ORDER BY Referer, SearchPhrase LIMIT 9000000, 10", "SELECT Referer, Title FROM hits_100m_single ORDER BY Referer, Title LIMIT 10", "SELECT Referer, Title FROM hits_10m_single ORDER BY Referer, Title LIMIT 9000000, 10", "SELECT Referer, URL FROM hits_100m_single ORDER BY Referer, URL LIMIT 10", "SELECT Referer, URL FROM hits_10m_single ORDER BY Referer, URL LIMIT 9000000, 10", "SELECT SearchPhrase FROM hits_100m_single ORDER BY SearchPhrase LIMIT 10", "SELECT SearchPhrase FROM hits_10m_single ORDER BY SearchPhrase LIMIT 9000000, 10", "SELECT SearchPhrase, MobilePhoneModel FROM hits_100m_single ORDER BY SearchPhrase, MobilePhoneModel LIMIT 10", "SELECT SearchPhrase, MobilePhoneModel FROM hits_10m_single ORDER BY SearchPhrase, MobilePhoneModel LIMIT 9000000, 10", "SELECT SearchPhrase, PageCharset FROM hits_100m_single ORDER BY SearchPhrase, PageCharset LIMIT 10", "SELECT SearchPhrase, PageCharset FROM hits_10m_single ORDER BY SearchPhrase, PageCharset LIMIT 9000000, 10", "SELECT SearchPhrase, Referer FROM hits_100m_single ORDER BY SearchPhrase, Referer LIMIT 10", "SELECT SearchPhrase, Referer FROM hits_10m_single ORDER BY SearchPhrase, Referer LIMIT 9000000, 10", "SELECT SearchPhrase, SearchPhrase FROM hits_100m_single ORDER BY SearchPhrase, SearchPhrase LIMIT 10", "SELECT SearchPhrase, SearchPhrase FROM hits_10m_single ORDER BY SearchPhrase, SearchPhrase LIMIT 9000000, 10", "SELECT SearchPhrase, Title FROM hits_100m_single ORDER BY SearchPhrase, Title LIMIT 10", "SELECT SearchPhrase, Title FROM hits_10m_single ORDER BY SearchPhrase, Title LIMIT 9000000, 10", "SELECT SearchPhrase, URL FROM hits_100m_single ORDER BY SearchPhrase, URL LIMIT 10", "SELECT SearchPhrase, URL FROM hits_10m_single ORDER BY SearchPhrase, URL LIMIT 9000000, 10", "SELECT Title FROM hits_100m_single ORDER BY Title LIMIT 10", "SELECT Title FROM hits_10m_single ORDER BY Title LIMIT 9000000, 10", "SELECT Title, MobilePhoneModel FROM hits_100m_single ORDER BY Title, MobilePhoneModel LIMIT 10", "SELECT Title, MobilePhoneModel FROM hits_10m_single ORDER BY Title, MobilePhoneModel LIMIT 9000000, 10", "SELECT Title, PageCharset FROM hits_100m_single ORDER BY Title, PageCharset LIMIT 10", "SELECT Title, PageCharset FROM hits_10m_single ORDER BY Title, PageCharset LIMIT 9000000, 10", "SELECT Title, Referer FROM hits_100m_single ORDER BY Title, Referer LIMIT 10", "SELECT Title, Referer FROM hits_10m_single ORDER BY Title, Referer LIMIT 9000000, 10", "SELECT Title, SearchPhrase FROM hits_100m_single ORDER BY Title, SearchPhrase LIMIT 10", "SELECT Title, SearchPhrase FROM hits_10m_single ORDER BY Title, SearchPhrase LIMIT 9000000, 10", "SELECT Title, Title FROM hits_100m_single ORDER BY Title, Title LIMIT 10", "SELECT Title, Title FROM hits_10m_single ORDER BY Title, Title LIMIT 9000000, 10", "SELECT Title, URL FROM hits_100m_single ORDER BY Title, URL LIMIT 10", "SELECT Title, URL FROM hits_10m_single ORDER BY Title, URL LIMIT 9000000, 10", "SELECT URL FROM hits_100m_single ORDER BY URL LIMIT 10", "SELECT URL FROM hits_10m_single ORDER BY URL LIMIT 9000000, 10", "SELECT URL, MobilePhoneModel FROM hits_100m_single ORDER BY URL, MobilePhoneModel LIMIT 10", "SELECT URL, MobilePhoneModel FROM hits_10m_single ORDER BY URL, MobilePhoneModel LIMIT 9000000, 10", "SELECT URL, PageCharset FROM hits_100m_single ORDER BY URL, PageCharset LIMIT 10", "SELECT URL, PageCharset FROM hits_10m_single ORDER BY URL, PageCharset LIMIT 9000000, 10", "SELECT URL, Referer FROM hits_100m_single ORDER BY URL, Referer LIMIT 10", "SELECT URL, Referer FROM hits_10m_single ORDER BY URL, Referer LIMIT 9000000, 10", "SELECT URL, SearchPhrase FROM hits_100m_single ORDER BY URL, SearchPhrase LIMIT 10", "SELECT URL, SearchPhrase FROM hits_10m_single ORDER BY URL, SearchPhrase LIMIT 9000000, 10", "SELECT URL, Title FROM hits_100m_single ORDER BY URL, Title LIMIT 10", "SELECT URL, Title FROM hits_10m_single ORDER BY URL, Title LIMIT 9000000, 10", "SELECT URL, URL FROM hits_100m_single ORDER BY URL, URL LIMIT 10", "SELECT URL, URL FROM hits_10m_single ORDER BY URL, URL LIMIT 9000000, 10"]}, "sum_map": {"difference": [-0.0017, 0.0067, 0.0003, -0.0088], "newTime": [0.0617, 0.617, 0.0609, 0.5908], "query": ["SELECT sumMap(key, val) FROM sum_map_100000 FORMAT Null", "SELECT sumMap(key, val) FROM sum_map_1000000 FORMAT Null", "SELECT sumMapWithOverflow(key, val) FROM sum_map_100000 FORMAT Null", "SELECT sumMapWithOverflow(key, val) FROM sum_map_1000000 FORMAT Null"]}, "synthetic_hardware_benchmark": {"difference": [0.0009, -0.0005, 0.0004, 0.0006, -0.0007, -0.0016, 0.0, 0.0105, -0.0016, -0.0266, 0.0, -0.0014, 0.0028, 0.0018, -0.0011, -0.0041, 0.0022, -0.0012, -0.0013, -0.0012, -0.0022, 0.0093, -0.0081, -0.0062, 0.0134, 0.0033], "newTime": [0.0536, 0.0389, 0.0604, 0.0403, 0.1722, 0.1482, 0.1387, 0.1643, 0.1509, 0.7079, 0.0996, 0.0878, 0.0869, 0.0969, 0.0891, 0.4134, 0.314, 0.3404, 0.1969, 0.0963, 0.1724, 0.4027, 0.4788, 1.7006, 0.8377, 1.6812], "query": ["SELECT count() FROM      zeros( 100000000) WHERE NOT ignore(rand())", "SELECT count() FROM   zeros_mt(1600000000) WHERE NOT ignore(rand())", "SELECT count() FROM  numbers(    10000000) WHERE NOT ignore(toString(number))", "SELECT count() FROM  numbers_mt(160000000) WHERE NOT ignore(toString(number))", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(intHash32(number))", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(intHash64(number))", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number % 34908756)", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number % 7)", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(number / 7)", "SELECT count() FROM numbers(    100000000) WHERE NOT ignore(reinterpretAsString(number))", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(intHash32(number))", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(intHash64(number))", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number % 34908756)", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number % 7)", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(number / 7)", "SELECT count() FROM numbers_mt(1600000000) WHERE NOT ignore(reinterpretAsString(number))", "SELECT count() FROM zeros(1000000) WHERE NOT ignore(materialize(\\'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\') AS s, concat(s,s,s,s,s,s,s,s,s,s) AS t, concat(t,t,t,t,t,t,t,t,t,t) AS u) SETTINGS max_block_size = 1000", "SELECT number % 1000 AS k, count() FROM numbers(    100000000) GROUP BY k FORMAT Null", "SELECT number % 1000 AS k, count() FROM numbers_mt(1600000000) GROUP BY k FORMAT Null", "SELECT number % 100000 AS k, count() FROM numbers(    10000000) GROUP BY k FORMAT Null", "SELECT number % 100000 AS k, count() FROM numbers_mt(160000000) GROUP BY k FORMAT Null", "SELECT number % 1000000 AS k, count() FROM numbers(    10000000) GROUP BY k FORMAT Null", "SELECT number % 1000000 AS k, count() FROM numbers_mt(160000000) GROUP BY k FORMAT Null", "SELECT number % 10000000 AS k, count() FROM numbers(   10000000) GROUP BY k FORMAT Null", "SELECT number % 10000000 AS k, count() FROM numbers_mt(80000000) GROUP BY k FORMAT Null", "SELECT number % toUInt32(1e8) AS k, count() FROM numbers_mt(toUInt32(1e8)) GROUP BY k FORMAT Null"]}, "trim_numbers": {"difference": [0.0036, -0.0032, 0.0031, 0.0171, -0.039, 0.0004], "newTime": [0.1228, 0.115, 1.3818, 0.5161, 1.0744, 0.1319], "query": ["SELECT count() FROM numbers(10000000) WHERE NOT ignore(ltrim(toString(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(rtrim(toString(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(BOTH \\'012345\\' FROM toString(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(LEADING \\'012345\\' FROM toString(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(TRAILING \\'012345\\' FROM toString(number)))", "SELECT count() FROM numbers(10000000) WHERE NOT ignore(trim(toString(number)))"]}, "trim_urls": {"difference": [0.012, 0.0185, -0.0021, -0.0037, -0.0191, 0.005], "newTime": [0.3918, 0.39, 1.9429, 0.554, 0.8198, 0.3775], "query": ["SELECT count() FROM hits_100m_single WHERE NOT ignore(ltrim(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(rtrim(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(BOTH \\'htpsw:/\\' FROM URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(LEADING \\'htpsw:/\\' FROM URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(TRAILING \\'/\\' FROM URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(trim(URL))"]}, "trim_whitespace": {"difference": [0.0009, 0.0002, -0.0013, 0.0025, 0.0005, -0.0004], "newTime": [0.1001, 0.0645, 0.0471, 0.1056, 0.1026, 0.1037], "query": ["SELECT replaceRegexpAll(value, \\'^ *| *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null", "SELECT replaceRegexpOne(value, \\' *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null", "SELECT replaceRegexpOne(value, \\'^ *\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null", "SELECT trimBoth(value) FROM whitespaces FORMAT Null", "SELECT trimLeft(value) FROM whitespaces FORMAT Null", "SELECT trimRight(value) FROM whitespaces FORMAT Null"]}, "uniq": {"difference": [-0.0001, -0.0002, -0.0018, -0.0003, -0.0004, -0.0004, 0.0001, 0.0022, 0.0004, -0.0164, -0.0014, -0.0003, -0.0001, -0.0001, -0.0002, -0.0003, 0.0003, -0.0011, -0.0037, -0.0041, 0.0038, 0.0021, 0.0047, 0.0024, -0.0099, 0.0044, -0.0005, 0.001, -0.0124, 0.0008, -0.0001, 0.0009, 0.0001, 0.0032, -0.0003, 0.0001, -0.0004, -0.0012, 0.0002, 0.0023, -0.001, 0.0067, -0.0018, -0.0003, 0.0007, -0.0001, -0.001, -0.0002, 0.0011, 0.001, 0.0, 0.0002, -0.0005, 0.0007, -0.0006, -0.003, -0.0022, -0.0052, -0.0003, -0.0008, -0.0004, 0.0002, 0.0006, 0.0006, -0.005, -0.0062, 0.0004, 0.0033, -0.003, -0.0025, 0.004, 0.0079, 0.0008, 0.0055, -0.0006, 0.004, 0.0103, 0.0027, 0.0011, -0.0006], "newTime": [0.02, 0.0702, 0.0471, 0.0472, 0.0491, 0.0529, 0.0583, 0.0731, 0.0951, 1.9746, 0.0438, 0.0195, 0.0198, 0.0196, 0.0197, 0.0197, 0.2637, 0.4168, 0.3815, 0.3771, 0.3816, 0.3791, 0.384, 0.384, 0.3816, 0.4953, 0.4245, 0.3301, 1.0028, 0.4057, 0.3052, 0.3069, 0.0567, 0.1752, 0.1118, 0.1209, 0.1329, 0.139, 0.1514, 0.1681, 0.1889, 0.3897, 0.1145, 0.0571, 0.0676, 0.0586, 0.0561, 0.0563, 0.0427, 0.225, 0.0786, 0.0908, 0.1032, 0.1223, 0.1498, 0.1923, 0.2601, 1.8675, 0.0853, 0.0396, 0.0399, 0.0406, 0.0404, 0.0402, 0.2691, 0.3418, 0.3379, 0.3411, 0.342, 0.3381, 0.3436, 0.3461, 0.3507, 1.3158, 0.3467, 0.2952, 0.5133, 0.3187, 0.2949, 0.2875], "query": ["SELECT 1 AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT 1 AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT ClientIP AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT RegionID AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchEngineID AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, sum(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniq(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(12)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(13)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(14)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(15)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(16)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(17)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqCombined(18)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqHLL12(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqUpTo(10)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqUpTo(25)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqUpTo(3)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null", "SELECT SearchPhrase AS k, uniqUpTo(5)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"]}, "url_hits": {"difference": [0.0253, -0.0075, -0.0019, -0.0017, 0.001, 0.0004, -0.0041, -0.001, 0.0027, 0.0026, -0.0043, -0.0032, 0.0025, -0.004, -0.0031, -0.0016, 0.0012, 0.0122, 0.001], "newTime": [1.0434, 0.7579, 0.3468, 0.324, 0.397, 0.4348, 0.4066, 0.3139, 0.3648, 0.431, 0.4514, 0.3922, 0.3011, 0.3191, 0.4315, 0.2671, 0.38, 0.3841, 0.3181], "query": ["SELECT count() FROM hits_100m_single WHERE NOT ignore(URLHierarchy(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(URLPathHierarchy(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryString(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutQueryStringAndFragment(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutToFirstSignificantSubdomain(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(cutWWW(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(decodeURLComponent(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(domain(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(domainWithoutWWW(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(extractURLParameterNames(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(extractURLParameters(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(firstSignificantSubdomain(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(fragment(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(path(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(pathFull(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(protocol(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(queryString(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(queryStringAndFragment(URL))", "SELECT count() FROM hits_100m_single WHERE NOT ignore(topLevelDomain(URL))"]}, "vectorize_aggregation_combinators": {"difference": [-0.0034, 0.0005, 0.0, 0.0, 0.0015], "newTime": [0.5176, 0.0323, 0.026, 0.3487, 0.3183], "query": ["SELECT arrayReduce(\\'avg\\', v) FROM array_data FORMAT Null", "SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null", "SELECT countMerge(v) FROM (SELECT number % 1024 k, countState() v FROM numbers(10000000) GROUP BY k) FORMAT Null", "SELECT k, sumArray(v) FROM array_data GROUP BY k FORMAT Null", "SELECT sumArray(v) FROM array_data FORMAT Null"]}, "visit_param_extract_raw": {"difference": [0.0027, 0.0014, -0.0059], "newTime": [0.0954, 0.6991, 0.1941], "query": ["SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":\"test_string\"}\\'), \\'myparam\\'))", "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))", "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"]}, "website": {"difference": [-0.0048, -0.0019, 0.0122, 0.0018, 0.0001, -0.0005, -0.0127, 0.0001, -0.0004, 0.0007, 0.0013, 0.0012, -0.0008, -0.0003, 0.0003, -0.0047, 0.0033, -0.0015, 0.0002, 0.0014, 0.0016, -0.0026, 0.0061, -0.0049, 0.0023, 0.0024, -0.0031, 0.0, 0.001, 0.0104, 0.0034, -0.0018, 0.0004, 0.0019, 0.0008, 0.0204, -0.0011, 0.0, -0.0008, 0.0019, 0.0046, 0.0004, -0.0028, 0.0035, 0.002, 0.0106, 0.0054, 0.0057, 0.0035, 0.0003, -0.0001, 0.0002, 0.0029, -0.0001, -0.0007, 0.0001, 0.0016, 0.0008, -0.0002, -0.0002, 0.0001, -0.0003, -0.0074, -0.0003, -0.0003, 0.0003, 0.0001, -0.0005, -0.0006, 0.002, 0.0005, 0.0006], "newTime": [0.4286, 0.2106, 1.3576, 0.1639, 0.0061, 0.4772, 0.3585, 0.0474, 0.0838, 0.0236, 0.0781, 0.2019, 0.0363, 0.1731, 0.0323, 0.2698, 0.3498, 0.0538, 0.0972, 0.1008, 0.0776, 0.7682, 0.1239, 0.3095, 0.2597, 0.3394, 0.0544, 0.0303, 0.0461, 0.1688, 0.1937, 0.0806, 0.0248, 0.0927, 0.0321, 1.365, 0.1528, 0.0106, 0.0139, 0.61, 1.0011, 0.056, 0.0975, 0.4128, 0.0442, 1.7166, 0.1993, 0.4008, 0.2347, 0.0637, 0.0083, 0.001, 0.2698, 0.0007, 0.0064, 0.0154, 0.4624, 0.0862, 0.0108, 0.0044, 0.0168, 0.0069, 0.8981, 0.1784, 0.0193, 0.0068, 0.0029, 0.0106, 0.1247, 0.0435, 0.0698, 0.0418], "query": ["SELECT * FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\' ORDER BY EventTime LIMIT 10", "SELECT * FROM hits_10m_single WHERE URL LIKE \\'%metrika%\\' ORDER BY EventTime LIMIT 10", "SELECT 1, URL, count() AS c FROM hits_100m_single GROUP BY 1, URL ORDER BY c DESC LIMIT 10", "SELECT 1, URL, count() AS c FROM hits_10m_single GROUP BY 1, URL ORDER BY c DESC LIMIT 10", "SELECT AdvEngineID, count() FROM hits_10m_single WHERE AdvEngineID != 0 GROUP BY AdvEngineID ORDER BY count() DESC LIMIT 10", "SELECT ClientIP AS x, x - 1, x - 2, x - 3, count() AS c FROM hits_100m_single GROUP BY x, x - 1, x - 2, x - 3 ORDER BY c DESC LIMIT 10", "SELECT CounterID, avg(length(URL)) AS l, count() AS c FROM hits_100m_single WHERE URL != \\'\\' GROUP BY CounterID HAVING c > 100000 ORDER BY l DESC LIMIT 25", "SELECT CounterID, avg(length(URL)) AS l, count() AS c FROM hits_10m_single WHERE URL != \\'\\' GROUP BY CounterID HAVING c > 100000 ORDER BY l DESC LIMIT 25", "SELECT MobilePhone, MobilePhoneModel, uniq(UserID) AS u FROM hits_100m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10", "SELECT MobilePhone, MobilePhoneModel, uniq(UserID) AS u FROM hits_10m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10", "SELECT MobilePhoneModel, uniq(UserID) AS u FROM hits_100m_single WHERE MobilePhoneModel != \\'\\' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10", "SELECT RegionID, sum(AdvEngineID), count() AS c, avg(ResolutionWidth), uniq(UserID) FROM hits_100m_single GROUP BY RegionID ORDER BY c DESC LIMIT 10", "SELECT RegionID, sum(AdvEngineID), count() AS c, avg(ResolutionWidth), uniq(UserID) FROM hits_10m_single GROUP BY RegionID ORDER BY c DESC LIMIT 10", "SELECT RegionID, uniq(UserID) AS u FROM hits_100m_single GROUP BY RegionID ORDER BY u DESC LIMIT 10", "SELECT RegionID, uniq(UserID) AS u FROM hits_10m_single GROUP BY RegionID ORDER BY u DESC LIMIT 10", "SELECT SearchEngineID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10", "SELECT SearchEngineID, SearchPhrase, count() AS c FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchEngineID, SearchPhrase, count() AS c FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY EventTime LIMIT 10", "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY EventTime, SearchPhrase LIMIT 10", "SELECT SearchPhrase FROM hits_100m_single WHERE SearchPhrase != \\'\\' ORDER BY SearchPhrase LIMIT 10", "SELECT SearchPhrase, any(URL), any(Title), count() AS c, uniq(UserID) FROM hits_100m_single WHERE Title LIKE \\'%\u042f\u043d\u0434\u0435\u043a\u0441%\\' AND URL NOT LIKE \\'%.yandex.%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchPhrase, any(URL), any(Title), count() AS c, uniq(UserID) FROM hits_10m_single WHERE Title LIKE \\'%\u042f\u043d\u0434\u0435\u043a\u0441%\\' AND URL NOT LIKE \\'%.yandex.%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchPhrase, any(URL), count() AS c FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchPhrase, count() AS c FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10", "SELECT SearchPhrase, uniq(UserID) AS u FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10", "SELECT SearchPhrase, uniq(UserID) AS u FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10", "SELECT Title, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(Title) GROUP BY Title ORDER BY PageViews DESC LIMIT 10", "SELECT Title, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(Title) GROUP BY Title ORDER BY PageViews DESC LIMIT 10", "SELECT TraficSourceID, SearchEngineID, AdvEngineID, ((SearchEngineID = 0 AND AdvEngineID = 0) ? Referer : \\'\\') AS Src, URL AS Dst, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 1000", "SELECT TraficSourceID, SearchEngineID, AdvEngineID, ((SearchEngineID = 0 AND AdvEngineID = 0) ? Referer : \\'\\') AS Src, URL AS Dst, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 1000", "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10", "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND IsLink AND NOT IsDownload GROUP BY URL ORDER BY PageViews DESC LIMIT 1000", "SELECT URL, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10", "SELECT URL, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND IsLink AND NOT IsDownload GROUP BY URL ORDER BY PageViews DESC LIMIT 1000", "SELECT URL, count() AS c FROM hits_100m_single GROUP BY URL ORDER BY c DESC LIMIT 10", "SELECT URL, count() AS c FROM hits_10m_single GROUP BY URL ORDER BY c DESC LIMIT 10", "SELECT URLHash, EventDate, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND TraficSourceID IN (-1, 6) AND RefererHash = halfMD5(\\'http://example.ru/\\') GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 100", "SELECT URLHash, EventDate, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND TraficSourceID IN (-1, 6) AND RefererHash = halfMD5(\\'http://example.ru/\\') GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 100", "SELECT UserID, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, SearchPhrase LIMIT 10", "SELECT UserID, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, SearchPhrase ORDER BY count() DESC LIMIT 10", "SELECT UserID, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, SearchPhrase LIMIT 10", "SELECT UserID, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, SearchPhrase ORDER BY count() DESC LIMIT 10", "SELECT UserID, count() FROM hits_100m_single GROUP BY UserID ORDER BY count() DESC LIMIT 10", "SELECT UserID, count() FROM hits_10m_single GROUP BY UserID ORDER BY count() DESC LIMIT 10", "SELECT UserID, toMinute(EventTime) AS m, SearchPhrase, count() FROM hits_100m_single GROUP BY UserID, m, SearchPhrase ORDER BY count() DESC LIMIT 10", "SELECT UserID, toMinute(EventTime) AS m, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, m, SearchPhrase ORDER BY count() DESC LIMIT 10", "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_100m_single WHERE SearchPhrase != \\'\\' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10", "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_10m_single GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10", "SELECT WatchID, ClientIP, count() AS c, sum(Refresh), avg(ResolutionWidth) FROM hits_10m_single WHERE SearchPhrase != \\'\\' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10", "SELECT WindowClientWidth, WindowClientHeight, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT Refresh AND NOT DontCountHits AND URLHash = halfMD5(\\'http://example.ru/\\') GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10000 FORMAT Null", "SELECT count() FROM hits_100m_single", "SELECT count() FROM hits_100m_single WHERE URL LIKE \\'%metrika%\\'", "SELECT count() FROM hits_10m_single", "SELECT count() FROM hits_10m_single WHERE AdvEngineID != 0", "SELECT count() FROM hits_10m_single WHERE UserID = 12345678901234567890", "SELECT domainWithoutWWW(Referer) AS key, avg(length(Referer)) AS l, count() AS c, any(Referer) FROM hits_100m_single WHERE Referer != \\'\\' GROUP BY key HAVING c > 100000 ORDER BY l DESC LIMIT 25", "SELECT domainWithoutWWW(Referer) AS key, avg(length(Referer)) AS l, count() AS c, any(Referer) FROM hits_10m_single WHERE Referer != \\'\\' GROUP BY key HAVING c > 100000 ORDER BY l DESC LIMIT 25", "SELECT min(EventDate), max(EventDate) FROM hits_100m_single", "SELECT min(EventDate), max(EventDate) FROM hits_10m_single", "SELECT sum(AdvEngineID), count(), avg(ResolutionWidth) FROM hits_100m_single", "SELECT sum(AdvEngineID), count(), avg(ResolutionWidth) FROM hits_10m_single", "SELECT sum(ResolutionWidth), sum(ResolutionWidth + 1), sum(ResolutionWidth + 2), sum(ResolutionWidth + 3), sum(ResolutionWidth + 4), sum(ResolutionWidth + 5), sum(ResolutionWidth + 6), sum(ResolutionWidth + 7), sum(ResolutionWidth + 8), sum(ResolutionWidth + 9), sum(ResolutionWidth + 10), sum(ResolutionWidth + 11), sum(ResolutionWidth + 12), sum(ResolutionWidth + 13), sum(ResolutionWidth + 14), sum(ResolutionWidth + 15), sum(ResolutionWidth + 16), sum(ResolutionWidth + 17), sum(ResolutionWidth + 18), sum(ResolutionWidth + 19), sum(ResolutionWidth + 20), sum(ResolutionWidth + 21), sum(ResolutionWidth + 22), sum(ResolutionWidth + 23), sum(ResolutionWidth + 24), sum(ResolutionWidth + 25), sum(ResolutionWidth + 26), sum(ResolutionWidth + 27), sum(ResolutionWidth + 28), sum(ResolutionWidth + 29), sum(ResolutionWidth + 30), sum(ResolutionWidth + 31), sum(ResolutionWidth + 32), sum(ResolutionWidth + 33), sum(ResolutionWidth + 34), sum(ResolutionWidth + 35), sum(ResolutionWidth + 36), sum(ResolutionWidth + 37), sum(ResolutionWidth + 38), sum(ResolutionWidth + 39), sum(ResolutionWidth + 40), sum(ResolutionWidth + 41), sum(ResolutionWidth + 42), sum(ResolutionWidth + 43), sum(ResolutionWidth + 44), sum(ResolutionWidth + 45), sum(ResolutionWidth + 46), sum(ResolutionWidth + 47), sum(ResolutionWidth + 48), sum(ResolutionWidth + 49), sum(ResolutionWidth + 50), sum(ResolutionWidth + 51), sum(ResolutionWidth + 52), sum(ResolutionWidth + 53), sum(ResolutionWidth + 54), sum(ResolutionWidth + 55), sum(ResolutionWidth + 56), sum(ResolutionWidth + 57), sum(ResolutionWidth + 58), sum(ResolutionWidth + 59), sum(ResolutionWidth + 60), sum(ResolutionWidth + 61), sum(ResolutionWidth + 62), sum(ResolutionWidth + 63), sum(ResolutionWidth + 64), sum(ResolutionWidth + 65), sum(ResolutionWidth + 66), sum(ResolutionWidth + 67), sum(ResolutionWidth + 68), sum(ResolutionWidth + 69), sum(ResolutionWidth + 70), sum(ResolutionWidth + 71), sum(ResolutionWidth + 72), sum(ResolutionWidth + 73), sum(ResolutionWidth + 74), sum(ResolutionWidth + 75), sum(ResolutionWidth + 76), sum(ResolutionWidth + 77), sum(ResolutionWidth + 78), sum(ResolutionWidth + 79), sum(ResolutionWidth + 80), sum(ResolutionWidth + 81), sum(ResolutionWidth + 82), sum(ResolutionWidth + 83), sum(ResolutionWidth + 84), sum(ResolutionWidth + 85), sum(ResolutionWidth + 86), sum(ResolutionWidth + 87), sum(ResolutionWidth + 88), sum(ResolutionWidth + 89) FROM hits_100m_single", "SELECT sum(ResolutionWidth), sum(ResolutionWidth + 1), sum(ResolutionWidth + 2), sum(ResolutionWidth + 3), sum(ResolutionWidth + 4), sum(ResolutionWidth + 5), sum(ResolutionWidth + 6), sum(ResolutionWidth + 7), sum(ResolutionWidth + 8), sum(ResolutionWidth + 9), sum(ResolutionWidth + 10), sum(ResolutionWidth + 11), sum(ResolutionWidth + 12), sum(ResolutionWidth + 13), sum(ResolutionWidth + 14), sum(ResolutionWidth + 15), sum(ResolutionWidth + 16), sum(ResolutionWidth + 17), sum(ResolutionWidth + 18), sum(ResolutionWidth + 19), sum(ResolutionWidth + 20), sum(ResolutionWidth + 21), sum(ResolutionWidth + 22), sum(ResolutionWidth + 23), sum(ResolutionWidth + 24), sum(ResolutionWidth + 25), sum(ResolutionWidth + 26), sum(ResolutionWidth + 27), sum(ResolutionWidth + 28), sum(ResolutionWidth + 29), sum(ResolutionWidth + 30), sum(ResolutionWidth + 31), sum(ResolutionWidth + 32), sum(ResolutionWidth + 33), sum(ResolutionWidth + 34), sum(ResolutionWidth + 35), sum(ResolutionWidth + 36), sum(ResolutionWidth + 37), sum(ResolutionWidth + 38), sum(ResolutionWidth + 39), sum(ResolutionWidth + 40), sum(ResolutionWidth + 41), sum(ResolutionWidth + 42), sum(ResolutionWidth + 43), sum(ResolutionWidth + 44), sum(ResolutionWidth + 45), sum(ResolutionWidth + 46), sum(ResolutionWidth + 47), sum(ResolutionWidth + 48), sum(ResolutionWidth + 49), sum(ResolutionWidth + 50), sum(ResolutionWidth + 51), sum(ResolutionWidth + 52), sum(ResolutionWidth + 53), sum(ResolutionWidth + 54), sum(ResolutionWidth + 55), sum(ResolutionWidth + 56), sum(ResolutionWidth + 57), sum(ResolutionWidth + 58), sum(ResolutionWidth + 59), sum(ResolutionWidth + 60), sum(ResolutionWidth + 61), sum(ResolutionWidth + 62), sum(ResolutionWidth + 63), sum(ResolutionWidth + 64), sum(ResolutionWidth + 65), sum(ResolutionWidth + 66), sum(ResolutionWidth + 67), sum(ResolutionWidth + 68), sum(ResolutionWidth + 69), sum(ResolutionWidth + 70), sum(ResolutionWidth + 71), sum(ResolutionWidth + 72), sum(ResolutionWidth + 73), sum(ResolutionWidth + 74), sum(ResolutionWidth + 75), sum(ResolutionWidth + 76), sum(ResolutionWidth + 77), sum(ResolutionWidth + 78), sum(ResolutionWidth + 79), sum(ResolutionWidth + 80), sum(ResolutionWidth + 81), sum(ResolutionWidth + 82), sum(ResolutionWidth + 83), sum(ResolutionWidth + 84), sum(ResolutionWidth + 85), sum(ResolutionWidth + 86), sum(ResolutionWidth + 87), sum(ResolutionWidth + 88), sum(ResolutionWidth + 89) FROM hits_10m_single", "SELECT sum(UserID) FROM hits_100m_single", "SELECT sum(UserID) FROM hits_10m_single", "SELECT toStartOfMinute(EventTime) AS Minute, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-02\\' AND NOT Refresh AND NOT DontCountHits GROUP BY Minute ORDER BY Minute FORMAT Null", "SELECT toStartOfMinute(EventTime) AS Minute, count() AS PageViews FROM hits_10m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-02\\' AND NOT Refresh AND NOT DontCountHits GROUP BY Minute ORDER BY Minute FORMAT Null", "SELECT uniq(SearchPhrase) FROM hits_100m_single FORMAT Null", "SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null", "SELECT uniq(UserID) FROM hits_100m_single FORMAT Null", "SELECT uniq(UserID) FROM hits_10m_single FORMAT Null"]}}, "reportErrors": [], "compareLog": [{"date": "2020-04-14", "time": "04:09:48", "info": "+ ../download.sh 0 29bb9f666565129587846f1507c9a4a5dad8a24e 0 b8be58559598ec31450d14c8cf526ee79dc571ac"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ set -o pipefail"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ trap exit INT TERM"}, {"date": "2020-04-14", "time": "04:09:48", "info": "++ jobs -pr"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ trap 'kill ||:' EXIT"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ mkdir db0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ left_pr=0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ left_sha=29bb9f666565129587846f1507c9a4a5dad8a24e"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ right_pr=0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ right_sha=b8be58559598ec31450d14c8cf526ee79dc571ac"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ datasets='hits1 hits10 hits100 values'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ declare -A dataset_paths"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_paths[\"hits10\"]=https://s3.mds.yandex.net/clickhouse-private-datasets/hits_10m_single/partitions/hits_10m_single.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_paths[\"hits100\"]=https://s3.mds.yandex.net/clickhouse-private-datasets/hits_100m_single/partitions/hits_100m_single.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_paths[\"hits1\"]=https://clickhouse-datasets.s3.yandex.net/hits/partitions/hits_v1.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_paths[\"values\"]=https://clickhouse-datasets.s3.yandex.net/values_with_expressions/partitions/test_values.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ download"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ rm -r left"}, {"date": "2020-04-14", "time": "04:09:48", "info": "rm: cannot remove 'left': No such file or directory"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ :"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ mkdir left"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ rm -r right"}, {"date": "2020-04-14", "time": "04:09:48", "info": "rm: cannot remove 'right': No such file or directory"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ :"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ mkdir right"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ '[' 29bb9f666565129587846f1507c9a4a5dad8a24e = b8be58559598ec31450d14c8cf526ee79dc571ac ']'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://clickhouse-builds.s3.yandex.net/0/29bb9f666565129587846f1507c9a4a5dad8a24e/performance/performance.tgz -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ for dataset_name in $datasets"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -C left --strip-components=1 -zxv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_path=https://clickhouse-datasets.s3.yandex.net/hits/partitions/hits_v1.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://clickhouse-builds.s3.yandex.net/0/b8be58559598ec31450d14c8cf526ee79dc571ac/performance/performance.tgz -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ '[' https://clickhouse-datasets.s3.yandex.net/hits/partitions/hits_v1.tar '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -C right --strip-components=1 -zxv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ for dataset_name in $datasets"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_path=https://s3.mds.yandex.net/clickhouse-private-datasets/hits_10m_single/partitions/hits_10m_single.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ '[' https://s3.mds.yandex.net/clickhouse-private-datasets/hits_10m_single/partitions/hits_10m_single.tar '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ cd db0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ for dataset_name in $datasets"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_path=https://s3.mds.yandex.net/clickhouse-private-datasets/hits_100m_single/partitions/hits_100m_single.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ '[' https://s3.mds.yandex.net/clickhouse-private-datasets/hits_100m_single/partitions/hits_100m_single.tar '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ cd db0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ for dataset_name in $datasets"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ dataset_path=https://clickhouse-datasets.s3.yandex.net/values_with_expressions/partitions/test_values.tar"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ '[' https://clickhouse-datasets.s3.yandex.net/values_with_expressions/partitions/test_values.tar '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://clickhouse-datasets.s3.yandex.net/hits/partitions/hits_v1.tar -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ mkdir /root/fg"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ cd db0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -xv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ cd db0"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://s3.mds.yandex.net/clickhouse-private-datasets/hits_10m_single/partitions/hits_10m_single.tar -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -xv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://s3.mds.yandex.net/clickhouse-private-datasets/hits_100m_single/partitions/hits_100m_single.tar -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://clickhouse-datasets.s3.yandex.net/values_with_expressions/partitions/test_values.tar -O-"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -xv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ tar -xv"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wait"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ cd /root/fg"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ wget -nv -nd -c https://raw.githubusercontent.com/brendangregg/FlameGraph/master/flamegraph.pl"}, {"date": "2020-04-14", "time": "04:09:48", "info": "2020-04-14 04:09:48 URL:https://raw.githubusercontent.com/brendangregg/FlameGraph/master/flamegraph.pl [35898/35898] -> \"flamegraph.pl\" [1]"}, {"date": "2020-04-14", "time": "04:09:48", "info": "+ chmod +x /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/perf.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/eqmed.sql"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/report.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/download.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/users.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/users.d/perf-comparison-tweaks-users.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/config.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/config.d/perf-comparison-tweaks-config.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/performance_comparison.md"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/compare.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/entrypoint.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/Dockerfile"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-local"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-extract-from-config"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-format"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-compressor"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-client"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-benchmark"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/users.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/users.d/perf-comparison-tweaks-users.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/users.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/path.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/zookeeper.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/more_clusters.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/tls.xml.disabled"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/part_log.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/listen.xml.disabled"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/macros.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/perf-comparison-tweaks-config.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/text_log.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/metric_log.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/query_masking_rules.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/config/config.d/log_to_console.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-copier"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/leftpad.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/float_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/columns_hashing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cpu_synthetic.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_many_partitions.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/h3.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/int_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/early_constant_folding.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/general_purpose_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/linear_regression.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_fill.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_time.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_whitespace.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/collations.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/website.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_to_multiif.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/round_methods.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/count.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/information_value.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/README.md"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_time_64.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/first_significant_subdomain.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/decimal_aggregates.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/great_circle_dist.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/IPv4.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_float_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_many_partitions_2.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_int_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/insert_values_with_expressions.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_table_streams.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bit_operations_fixed_string.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/parse_engine_file.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/complex_array_creation.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/select_format.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_array_string.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/ngram_distance.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/nyc_taxi.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/url_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/entropy.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/arithmetic.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/IPv6.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_small.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/fixed_string16.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_set.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/pre_limit_no_sorting.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/column_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/range.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/concat_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_sort.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/group_array_moving_sum.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/number_formatting_formats.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bit_operations_fixed_string_numbers.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/json_extract_simdjson.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/basename.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/mingroupby-orderbylimit1.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/base64.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/math.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/joins_in_memory_pmj.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/read_hits_with_aio.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_join.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/functions_geo.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/empty_string_deserialization.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_string_const.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_array_num.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/uniq.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_read_in_order.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/empty_string_serialization.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/sum_map.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/jit_large_requests.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_element.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cryptographic_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/right.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set_index.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_numbers.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_string_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bitCount.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/and_function.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/inserts_arrays_lowcardinality.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_int_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/synthetic_hardware_benchmark.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_reduce.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/parallel_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_medium.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bloom_filter.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/analyze_array_tuples.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cidr.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/conditional.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/float_formatting.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bounding_ratio.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/functions_coding.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/joins_in_memory.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/prewhere.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/round_down.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_single_column.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_huge_pk.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_float_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/format_date_time.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_simple_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/vectorize_aggregation_combinators.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/jit_small_requests.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_decimals.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/constant_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_urls.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/sort.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/slices_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/json_extract_rapidjson.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/constant_column_search.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/scalar.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_auc.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/base64_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/random_printable_ascii.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/generate_table_function.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/consistent_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/create_benchmark_page.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/simple_join_query.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/visit_param_extract_raw.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_join.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/distributed_aggregation.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_large.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/agg_functions_min_max_any.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/modulo.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/general_purpose_hashes_on_UUID.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-obfuscator"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-server"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse"}, {"date": "2020-04-14", "time": "04:09:48", "info": "user_files/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "user_files/test_all_expr_matches.values"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/compare.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/Dockerfile"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/entrypoint.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/download.sh"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/eqmed.sql"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/config.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/config.d/perf-comparison-tweaks-config.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/users.d/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/config/users.d/perf-comparison-tweaks-users.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/perf.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/performance_comparison.md"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/scripts/report.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse-copier"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/range.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bitCount.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_decimals.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/parallel_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/great_circle_dist.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/select_format.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/h3.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_join.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/insert_values_with_expressions.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/agg_functions_min_max_any.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_set.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/IPv4.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/column_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_numbers.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_element.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/parse_engine_file.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/distributed_aggregation.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/math.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_time.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/read_hits_with_aio.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_whitespace.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/trim_urls.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_float_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_string_const.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_to_multiif.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/decimal_aggregates.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/mingroupby-orderbylimit1.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/and_function.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/complex_array_creation.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/general_purpose_hashes_on_UUID.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/url_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_sort.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/IPv6.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/random_printable_ascii.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/generate_table_function.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/constant_column_search.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/ngram_distance.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/jit_small_requests.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/first_significant_subdomain.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bloom_filter.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/empty_string_deserialization.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/vectorize_aggregation_combinators.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_large.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_table_streams.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_many_partitions.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_read_in_order.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/right.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bounding_ratio.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/information_value.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/analyze_array_tuples.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/sum_map.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/linear_regression.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/joins_in_memory.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/concat_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bit_operations_fixed_string_numbers.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/leftpad.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/order_by_single_column.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/nyc_taxi.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_array_string.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/functions_coding.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/bit_operations_fixed_string.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/README.md"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/modulo.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/round_methods.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/json_extract_rapidjson.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/simple_join_query.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cpu_synthetic.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/string_join.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/general_purpose_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/synthetic_hardware_benchmark.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/sort.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/inserts_arrays_lowcardinality.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/base64.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/functions_geo.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_int_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/entropy.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_array_num.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/uniq.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/basename.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/number_formatting_formats.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_reduce.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/format_date_time.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/jit_large_requests.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/set_index.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/scalar.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_auc.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/consistent_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/count.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/columns_hashing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/slices_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/joins_in_memory_pmj.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/create_benchmark_page.py"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/website.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/date_time_64.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/group_array_moving_sum.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/visit_param_extract_raw.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/array_fill.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/base64_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_many_partitions_2.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/arithmetic.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/int_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/float_formatting.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_float_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/json_extract_simdjson.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/fixed_string16.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cidr.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/collations.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/empty_string_serialization.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/pre_limit_no_sorting.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/prewhere.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/cryptographic_hashes.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_medium.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/logical_functions_small.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/constant_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_simple_select.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/float_parsing.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/merge_tree_huge_pk.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/if_string_hits.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/conditional.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/early_constant_folding.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/codecs_int_insert.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/performance/round_down.xml"}, {"date": "2020-04-14", "time": "04:09:48", "info": "output/clickhouse"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/format_version.txt"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/detached/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/IsMobile.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey3.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/NetMajor.mrk"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/HTTPError.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/ParamPrice.mrk"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/UTMSource.mrk"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/URLDomain.mrk"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/Refresh.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/MobilePhoneModel.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/RefererRegions.mrk"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/IsOldCounter.bin"}, {"date": "2020-04-14", "time": "04:09:48", "info": "data/datasets/hits_v1/201403_10_18_2/URL.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "user_files/test_some_expr_matches.values"}, {"date": "2020-04-14", "time": "04:09:49", "info": "2020-04-14 04:09:49 URL:https://clickhouse-datasets.s3.yandex.net/values_with_expressions/partitions/test_values.tar [35379200/35379200] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsMobile.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/NetMajor.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HTTPError.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamPrice.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMSource.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Refresh.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/MobilePhoneModel.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsOldCounter.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URL.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsMobile.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/NetMajor.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HTTPError.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamPrice.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMSource.mrk"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Refresh.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/MobilePhoneModel.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsOldCounter.bin"}, {"date": "2020-04-14", "time": "04:09:49", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URL.bin"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/RefererDomain.mrk"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/HID.bin"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HID.bin"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/primary.idx"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/BrowserLanguage.bin"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/ClientEventTime.mrk"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/FirstPaintTiming.bin"}, {"date": "2020-04-14", "time": "04:09:50", "info": "data/datasets/hits_v1/201403_10_18_2/GeneralInterests.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EValueDouble.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/UTMMedium.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/SearchPhrase.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMajor.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/DOMContentLoadedTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/UTMCampaign.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/CLID.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/GoodEvent.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/ShareTitle.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/URL.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/OS.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/WindowClientWidth.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/EventDate.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/HasGCLID.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionDepth.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/ClientEventTime.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/primary.idx"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/BrowserLanguage.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientEventTime.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMMedium.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SearchPhrase.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMajor.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMCampaign.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CLID.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/GoodEvent.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URL.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OS.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/LocalEventTime.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/IsDownload.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/URLRegions.size0.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/YCLID.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/BrowserCountry.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/GoalsReached.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion3.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/CookieEnable.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/RefererRegions.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/Sex.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/CodeVersion.mrk"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/FUniqID.bin"}, {"date": "2020-04-14", "time": "04:09:51", "info": "data/datasets/hits_v1/201403_10_18_2/SearchEngineID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/Age.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/SendTiming.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/RemoteIP.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowClientWidth.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/CodeVersion.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/UTMContent.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/IsOldCounter.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/NetMajor.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/ParamPrice.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/RefererRegions.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/IsNotBounce.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/EventDate.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HasGCLID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionDepth.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion2.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientEventTime.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/ShareService.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/columns.txt"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/RedirectTiming.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/IPNetworkID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/Robotness.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatServiceName.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/IslandID.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey5.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/datasets/hits_v1/201403_10_18_2/Title.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsDownload.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/BrowserCountry.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion3.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CookieEnable.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Sex.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CodeVersion.mrk"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FUniqID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SearchEngineID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Age.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SendTiming.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererRegionID.bin"}, {"date": "2020-04-14", "time": "04:09:52", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RemoteIP.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CodeVersion.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMContent.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsOldCounter.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/NetMajor.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamPrice.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsNotBounce.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion2.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLRegionID.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/columns.txt"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IPNetworkID.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Robotness.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLCategoryID.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatServiceName.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Title.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMinor2.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/IPNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/IsArtifical.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/FirstPaintTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/IsDownload.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/SocialSourcePage.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ClientIP6.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/IsMobile.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/BrowserLanguage.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/EventDate.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/OpenerName.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ClientTimeZone.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ResponseEndTiming.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/SocialAction.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgentMinor.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/Income.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams.size0.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/MobilePhone.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/Refresh.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMinor.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ResponseStartTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/CLID.bin"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/WatchID.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/SearchEngineID.mrk"}, {"date": "2020-04-14", "time": "04:09:53", "info": "data/datasets/hits_v1/201403_10_18_2/ResponseStartTiming.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/AdvEngineID.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/RequestTry.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/IsEvent.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/Title.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey3.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/WindowClientHeight.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/URLCategories.size0.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/OpenerName.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/CounterID.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/ConnectTiming.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMajor.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/LoadEventEndTiming.bin"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/IsNotBounce.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey4.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/CounterClass.mrk"}, {"date": "2020-04-14", "time": "04:09:54", "info": "data/datasets/hits_v1/201403_10_18_2/Referer.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMinor2.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IPNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsArtifical.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsDownload.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialSourcePage.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsMobile.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/BrowserLanguage.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/EventDate.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenerName.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientTimeZone.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResponseEndTiming.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialAction.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgentMinor.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Income.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/MobilePhone.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Refresh.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMinor.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResponseStartTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CLID.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WatchID.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SearchEngineID.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResponseStartTiming.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/AdvEngineID.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsEvent.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Title.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowClientHeight.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenerName.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CounterID.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ConnectTiming.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMajor.bin"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsNotBounce.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OriginalURL.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CounterClass.mrk"}, {"date": "2020-04-14", "time": "04:09:55", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Referer.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/Income.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey5.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/MobilePhone.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/URLRegions.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/ParamCurrency.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/SocialSourcePage.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/HitColor.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion2.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/AdvEngineID.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgentMinor.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/HTTPError.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/FetchTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/ShareURL.mrk"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgentMajor.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/URLRegions.bin"}, {"date": "2020-04-14", "time": "04:09:56", "info": "data/datasets/hits_v1/201403_10_18_2/UserID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EValueDouble.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/CookieEnable.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SendTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SocialSourceNetworkID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/JavaEnable.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ParamCurrency.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UTMMedium.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RedirectCount.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatCampaignID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RemoteIP.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DOMContentLoadedTiming.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionHeight.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion3.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/HID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/JavascriptEnable.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DOMCompleteTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/WindowClientWidth.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ParamCurrencyID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SearchPhrase.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/JavascriptEnable.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ShareService.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SocialAction.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion4.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RefererCategories.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey4.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/PageCharset.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatCampaignID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/URLCategories.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/WithHash.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UTMTerm.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatSourceID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/URLHash.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/Params.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/LoadEventEndTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/IsRobot.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/TraficSourceID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UTCEventTime.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/GeneralInterests.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/FromTag.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DOMInteractiveTiming.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/GeneralInterests.size0.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DNSTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UTCEventTime.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionDepth.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ClientIP6.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OS.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RemoteIP6.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/WindowClientHeight.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DontCountHits.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionHeight.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey2.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/Interests.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion1.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/checksums.txt"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/IsLink.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMinor2.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ResponseEndTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RegionID.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgent.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/BrowserCountry.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UserID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/IsParameter.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ShareURL.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RegionID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/LoadEventStartTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatSourceID.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/GeneralInterests.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ConnectTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatServiceName.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/FlashMinor.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/DOMInteractiveTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgent.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/Sex.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/FromTag.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/Referer.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/Params.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/ShareTitle.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RefererCategories.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/RemoteIP6.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/IsRobot.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/URLCategories.mrk"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/URLDomain.bin"}, {"date": "2020-04-14", "time": "04:09:57", "info": "data/datasets/hits_v1/201403_10_18_2/IsArtifical.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ClientIP.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/URLRegions.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/count.txt"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatAdID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey1.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/OpenstatAdID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RefererDomain.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/UTMTerm.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ParamOrderID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/UTMContent.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/MobilePhoneModel.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RedirectCount.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion1.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Income.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/MobilePhone.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererCategoryID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamCurrency.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialSourcePage.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HitColor.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion2.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/AdvEngineID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgentMinor.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HTTPError.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FetchTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgentMajor.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CookieEnable.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SendTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialSourceNetworkID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/JavaEnable.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamCurrency.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMMedium.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatCampaignID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RemoteIP.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionHeight.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/EventTime.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/NSToDOMContentLoadedTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/CounterClass.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/Age.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ParamOrderID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/minmax_EventDate.idx"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/partition.dat"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/HistoryLength.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/SocialSourceNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/GoalsReached.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/UTMCampaign.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/HistoryLength.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/PageCharset.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/SocialNetwork.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/IsParameter.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/Interests.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionWidth.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/DontCountHits.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ResolutionWidth.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/IsEvent.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RefererHash.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/WindowName.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RequestNum.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion3.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/CounterID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/TraficSourceID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/JavascriptEnable.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowClientWidth.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamCurrencyID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SearchPhrase.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/HitColor.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/JavaEnable.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RefererCategories.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/GoodEvent.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/URLCategories.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/DOMCompleteTiming.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey1.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/NSToDOMContentLoadedTiming.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/SilverlightVersion4.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/Robotness.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/FetchTiming.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/IsLink.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/FUniqID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/datasets/hits_v1/201403_10_18_2/RefererRegions.size0.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/JavascriptEnable.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialAction.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion4.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/PageCharset.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatCampaignID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererCategoryID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WithHash.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMTerm.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatSourceID.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLHash.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLRegionID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Params.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/TraficSourceID.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FromTag.bin"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/DNSTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionDepth.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OS.mrk"}, {"date": "2020-04-14", "time": "04:09:58", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowClientHeight.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/LoadEventStartTiming.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/NetMinor.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/URLHash.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/RefererHash.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/DontCountHits.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionHeight.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Interests.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion1.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/checksums.txt"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsLink.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMinor2.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResponseEndTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RegionID.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgent.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/BrowserCountry.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/YCLID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/GoalsReached.size0.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/WindowName.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/RefererCategories.size0.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/ClientTimeZone.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/EventTime.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/RedirectTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/WithHash.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/ClientIP.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/SocialNetwork.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/HasGCLID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/ParamCurrencyID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/IslandID.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/GoalsReached.size0.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/DNSTiming.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsParameter.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RegionID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatSourceID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ConnectTiming.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatServiceName.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FlashMinor.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/ParsedParams%2EKey2.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/RequestNum.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/datasets/hits_v1/201403_10_18_2/WatchID.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgent.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Sex.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FromTag.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Referer.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Params.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsArtifical.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientIP.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatAdID.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OpenstatAdID.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMTerm.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamOrderID.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMContent.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/MobilePhoneModel.mrk"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion1.bin"}, {"date": "2020-04-14", "time": "04:09:59", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/EventTime.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/datasets/hits_v1/201403_10_18_2/UserAgentMajor.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/datasets/hits_v1/201403_10_18_2/RequestTry.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/datasets/hits_v1/201403_10_18_2/UTMSource.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/datasets/hits_v1/201403_10_18_2/NetMinor.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "metadata/datasets/hits_v1.sql"}, {"date": "2020-04-14", "time": "04:10:00", "info": "2020-04-14 04:10:00 URL:https://clickhouse-datasets.s3.yandex.net/hits/partitions/hits_v1.tar [1271623680/1271623680] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CounterClass.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Age.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamOrderID.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HistoryLength.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialSourceNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMCampaign.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HistoryLength.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/PageCharset.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialNetwork.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsParameter.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Interests.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionWidth.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/DontCountHits.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ResolutionWidth.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsEvent.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererHash.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowName.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererRegionID.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/CounterID.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/TraficSourceID.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HitColor.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/JavaEnable.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/GoodEvent.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SilverlightVersion4.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/Robotness.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FetchTiming.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/IsLink.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/OriginalURL.bin"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/FUniqID.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/NetMinor.mrk"}, {"date": "2020-04-14", "time": "04:10:00", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLHash.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/RefererHash.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WindowName.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientTimeZone.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/EventTime.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WithHash.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ClientIP.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/SocialNetwork.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/LocalEventTime.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/HasGCLID.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/ParamCurrencyID.mrk"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/DNSTiming.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/URLCategoryID.bin"}, {"date": "2020-04-14", "time": "04:10:01", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/WatchID.bin"}, {"date": "2020-04-14", "time": "04:10:02", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UserAgentMajor.mrk"}, {"date": "2020-04-14", "time": "04:10:02", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/UTMSource.bin"}, {"date": "2020-04-14", "time": "04:10:02", "info": "data/default/hits_10m_single/20130702_20130723_2_318_6/NetMinor.bin"}, {"date": "2020-04-14", "time": "04:10:02", "info": "data/default/hits_10m_single/format_version.txt"}, {"date": "2020-04-14", "time": "04:10:02", "info": "2020-04-14 04:10:02 URL:https://s3.mds.yandex.net/clickhouse-private-datasets/hits_10m_single/partitions/hits_10m_single.tar [1179054080/1179054080] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:10:02", "info": "data/default/hits_10m_single/detached/"}, {"date": "2020-04-14", "time": "04:10:02", "info": "metadata/default/hits_10m_single.sql"}, {"date": "2020-04-14", "time": "04:10:07", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HID.bin"}, {"date": "2020-04-14", "time": "04:10:09", "info": "2020-04-14 04:10:09 URL:https://clickhouse-builds.s3.yandex.net/0/29bb9f666565129587846f1507c9a4a5dad8a24e/performance/performance.tgz [856429793/856429793] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-extract-from-config"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-local"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-server"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-client"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-benchmark"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-compressor"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-obfuscator"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/tls.xml.disabled"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/listen.xml.disabled"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/metric_log.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/zookeeper.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/perf-comparison-tweaks-config.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/part_log.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/text_log.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/path.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/more_clusters.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/query_masking_rules.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/log_to_console.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.d/macros.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/config.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/users.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/users.d/"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/config/users.d/perf-comparison-tweaks-users.xml"}, {"date": "2020-04-14", "time": "04:10:09", "info": "output/clickhouse-format"}, {"date": "2020-04-14", "time": "04:10:09", "info": "2020-04-14 04:10:09 URL:https://clickhouse-builds.s3.yandex.net/0/b8be58559598ec31450d14c8cf526ee79dc571ac/performance/performance.tgz [856464926/856464926] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:10:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/primary.idx"}, {"date": "2020-04-14", "time": "04:10:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/BrowserLanguage.bin"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientEventTime.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMMedium.bin"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SearchPhrase.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMajor.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMCampaign.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CLID.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/GoodEvent.bin"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URL.mrk"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OS.bin"}, {"date": "2020-04-14", "time": "04:10:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/LocalEventTime.bin"}, {"date": "2020-04-14", "time": "04:10:16", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowClientWidth.bin"}, {"date": "2020-04-14", "time": "04:10:16", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/EventDate.mrk"}, {"date": "2020-04-14", "time": "04:10:16", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HasGCLID.bin"}, {"date": "2020-04-14", "time": "04:10:16", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionDepth.bin"}, {"date": "2020-04-14", "time": "04:10:17", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientEventTime.bin"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsDownload.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/BrowserCountry.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion3.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CookieEnable.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Sex.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CodeVersion.mrk"}, {"date": "2020-04-14", "time": "04:10:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FUniqID.bin"}, {"date": "2020-04-14", "time": "04:10:24", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SearchEngineID.bin"}, {"date": "2020-04-14", "time": "04:10:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Age.bin"}, {"date": "2020-04-14", "time": "04:10:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SendTiming.bin"}, {"date": "2020-04-14", "time": "04:10:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererRegionID.bin"}, {"date": "2020-04-14", "time": "04:10:26", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RemoteIP.bin"}, {"date": "2020-04-14", "time": "04:10:28", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CodeVersion.bin"}, {"date": "2020-04-14", "time": "04:10:28", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMContent.bin"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsOldCounter.mrk"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/NetMajor.bin"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamPrice.bin"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsNotBounce.bin"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion2.bin"}, {"date": "2020-04-14", "time": "04:10:29", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLRegionID.bin"}, {"date": "2020-04-14", "time": "04:10:30", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/columns.txt"}, {"date": "2020-04-14", "time": "04:10:30", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IPNetworkID.bin"}, {"date": "2020-04-14", "time": "04:10:32", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Robotness.bin"}, {"date": "2020-04-14", "time": "04:10:32", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLCategoryID.mrk"}, {"date": "2020-04-14", "time": "04:10:32", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatServiceName.bin"}, {"date": "2020-04-14", "time": "04:10:32", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Title.bin"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMinor2.bin"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IPNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsArtifical.mrk"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsDownload.bin"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialSourcePage.mrk"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsMobile.mrk"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/BrowserLanguage.mrk"}, {"date": "2020-04-14", "time": "04:10:52", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/EventDate.bin"}, {"date": "2020-04-14", "time": "04:10:53", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenerName.bin"}, {"date": "2020-04-14", "time": "04:10:53", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientTimeZone.bin"}, {"date": "2020-04-14", "time": "04:10:53", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResponseEndTiming.bin"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialAction.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgentMinor.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Income.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/MobilePhone.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Refresh.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMinor.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResponseStartTiming.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CLID.bin"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WatchID.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SearchEngineID.mrk"}, {"date": "2020-04-14", "time": "04:10:54", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResponseStartTiming.bin"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/AdvEngineID.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsEvent.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Title.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowClientHeight.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenerName.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CounterID.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ConnectTiming.bin"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMajor.bin"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsNotBounce.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OriginalURL.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CounterClass.mrk"}, {"date": "2020-04-14", "time": "04:10:56", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Referer.bin"}, {"date": "2020-04-14", "time": "04:11:10", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Income.bin"}, {"date": "2020-04-14", "time": "04:11:10", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/MobilePhone.bin"}, {"date": "2020-04-14", "time": "04:11:10", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererCategoryID.bin"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamCurrency.mrk"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialSourcePage.bin"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HitColor.mrk"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion2.mrk"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/AdvEngineID.bin"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgentMinor.bin"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HTTPError.mrk"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FetchTiming.mrk"}, {"date": "2020-04-14", "time": "04:11:11", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgentMajor.bin"}, {"date": "2020-04-14", "time": "04:11:12", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserID.bin"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CookieEnable.bin"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SendTiming.mrk"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialSourceNetworkID.bin"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/JavaEnable.bin"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamCurrency.bin"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMMedium.mrk"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatCampaignID.mrk"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RemoteIP.mrk"}, {"date": "2020-04-14", "time": "04:11:14", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionHeight.bin"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion3.bin"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HID.mrk"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/JavascriptEnable.bin"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowClientWidth.mrk"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamCurrencyID.bin"}, {"date": "2020-04-14", "time": "04:11:15", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SearchPhrase.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/JavascriptEnable.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialAction.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion4.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/PageCharset.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatCampaignID.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererCategoryID.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WithHash.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMTerm.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatSourceID.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLHash.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLRegionID.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Params.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/TraficSourceID.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FromTag.bin"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/DNSTiming.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionDepth.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OS.mrk"}, {"date": "2020-04-14", "time": "04:11:18", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowClientHeight.bin"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/DontCountHits.bin"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionHeight.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Interests.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion1.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/checksums.txt"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsLink.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMinor2.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResponseEndTiming.mrk"}, {"date": "2020-04-14", "time": "04:11:19", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RegionID.bin"}, {"date": "2020-04-14", "time": "04:11:20", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgent.bin"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/BrowserCountry.bin"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserID.mrk"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsParameter.bin"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RegionID.mrk"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatSourceID.mrk"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ConnectTiming.mrk"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatServiceName.mrk"}, {"date": "2020-04-14", "time": "04:11:21", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FlashMinor.bin"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgent.mrk"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Sex.bin"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FromTag.mrk"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Referer.mrk"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Params.mrk"}, {"date": "2020-04-14", "time": "04:11:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsArtifical.bin"}, {"date": "2020-04-14", "time": "04:11:23", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientIP.bin"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatAdID.mrk"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OpenstatAdID.bin"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMTerm.mrk"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamOrderID.bin"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMContent.mrk"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/MobilePhoneModel.mrk"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion1.bin"}, {"date": "2020-04-14", "time": "04:11:25", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/EventTime.bin"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CounterClass.bin"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Age.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamOrderID.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HistoryLength.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialSourceNetworkID.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMCampaign.bin"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HistoryLength.bin"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/PageCharset.bin"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialNetwork.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsParameter.mrk"}, {"date": "2020-04-14", "time": "04:11:31", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Interests.bin"}, {"date": "2020-04-14", "time": "04:11:32", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionWidth.bin"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/DontCountHits.mrk"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ResolutionWidth.mrk"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsEvent.bin"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererHash.mrk"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowName.bin"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererRegionID.mrk"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/CounterID.bin"}, {"date": "2020-04-14", "time": "04:11:33", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/TraficSourceID.bin"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HitColor.bin"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/JavaEnable.mrk"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/GoodEvent.mrk"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SilverlightVersion4.mrk"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/Robotness.mrk"}, {"date": "2020-04-14", "time": "04:11:34", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FetchTiming.bin"}, {"date": "2020-04-14", "time": "04:11:35", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/IsLink.bin"}, {"date": "2020-04-14", "time": "04:11:35", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/OriginalURL.bin"}, {"date": "2020-04-14", "time": "04:12:05", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/FUniqID.mrk"}, {"date": "2020-04-14", "time": "04:12:05", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/NetMinor.mrk"}, {"date": "2020-04-14", "time": "04:12:05", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLHash.bin"}, {"date": "2020-04-14", "time": "04:12:17", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/RefererHash.bin"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WindowName.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientTimeZone.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/EventTime.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WithHash.bin"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ClientIP.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/SocialNetwork.bin"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/LocalEventTime.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/HasGCLID.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/ParamCurrencyID.mrk"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/DNSTiming.bin"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/URLCategoryID.bin"}, {"date": "2020-04-14", "time": "04:12:22", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/WatchID.bin"}, {"date": "2020-04-14", "time": "04:12:30", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UserAgentMajor.mrk"}, {"date": "2020-04-14", "time": "04:12:30", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/UTMSource.bin"}, {"date": "2020-04-14", "time": "04:12:30", "info": "data/default/hits_100m_single/20130702_20130731_2_3072_9/NetMinor.bin"}, {"date": "2020-04-14", "time": "04:12:30", "info": "data/default/hits_100m_single/format_version.txt"}, {"date": "2020-04-14", "time": "04:12:30", "info": "2020-04-14 04:12:30 URL:https://s3.mds.yandex.net/clickhouse-private-datasets/hits_100m_single/partitions/hits_100m_single.tar [10990807040/10990807040] -> \"-\" [1]"}, {"date": "2020-04-14", "time": "04:12:30", "info": "data/default/hits_100m_single/detached/"}, {"date": "2020-04-14", "time": "04:12:30", "info": "metadata/default/hits_100m_single.sql"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ kill"}, {"date": "2020-04-14", "time": "04:12:30", "info": "kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ :"}, {"date": "2020-04-14", "time": "04:12:30", "info": ""}, {"date": "2020-04-14", "time": "04:12:30", "info": "real 2m41.545s"}, {"date": "2020-04-14", "time": "04:12:30", "info": "user 0m43.356s"}, {"date": "2020-04-14", "time": "04:12:30", "info": "sys 0m37.436s"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ stage=configure"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ right/scripts/compare.sh"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ set -o pipefail"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ trap exit INT TERM"}, {"date": "2020-04-14", "time": "04:12:30", "info": "++ jobs -pr"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ trap 'kill ||:' EXIT"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ stage=configure"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+++ dirname right/scripts/compare.sh"}, {"date": "2020-04-14", "time": "04:12:30", "info": "++ cd right/scripts"}, {"date": "2020-04-14", "time": "04:12:30", "info": "++ pwd"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ script_dir=/workspace/right/scripts"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ case \"$stage\" in"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ configure"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ rm right/config/config.d/text_log.xml"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ cp -rv right/config left"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/users.xml' -> 'left/config/users.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.xml' -> 'left/config/config.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/users.d/perf-comparison-tweaks-users.xml' -> 'left/config/users.d/perf-comparison-tweaks-users.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/path.xml' -> 'left/config/config.d/path.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/zookeeper.xml' -> 'left/config/config.d/zookeeper.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/more_clusters.xml' -> 'left/config/config.d/more_clusters.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/tls.xml.disabled' -> 'left/config/config.d/tls.xml.disabled'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/part_log.xml' -> 'left/config/config.d/part_log.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/listen.xml.disabled' -> 'left/config/config.d/listen.xml.disabled'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/macros.xml' -> 'left/config/config.d/macros.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/perf-comparison-tweaks-config.xml' -> 'left/config/config.d/perf-comparison-tweaks-config.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/metric_log.xml' -> 'left/config/config.d/metric_log.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/query_masking_rules.xml' -> 'left/config/config.d/query_masking_rules.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "'right/config/config.d/log_to_console.xml' -> 'left/config/config.d/log_to_console.xml'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ sed -i 's/<tcp_port>9000/<tcp_port>9001/g' left/config/config.xml"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ sed -i 's/<tcp_port>9000/<tcp_port>9002/g' right/config/config.xml"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:30", "info": "clickhouse: no process found"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ echo all killed"}, {"date": "2020-04-14", "time": "04:12:30", "info": "all killed"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ set -m"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ left_pid=96"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ kill -0 96"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ disown 96"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ set +m"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ left/clickhouse client --port 9001 --query 'select 1'"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ left/clickhouse server --config-file=left/config/config.xml -- --path db0"}, {"date": "2020-04-14", "time": "04:12:30", "info": "Code: 210. DB::NetException: Connection refused (localhost:9001)"}, {"date": "2020-04-14", "time": "04:12:30", "info": ""}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ kill -0 96"}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:30", "info": "."}, {"date": "2020-04-14", "time": "04:12:30", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ left/clickhouse client --port 9001 --query 'select 1'"}, {"date": "2020-04-14", "time": "04:12:31", "info": "1"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ echo server for setup started"}, {"date": "2020-04-14", "time": "04:12:31", "info": "server for setup started"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ left/clickhouse client --port 9001 --query 'create database test'"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ left/clickhouse client --port 9001 --query 'rename table datasets.hits_v1 to test.hits'"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:31", "info": "."}, {"date": "2020-04-14", "time": "04:12:31", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:32", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:32", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:32", "info": "."}, {"date": "2020-04-14", "time": "04:12:32", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:33", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:33", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:33", "info": "."}, {"date": "2020-04-14", "time": "04:12:33", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:34", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:34", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:34", "info": "."}, {"date": "2020-04-14", "time": "04:12:34", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:35", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:35", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:35", "info": "."}, {"date": "2020-04-14", "time": "04:12:35", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:36", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:36", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:36", "info": "."}, {"date": "2020-04-14", "time": "04:12:36", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:37", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:37", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:37", "info": "."}, {"date": "2020-04-14", "time": "04:12:37", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:38", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:38", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:38", "info": "."}, {"date": "2020-04-14", "time": "04:12:38", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:39", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:39", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:39", "info": "."}, {"date": "2020-04-14", "time": "04:12:39", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:40", "info": "clickhouse: no process found"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ echo all killed"}, {"date": "2020-04-14", "time": "04:12:40", "info": "all killed"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ rm db0/data/system/metric_log db0/data/system/query_log db0/data/system/query_thread_log db0/data/system/text_log -rf"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ rm db0/metadata/system/metric_log.sql db0/metadata/system/query_log.sql db0/metadata/system/query_thread_log.sql db0/metadata/system/text_log.sql -rf"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ rm -r left/db"}, {"date": "2020-04-14", "time": "04:12:40", "info": "rm: cannot remove 'left/db': No such file or directory"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ :"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ rm -r right/db"}, {"date": "2020-04-14", "time": "04:12:40", "info": "rm: cannot remove 'right/db': No such file or directory"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ :"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ rm -r db0/preprocessed_configs"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ cp -al db0/ left/db/"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ cp -al db0/ right/db/"}, {"date": "2020-04-14", "time": "04:12:40", "info": ""}, {"date": "2020-04-14", "time": "04:12:40", "info": "real 0m10.098s"}, {"date": "2020-04-14", "time": "04:12:40", "info": "user 0m0.232s"}, {"date": "2020-04-14", "time": "04:12:40", "info": "sys 0m0.056s"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ restart"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "04:12:40", "info": "clickhouse: no process found"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ echo all killed"}, {"date": "2020-04-14", "time": "04:12:40", "info": "all killed"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ set -m"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ left_pid=194"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ kill -0 194"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ disown 194"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ left/clickhouse server --config-file=left/config/config.xml -- --path left/db"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ right_pid=195"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ kill -0 195"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ disown 195"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ set +m"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ left/clickhouse client --port 9001 --query 'select 1'"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ right/clickhouse server --config-file=right/config/config.xml -- --path right/db"}, {"date": "2020-04-14", "time": "04:12:40", "info": "Code: 210. DB::NetException: Connection refused (localhost:9001)"}, {"date": "2020-04-14", "time": "04:12:40", "info": ""}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ kill -0 194"}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ echo ."}, {"date": "2020-04-14", "time": "04:12:40", "info": "."}, {"date": "2020-04-14", "time": "04:12:40", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ left/clickhouse client --port 9001 --query 'select 1'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ echo left ok"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left ok"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ right/clickhouse client --port 9002 --query 'select 1'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ echo right ok"}, {"date": "2020-04-14", "time": "04:12:41", "info": "right ok"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.tables where database != '\\''system'\\'''"}, {"date": "2020-04-14", "time": "04:12:41", "info": "default hits_100m_single MergeTree 0 ['left/db/data/default/hits_100m_single/'] left/db/metadata/default/hits_100m_single.sql 2015-05-26 22:30:23 [] [] CREATE TABLE default.hits_100m_single (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `Refresh` UInt8, `RefererCategoryID` UInt16, `RefererRegionID` UInt32, `URLCategoryID` UInt16, `URLRegionID` UInt32, `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `OriginalURL` String, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `LocalEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `RemoteIP` UInt32, `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` UInt32, `DNSTiming` UInt32, `ConnectTiming` UInt32, `ResponseStartTiming` UInt32, `ResponseEndTiming` UInt32, `FetchTiming` UInt32, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32) ENGINE = MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID), EventTime CounterID, EventDate, intHash32(UserID), EventTime intHash32(UserID) default 100000000 10990621246"}, {"date": "2020-04-14", "time": "04:12:41", "info": "default hits_10m_single MergeTree 0 ['left/db/data/default/hits_10m_single/'] left/db/metadata/default/hits_10m_single.sql 2015-05-26 22:30:25 [] [] CREATE TABLE default.hits_10m_single (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `Refresh` UInt8, `RefererCategoryID` UInt16, `RefererRegionID` UInt32, `URLCategoryID` UInt16, `URLRegionID` UInt32, `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `OriginalURL` String, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `LocalEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `RemoteIP` UInt32, `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` UInt32, `DNSTiming` UInt32, `ConnectTiming` UInt32, `ResponseStartTiming` UInt32, `ResponseEndTiming` UInt32, `FetchTiming` UInt32, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32) ENGINE = MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID), EventTime CounterID, EventDate, intHash32(UserID), EventTime intHash32(UserID) default 10000000 1178842940"}, {"date": "2020-04-14", "time": "04:12:41", "info": "test hits MergeTree 0 ['left/db/data/test/hits/'] left/db/metadata/test/hits.sql 2020-04-14 04:12:31 [] [] CREATE TABLE test.hits (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `ClientIP6` FixedString(16), `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `URLDomain` String, `RefererDomain` String, `Refresh` UInt8, `IsRobot` UInt8, `RefererCategories` Array(UInt16), `URLCategories` Array(UInt16), `URLRegions` Array(UInt32), `RefererRegions` Array(UInt32), `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `UTCEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `GeneralInterests` Array(UInt16), `RemoteIP` UInt32, `RemoteIP6` FixedString(16), `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` Int32, `DNSTiming` Int32, `ConnectTiming` Int32, `ResponseStartTiming` Int32, `ResponseEndTiming` Int32, `FetchTiming` Int32, `RedirectTiming` Int32, `DOMInteractiveTiming` Int32, `DOMContentLoadedTiming` Int32, `DOMCompleteTiming` Int32, `LoadEventStartTiming` Int32, `LoadEventEndTiming` Int32, `NSToDOMContentLoadedTiming` Int32, `FirstPaintTiming` Int32, `RedirectCount` Int8, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `GoalsReached` Array(UInt32), `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32, `YCLID` UInt64, `ShareService` String, `ShareURL` String, `ShareTitle` String, `ParsedParams.Key1` Array(String), `ParsedParams.Key2` Array(String), `ParsedParams.Key3` Array(String), `ParsedParams.Key4` Array(String), `ParsedParams.Key5` Array(String), `ParsedParams.ValueDouble` Array(Float64), `IslandID` FixedString(16), `RequestNum` UInt32, `RequestTry` UInt8) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192 MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192 toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID) CounterID, EventDate, intHash32(UserID) intHash32(UserID) default 8873898 1271407349"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.build_options'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_FULL ClickHouse 20.4.1.3000"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_DESCRIBE v20.4.1.3000-testing"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_INTEGER 20004001"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_GITHASH 29bb9f666565129587846f1507c9a4a5dad8a24e"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_REVISION 54434"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_DATE 2020-04-13"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SYSTEM Linux-4.9.151-35"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_TYPE RELWITHDEBINFO"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SYSTEM_PROCESSOR x86_64"}, {"date": "2020-04-14", "time": "04:12:41", "info": "LIBRARY_ARCHITECTURE x86_64-linux-gnu"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CMAKE_VERSION 3.13.4"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_COMPILER /usr/bin/gcc-9"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_COMPILER_VERSION 9.2.1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_COMPILER /usr/bin/g++-9"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_COMPILER_VERSION 9.2.1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_FLAGS -fdiagnostics-color=always -pipe -msse4.1 -msse4.2 -mpopcnt -Wall -Werror -O2 -g -DNDEBUG -O3 -fno-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_FLAGS -fdiagnostics-color=always -std=c++2a -fsized-deallocation -pipe -msse4.1 -msse4.2 -mpopcnt -Wall -Wnon-virtual-dtor -Wno-array-bounds -Werror -O2 -g -DNDEBUG -O3 -fno-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "LINK_FLAGS -fuse-ld=lld -rdynamic -Wl,--gdb-index -Wl,--no-undefined -Wl,-no-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_COMPILE_DEFINITIONS"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_INCLUDE_DIRECTORIES /build/build_docker/includes/configs"}, {"date": "2020-04-14", "time": "04:12:41", "info": "STATIC ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SPLIT_BINARY"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_EMBEDDED_COMPILER 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_GLIBC_COMPATIBILITY ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_JEMALLOC ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_MIMALLOC"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_UNWIND ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_ICU 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_H3 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_MYSQL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_RE2_ST 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_LIBGSASL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_RDKAFKA 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_CAPNP 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_SQLODBC"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_DATAODBC 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_MONGODB 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_NETSSL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_BASE64 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_XXHASH 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_HDFS 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SNAPPY ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_PARQUET 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_PROTOBUF 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_BROTLI 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SSL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_HYPERSCAN 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SIMDJSON ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_REDIS 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.tables where database != '\\''system'\\'''"}, {"date": "2020-04-14", "time": "04:12:41", "info": "default hits_100m_single MergeTree 0 ['right/db/data/default/hits_100m_single/'] right/db/metadata/default/hits_100m_single.sql 2015-05-26 22:30:23 [] [] CREATE TABLE default.hits_100m_single (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `Refresh` UInt8, `RefererCategoryID` UInt16, `RefererRegionID` UInt32, `URLCategoryID` UInt16, `URLRegionID` UInt32, `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `OriginalURL` String, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `LocalEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `RemoteIP` UInt32, `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` UInt32, `DNSTiming` UInt32, `ConnectTiming` UInt32, `ResponseStartTiming` UInt32, `ResponseEndTiming` UInt32, `FetchTiming` UInt32, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32) ENGINE = MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID), EventTime CounterID, EventDate, intHash32(UserID), EventTime intHash32(UserID) default 100000000 10990621246"}, {"date": "2020-04-14", "time": "04:12:41", "info": "default hits_10m_single MergeTree 0 ['right/db/data/default/hits_10m_single/'] right/db/metadata/default/hits_10m_single.sql 2015-05-26 22:30:25 [] [] CREATE TABLE default.hits_10m_single (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `Refresh` UInt8, `RefererCategoryID` UInt16, `RefererRegionID` UInt32, `URLCategoryID` UInt16, `URLRegionID` UInt32, `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `OriginalURL` String, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `LocalEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `RemoteIP` UInt32, `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` UInt32, `DNSTiming` UInt32, `ConnectTiming` UInt32, `ResponseStartTiming` UInt32, `ResponseEndTiming` UInt32, `FetchTiming` UInt32, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32) ENGINE = MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192) toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID), EventTime CounterID, EventDate, intHash32(UserID), EventTime intHash32(UserID) default 10000000 1178842940"}, {"date": "2020-04-14", "time": "04:12:41", "info": "test hits MergeTree 0 ['right/db/data/test/hits/'] right/db/metadata/test/hits.sql 2020-04-14 04:12:31 [] [] CREATE TABLE test.hits (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `ClientIP6` FixedString(16), `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `URLDomain` String, `RefererDomain` String, `Refresh` UInt8, `IsRobot` UInt8, `RefererCategories` Array(UInt16), `URLCategories` Array(UInt16), `URLRegions` Array(UInt32), `RefererRegions` Array(UInt32), `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `UTCEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `GeneralInterests` Array(UInt16), `RemoteIP` UInt32, `RemoteIP6` FixedString(16), `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` Int32, `DNSTiming` Int32, `ConnectTiming` Int32, `ResponseStartTiming` Int32, `ResponseEndTiming` Int32, `FetchTiming` Int32, `RedirectTiming` Int32, `DOMInteractiveTiming` Int32, `DOMContentLoadedTiming` Int32, `DOMCompleteTiming` Int32, `LoadEventStartTiming` Int32, `LoadEventEndTiming` Int32, `NSToDOMContentLoadedTiming` Int32, `FirstPaintTiming` Int32, `RedirectCount` Int8, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `GoalsReached` Array(UInt32), `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32, `YCLID` UInt64, `ShareService` String, `ShareURL` String, `ShareTitle` String, `ParsedParams.Key1` Array(String), `ParsedParams.Key2` Array(String), `ParsedParams.Key3` Array(String), `ParsedParams.Key4` Array(String), `ParsedParams.Key5` Array(String), `ParsedParams.ValueDouble` Array(Float64), `IslandID` FixedString(16), `RequestNum` UInt32, `RequestTry` UInt8) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192 MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192 toYYYYMM(EventDate) CounterID, EventDate, intHash32(UserID) CounterID, EventDate, intHash32(UserID) intHash32(UserID) default 8873898 1271407349"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.build_options'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_FULL ClickHouse 20.4.1.3003"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_DESCRIBE v20.4.1.3003-testing"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_INTEGER 20004001"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_GITHASH b8be58559598ec31450d14c8cf526ee79dc571ac"}, {"date": "2020-04-14", "time": "04:12:41", "info": "VERSION_REVISION 54434"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_DATE 2020-04-13"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SYSTEM Linux-4.9.151-35"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_TYPE RELWITHDEBINFO"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SYSTEM_PROCESSOR x86_64"}, {"date": "2020-04-14", "time": "04:12:41", "info": "LIBRARY_ARCHITECTURE x86_64-linux-gnu"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CMAKE_VERSION 3.13.4"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_COMPILER /usr/bin/gcc-9"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_COMPILER_VERSION 9.2.1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_COMPILER /usr/bin/g++-9"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_COMPILER_VERSION 9.2.1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "C_FLAGS -fdiagnostics-color=always -pipe -msse4.1 -msse4.2 -mpopcnt -Wall -Werror -O2 -g -DNDEBUG -O3 -fno-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "CXX_FLAGS -fdiagnostics-color=always -std=c++2a -fsized-deallocation -pipe -msse4.1 -msse4.2 -mpopcnt -Wall -Wnon-virtual-dtor -Wno-array-bounds -Werror -O2 -g -DNDEBUG -O3 -fno-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "LINK_FLAGS -fuse-ld=lld -rdynamic -Wl,--gdb-index -Wl,--no-undefined -Wl,-no-pie"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_COMPILE_DEFINITIONS"}, {"date": "2020-04-14", "time": "04:12:41", "info": "BUILD_INCLUDE_DIRECTORIES /build/build_docker/includes/configs"}, {"date": "2020-04-14", "time": "04:12:41", "info": "STATIC ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "SPLIT_BINARY"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_EMBEDDED_COMPILER 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_GLIBC_COMPATIBILITY ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_JEMALLOC ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_MIMALLOC"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_UNWIND ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_ICU 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_H3 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_MYSQL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_RE2_ST 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_LIBGSASL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_RDKAFKA 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_CAPNP 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_SQLODBC"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_DATAODBC 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_MONGODB 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_NETSSL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_BASE64 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_XXHASH 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_HDFS 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SNAPPY ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_PARQUET 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_PROTOBUF 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_BROTLI 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SSL 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_HYPERSCAN 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_SIMDJSON ON"}, {"date": "2020-04-14", "time": "04:12:41", "info": "USE_POCO_REDIS 1"}, {"date": "2020-04-14", "time": "04:12:41", "info": ""}, {"date": "2020-04-14", "time": "04:12:41", "info": "real 0m1.105s"}, {"date": "2020-04-14", "time": "04:12:41", "info": "user 0m0.064s"}, {"date": "2020-04-14", "time": "04:12:41", "info": "sys 0m0.016s"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ run_tests"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ /workspace/right/scripts/perf.py --help"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ '[' 0 == 0 ']'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ echo left"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ test_prefix=left/performance"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for x in {test-times,skipped-tests}.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm -v test-times.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "rm: cannot remove 'test-times.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ :"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ touch test-times.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for x in {test-times,skipped-tests}.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm -v skipped-tests.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "rm: cannot remove 'skipped-tests.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ :"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ touch skipped-tests.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ '[' 0 '!=' 0 ']'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ '[' -v CHPC_TEST_GLOB ']'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ '[' '' == '' ']'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'IPv4\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/IPv4.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'IPv6\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/IPv6.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'modulo\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/modulo.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'parse_engine_file\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/parse_engine_file.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'number_formatting_formats\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/number_formatting_formats.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'select_format\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/select_format.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'arithmetic\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/arithmetic.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'cryptographic_hashes\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/cryptographic_hashes.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'logical_functions_medium\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/logical_functions_medium.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test_name in {IPv4,IPv6,modulo,parse_engine_file,number_formatting_formats,select_format,arithmetic,cryptographic_hashes,logical_functions_{medium,small}}"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'logical_functions_small\\tMarked as broken (see compare.sh)\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ rm left/performance/logical_functions_small.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ ls left/performance/agg_functions_min_max_any.xml left/performance/analyze_array_tuples.xml left/performance/and_function.xml left/performance/array_auc.xml left/performance/array_element.xml left/performance/array_fill.xml left/performance/array_join.xml left/performance/array_reduce.xml left/performance/base64.xml left/performance/base64_hits.xml left/performance/basename.xml left/performance/bitCount.xml left/performance/bit_operations_fixed_string.xml left/performance/bit_operations_fixed_string_numbers.xml left/performance/bloom_filter.xml left/performance/bounding_ratio.xml left/performance/cidr.xml left/performance/codecs_float_insert.xml left/performance/codecs_float_select.xml left/performance/codecs_int_insert.xml left/performance/codecs_int_select.xml left/performance/collations.xml left/performance/column_column_comparison.xml left/performance/columns_hashing.xml left/performance/complex_array_creation.xml left/performance/concat_hits.xml left/performance/conditional.xml left/performance/consistent_hashes.xml left/performance/constant_column_comparison.xml left/performance/constant_column_search.xml left/performance/count.xml left/performance/cpu_synthetic.xml left/performance/date_parsing.xml left/performance/date_time.xml left/performance/date_time_64.xml left/performance/decimal_aggregates.xml left/performance/distributed_aggregation.xml left/performance/early_constant_folding.xml left/performance/empty_string_deserialization.xml left/performance/empty_string_serialization.xml left/performance/entropy.xml left/performance/first_significant_subdomain.xml left/performance/fixed_string16.xml left/performance/float_formatting.xml left/performance/float_parsing.xml left/performance/format_date_time.xml left/performance/functions_coding.xml left/performance/functions_geo.xml left/performance/general_purpose_hashes.xml left/performance/general_purpose_hashes_on_UUID.xml left/performance/generate_table_function.xml left/performance/great_circle_dist.xml left/performance/group_array_moving_sum.xml left/performance/h3.xml left/performance/if_array_num.xml left/performance/if_array_string.xml left/performance/if_string_const.xml left/performance/if_string_hits.xml left/performance/if_to_multiif.xml left/performance/information_value.xml left/performance/insert_values_with_expressions.xml left/performance/inserts_arrays_lowcardinality.xml left/performance/int_parsing.xml left/performance/jit_large_requests.xml left/performance/jit_small_requests.xml left/performance/joins_in_memory.xml left/performance/joins_in_memory_pmj.xml left/performance/json_extract_rapidjson.xml left/performance/json_extract_simdjson.xml left/performance/leftpad.xml left/performance/linear_regression.xml left/performance/logical_functions_large.xml left/performance/math.xml left/performance/merge_table_streams.xml left/performance/merge_tree_huge_pk.xml left/performance/merge_tree_many_partitions.xml left/performance/merge_tree_many_partitions_2.xml left/performance/merge_tree_simple_select.xml left/performance/mingroupby-orderbylimit1.xml left/performance/ngram_distance.xml left/performance/nyc_taxi.xml left/performance/order_by_decimals.xml left/performance/order_by_read_in_order.xml left/performance/order_by_single_column.xml left/performance/parallel_insert.xml left/performance/pre_limit_no_sorting.xml left/performance/prewhere.xml left/performance/random_printable_ascii.xml left/performance/range.xml left/performance/read_hits_with_aio.xml left/performance/right.xml left/performance/round_down.xml left/performance/round_methods.xml left/performance/scalar.xml left/performance/set.xml left/performance/set_hits.xml left/performance/set_index.xml left/performance/simple_join_query.xml left/performance/slices_hits.xml left/performance/sort.xml left/performance/string_join.xml left/performance/string_set.xml left/performance/string_sort.xml left/performance/sum_map.xml left/performance/synthetic_hardware_benchmark.xml left/performance/trim_numbers.xml left/performance/trim_urls.xml left/performance/trim_whitespace.xml left/performance/uniq.xml left/performance/url_hits.xml left/performance/vectorize_aggregation_combinators.xml left/performance/visit_param_extract_raw.xml left/performance/website.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ test_files='left/performance/agg_functions_min_max_any.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/analyze_array_tuples.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/and_function.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/array_auc.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/array_element.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/array_fill.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/array_join.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/array_reduce.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/base64.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/base64_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/basename.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/bitCount.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/bit_operations_fixed_string.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/bit_operations_fixed_string_numbers.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/bloom_filter.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/bounding_ratio.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/cidr.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/codecs_float_insert.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/codecs_float_select.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/codecs_int_insert.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/codecs_int_select.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/collations.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/column_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/columns_hashing.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/complex_array_creation.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/concat_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/conditional.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/consistent_hashes.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/constant_column_comparison.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/constant_column_search.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/count.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/cpu_synthetic.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/date_parsing.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/date_time.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/date_time_64.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/decimal_aggregates.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/distributed_aggregation.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/early_constant_folding.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/empty_string_deserialization.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/empty_string_serialization.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/entropy.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/first_significant_subdomain.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/fixed_string16.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/float_formatting.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/float_parsing.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/format_date_time.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/functions_coding.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/functions_geo.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/general_purpose_hashes.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/general_purpose_hashes_on_UUID.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/generate_table_function.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/great_circle_dist.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/group_array_moving_sum.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/h3.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/if_array_num.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/if_array_string.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/if_string_const.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/if_string_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/if_to_multiif.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/information_value.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/insert_values_with_expressions.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/inserts_arrays_lowcardinality.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/int_parsing.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/jit_large_requests.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/jit_small_requests.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/joins_in_memory.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/joins_in_memory_pmj.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/json_extract_rapidjson.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/json_extract_simdjson.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/leftpad.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/linear_regression.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/logical_functions_large.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/math.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/merge_table_streams.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/merge_tree_huge_pk.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/merge_tree_many_partitions.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/merge_tree_many_partitions_2.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/merge_tree_simple_select.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/mingroupby-orderbylimit1.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/ngram_distance.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/nyc_taxi.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/order_by_decimals.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/order_by_read_in_order.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/order_by_single_column.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/parallel_insert.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/pre_limit_no_sorting.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/prewhere.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/random_printable_ascii.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/range.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/read_hits_with_aio.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/right.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/round_down.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/round_methods.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/scalar.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/set.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/set_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/set_index.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/simple_join_query.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/slices_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/sort.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/string_join.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/string_set.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/string_sort.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/sum_map.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/synthetic_hardware_benchmark.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/trim_numbers.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/trim_urls.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/trim_whitespace.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/uniq.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/url_hits.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/vectorize_aggregation_combinators.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/visit_param_extract_raw.xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "left/performance/website.xml'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ test_name='<none>'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ basename left/performance/agg_functions_min_max_any.xml .xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ test_name=agg_functions_min_max_any"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ echo test agg_functions_min_max_any"}, {"date": "2020-04-14", "time": "04:12:41", "info": "test agg_functions_min_max_any"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ printf 'agg_functions_min_max_any\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ TIMEFORMAT='agg_functions_min_max_any %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ mv agg_functions_min_max_any-err.log agg_functions_min_max_any-warn.log"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ grep '^query' agg_functions_min_max_any-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ grep '^client-time' agg_functions_min_max_any-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ grep '^skipped' agg_functions_min_max_any-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 60.'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 60.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ printf 'agg_functions_min_max_any\\tclickhouse_driver.errors.ServerException: Code: 60.\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ basename left/performance/analyze_array_tuples.xml .xml"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ test_name=analyze_array_tuples"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ echo test analyze_array_tuples"}, {"date": "2020-04-14", "time": "04:12:41", "info": "test analyze_array_tuples"}, {"date": "2020-04-14", "time": "04:12:41", "info": "++ printf 'analyze_array_tuples\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ TIMEFORMAT='analyze_array_tuples %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:12:41", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ mv analyze_array_tuples-err.log analyze_array_tuples-warn.log"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ grep '^query' analyze_array_tuples-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ grep '^client-time' analyze_array_tuples-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:42", "info": "++ grep '^skipped' analyze_array_tuples-raw.tsv"}, {"date": "2020-04-14", "time": "04:12:42", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "++ basename left/performance/and_function.xml .xml"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ test_name=and_function"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ echo test and_function"}, {"date": "2020-04-14", "time": "04:12:42", "info": "test and_function"}, {"date": "2020-04-14", "time": "04:12:42", "info": "++ printf 'and_function\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ TIMEFORMAT='and_function %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:12:42", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ mv and_function-err.log and_function-warn.log"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ grep '^query' and_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ grep '^client-time' and_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:00", "info": "++ grep '^skipped' and_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:00", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "++ basename left/performance/array_auc.xml .xml"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ test_name=array_auc"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ echo test array_auc"}, {"date": "2020-04-14", "time": "04:13:00", "info": "test array_auc"}, {"date": "2020-04-14", "time": "04:13:00", "info": "++ printf 'array_auc\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ TIMEFORMAT='array_auc %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:13:00", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ mv array_auc-err.log array_auc-warn.log"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ grep '^query' array_auc-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ grep '^client-time' array_auc-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:02", "info": "++ grep '^skipped' array_auc-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:02", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "++ basename left/performance/array_element.xml .xml"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ test_name=array_element"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ echo test array_element"}, {"date": "2020-04-14", "time": "04:13:02", "info": "test array_element"}, {"date": "2020-04-14", "time": "04:13:02", "info": "++ printf 'array_element\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ TIMEFORMAT='array_element %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:13:02", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ mv array_element-err.log array_element-warn.log"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ grep '^query' array_element-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ grep '^client-time' array_element-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:05", "info": "++ grep '^skipped' array_element-raw.tsv"}, {"date": "2020-04-14", "time": "04:13:05", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "++ basename left/performance/array_fill.xml .xml"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ test_name=array_fill"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ echo test array_fill"}, {"date": "2020-04-14", "time": "04:13:05", "info": "test array_fill"}, {"date": "2020-04-14", "time": "04:13:05", "info": "++ printf 'array_fill\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ TIMEFORMAT='array_fill %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:13:05", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ mv array_fill-err.log array_fill-warn.log"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ grep '^query' array_fill-raw.tsv"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ grep '^client-time' array_fill-raw.tsv"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:16:59", "info": "++ grep '^skipped' array_fill-raw.tsv"}, {"date": "2020-04-14", "time": "04:16:59", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "++ basename left/performance/array_join.xml .xml"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ test_name=array_join"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ echo test array_join"}, {"date": "2020-04-14", "time": "04:16:59", "info": "test array_join"}, {"date": "2020-04-14", "time": "04:16:59", "info": "++ printf 'array_join\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ TIMEFORMAT='array_join %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:16:59", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ mv array_join-err.log array_join-warn.log"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ grep '^query' array_join-raw.tsv"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ grep '^client-time' array_join-raw.tsv"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:17:27", "info": "++ grep '^skipped' array_join-raw.tsv"}, {"date": "2020-04-14", "time": "04:17:27", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "++ basename left/performance/array_reduce.xml .xml"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ test_name=array_reduce"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ echo test array_reduce"}, {"date": "2020-04-14", "time": "04:17:27", "info": "test array_reduce"}, {"date": "2020-04-14", "time": "04:17:27", "info": "++ printf 'array_reduce\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ TIMEFORMAT='array_reduce %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:17:27", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ mv array_reduce-err.log array_reduce-warn.log"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ grep '^query' array_reduce-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ grep '^client-time' array_reduce-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:08", "info": "++ grep '^skipped' array_reduce-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:08", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "++ basename left/performance/base64.xml .xml"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ test_name=base64"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ echo test base64"}, {"date": "2020-04-14", "time": "04:18:08", "info": "test base64"}, {"date": "2020-04-14", "time": "04:18:08", "info": "++ printf 'base64\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ TIMEFORMAT='base64 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:18:08", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ mv base64-err.log base64-warn.log"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ grep '^query' base64-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ grep '^client-time' base64-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:42", "info": "++ grep '^skipped' base64-raw.tsv"}, {"date": "2020-04-14", "time": "04:18:42", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "++ basename left/performance/base64_hits.xml .xml"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ test_name=base64_hits"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ echo test base64_hits"}, {"date": "2020-04-14", "time": "04:18:42", "info": "test base64_hits"}, {"date": "2020-04-14", "time": "04:18:42", "info": "++ printf 'base64_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ TIMEFORMAT='base64_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:18:42", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ mv base64_hits-err.log base64_hits-warn.log"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ grep '^query' base64_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ grep '^client-time' base64_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:55", "info": "++ grep '^skipped' base64_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:55", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "++ basename left/performance/basename.xml .xml"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ test_name=basename"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ echo test basename"}, {"date": "2020-04-14", "time": "04:19:55", "info": "test basename"}, {"date": "2020-04-14", "time": "04:19:55", "info": "++ printf 'basename\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ TIMEFORMAT='basename %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:19:55", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ mv basename-err.log basename-warn.log"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ grep '^query' basename-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ grep '^client-time' basename-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:57", "info": "++ grep '^skipped' basename-raw.tsv"}, {"date": "2020-04-14", "time": "04:19:57", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "++ basename left/performance/bitCount.xml .xml"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ test_name=bitCount"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ echo test bitCount"}, {"date": "2020-04-14", "time": "04:19:57", "info": "test bitCount"}, {"date": "2020-04-14", "time": "04:19:57", "info": "++ printf 'bitCount\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ TIMEFORMAT='bitCount %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:19:57", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ mv bitCount-err.log bitCount-warn.log"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ grep '^query' bitCount-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ grep '^client-time' bitCount-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:08", "info": "++ grep '^skipped' bitCount-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:08", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "++ basename left/performance/bit_operations_fixed_string.xml .xml"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ test_name=bit_operations_fixed_string"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ echo test bit_operations_fixed_string"}, {"date": "2020-04-14", "time": "04:20:08", "info": "test bit_operations_fixed_string"}, {"date": "2020-04-14", "time": "04:20:08", "info": "++ printf 'bit_operations_fixed_string\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ TIMEFORMAT='bit_operations_fixed_string %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:08", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ mv bit_operations_fixed_string-err.log bit_operations_fixed_string-warn.log"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ grep '^query' bit_operations_fixed_string-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ grep '^client-time' bit_operations_fixed_string-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:09", "info": "++ grep '^skipped' bit_operations_fixed_string-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:09", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "++ basename left/performance/bit_operations_fixed_string_numbers.xml .xml"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ test_name=bit_operations_fixed_string_numbers"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ echo test bit_operations_fixed_string_numbers"}, {"date": "2020-04-14", "time": "04:20:09", "info": "test bit_operations_fixed_string_numbers"}, {"date": "2020-04-14", "time": "04:20:09", "info": "++ printf 'bit_operations_fixed_string_numbers\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ TIMEFORMAT='bit_operations_fixed_string_numbers %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:09", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ mv bit_operations_fixed_string_numbers-err.log bit_operations_fixed_string_numbers-warn.log"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ grep '^query' bit_operations_fixed_string_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ grep '^client-time' bit_operations_fixed_string_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:10", "info": "++ grep '^skipped' bit_operations_fixed_string_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:10", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "++ basename left/performance/bloom_filter.xml .xml"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ test_name=bloom_filter"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ echo test bloom_filter"}, {"date": "2020-04-14", "time": "04:20:10", "info": "test bloom_filter"}, {"date": "2020-04-14", "time": "04:20:10", "info": "++ printf 'bloom_filter\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ TIMEFORMAT='bloom_filter %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:10", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ mv bloom_filter-err.log bloom_filter-warn.log"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ grep '^query' bloom_filter-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ grep '^client-time' bloom_filter-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:16", "info": "++ grep '^skipped' bloom_filter-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:16", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:16", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ basename left/performance/bounding_ratio.xml .xml"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ test_name=bounding_ratio"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ echo test bounding_ratio"}, {"date": "2020-04-14", "time": "04:20:17", "info": "test bounding_ratio"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ printf 'bounding_ratio\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ TIMEFORMAT='bounding_ratio %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ mv bounding_ratio-err.log bounding_ratio-warn.log"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep '^query' bounding_ratio-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep '^client-time' bounding_ratio-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ grep '^skipped' bounding_ratio-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ basename left/performance/cidr.xml .xml"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ test_name=cidr"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ echo test cidr"}, {"date": "2020-04-14", "time": "04:20:17", "info": "test cidr"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ printf 'cidr\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ TIMEFORMAT='cidr %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ mv cidr-err.log cidr-warn.log"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep '^query' cidr-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep '^client-time' cidr-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ grep '^skipped' cidr-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ basename left/performance/codecs_float_insert.xml .xml"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ test_name=codecs_float_insert"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ echo test codecs_float_insert"}, {"date": "2020-04-14", "time": "04:20:17", "info": "test codecs_float_insert"}, {"date": "2020-04-14", "time": "04:20:17", "info": "++ printf 'codecs_float_insert\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ TIMEFORMAT='codecs_float_insert %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:17", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ mv codecs_float_insert-err.log codecs_float_insert-warn.log"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ grep '^query' codecs_float_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ grep '^client-time' codecs_float_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:25", "info": "++ grep '^skipped' codecs_float_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:25", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "++ basename left/performance/codecs_float_select.xml .xml"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ test_name=codecs_float_select"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ echo test codecs_float_select"}, {"date": "2020-04-14", "time": "04:20:25", "info": "test codecs_float_select"}, {"date": "2020-04-14", "time": "04:20:25", "info": "++ printf 'codecs_float_select\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ TIMEFORMAT='codecs_float_select %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:25", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ mv codecs_float_select-err.log codecs_float_select-warn.log"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ grep '^query' codecs_float_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ grep '^client-time' codecs_float_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:28", "info": "++ grep '^skipped' codecs_float_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:20:28", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "++ basename left/performance/codecs_int_insert.xml .xml"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ test_name=codecs_int_insert"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ echo test codecs_int_insert"}, {"date": "2020-04-14", "time": "04:20:28", "info": "test codecs_int_insert"}, {"date": "2020-04-14", "time": "04:20:28", "info": "++ printf 'codecs_int_insert\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ TIMEFORMAT='codecs_int_insert %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:20:28", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ mv codecs_int_insert-err.log codecs_int_insert-warn.log"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ grep '^query' codecs_int_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ grep '^client-time' codecs_int_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:33", "info": "++ grep '^skipped' codecs_int_insert-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:33", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "++ basename left/performance/codecs_int_select.xml .xml"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ test_name=codecs_int_select"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ echo test codecs_int_select"}, {"date": "2020-04-14", "time": "04:21:33", "info": "test codecs_int_select"}, {"date": "2020-04-14", "time": "04:21:33", "info": "++ printf 'codecs_int_select\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ TIMEFORMAT='codecs_int_select %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:21:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ mv codecs_int_select-err.log codecs_int_select-warn.log"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ grep '^query' codecs_int_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ grep '^client-time' codecs_int_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:37", "info": "++ grep '^skipped' codecs_int_select-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:37", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "++ basename left/performance/collations.xml .xml"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ test_name=collations"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ echo test collations"}, {"date": "2020-04-14", "time": "04:21:37", "info": "test collations"}, {"date": "2020-04-14", "time": "04:21:37", "info": "++ printf 'collations\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ TIMEFORMAT='collations %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:21:37", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ mv collations-err.log collations-warn.log"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ grep '^query' collations-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ grep '^client-time' collations-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:46", "info": "++ grep '^skipped' collations-raw.tsv"}, {"date": "2020-04-14", "time": "04:21:46", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "++ basename left/performance/column_column_comparison.xml .xml"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ test_name=column_column_comparison"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ echo test column_column_comparison"}, {"date": "2020-04-14", "time": "04:21:46", "info": "test column_column_comparison"}, {"date": "2020-04-14", "time": "04:21:46", "info": "++ printf 'column_column_comparison\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ TIMEFORMAT='column_column_comparison %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:21:46", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ mv column_column_comparison-err.log column_column_comparison-warn.log"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep '^query' column_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep '^client-time' column_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ grep '^skipped' column_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ basename left/performance/columns_hashing.xml .xml"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ test_name=columns_hashing"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ echo test columns_hashing"}, {"date": "2020-04-14", "time": "04:23:20", "info": "test columns_hashing"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ printf 'columns_hashing\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ TIMEFORMAT='columns_hashing %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ mv columns_hashing-err.log columns_hashing-warn.log"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep '^query' columns_hashing-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep '^client-time' columns_hashing-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ grep '^skipped' columns_hashing-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 60.'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 60.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ printf 'columns_hashing\\tclickhouse_driver.errors.ServerException: Code: 60.\\n'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ basename left/performance/complex_array_creation.xml .xml"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ test_name=complex_array_creation"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ echo test complex_array_creation"}, {"date": "2020-04-14", "time": "04:23:20", "info": "test complex_array_creation"}, {"date": "2020-04-14", "time": "04:23:20", "info": "++ printf 'complex_array_creation\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ TIMEFORMAT='complex_array_creation %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ mv complex_array_creation-err.log complex_array_creation-warn.log"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ grep '^query' complex_array_creation-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ grep '^client-time' complex_array_creation-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:21", "info": "++ grep '^skipped' complex_array_creation-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:21", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "++ basename left/performance/concat_hits.xml .xml"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ test_name=concat_hits"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ echo test concat_hits"}, {"date": "2020-04-14", "time": "04:23:21", "info": "test concat_hits"}, {"date": "2020-04-14", "time": "04:23:21", "info": "++ printf 'concat_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ TIMEFORMAT='concat_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:21", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ mv concat_hits-err.log concat_hits-warn.log"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ grep '^query' concat_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ grep '^client-time' concat_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:37", "info": "++ grep '^skipped' concat_hits-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:37", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "++ basename left/performance/conditional.xml .xml"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ test_name=conditional"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ echo test conditional"}, {"date": "2020-04-14", "time": "04:23:37", "info": "test conditional"}, {"date": "2020-04-14", "time": "04:23:37", "info": "++ printf 'conditional\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ TIMEFORMAT='conditional %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:37", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ mv conditional-err.log conditional-warn.log"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ grep '^query' conditional-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ grep '^client-time' conditional-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:39", "info": "++ grep '^skipped' conditional-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:39", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "++ basename left/performance/consistent_hashes.xml .xml"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ test_name=consistent_hashes"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ echo test consistent_hashes"}, {"date": "2020-04-14", "time": "04:23:39", "info": "test consistent_hashes"}, {"date": "2020-04-14", "time": "04:23:39", "info": "++ printf 'consistent_hashes\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ TIMEFORMAT='consistent_hashes %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:39", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ mv consistent_hashes-err.log consistent_hashes-warn.log"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ grep '^query' consistent_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ grep '^client-time' consistent_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:42", "info": "++ grep '^skipped' consistent_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:23:42", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "++ basename left/performance/constant_column_comparison.xml .xml"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ test_name=constant_column_comparison"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ echo test constant_column_comparison"}, {"date": "2020-04-14", "time": "04:23:42", "info": "test constant_column_comparison"}, {"date": "2020-04-14", "time": "04:23:42", "info": "++ printf 'constant_column_comparison\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ TIMEFORMAT='constant_column_comparison %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:23:42", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ mv constant_column_comparison-err.log constant_column_comparison-warn.log"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ grep '^query' constant_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ grep '^client-time' constant_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:26:09", "info": "++ grep '^skipped' constant_column_comparison-raw.tsv"}, {"date": "2020-04-14", "time": "04:26:09", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "++ basename left/performance/constant_column_search.xml .xml"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ test_name=constant_column_search"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ echo test constant_column_search"}, {"date": "2020-04-14", "time": "04:26:09", "info": "test constant_column_search"}, {"date": "2020-04-14", "time": "04:26:09", "info": "++ printf 'constant_column_search\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ TIMEFORMAT='constant_column_search %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:26:09", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ mv constant_column_search-err.log constant_column_search-warn.log"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ grep '^query' constant_column_search-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ grep '^client-time' constant_column_search-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:43", "info": "++ grep '^skipped' constant_column_search-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:43", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "++ basename left/performance/count.xml .xml"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ test_name=count"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ echo test count"}, {"date": "2020-04-14", "time": "04:30:43", "info": "test count"}, {"date": "2020-04-14", "time": "04:30:43", "info": "++ printf 'count\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ TIMEFORMAT='count %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:30:43", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ mv count-err.log count-warn.log"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ grep '^query' count-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ grep '^client-time' count-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:44", "info": "++ grep '^skipped' count-raw.tsv"}, {"date": "2020-04-14", "time": "04:30:44", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "++ basename left/performance/cpu_synthetic.xml .xml"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ test_name=cpu_synthetic"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ echo test cpu_synthetic"}, {"date": "2020-04-14", "time": "04:30:44", "info": "test cpu_synthetic"}, {"date": "2020-04-14", "time": "04:30:44", "info": "++ printf 'cpu_synthetic\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ TIMEFORMAT='cpu_synthetic %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:30:44", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ mv cpu_synthetic-err.log cpu_synthetic-warn.log"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^query' cpu_synthetic-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^client-time' cpu_synthetic-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ grep '^skipped' cpu_synthetic-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ basename left/performance/date_parsing.xml .xml"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ test_name=date_parsing"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ echo test date_parsing"}, {"date": "2020-04-14", "time": "04:34:20", "info": "test date_parsing"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ printf 'date_parsing\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ TIMEFORMAT='date_parsing %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ mv date_parsing-err.log date_parsing-warn.log"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^query' date_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^client-time' date_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ grep '^skipped' date_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ basename left/performance/date_time.xml .xml"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ test_name=date_time"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ echo test date_time"}, {"date": "2020-04-14", "time": "04:34:20", "info": "test date_time"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ printf 'date_time\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ TIMEFORMAT='date_time %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ mv date_time-err.log date_time-warn.log"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^query' date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep '^client-time' date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ grep '^skipped' date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ skipped='Test is tagged as long.'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ '[' 'Test is tagged as long.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ printf 'date_time\\tTest is tagged as long.\\n'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ basename left/performance/date_time_64.xml .xml"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ test_name=date_time_64"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ echo test date_time_64"}, {"date": "2020-04-14", "time": "04:34:20", "info": "test date_time_64"}, {"date": "2020-04-14", "time": "04:34:20", "info": "++ printf 'date_time_64\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ TIMEFORMAT='date_time_64 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:34:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ mv date_time_64-err.log date_time_64-warn.log"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ grep '^query' date_time_64-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ grep '^client-time' date_time_64-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:51", "info": "++ grep '^skipped' date_time_64-raw.tsv"}, {"date": "2020-04-14", "time": "04:34:51", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "++ basename left/performance/decimal_aggregates.xml .xml"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ test_name=decimal_aggregates"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ echo test decimal_aggregates"}, {"date": "2020-04-14", "time": "04:34:51", "info": "test decimal_aggregates"}, {"date": "2020-04-14", "time": "04:34:51", "info": "++ printf 'decimal_aggregates\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ TIMEFORMAT='decimal_aggregates %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:34:51", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ mv decimal_aggregates-err.log decimal_aggregates-warn.log"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ grep '^query' decimal_aggregates-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ grep '^client-time' decimal_aggregates-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:30", "info": "++ grep '^skipped' decimal_aggregates-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:30", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "++ basename left/performance/distributed_aggregation.xml .xml"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ test_name=distributed_aggregation"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ echo test distributed_aggregation"}, {"date": "2020-04-14", "time": "04:35:30", "info": "test distributed_aggregation"}, {"date": "2020-04-14", "time": "04:35:30", "info": "++ printf 'distributed_aggregation\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ TIMEFORMAT='distributed_aggregation %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:35:30", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ continue"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ basename left/performance/early_constant_folding.xml .xml"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ test_name=early_constant_folding"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ echo test early_constant_folding"}, {"date": "2020-04-14", "time": "04:35:33", "info": "test early_constant_folding"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ printf 'early_constant_folding\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ TIMEFORMAT='early_constant_folding %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ mv early_constant_folding-err.log early_constant_folding-warn.log"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ grep '^query' early_constant_folding-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ grep '^client-time' early_constant_folding-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ grep '^skipped' early_constant_folding-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ basename left/performance/empty_string_deserialization.xml .xml"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ test_name=empty_string_deserialization"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ echo test empty_string_deserialization"}, {"date": "2020-04-14", "time": "04:35:33", "info": "test empty_string_deserialization"}, {"date": "2020-04-14", "time": "04:35:33", "info": "++ printf 'empty_string_deserialization\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ TIMEFORMAT='empty_string_deserialization %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:35:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ mv empty_string_deserialization-err.log empty_string_deserialization-warn.log"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ grep '^query' empty_string_deserialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ grep '^client-time' empty_string_deserialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:35", "info": "++ grep '^skipped' empty_string_deserialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:35", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "++ basename left/performance/empty_string_serialization.xml .xml"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ test_name=empty_string_serialization"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ echo test empty_string_serialization"}, {"date": "2020-04-14", "time": "04:35:35", "info": "test empty_string_serialization"}, {"date": "2020-04-14", "time": "04:35:35", "info": "++ printf 'empty_string_serialization\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ TIMEFORMAT='empty_string_serialization %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:35:35", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ mv empty_string_serialization-err.log empty_string_serialization-warn.log"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ grep '^query' empty_string_serialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ grep '^client-time' empty_string_serialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:47", "info": "++ grep '^skipped' empty_string_serialization-raw.tsv"}, {"date": "2020-04-14", "time": "04:35:47", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "++ basename left/performance/entropy.xml .xml"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ test_name=entropy"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ echo test entropy"}, {"date": "2020-04-14", "time": "04:35:47", "info": "test entropy"}, {"date": "2020-04-14", "time": "04:35:47", "info": "++ printf 'entropy\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ TIMEFORMAT='entropy %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:35:47", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ mv entropy-err.log entropy-warn.log"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ grep '^query' entropy-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ grep '^client-time' entropy-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:12", "info": "++ grep '^skipped' entropy-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:12", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "++ basename left/performance/first_significant_subdomain.xml .xml"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ test_name=first_significant_subdomain"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ echo test first_significant_subdomain"}, {"date": "2020-04-14", "time": "04:36:12", "info": "test first_significant_subdomain"}, {"date": "2020-04-14", "time": "04:36:12", "info": "++ printf 'first_significant_subdomain\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ TIMEFORMAT='first_significant_subdomain %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:12", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ mv first_significant_subdomain-err.log first_significant_subdomain-warn.log"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^query' first_significant_subdomain-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^client-time' first_significant_subdomain-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ grep '^skipped' first_significant_subdomain-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ basename left/performance/fixed_string16.xml .xml"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ test_name=fixed_string16"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ echo test fixed_string16"}, {"date": "2020-04-14", "time": "04:36:23", "info": "test fixed_string16"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ printf 'fixed_string16\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ TIMEFORMAT='fixed_string16 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ mv fixed_string16-err.log fixed_string16-warn.log"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^query' fixed_string16-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^client-time' fixed_string16-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ grep '^skipped' fixed_string16-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ basename left/performance/float_formatting.xml .xml"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ test_name=float_formatting"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ echo test float_formatting"}, {"date": "2020-04-14", "time": "04:36:23", "info": "test float_formatting"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ printf 'float_formatting\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ TIMEFORMAT='float_formatting %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ mv float_formatting-err.log float_formatting-warn.log"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^query' float_formatting-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^client-time' float_formatting-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ grep '^skipped' float_formatting-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ skipped='Test is tagged as long.'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ '[' 'Test is tagged as long.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ printf 'float_formatting\\tTest is tagged as long.\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ basename left/performance/float_parsing.xml .xml"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ test_name=float_parsing"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ echo test float_parsing"}, {"date": "2020-04-14", "time": "04:36:23", "info": "test float_parsing"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ printf 'float_parsing\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ TIMEFORMAT='float_parsing %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ mv float_parsing-err.log float_parsing-warn.log"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^query' float_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep '^client-time' float_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ grep '^skipped' float_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ skipped='Test is tagged as long.'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ '[' 'Test is tagged as long.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ printf 'float_parsing\\tTest is tagged as long.\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ basename left/performance/format_date_time.xml .xml"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ test_name=format_date_time"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ echo test format_date_time"}, {"date": "2020-04-14", "time": "04:36:23", "info": "test format_date_time"}, {"date": "2020-04-14", "time": "04:36:23", "info": "++ printf 'format_date_time\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ TIMEFORMAT='format_date_time %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:23", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ mv format_date_time-err.log format_date_time-warn.log"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ grep '^query' format_date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ grep '^client-time' format_date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:26", "info": "++ grep '^skipped' format_date_time-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:26", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "++ basename left/performance/functions_coding.xml .xml"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ test_name=functions_coding"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ echo test functions_coding"}, {"date": "2020-04-14", "time": "04:36:26", "info": "test functions_coding"}, {"date": "2020-04-14", "time": "04:36:26", "info": "++ printf 'functions_coding\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ TIMEFORMAT='functions_coding %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:26", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ mv functions_coding-err.log functions_coding-warn.log"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ grep '^query' functions_coding-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ grep '^client-time' functions_coding-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:27", "info": "++ grep '^skipped' functions_coding-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:27", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "++ basename left/performance/functions_geo.xml .xml"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ test_name=functions_geo"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ echo test functions_geo"}, {"date": "2020-04-14", "time": "04:36:27", "info": "test functions_geo"}, {"date": "2020-04-14", "time": "04:36:27", "info": "++ printf 'functions_geo\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ TIMEFORMAT='functions_geo %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:27", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ mv functions_geo-err.log functions_geo-warn.log"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ grep '^query' functions_geo-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ grep '^client-time' functions_geo-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:40", "info": "++ grep '^skipped' functions_geo-raw.tsv"}, {"date": "2020-04-14", "time": "04:36:40", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "++ basename left/performance/general_purpose_hashes.xml .xml"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ test_name=general_purpose_hashes"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ echo test general_purpose_hashes"}, {"date": "2020-04-14", "time": "04:36:40", "info": "test general_purpose_hashes"}, {"date": "2020-04-14", "time": "04:36:40", "info": "++ printf 'general_purpose_hashes\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ TIMEFORMAT='general_purpose_hashes %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:36:40", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ mv general_purpose_hashes-err.log general_purpose_hashes-warn.log"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ grep '^query' general_purpose_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ grep '^client-time' general_purpose_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:52:51", "info": "++ grep '^skipped' general_purpose_hashes-raw.tsv"}, {"date": "2020-04-14", "time": "04:52:51", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "++ basename left/performance/general_purpose_hashes_on_UUID.xml .xml"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ test_name=general_purpose_hashes_on_UUID"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ echo test general_purpose_hashes_on_UUID"}, {"date": "2020-04-14", "time": "04:52:51", "info": "test general_purpose_hashes_on_UUID"}, {"date": "2020-04-14", "time": "04:52:51", "info": "++ printf 'general_purpose_hashes_on_UUID\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ TIMEFORMAT='general_purpose_hashes_on_UUID %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:52:51", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ mv general_purpose_hashes_on_UUID-err.log general_purpose_hashes_on_UUID-warn.log"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ grep '^query' general_purpose_hashes_on_UUID-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ grep '^client-time' general_purpose_hashes_on_UUID-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:41", "info": "++ grep '^skipped' general_purpose_hashes_on_UUID-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:41", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "++ basename left/performance/generate_table_function.xml .xml"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ test_name=generate_table_function"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ echo test generate_table_function"}, {"date": "2020-04-14", "time": "04:59:41", "info": "test generate_table_function"}, {"date": "2020-04-14", "time": "04:59:41", "info": "++ printf 'generate_table_function\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ TIMEFORMAT='generate_table_function %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:59:41", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ mv generate_table_function-err.log generate_table_function-warn.log"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ grep '^query' generate_table_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ grep '^client-time' generate_table_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:46", "info": "++ grep '^skipped' generate_table_function-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:46", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "++ basename left/performance/great_circle_dist.xml .xml"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ test_name=great_circle_dist"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ echo test great_circle_dist"}, {"date": "2020-04-14", "time": "04:59:46", "info": "test great_circle_dist"}, {"date": "2020-04-14", "time": "04:59:46", "info": "++ printf 'great_circle_dist\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ TIMEFORMAT='great_circle_dist %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:59:46", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ mv great_circle_dist-err.log great_circle_dist-warn.log"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ grep '^query' great_circle_dist-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ grep '^client-time' great_circle_dist-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:47", "info": "++ grep '^skipped' great_circle_dist-raw.tsv"}, {"date": "2020-04-14", "time": "04:59:47", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ skipped="}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "++ basename left/performance/group_array_moving_sum.xml .xml"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ test_name=group_array_moving_sum"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ echo test group_array_moving_sum"}, {"date": "2020-04-14", "time": "04:59:47", "info": "test group_array_moving_sum"}, {"date": "2020-04-14", "time": "04:59:47", "info": "++ printf 'group_array_moving_sum\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ TIMEFORMAT='group_array_moving_sum %3R %3U %3S'"}, {"date": "2020-04-14", "time": "04:59:47", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ mv group_array_moving_sum-err.log group_array_moving_sum-warn.log"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ grep '^query' group_array_moving_sum-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ grep '^client-time' group_array_moving_sum-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:19", "info": "++ grep '^skipped' group_array_moving_sum-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:19", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "++ basename left/performance/h3.xml .xml"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ test_name=h3"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ echo test h3"}, {"date": "2020-04-14", "time": "05:02:19", "info": "test h3"}, {"date": "2020-04-14", "time": "05:02:19", "info": "++ printf 'h3\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ TIMEFORMAT='h3 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:02:19", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ mv h3-err.log h3-warn.log"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ grep '^query' h3-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ grep '^client-time' h3-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:21", "info": "++ grep '^skipped' h3-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:21", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "++ basename left/performance/if_array_num.xml .xml"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ test_name=if_array_num"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ echo test if_array_num"}, {"date": "2020-04-14", "time": "05:02:21", "info": "test if_array_num"}, {"date": "2020-04-14", "time": "05:02:21", "info": "++ printf 'if_array_num\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ TIMEFORMAT='if_array_num %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:02:21", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ mv if_array_num-err.log if_array_num-warn.log"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ grep '^query' if_array_num-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ grep '^client-time' if_array_num-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:32", "info": "++ grep '^skipped' if_array_num-raw.tsv"}, {"date": "2020-04-14", "time": "05:02:32", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:32", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:02:33", "info": "++ basename left/performance/if_array_string.xml .xml"}, {"date": "2020-04-14", "time": "05:02:33", "info": "+ test_name=if_array_string"}, {"date": "2020-04-14", "time": "05:02:33", "info": "+ echo test if_array_string"}, {"date": "2020-04-14", "time": "05:02:33", "info": "test if_array_string"}, {"date": "2020-04-14", "time": "05:02:33", "info": "++ printf 'if_array_string\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:02:33", "info": "+ TIMEFORMAT='if_array_string %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:02:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ mv if_array_string-err.log if_array_string-warn.log"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ grep '^query' if_array_string-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ grep '^client-time' if_array_string-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:08", "info": "++ grep '^skipped' if_array_string-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:08", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "++ basename left/performance/if_string_const.xml .xml"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ test_name=if_string_const"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ echo test if_string_const"}, {"date": "2020-04-14", "time": "05:03:08", "info": "test if_string_const"}, {"date": "2020-04-14", "time": "05:03:08", "info": "++ printf 'if_string_const\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ TIMEFORMAT='if_string_const %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:08", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ mv if_string_const-err.log if_string_const-warn.log"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ grep '^query' if_string_const-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ grep '^client-time' if_string_const-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:09", "info": "++ grep '^skipped' if_string_const-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:09", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "++ basename left/performance/if_string_hits.xml .xml"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ test_name=if_string_hits"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ echo test if_string_hits"}, {"date": "2020-04-14", "time": "05:03:09", "info": "test if_string_hits"}, {"date": "2020-04-14", "time": "05:03:09", "info": "++ printf 'if_string_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ TIMEFORMAT='if_string_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:09", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ mv if_string_hits-err.log if_string_hits-warn.log"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep '^query' if_string_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep '^client-time' if_string_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ grep '^skipped' if_string_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ basename left/performance/if_to_multiif.xml .xml"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ test_name=if_to_multiif"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ echo test if_to_multiif"}, {"date": "2020-04-14", "time": "05:03:12", "info": "test if_to_multiif"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ printf 'if_to_multiif\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ TIMEFORMAT='if_to_multiif %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ mv if_to_multiif-err.log if_to_multiif-warn.log"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep '^query' if_to_multiif-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep '^client-time' if_to_multiif-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ grep '^skipped' if_to_multiif-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 60.'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 60.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ printf 'if_to_multiif\\tclickhouse_driver.errors.ServerException: Code: 60.\\n'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ basename left/performance/information_value.xml .xml"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ test_name=information_value"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ echo test information_value"}, {"date": "2020-04-14", "time": "05:03:12", "info": "test information_value"}, {"date": "2020-04-14", "time": "05:03:12", "info": "++ printf 'information_value\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ TIMEFORMAT='information_value %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:12", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ mv information_value-err.log information_value-warn.log"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep '^query' information_value-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep '^client-time' information_value-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ grep '^skipped' information_value-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ basename left/performance/insert_values_with_expressions.xml .xml"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ test_name=insert_values_with_expressions"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ echo test insert_values_with_expressions"}, {"date": "2020-04-14", "time": "05:03:13", "info": "test insert_values_with_expressions"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ printf 'insert_values_with_expressions\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ TIMEFORMAT='insert_values_with_expressions %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ mv insert_values_with_expressions-err.log insert_values_with_expressions-warn.log"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep '^query' insert_values_with_expressions-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep '^client-time' insert_values_with_expressions-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ grep '^skipped' insert_values_with_expressions-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 107.'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 107.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ printf 'insert_values_with_expressions\\tclickhouse_driver.errors.ServerException: Code: 107.\\n'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ basename left/performance/inserts_arrays_lowcardinality.xml .xml"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ test_name=inserts_arrays_lowcardinality"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ echo test inserts_arrays_lowcardinality"}, {"date": "2020-04-14", "time": "05:03:13", "info": "test inserts_arrays_lowcardinality"}, {"date": "2020-04-14", "time": "05:03:13", "info": "++ printf 'inserts_arrays_lowcardinality\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ TIMEFORMAT='inserts_arrays_lowcardinality %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ mv inserts_arrays_lowcardinality-err.log inserts_arrays_lowcardinality-warn.log"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ grep '^query' inserts_arrays_lowcardinality-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ grep '^client-time' inserts_arrays_lowcardinality-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:20", "info": "++ grep '^skipped' inserts_arrays_lowcardinality-raw.tsv"}, {"date": "2020-04-14", "time": "05:03:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "++ basename left/performance/int_parsing.xml .xml"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ test_name=int_parsing"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ echo test int_parsing"}, {"date": "2020-04-14", "time": "05:03:20", "info": "test int_parsing"}, {"date": "2020-04-14", "time": "05:03:20", "info": "++ printf 'int_parsing\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ TIMEFORMAT='int_parsing %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:03:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ mv int_parsing-err.log int_parsing-warn.log"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ grep '^query' int_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ grep '^client-time' int_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:28", "info": "++ grep '^skipped' int_parsing-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:28", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "++ basename left/performance/jit_large_requests.xml .xml"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ test_name=jit_large_requests"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ echo test jit_large_requests"}, {"date": "2020-04-14", "time": "05:04:28", "info": "test jit_large_requests"}, {"date": "2020-04-14", "time": "05:04:28", "info": "++ printf 'jit_large_requests\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ TIMEFORMAT='jit_large_requests %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:04:28", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ mv jit_large_requests-err.log jit_large_requests-warn.log"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ grep '^query' jit_large_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ grep '^client-time' jit_large_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:31", "info": "++ grep '^skipped' jit_large_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:31", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "++ basename left/performance/jit_small_requests.xml .xml"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ test_name=jit_small_requests"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ echo test jit_small_requests"}, {"date": "2020-04-14", "time": "05:04:31", "info": "test jit_small_requests"}, {"date": "2020-04-14", "time": "05:04:31", "info": "++ printf 'jit_small_requests\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ TIMEFORMAT='jit_small_requests %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:04:31", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ mv jit_small_requests-err.log jit_small_requests-warn.log"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ grep '^query' jit_small_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ grep '^client-time' jit_small_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:32", "info": "++ grep '^skipped' jit_small_requests-raw.tsv"}, {"date": "2020-04-14", "time": "05:04:32", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "++ basename left/performance/joins_in_memory.xml .xml"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ test_name=joins_in_memory"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ echo test joins_in_memory"}, {"date": "2020-04-14", "time": "05:04:32", "info": "test joins_in_memory"}, {"date": "2020-04-14", "time": "05:04:32", "info": "++ printf 'joins_in_memory\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ TIMEFORMAT='joins_in_memory %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:04:32", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ mv joins_in_memory-err.log joins_in_memory-warn.log"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ grep '^query' joins_in_memory-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ grep '^client-time' joins_in_memory-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:13", "info": "++ grep '^skipped' joins_in_memory-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "++ basename left/performance/joins_in_memory_pmj.xml .xml"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ test_name=joins_in_memory_pmj"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ echo test joins_in_memory_pmj"}, {"date": "2020-04-14", "time": "05:08:13", "info": "test joins_in_memory_pmj"}, {"date": "2020-04-14", "time": "05:08:13", "info": "++ printf 'joins_in_memory_pmj\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ TIMEFORMAT='joins_in_memory_pmj %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:08:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ mv joins_in_memory_pmj-err.log joins_in_memory_pmj-warn.log"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ grep '^query' joins_in_memory_pmj-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ grep '^client-time' joins_in_memory_pmj-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:27", "info": "++ grep '^skipped' joins_in_memory_pmj-raw.tsv"}, {"date": "2020-04-14", "time": "05:08:27", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "++ basename left/performance/json_extract_rapidjson.xml .xml"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ test_name=json_extract_rapidjson"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ echo test json_extract_rapidjson"}, {"date": "2020-04-14", "time": "05:08:27", "info": "test json_extract_rapidjson"}, {"date": "2020-04-14", "time": "05:08:27", "info": "++ printf 'json_extract_rapidjson\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ TIMEFORMAT='json_extract_rapidjson %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:08:27", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ mv json_extract_rapidjson-err.log json_extract_rapidjson-warn.log"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ grep '^query' json_extract_rapidjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ grep '^client-time' json_extract_rapidjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:09:56", "info": "++ grep '^skipped' json_extract_rapidjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:09:56", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "++ basename left/performance/json_extract_simdjson.xml .xml"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ test_name=json_extract_simdjson"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ echo test json_extract_simdjson"}, {"date": "2020-04-14", "time": "05:09:56", "info": "test json_extract_simdjson"}, {"date": "2020-04-14", "time": "05:09:56", "info": "++ printf 'json_extract_simdjson\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ TIMEFORMAT='json_extract_simdjson %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:09:56", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ mv json_extract_simdjson-err.log json_extract_simdjson-warn.log"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ grep '^query' json_extract_simdjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ grep '^client-time' json_extract_simdjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:43", "info": "++ grep '^skipped' json_extract_simdjson-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:43", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "++ basename left/performance/leftpad.xml .xml"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ test_name=leftpad"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ echo test leftpad"}, {"date": "2020-04-14", "time": "05:10:43", "info": "test leftpad"}, {"date": "2020-04-14", "time": "05:10:43", "info": "++ printf 'leftpad\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ TIMEFORMAT='leftpad %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:10:43", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ mv leftpad-err.log leftpad-warn.log"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ grep '^query' leftpad-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ grep '^client-time' leftpad-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:44", "info": "++ grep '^skipped' leftpad-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:44", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 60.'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 60.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ printf 'leftpad\\tclickhouse_driver.errors.ServerException: Code: 60.\\n'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "++ basename left/performance/linear_regression.xml .xml"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ test_name=linear_regression"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ echo test linear_regression"}, {"date": "2020-04-14", "time": "05:10:44", "info": "test linear_regression"}, {"date": "2020-04-14", "time": "05:10:44", "info": "++ printf 'linear_regression\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ TIMEFORMAT='linear_regression %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:10:44", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ mv linear_regression-err.log linear_regression-warn.log"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ grep '^query' linear_regression-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ grep '^client-time' linear_regression-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:56", "info": "++ grep '^skipped' linear_regression-raw.tsv"}, {"date": "2020-04-14", "time": "05:10:56", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "++ basename left/performance/logical_functions_large.xml .xml"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ test_name=logical_functions_large"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ echo test logical_functions_large"}, {"date": "2020-04-14", "time": "05:10:56", "info": "test logical_functions_large"}, {"date": "2020-04-14", "time": "05:10:56", "info": "++ printf 'logical_functions_large\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ TIMEFORMAT='logical_functions_large %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:10:56", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ mv logical_functions_large-err.log logical_functions_large-warn.log"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ grep '^query' logical_functions_large-raw.tsv"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ grep '^client-time' logical_functions_large-raw.tsv"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:11:53", "info": "++ grep '^skipped' logical_functions_large-raw.tsv"}, {"date": "2020-04-14", "time": "05:11:53", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "++ basename left/performance/math.xml .xml"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ test_name=math"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ echo test math"}, {"date": "2020-04-14", "time": "05:11:53", "info": "test math"}, {"date": "2020-04-14", "time": "05:11:53", "info": "++ printf 'math\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ TIMEFORMAT='math %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:11:53", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ mv math-err.log math-warn.log"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ grep '^query' math-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ grep '^client-time' math-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:49", "info": "++ grep '^skipped' math-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:49", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "++ basename left/performance/merge_table_streams.xml .xml"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ test_name=merge_table_streams"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ echo test merge_table_streams"}, {"date": "2020-04-14", "time": "05:16:49", "info": "test merge_table_streams"}, {"date": "2020-04-14", "time": "05:16:49", "info": "++ printf 'merge_table_streams\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ TIMEFORMAT='merge_table_streams %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:16:49", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ mv merge_table_streams-err.log merge_table_streams-warn.log"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ grep '^query' merge_table_streams-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ grep '^client-time' merge_table_streams-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:50", "info": "++ grep '^skipped' merge_table_streams-raw.tsv"}, {"date": "2020-04-14", "time": "05:16:50", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "++ basename left/performance/merge_tree_huge_pk.xml .xml"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ test_name=merge_tree_huge_pk"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ echo test merge_tree_huge_pk"}, {"date": "2020-04-14", "time": "05:16:50", "info": "test merge_tree_huge_pk"}, {"date": "2020-04-14", "time": "05:16:50", "info": "++ printf 'merge_tree_huge_pk\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ TIMEFORMAT='merge_tree_huge_pk %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:16:50", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ mv merge_tree_huge_pk-err.log merge_tree_huge_pk-warn.log"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ grep '^query' merge_tree_huge_pk-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ grep '^client-time' merge_tree_huge_pk-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:12", "info": "++ grep '^skipped' merge_tree_huge_pk-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:12", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "++ basename left/performance/merge_tree_many_partitions.xml .xml"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ test_name=merge_tree_many_partitions"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ echo test merge_tree_many_partitions"}, {"date": "2020-04-14", "time": "05:17:12", "info": "test merge_tree_many_partitions"}, {"date": "2020-04-14", "time": "05:17:12", "info": "++ printf 'merge_tree_many_partitions\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ TIMEFORMAT='merge_tree_many_partitions %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:17:12", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ mv merge_tree_many_partitions-err.log merge_tree_many_partitions-warn.log"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ grep '^query' merge_tree_many_partitions-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ grep '^client-time' merge_tree_many_partitions-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:18", "info": "++ grep '^skipped' merge_tree_many_partitions-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:18", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "++ basename left/performance/merge_tree_many_partitions_2.xml .xml"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ test_name=merge_tree_many_partitions_2"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ echo test merge_tree_many_partitions_2"}, {"date": "2020-04-14", "time": "05:17:18", "info": "test merge_tree_many_partitions_2"}, {"date": "2020-04-14", "time": "05:17:18", "info": "++ printf 'merge_tree_many_partitions_2\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ TIMEFORMAT='merge_tree_many_partitions_2 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:17:18", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ mv merge_tree_many_partitions_2-err.log merge_tree_many_partitions_2-warn.log"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ grep '^query' merge_tree_many_partitions_2-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ grep '^client-time' merge_tree_many_partitions_2-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:28", "info": "++ grep '^skipped' merge_tree_many_partitions_2-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:28", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "++ basename left/performance/merge_tree_simple_select.xml .xml"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ test_name=merge_tree_simple_select"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ echo test merge_tree_simple_select"}, {"date": "2020-04-14", "time": "05:17:28", "info": "test merge_tree_simple_select"}, {"date": "2020-04-14", "time": "05:17:28", "info": "++ printf 'merge_tree_simple_select\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ TIMEFORMAT='merge_tree_simple_select %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:17:28", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ mv merge_tree_simple_select-err.log merge_tree_simple_select-warn.log"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ grep '^query' merge_tree_simple_select-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ grep '^client-time' merge_tree_simple_select-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:36", "info": "++ grep '^skipped' merge_tree_simple_select-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:36", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "++ basename left/performance/mingroupby-orderbylimit1.xml .xml"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ test_name=mingroupby-orderbylimit1"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ echo test mingroupby-orderbylimit1"}, {"date": "2020-04-14", "time": "05:17:36", "info": "test mingroupby-orderbylimit1"}, {"date": "2020-04-14", "time": "05:17:36", "info": "++ printf 'mingroupby-orderbylimit1\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ TIMEFORMAT='mingroupby-orderbylimit1 %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:17:36", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ mv mingroupby-orderbylimit1-err.log mingroupby-orderbylimit1-warn.log"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ grep '^query' mingroupby-orderbylimit1-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ grep '^client-time' mingroupby-orderbylimit1-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:54", "info": "++ grep '^skipped' mingroupby-orderbylimit1-raw.tsv"}, {"date": "2020-04-14", "time": "05:17:54", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "++ basename left/performance/ngram_distance.xml .xml"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ test_name=ngram_distance"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ echo test ngram_distance"}, {"date": "2020-04-14", "time": "05:17:54", "info": "test ngram_distance"}, {"date": "2020-04-14", "time": "05:17:54", "info": "++ printf 'ngram_distance\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ TIMEFORMAT='ngram_distance %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:17:54", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ mv ngram_distance-err.log ngram_distance-warn.log"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep '^query' ngram_distance-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep '^client-time' ngram_distance-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ grep '^skipped' ngram_distance-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ basename left/performance/nyc_taxi.xml .xml"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ test_name=nyc_taxi"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ echo test nyc_taxi"}, {"date": "2020-04-14", "time": "05:19:07", "info": "test nyc_taxi"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ printf 'nyc_taxi\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ TIMEFORMAT='nyc_taxi %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ mv nyc_taxi-err.log nyc_taxi-warn.log"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep '^query' nyc_taxi-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep '^client-time' nyc_taxi-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ grep '^skipped' nyc_taxi-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ skipped='clickhouse_driver.errors.ServerException: Code: 60.'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ '[' 'clickhouse_driver.errors.ServerException: Code: 60.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ printf 'nyc_taxi\\tclickhouse_driver.errors.ServerException: Code: 60.\\n'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ basename left/performance/order_by_decimals.xml .xml"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ test_name=order_by_decimals"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ echo test order_by_decimals"}, {"date": "2020-04-14", "time": "05:19:07", "info": "test order_by_decimals"}, {"date": "2020-04-14", "time": "05:19:07", "info": "++ printf 'order_by_decimals\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ TIMEFORMAT='order_by_decimals %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:19:07", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ mv order_by_decimals-err.log order_by_decimals-warn.log"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ grep '^query' order_by_decimals-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ grep '^client-time' order_by_decimals-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:13", "info": "++ grep '^skipped' order_by_decimals-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "++ basename left/performance/order_by_read_in_order.xml .xml"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ test_name=order_by_read_in_order"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ echo test order_by_read_in_order"}, {"date": "2020-04-14", "time": "05:19:13", "info": "test order_by_read_in_order"}, {"date": "2020-04-14", "time": "05:19:13", "info": "++ printf 'order_by_read_in_order\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ TIMEFORMAT='order_by_read_in_order %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:19:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ mv order_by_read_in_order-err.log order_by_read_in_order-warn.log"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ grep '^query' order_by_read_in_order-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ grep '^client-time' order_by_read_in_order-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:26", "info": "++ grep '^skipped' order_by_read_in_order-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:26", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "++ basename left/performance/order_by_single_column.xml .xml"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ test_name=order_by_single_column"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ echo test order_by_single_column"}, {"date": "2020-04-14", "time": "05:19:26", "info": "test order_by_single_column"}, {"date": "2020-04-14", "time": "05:19:26", "info": "++ printf 'order_by_single_column\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ TIMEFORMAT='order_by_single_column %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:19:26", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ mv order_by_single_column-err.log order_by_single_column-warn.log"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ grep '^query' order_by_single_column-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ grep '^client-time' order_by_single_column-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:48", "info": "++ grep '^skipped' order_by_single_column-raw.tsv"}, {"date": "2020-04-14", "time": "05:19:48", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "++ basename left/performance/parallel_insert.xml .xml"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ test_name=parallel_insert"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ echo test parallel_insert"}, {"date": "2020-04-14", "time": "05:19:48", "info": "test parallel_insert"}, {"date": "2020-04-14", "time": "05:19:48", "info": "++ printf 'parallel_insert\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ TIMEFORMAT='parallel_insert %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:19:48", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ mv parallel_insert-err.log parallel_insert-warn.log"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ grep '^query' parallel_insert-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ grep '^client-time' parallel_insert-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:08", "info": "++ grep '^skipped' parallel_insert-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:08", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "++ basename left/performance/pre_limit_no_sorting.xml .xml"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ test_name=pre_limit_no_sorting"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ echo test pre_limit_no_sorting"}, {"date": "2020-04-14", "time": "05:20:08", "info": "test pre_limit_no_sorting"}, {"date": "2020-04-14", "time": "05:20:08", "info": "++ printf 'pre_limit_no_sorting\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ TIMEFORMAT='pre_limit_no_sorting %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:20:08", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ mv pre_limit_no_sorting-err.log pre_limit_no_sorting-warn.log"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ grep '^query' pre_limit_no_sorting-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ grep '^client-time' pre_limit_no_sorting-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:09", "info": "++ grep '^skipped' pre_limit_no_sorting-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:09", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "++ basename left/performance/prewhere.xml .xml"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ test_name=prewhere"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ echo test prewhere"}, {"date": "2020-04-14", "time": "05:20:09", "info": "test prewhere"}, {"date": "2020-04-14", "time": "05:20:09", "info": "++ printf 'prewhere\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ TIMEFORMAT='prewhere %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:20:09", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ mv prewhere-err.log prewhere-warn.log"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ grep '^query' prewhere-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ grep '^client-time' prewhere-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:20", "info": "++ grep '^skipped' prewhere-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:20", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "++ basename left/performance/random_printable_ascii.xml .xml"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ test_name=random_printable_ascii"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ echo test random_printable_ascii"}, {"date": "2020-04-14", "time": "05:20:20", "info": "test random_printable_ascii"}, {"date": "2020-04-14", "time": "05:20:20", "info": "++ printf 'random_printable_ascii\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ TIMEFORMAT='random_printable_ascii %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:20:20", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ mv random_printable_ascii-err.log random_printable_ascii-warn.log"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ grep '^query' random_printable_ascii-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ grep '^client-time' random_printable_ascii-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:53", "info": "++ grep '^skipped' random_printable_ascii-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:53", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "++ basename left/performance/range.xml .xml"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ test_name=range"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ echo test range"}, {"date": "2020-04-14", "time": "05:20:53", "info": "test range"}, {"date": "2020-04-14", "time": "05:20:53", "info": "++ printf 'range\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ TIMEFORMAT='range %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:20:53", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ mv range-err.log range-warn.log"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ grep '^query' range-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ grep '^client-time' range-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:59", "info": "++ grep '^skipped' range-raw.tsv"}, {"date": "2020-04-14", "time": "05:20:59", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "++ basename left/performance/read_hits_with_aio.xml .xml"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ test_name=read_hits_with_aio"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ echo test read_hits_with_aio"}, {"date": "2020-04-14", "time": "05:20:59", "info": "test read_hits_with_aio"}, {"date": "2020-04-14", "time": "05:20:59", "info": "++ printf 'read_hits_with_aio\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ TIMEFORMAT='read_hits_with_aio %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:20:59", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ mv read_hits_with_aio-err.log read_hits_with_aio-warn.log"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ grep '^query' read_hits_with_aio-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ grep '^client-time' read_hits_with_aio-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:13", "info": "++ grep '^skipped' read_hits_with_aio-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "++ basename left/performance/right.xml .xml"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ test_name=right"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ echo test right"}, {"date": "2020-04-14", "time": "05:21:13", "info": "test right"}, {"date": "2020-04-14", "time": "05:21:13", "info": "++ printf 'right\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ TIMEFORMAT='right %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ mv right-err.log right-warn.log"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ grep '^query' right-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ grep '^client-time' right-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:22", "info": "++ grep '^skipped' right-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:22", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "++ basename left/performance/round_down.xml .xml"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ test_name=round_down"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ echo test round_down"}, {"date": "2020-04-14", "time": "05:21:22", "info": "test round_down"}, {"date": "2020-04-14", "time": "05:21:22", "info": "++ printf 'round_down\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ TIMEFORMAT='round_down %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:22", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ mv round_down-err.log round_down-warn.log"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ grep '^query' round_down-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ grep '^client-time' round_down-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:46", "info": "++ grep '^skipped' round_down-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:46", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "++ basename left/performance/round_methods.xml .xml"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ test_name=round_methods"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ echo test round_methods"}, {"date": "2020-04-14", "time": "05:21:46", "info": "test round_methods"}, {"date": "2020-04-14", "time": "05:21:46", "info": "++ printf 'round_methods\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ TIMEFORMAT='round_methods %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:46", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ mv round_methods-err.log round_methods-warn.log"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ grep '^query' round_methods-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ grep '^client-time' round_methods-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:48", "info": "++ grep '^skipped' round_methods-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:48", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "++ basename left/performance/scalar.xml .xml"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ test_name=scalar"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ echo test scalar"}, {"date": "2020-04-14", "time": "05:21:48", "info": "test scalar"}, {"date": "2020-04-14", "time": "05:21:48", "info": "++ printf 'scalar\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ TIMEFORMAT='scalar %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:48", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ mv scalar-err.log scalar-warn.log"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep '^query' scalar-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep '^client-time' scalar-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ grep '^skipped' scalar-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ basename left/performance/set.xml .xml"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ test_name=set"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ echo test set"}, {"date": "2020-04-14", "time": "05:21:52", "info": "test set"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ printf 'set\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ TIMEFORMAT='set %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ mv set-err.log set-warn.log"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep '^query' set-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep '^client-time' set-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ grep '^skipped' set-raw.tsv"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ skipped='Test is tagged as long.'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ '[' 'Test is tagged as long.' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ printf 'set\\tTest is tagged as long.\\n'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ basename left/performance/set_hits.xml .xml"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ test_name=set_hits"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ echo test set_hits"}, {"date": "2020-04-14", "time": "05:21:52", "info": "test set_hits"}, {"date": "2020-04-14", "time": "05:21:52", "info": "++ printf 'set_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ TIMEFORMAT='set_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:21:52", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ mv set_hits-err.log set_hits-warn.log"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ grep '^query' set_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ grep '^client-time' set_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:07", "info": "++ grep '^skipped' set_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:07", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "++ basename left/performance/set_index.xml .xml"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ test_name=set_index"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ echo test set_index"}, {"date": "2020-04-14", "time": "05:22:07", "info": "test set_index"}, {"date": "2020-04-14", "time": "05:22:07", "info": "++ printf 'set_index\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ TIMEFORMAT='set_index %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:22:07", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ mv set_index-err.log set_index-warn.log"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ grep '^query' set_index-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ grep '^client-time' set_index-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:22", "info": "++ grep '^skipped' set_index-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:22", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "++ basename left/performance/simple_join_query.xml .xml"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ test_name=simple_join_query"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ echo test simple_join_query"}, {"date": "2020-04-14", "time": "05:22:22", "info": "test simple_join_query"}, {"date": "2020-04-14", "time": "05:22:22", "info": "++ printf 'simple_join_query\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ TIMEFORMAT='simple_join_query %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:22:22", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ mv simple_join_query-err.log simple_join_query-warn.log"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ grep '^query' simple_join_query-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ grep '^client-time' simple_join_query-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:27", "info": "++ grep '^skipped' simple_join_query-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:27", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "++ basename left/performance/slices_hits.xml .xml"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ test_name=slices_hits"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ echo test slices_hits"}, {"date": "2020-04-14", "time": "05:22:27", "info": "test slices_hits"}, {"date": "2020-04-14", "time": "05:22:27", "info": "++ printf 'slices_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ TIMEFORMAT='slices_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:22:27", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ mv slices_hits-err.log slices_hits-warn.log"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ grep '^query' slices_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ grep '^client-time' slices_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:28", "info": "++ grep '^skipped' slices_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:22:28", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "++ basename left/performance/sort.xml .xml"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ test_name=sort"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ echo test sort"}, {"date": "2020-04-14", "time": "05:22:28", "info": "test sort"}, {"date": "2020-04-14", "time": "05:22:28", "info": "++ printf 'sort\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ TIMEFORMAT='sort %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:22:28", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ mv sort-err.log sort-warn.log"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ grep '^query' sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ grep '^client-time' sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:14", "info": "++ grep '^skipped' sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:14", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "++ basename left/performance/string_join.xml .xml"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ test_name=string_join"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ echo test string_join"}, {"date": "2020-04-14", "time": "05:23:14", "info": "test string_join"}, {"date": "2020-04-14", "time": "05:23:14", "info": "++ printf 'string_join\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ TIMEFORMAT='string_join %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:23:14", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ mv string_join-err.log string_join-warn.log"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ grep '^query' string_join-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ grep '^client-time' string_join-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:33", "info": "++ grep '^skipped' string_join-raw.tsv"}, {"date": "2020-04-14", "time": "05:23:33", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "++ basename left/performance/string_set.xml .xml"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ test_name=string_set"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ echo test string_set"}, {"date": "2020-04-14", "time": "05:23:33", "info": "test string_set"}, {"date": "2020-04-14", "time": "05:23:33", "info": "++ printf 'string_set\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ TIMEFORMAT='string_set %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:23:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ mv string_set-err.log string_set-warn.log"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ grep '^query' string_set-raw.tsv"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ grep '^client-time' string_set-raw.tsv"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:24:03", "info": "++ grep '^skipped' string_set-raw.tsv"}, {"date": "2020-04-14", "time": "05:24:03", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "++ basename left/performance/string_sort.xml .xml"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ test_name=string_sort"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ echo test string_sort"}, {"date": "2020-04-14", "time": "05:24:03", "info": "test string_sort"}, {"date": "2020-04-14", "time": "05:24:03", "info": "++ printf 'string_sort\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ TIMEFORMAT='string_sort %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:24:03", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ mv string_sort-err.log string_sort-warn.log"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ grep '^query' string_sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ grep '^client-time' string_sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:22", "info": "++ grep '^skipped' string_sort-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:22", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "++ basename left/performance/sum_map.xml .xml"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ test_name=sum_map"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ echo test sum_map"}, {"date": "2020-04-14", "time": "05:36:22", "info": "test sum_map"}, {"date": "2020-04-14", "time": "05:36:22", "info": "++ printf 'sum_map\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ TIMEFORMAT='sum_map %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:36:22", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ mv sum_map-err.log sum_map-warn.log"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ grep '^query' sum_map-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ grep '^client-time' sum_map-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:46", "info": "++ grep '^skipped' sum_map-raw.tsv"}, {"date": "2020-04-14", "time": "05:36:46", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "++ basename left/performance/synthetic_hardware_benchmark.xml .xml"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ test_name=synthetic_hardware_benchmark"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ echo test synthetic_hardware_benchmark"}, {"date": "2020-04-14", "time": "05:36:46", "info": "test synthetic_hardware_benchmark"}, {"date": "2020-04-14", "time": "05:36:46", "info": "++ printf 'synthetic_hardware_benchmark\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ TIMEFORMAT='synthetic_hardware_benchmark %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:36:46", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ mv synthetic_hardware_benchmark-err.log synthetic_hardware_benchmark-warn.log"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ grep '^query' synthetic_hardware_benchmark-raw.tsv"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ grep '^client-time' synthetic_hardware_benchmark-raw.tsv"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:39:08", "info": "++ grep '^skipped' synthetic_hardware_benchmark-raw.tsv"}, {"date": "2020-04-14", "time": "05:39:08", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "++ basename left/performance/trim_numbers.xml .xml"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ test_name=trim_numbers"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ echo test trim_numbers"}, {"date": "2020-04-14", "time": "05:39:08", "info": "test trim_numbers"}, {"date": "2020-04-14", "time": "05:39:08", "info": "++ printf 'trim_numbers\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ TIMEFORMAT='trim_numbers %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:39:08", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ mv trim_numbers-err.log trim_numbers-warn.log"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ grep '^query' trim_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ grep '^client-time' trim_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:40:01", "info": "++ grep '^skipped' trim_numbers-raw.tsv"}, {"date": "2020-04-14", "time": "05:40:01", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "++ basename left/performance/trim_urls.xml .xml"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ test_name=trim_urls"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ echo test trim_urls"}, {"date": "2020-04-14", "time": "05:40:01", "info": "test trim_urls"}, {"date": "2020-04-14", "time": "05:40:01", "info": "++ printf 'trim_urls\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ TIMEFORMAT='trim_urls %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:40:01", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ mv trim_urls-err.log trim_urls-warn.log"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ grep '^query' trim_urls-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ grep '^client-time' trim_urls-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:13", "info": "++ grep '^skipped' trim_urls-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:13", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "++ basename left/performance/trim_whitespace.xml .xml"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ test_name=trim_whitespace"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ echo test trim_whitespace"}, {"date": "2020-04-14", "time": "05:41:13", "info": "test trim_whitespace"}, {"date": "2020-04-14", "time": "05:41:13", "info": "++ printf 'trim_whitespace\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ TIMEFORMAT='trim_whitespace %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:41:13", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ mv trim_whitespace-err.log trim_whitespace-warn.log"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ grep '^query' trim_whitespace-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ grep '^client-time' trim_whitespace-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:33", "info": "++ grep '^skipped' trim_whitespace-raw.tsv"}, {"date": "2020-04-14", "time": "05:41:33", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "++ basename left/performance/uniq.xml .xml"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ test_name=uniq"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ echo test uniq"}, {"date": "2020-04-14", "time": "05:41:33", "info": "test uniq"}, {"date": "2020-04-14", "time": "05:41:33", "info": "++ printf 'uniq\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ TIMEFORMAT='uniq %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:41:33", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ mv uniq-err.log uniq-warn.log"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ grep '^query' uniq-raw.tsv"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ grep '^client-time' uniq-raw.tsv"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:47:12", "info": "++ grep '^skipped' uniq-raw.tsv"}, {"date": "2020-04-14", "time": "05:47:12", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "++ basename left/performance/url_hits.xml .xml"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ test_name=url_hits"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ echo test url_hits"}, {"date": "2020-04-14", "time": "05:47:12", "info": "test url_hits"}, {"date": "2020-04-14", "time": "05:47:12", "info": "++ printf 'url_hits\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ TIMEFORMAT='url_hits %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:47:12", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ mv url_hits-err.log url_hits-warn.log"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ grep '^query' url_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ grep '^client-time' url_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:21", "info": "++ grep '^skipped' url_hits-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:21", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "++ basename left/performance/vectorize_aggregation_combinators.xml .xml"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ test_name=vectorize_aggregation_combinators"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ echo test vectorize_aggregation_combinators"}, {"date": "2020-04-14", "time": "05:49:21", "info": "test vectorize_aggregation_combinators"}, {"date": "2020-04-14", "time": "05:49:21", "info": "++ printf 'vectorize_aggregation_combinators\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ TIMEFORMAT='vectorize_aggregation_combinators %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:49:21", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ mv vectorize_aggregation_combinators-err.log vectorize_aggregation_combinators-warn.log"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ grep '^query' vectorize_aggregation_combinators-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ grep '^client-time' vectorize_aggregation_combinators-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:45", "info": "++ grep '^skipped' vectorize_aggregation_combinators-raw.tsv"}, {"date": "2020-04-14", "time": "05:49:45", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "++ basename left/performance/visit_param_extract_raw.xml .xml"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ test_name=visit_param_extract_raw"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ echo test visit_param_extract_raw"}, {"date": "2020-04-14", "time": "05:49:45", "info": "test visit_param_extract_raw"}, {"date": "2020-04-14", "time": "05:49:45", "info": "++ printf 'visit_param_extract_raw\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ TIMEFORMAT='visit_param_extract_raw %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:49:45", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ mv visit_param_extract_raw-err.log visit_param_extract_raw-warn.log"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ grep '^query' visit_param_extract_raw-raw.tsv"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ grep '^client-time' visit_param_extract_raw-raw.tsv"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:50:01", "info": "++ grep '^skipped' visit_param_extract_raw-raw.tsv"}, {"date": "2020-04-14", "time": "05:50:01", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ for test in $test_files"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ left/clickhouse client --port 9001 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ right/clickhouse client --port 9002 --query 'select 1 format Null'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "++ basename left/performance/website.xml .xml"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ test_name=website"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ echo test website"}, {"date": "2020-04-14", "time": "05:50:01", "info": "test website"}, {"date": "2020-04-14", "time": "05:50:01", "info": "++ printf 'website\\t%%3R\\t%%3U\\t%%3S\\n'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ TIMEFORMAT='website %3R %3U %3S'"}, {"date": "2020-04-14", "time": "05:50:01", "info": "+ grep -v '^+'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ mv website-err.log website-warn.log"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ grep '^query' website-raw.tsv"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ grep '^client-time' website-raw.tsv"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ cut -f2-"}, {"date": "2020-04-14", "time": "05:54:15", "info": "++ grep '^skipped' website-raw.tsv"}, {"date": "2020-04-14", "time": "05:54:15", "info": "++ cut -f2-"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ skipped="}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ '[' '' '!=' '' ']'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ unset TIMEFORMAT"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ wait"}, {"date": "2020-04-14", "time": "05:54:15", "info": ""}, {"date": "2020-04-14", "time": "05:54:15", "info": "real 101m34.676s"}, {"date": "2020-04-14", "time": "05:54:15", "info": "user 0m26.188s"}, {"date": "2020-04-14", "time": "05:54:15", "info": "sys 0m7.028s"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ get_profiles"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ left/clickhouse client --port 9001 --query 'set query_profiler_cpu_time_period_ns = 0'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ left/clickhouse client --port 9001 --query 'set query_profiler_real_time_period_ns = 0'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ right/clickhouse client --port 9001 --query 'set query_profiler_cpu_time_period_ns = 0'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ right/clickhouse client --port 9001 --query 'set query_profiler_real_time_period_ns = 0'"}, {"date": "2020-04-14", "time": "05:54:15", "info": "+ left/clickhouse client --port 9001 --query 'system flush logs'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'system flush logs'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.query_log where type = 2 format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.query_thread_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.trace_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ left/clickhouse client --port 9001 --query 'select arrayJoin(trace) addr, concat(splitByChar('\\''/'\\'', addressToLine(addr))[-1], '\\''#'\\'', demangle(addressToSymbol(addr)) ) name from system.trace_log group by addr format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ left/clickhouse client --port 9001 --query 'select * from system.metric_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.query_log where type = 2 format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.query_thread_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.trace_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ wait"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'select arrayJoin(trace) addr, concat(splitByChar('\\''/'\\'', addressToLine(addr))[-1], '\\''#'\\'', demangle(addressToSymbol(addr)) ) name from system.trace_log group by addr format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:54:16", "info": "+ right/clickhouse client --port 9002 --query 'select * from system.metric_log format TSVWithNamesAndTypes'"}, {"date": "2020-04-14", "time": "05:55:19", "info": ""}, {"date": "2020-04-14", "time": "05:55:19", "info": "real 1m3.696s"}, {"date": "2020-04-14", "time": "05:55:19", "info": "user 0m6.204s"}, {"date": "2020-04-14", "time": "05:55:19", "info": "sys 0m2.696s"}, {"date": "2020-04-14", "time": "05:55:19", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:19", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:19", "info": "."}, {"date": "2020-04-14", "time": "05:55:19", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:20", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:20", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:20", "info": "."}, {"date": "2020-04-14", "time": "05:55:20", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:21", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:21", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:21", "info": "."}, {"date": "2020-04-14", "time": "05:55:21", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:22", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:22", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:22", "info": "."}, {"date": "2020-04-14", "time": "05:55:22", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:23", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:23", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:23", "info": "."}, {"date": "2020-04-14", "time": "05:55:23", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:24", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:24", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:24", "info": "."}, {"date": "2020-04-14", "time": "05:55:24", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:25", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:25", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:25", "info": "."}, {"date": "2020-04-14", "time": "05:55:25", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:26", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:26", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:26", "info": "."}, {"date": "2020-04-14", "time": "05:55:26", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:27", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:27", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:27", "info": "."}, {"date": "2020-04-14", "time": "05:55:27", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:28", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:28", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:28", "info": "."}, {"date": "2020-04-14", "time": "05:55:28", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:29", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:29", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:29", "info": "."}, {"date": "2020-04-14", "time": "05:55:29", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:30", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:30", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:30", "info": "."}, {"date": "2020-04-14", "time": "05:55:30", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:31", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:31", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:31", "info": "."}, {"date": "2020-04-14", "time": "05:55:31", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:32", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:32", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:32", "info": "."}, {"date": "2020-04-14", "time": "05:55:32", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:33", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:33", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:33", "info": "."}, {"date": "2020-04-14", "time": "05:55:33", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:34", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:34", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:34", "info": "."}, {"date": "2020-04-14", "time": "05:55:34", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:35", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:35", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:35", "info": "."}, {"date": "2020-04-14", "time": "05:55:35", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:36", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:36", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:36", "info": "."}, {"date": "2020-04-14", "time": "05:55:36", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:37", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:37", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:37", "info": "."}, {"date": "2020-04-14", "time": "05:55:37", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:38", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:38", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:38", "info": "."}, {"date": "2020-04-14", "time": "05:55:38", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:39", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:39", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:39", "info": "."}, {"date": "2020-04-14", "time": "05:55:39", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:40", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:40", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:40", "info": "."}, {"date": "2020-04-14", "time": "05:55:40", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:41", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:41", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:41", "info": "."}, {"date": "2020-04-14", "time": "05:55:41", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:42", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:42", "info": "+ echo ."}, {"date": "2020-04-14", "time": "05:55:42", "info": "."}, {"date": "2020-04-14", "time": "05:55:42", "info": "+ sleep 1"}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ killall clickhouse"}, {"date": "2020-04-14", "time": "05:55:43", "info": "clickhouse: no process found"}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ echo Servers stopped."}, {"date": "2020-04-14", "time": "05:55:43", "info": "Servers stopped."}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ analyze_queries"}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ find . -maxdepth 1 -name '*-queries.tsv' -print"}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ xargs -n1 -I% basename % -queries.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "++ cat /workspace/right/scripts/eqmed.sql"}, {"date": "2020-04-14", "time": "05:55:43", "info": "+ parallel --verbose right/clickhouse local --file '{}-queries.tsv' --structure '\"query text, run int, version UInt32, time float\"' --query '\"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array '\\''random label'\\'' -> '\\''median time'\\''"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\"' '>' '{}-report.tsv'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file math-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > math-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file if_string_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > if_string_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file cpu_synthetic-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > cpu_synthetic-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file merge_table_streams-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > merge_table_streams-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file round_methods-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > round_methods-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file order_by_single_column-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > order_by_single_column-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file bit_operations_fixed_string-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > bit_operations_fixed_string-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file vectorize_aggregation_combinators-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > vectorize_aggregation_combinators-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file round_down-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > round_down-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file set-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > set-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file analyze_array_tuples-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > analyze_array_tuples-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file order_by_decimals-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > order_by_decimals-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file url_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > url_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file general_purpose_hashes-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > general_purpose_hashes-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file agg_functions_min_max_any-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > agg_functions_min_max_any-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file array_element-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > array_element-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file sum_map-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > sum_map-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file base64_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > base64_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file if_array_num-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > if_array_num-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file simple_join_query-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > simple_join_query-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file constant_column_comparison-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > constant_column_comparison-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file if_array_string-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > if_array_string-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file consistent_hashes-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > consistent_hashes-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file website-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > website-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file right-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > right-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file empty_string_serialization-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > empty_string_serialization-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file codecs_float_select-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > codecs_float_select-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file cidr-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > cidr-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file inserts_arrays_lowcardinality-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > inserts_arrays_lowcardinality-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file date_time_64-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > date_time_64-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file h3-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > h3-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file parallel_insert-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > parallel_insert-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file ngram_distance-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > ngram_distance-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file array_join-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > array_join-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file mingroupby-orderbylimit1-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > mingroupby-orderbylimit1-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file random_printable_ascii-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > random_printable_ascii-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file sort-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > sort-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file joins_in_memory_pmj-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > joins_in_memory_pmj-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file information_value-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > information_value-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file functions_coding-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > functions_coding-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file date_time-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > date_time-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file conditional-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > conditional-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file fixed_string16-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > fixed_string16-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file codecs_int_insert-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > codecs_int_insert-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file slices_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > slices_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file int_parsing-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > int_parsing-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file collations-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > collations-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file uniq-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > uniq-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file merge_tree_many_partitions-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > merge_tree_many_partitions-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file jit_large_requests-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > jit_large_requests-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file leftpad-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > leftpad-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file constant_column_search-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > constant_column_search-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file string_join-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > string_join-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file synthetic_hardware_benchmark-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > synthetic_hardware_benchmark-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file array_auc-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > array_auc-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file first_significant_subdomain-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > first_significant_subdomain-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file basename-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > basename-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file bit_operations_fixed_string_numbers-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > bit_operations_fixed_string_numbers-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file string_set-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > string_set-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file trim_whitespace-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > trim_whitespace-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file merge_tree_simple_select-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > merge_tree_simple_select-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file nyc_taxi-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > nyc_taxi-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file if_string_const-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > if_string_const-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file range-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > range-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file merge_tree_many_partitions_2-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > merge_tree_many_partitions_2-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file bloom_filter-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > bloom_filter-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file group_array_moving_sum-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > group_array_moving_sum-report.tsv"}, {"date": "2020-04-14", "time": "05:55:43", "info": "right/clickhouse local --file great_circle_dist-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:43", "info": "select"}, {"date": "2020-04-14", "time": "05:55:43", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from"}, {"date": "2020-04-14", "time": "05:55:43", "info": "("}, {"date": "2020-04-14", "time": "05:55:43", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:43", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:43", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:43", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:43", "info": "order by rd_quantiles_percent[3] desc;\" > great_circle_dist-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file prewhere-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > prewhere-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file float_formatting-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > float_formatting-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file set_index-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > set_index-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file json_extract_simdjson-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > json_extract_simdjson-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file pre_limit_no_sorting-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > pre_limit_no_sorting-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file json_extract_rapidjson-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > json_extract_rapidjson-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file merge_tree_huge_pk-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > merge_tree_huge_pk-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file count-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > count-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file if_to_multiif-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > if_to_multiif-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file codecs_int_select-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > codecs_int_select-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file read_hits_with_aio-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > read_hits_with_aio-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file decimal_aggregates-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > decimal_aggregates-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file array_reduce-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > array_reduce-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file general_purpose_hashes_on_UUID-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > general_purpose_hashes_on_UUID-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file order_by_read_in_order-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > order_by_read_in_order-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file trim_urls-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > trim_urls-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file base64-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > base64-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file early_constant_folding-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > early_constant_folding-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file generate_table_function-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > generate_table_function-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file scalar-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > scalar-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file string_sort-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > string_sort-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file and_function-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > and_function-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file trim_numbers-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > trim_numbers-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file codecs_float_insert-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > codecs_float_insert-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file functions_geo-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > functions_geo-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file float_parsing-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > float_parsing-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file bitCount-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > bitCount-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file insert_values_with_expressions-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > insert_values_with_expressions-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file visit_param_extract_raw-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > visit_param_extract_raw-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file jit_small_requests-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > jit_small_requests-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file date_parsing-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > date_parsing-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file columns_hashing-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > columns_hashing-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file complex_array_creation-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > complex_array_creation-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file format_date_time-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > format_date_time-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file linear_regression-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > linear_regression-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file entropy-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > entropy-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file set_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > set_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file concat_hits-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > concat_hits-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file column_column_comparison-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > column_column_comparison-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file logical_functions_large-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > logical_functions_large-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file empty_string_deserialization-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > empty_string_deserialization-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file array_fill-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > array_fill-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file joins_in_memory-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > joins_in_memory-report.tsv"}, {"date": "2020-04-14", "time": "05:55:44", "info": "right/clickhouse local --file bounding_ratio-queries.tsv --structure \"query text, run int, version UInt32, time float\" --query \"-- input is table(query text, run UInt32, version int, time float)"}, {"date": "2020-04-14", "time": "05:55:44", "info": "select"}, {"date": "2020-04-14", "time": "05:55:44", "info": "-- abs(diff_percent) > rd_quantiles_percent[3] fail,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[1], 4) l,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor(original_medians_array.time_by_version[2], 4) r,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "floor((r - l) / l, 3) diff_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "arrayMap(x -> floor(x / l, 3), rd.rd_quantiles) rd_quantiles_percent,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, quantiles(0.05, 0.5, 0.95, 0.99)(abs(time_by_label[1] - time_by_label[2])) rd_quantiles -- quantiles of randomization distribution"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, virtual_run, groupArrayInsertAt(median_time, random_label) time_by_label -- make array 'random label' -> 'median time'"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, medianExact(time) median_time, virtual_run, random_label -- get median times, grouping by random label"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select *, toUInt32(rowNumberInBlock() % 2) random_label -- randomly relabel measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from ("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select query, time, number virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table, numbers(1, 10000) nn -- duplicate input measurements into many virtual runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by query, virtual_run, rand() -- for each virtual run, randomly reorder measurements"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_runs"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") relabeled"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run, random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query, virtual_run -- aggregate by random_label"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") virtual_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query -- aggregate by virtual_run"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") rd,"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select groupArrayInsertAt(median_time, version) time_by_version, query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from"}, {"date": "2020-04-14", "time": "05:55:44", "info": "("}, {"date": "2020-04-14", "time": "05:55:44", "info": "select medianExact(time) median_time, query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": "from table group by query, version"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians"}, {"date": "2020-04-14", "time": "05:55:44", "info": "group by query"}, {"date": "2020-04-14", "time": "05:55:44", "info": ") original_medians_array"}, {"date": "2020-04-14", "time": "05:55:44", "info": "where rd.query = original_medians_array.query"}, {"date": "2020-04-14", "time": "05:55:44", "info": "order by rd_quantiles_percent[3] desc;\" > bounding_ratio-report.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "real 0m46.411s"}, {"date": "2020-04-14", "time": "05:56:30", "info": "user 3m37.652s"}, {"date": "2020-04-14", "time": "05:56:30", "info": "sys 0m57.704s"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ report"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' right-addresses.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' right-addresses.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' right-query-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' right-query-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' right-query-thread-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' right-query-thread-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' right-trace-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' right-trace-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' right-metric-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' right-metric-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' left-addresses.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' left-addresses.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' left-query-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' left-query-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' left-query-thread-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' left-query-thread-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' left-trace-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' left-trace-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for x in {right,left}-{addresses,{query,query-thread,trace,metric}-log}.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ tr '\\n' ', '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ sed 's/,$//'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ paste '-d ' /dev/fd/63 /dev/fd/62"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '2{s/\\t/\\n/g;p;q}' left-metric-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed -n '1{s/\\t/\\n/g;p;q}' left-metric-log.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ sed 's/\\(^.*$\\)/\"\\1\"/'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ rm './*.rep' './*.svg' test-times.tsv test-dump.tsv unstable.tsv unstable-query-ids.tsv unstable-query-metrics.tsv changed-perf.tsv unstable-tests.tsv unstable-queries.tsv bad-tests.tsv slow-on-client.tsv all-queries.tsv"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove './*.rep': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove './*.svg': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'test-dump.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'unstable.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'unstable-query-ids.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'unstable-query-metrics.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'changed-perf.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'unstable-tests.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'unstable-queries.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'bad-tests.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'slow-on-client.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rm: cannot remove 'all-queries.tsv': No such file or directory"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ :"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ right/clickhouse local --query '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table queries engine File(TSVWithNamesAndTypes, '\\''queries.rep'\\'')"}, {"date": "2020-04-14", "time": "05:56:30", "info": "as select"}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- FIXME Comparison mode doesn'\\''t make sense for queries that complete"}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- immediately, so for now we pretend they don'\\''t exist. We don'\\''t want to"}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- remove them altogether because we want to be able to detect regressions,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- but the right way to do this is not yet clear."}, {"date": "2020-04-14", "time": "05:56:30", "info": "left + right < 0.05 as short,"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "not short and abs(diff) < 0.10 and rd[3] > 0.10 as unstable,"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- Do not consider changed the queries with 5% RD below 5% -- e.g., we'\\''re"}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- likely to observe a difference > 5% in less than 5% cases."}, {"date": "2020-04-14", "time": "05:56:30", "info": "-- Not sure it is correct, but empirically it filters out a lot of noise."}, {"date": "2020-04-14", "time": "05:56:30", "info": "not short and abs(diff) > 0.15 and abs(diff) > rd[3] and rd[1] > 0.05 as changed,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "left, right, diff, rd,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "replaceAll(_file, '\\''-report.tsv'\\'', '\\'''\\'') test,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''*-report.tsv'\\'', TSV, '\\''left float, right float, diff float, rd Array(float), query text'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table changed_perf_tsv engine File(TSV, '\\''changed-perf.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select left, right, diff, rd, test, query from queries where changed"}, {"date": "2020-04-14", "time": "05:56:30", "info": "order by rd[3] desc;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_queries_tsv engine File(TSV, '\\''unstable-queries.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select left, right, diff, rd, test, query from queries where unstable"}, {"date": "2020-04-14", "time": "05:56:30", "info": "order by rd[3] desc;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_tests_tsv engine File(TSV, '\\''bad-tests.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select test, sum(unstable) u, sum(changed) c, u + c s from queries"}, {"date": "2020-04-14", "time": "05:56:30", "info": "group by test having s > 0 order by s desc;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table query_time engine Memory as select *, replaceAll(_file, '\\''-client-time.tsv'\\'', '\\'''\\'') test"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''*-client-time.tsv'\\'', TSV, '\\''query text, client float, server float'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table wall_clock engine Memory as select *"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''wall-clock-times.tsv'\\'', TSV, '\\''test text, real float, user float, system float'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table slow_on_client_tsv engine File(TSV, '\\''slow-on-client.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select client, server, floor(client/server, 3) p, query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from query_time where p > 1.02 order by p desc;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table test_time engine Memory as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select test, sum(client) total_client_time,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "maxIf(client, not short) query_max,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "minIf(client, not short) query_min,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "count(*) queries,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "sum(short) short_queries"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from query_time, queries"}, {"date": "2020-04-14", "time": "05:56:30", "info": "where query_time.query = queries.query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "group by test;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table test_times_tsv engine File(TSV, '\\''test-times.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select wall_clock.test, real,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "floor(total_client_time, 3),"}, {"date": "2020-04-14", "time": "05:56:30", "info": "queries,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "short_queries,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "floor(query_max, 3),"}, {"date": "2020-04-14", "time": "05:56:30", "info": "floor(real / queries, 3) avg_real_per_query,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "floor(query_min, 3)"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from test_time join wall_clock using test"}, {"date": "2020-04-14", "time": "05:56:30", "info": "order by avg_real_per_query desc;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table all_tests_tsv engine File(TSV, '\\''all-queries.tsv'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select left, right, diff,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "floor(left > right ? left / right : right / left, 3),"}, {"date": "2020-04-14", "time": "05:56:30", "info": "rd, test, query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from queries order by test, query;"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ head -2"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ for version in {right,left}"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ cat right-query-log.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ cat right-trace-log.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ cat right-addresses.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:30", "info": "+ right/clickhouse local --query '"}, {"date": "2020-04-14", "time": "05:56:30", "info": "create view queries as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select * from file('\\''queries.rep'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''short int, unstable int, changed int, left float, right float,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "diff float, rd Array(float), test text, query text'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create view query_log as select *"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''right-query-log.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''\"type\" Enum8(\\'\\''QueryStart\\'\\'' = 1, \\'\\''QueryFinish\\'\\'' = 2, \\'\\''ExceptionBeforeStart\\'\\'' = 3, \\'\\''ExceptionWhileProcessing\\'\\'' = 4),\"event_date\" Date,\"event_time\" DateTime,\"query_start_time\" DateTime,\"query_duration_ms\" UInt64,\"read_rows\" UInt64,\"read_bytes\" UInt64,\"written_rows\" UInt64,\"written_bytes\" UInt64,\"result_rows\" UInt64,\"result_bytes\" UInt64,\"memory_usage\" UInt64,\"query\" String,\"exception_code\" Int32,\"exception\" String,\"stack_trace\" String,\"is_initial_query\" UInt8,\"user\" String,\"query_id\" String,\"address\" IPv6,\"port\" UInt16,\"initial_user\" String,\"initial_query_id\" String,\"initial_address\" IPv6,\"initial_port\" UInt16,\"interface\" UInt8,\"os_user\" String,\"client_hostname\" String,\"client_name\" String,\"client_revision\" UInt32,\"client_version_major\" UInt32,\"client_version_minor\" UInt32,\"client_version_patch\" UInt32,\"http_method\" UInt8,\"http_user_agent\" String,\"quota_key\" String,\"revision\" UInt32,\"thread_ids\" Array(UInt64),\"ProfileEvents.Names\" Array(String),\"ProfileEvents.Values\" Array(UInt64),\"Settings.Names\" Array(String),\"Settings.Values\" Array(String)'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create view trace_log as select *"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''right-trace-log.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''\"event_date\" Date,\"event_time\" DateTime,\"timestamp_ns\" UInt64,\"revision\" UInt32,\"trace_type\" Enum8(\\'\\''Real\\'\\'' = 0, \\'\\''CPU\\'\\'' = 1, \\'\\''Memory\\'\\'' = 2),\"thread_id\" UInt64,\"query_id\" String,\"trace\" Array(UInt64),\"size\" UInt64'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create view addresses_src as select *"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from file('\\''right-addresses.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''\"addr\" UInt64,\"name\" String'\\'');"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table addresses_join engine Join(any, left, address) as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select addr address, name from addresses_src;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_query_runs engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''unstable-query-runs.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select query_id, query from query_log"}, {"date": "2020-04-14", "time": "05:56:30", "info": "join queries using query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "where query_id not like '\\''prewarm %'\\'' and (unstable or changed)"}, {"date": "2020-04-14", "time": "05:56:30", "info": ";"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_query_log engine File(Vertical,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''unstable-query-log.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select * from query_log"}, {"date": "2020-04-14", "time": "05:56:30", "info": "where query_id in (select query_id from unstable_query_runs);"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_run_metrics engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''unstable-run-metrics.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select ProfileEvents.Values value, ProfileEvents.Names metric, query_id, query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from query_log array join ProfileEvents"}, {"date": "2020-04-14", "time": "05:56:30", "info": "where query_id in (select query_id from unstable_query_runs)"}, {"date": "2020-04-14", "time": "05:56:30", "info": ";"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_run_metrics_2 engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''unstable-run-metrics-2.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select v, n, query_id, query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from"}, {"date": "2020-04-14", "time": "05:56:30", "info": "(select"}, {"date": "2020-04-14", "time": "05:56:30", "info": "['\\''memory_usage'\\'', '\\''read_bytes'\\'', '\\''written_bytes'\\'', '\\''query_duration_ms'\\''] n,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "[memory_usage, read_bytes, written_bytes, query_duration_ms] v,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "query,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "query_id"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from query_log"}, {"date": "2020-04-14", "time": "05:56:30", "info": "where query_id in (select query_id from unstable_query_runs))"}, {"date": "2020-04-14", "time": "05:56:30", "info": "array join n, v;"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table unstable_run_traces engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''unstable-run-traces.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select"}, {"date": "2020-04-14", "time": "05:56:30", "info": "count() value,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "joinGet(addresses_join, '\\''name'\\'', arrayJoin(trace)) metric,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "unstable_query_runs.query_id,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "any(unstable_query_runs.query) query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from unstable_query_runs"}, {"date": "2020-04-14", "time": "05:56:30", "info": "join trace_log on trace_log.query_id = unstable_query_runs.query_id"}, {"date": "2020-04-14", "time": "05:56:30", "info": "group by unstable_query_runs.query_id, metric"}, {"date": "2020-04-14", "time": "05:56:30", "info": "order by count() desc"}, {"date": "2020-04-14", "time": "05:56:30", "info": ";"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table metric_devation engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\''metric-deviation.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select floor((q[3] - q[1])/q[2], 3) d,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "quantilesExact(0, 0.5, 1)(value) q, metric, query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from (select * from unstable_run_metrics"}, {"date": "2020-04-14", "time": "05:56:30", "info": "union all select * from unstable_run_traces"}, {"date": "2020-04-14", "time": "05:56:30", "info": "union all select * from unstable_run_metrics_2) mm"}, {"date": "2020-04-14", "time": "05:56:30", "info": "join queries using query"}, {"date": "2020-04-14", "time": "05:56:30", "info": "group by query, metric"}, {"date": "2020-04-14", "time": "05:56:30", "info": "having d > 0.5"}, {"date": "2020-04-14", "time": "05:56:30", "info": "order by any(rd[3]) desc, query desc, d desc"}, {"date": "2020-04-14", "time": "05:56:30", "info": ";"}, {"date": "2020-04-14", "time": "05:56:30", "info": ""}, {"date": "2020-04-14", "time": "05:56:30", "info": "create table stacks engine File(TSV, '\\''stacks.right.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:30", "info": "select"}, {"date": "2020-04-14", "time": "05:56:30", "info": "query,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "arrayStringConcat("}, {"date": "2020-04-14", "time": "05:56:30", "info": "arrayMap(x -> joinGet(addresses_join, '\\''name'\\'', x),"}, {"date": "2020-04-14", "time": "05:56:30", "info": "arrayReverse(trace)"}, {"date": "2020-04-14", "time": "05:56:30", "info": "),"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'\\'';'\\''"}, {"date": "2020-04-14", "time": "05:56:30", "info": ") readable_trace,"}, {"date": "2020-04-14", "time": "05:56:30", "info": "count()"}, {"date": "2020-04-14", "time": "05:56:30", "info": "from trace_log"}, {"date": "2020-04-14", "time": "05:56:30", "info": "join unstable_query_runs using query_id"}, {"date": "2020-04-14", "time": "05:56:30", "info": "group by query, trace"}, {"date": "2020-04-14", "time": "05:56:30", "info": ";"}, {"date": "2020-04-14", "time": "05:56:30", "info": "'"}, {"date": "2020-04-14", "time": "05:56:30", "info": "++ head -2"}, {"date": "2020-04-14", "time": "05:56:36", "info": "+ for version in {right,left}"}, {"date": "2020-04-14", "time": "05:56:36", "info": "++ cat left-query-log.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:36", "info": "++ cat left-trace-log.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:36", "info": "++ cat left-addresses.tsv.columns"}, {"date": "2020-04-14", "time": "05:56:36", "info": "+ right/clickhouse local --query '"}, {"date": "2020-04-14", "time": "05:56:36", "info": "create view queries as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select * from file('\\''queries.rep'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''short int, unstable int, changed int, left float, right float,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "diff float, rd Array(float), test text, query text'\\'');"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create view query_log as select *"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from file('\\''left-query-log.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''\"type\" Enum8(\\'\\''QueryStart\\'\\'' = 1, \\'\\''QueryFinish\\'\\'' = 2, \\'\\''ExceptionBeforeStart\\'\\'' = 3, \\'\\''ExceptionWhileProcessing\\'\\'' = 4),\"event_date\" Date,\"event_time\" DateTime,\"query_start_time\" DateTime,\"query_duration_ms\" UInt64,\"read_rows\" UInt64,\"read_bytes\" UInt64,\"written_rows\" UInt64,\"written_bytes\" UInt64,\"result_rows\" UInt64,\"result_bytes\" UInt64,\"memory_usage\" UInt64,\"query\" String,\"exception_code\" Int32,\"exception\" String,\"stack_trace\" String,\"is_initial_query\" UInt8,\"user\" String,\"query_id\" String,\"address\" IPv6,\"port\" UInt16,\"initial_user\" String,\"initial_query_id\" String,\"initial_address\" IPv6,\"initial_port\" UInt16,\"interface\" UInt8,\"os_user\" String,\"client_hostname\" String,\"client_name\" String,\"client_revision\" UInt32,\"client_version_major\" UInt32,\"client_version_minor\" UInt32,\"client_version_patch\" UInt32,\"http_method\" UInt8,\"http_user_agent\" String,\"quota_key\" String,\"revision\" UInt32,\"thread_ids\" Array(UInt64),\"ProfileEvents.Names\" Array(String),\"ProfileEvents.Values\" Array(UInt64),\"Settings.Names\" Array(String),\"Settings.Values\" Array(String)'\\'');"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create view trace_log as select *"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from file('\\''left-trace-log.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''\"event_date\" Date,\"event_time\" DateTime,\"timestamp_ns\" UInt64,\"revision\" UInt32,\"trace_type\" Enum8(\\'\\''Real\\'\\'' = 0, \\'\\''CPU\\'\\'' = 1, \\'\\''Memory\\'\\'' = 2),\"thread_id\" UInt64,\"query_id\" String,\"trace\" Array(UInt64),\"size\" UInt64'\\'');"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create view addresses_src as select *"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from file('\\''left-addresses.tsv'\\'', TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''\"addr\" UInt64,\"name\" String'\\'');"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table addresses_join engine Join(any, left, address) as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select addr address, name from addresses_src;"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table unstable_query_runs engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''unstable-query-runs.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select query_id, query from query_log"}, {"date": "2020-04-14", "time": "05:56:36", "info": "join queries using query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "where query_id not like '\\''prewarm %'\\'' and (unstable or changed)"}, {"date": "2020-04-14", "time": "05:56:36", "info": ";"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table unstable_query_log engine File(Vertical,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''unstable-query-log.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select * from query_log"}, {"date": "2020-04-14", "time": "05:56:36", "info": "where query_id in (select query_id from unstable_query_runs);"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table unstable_run_metrics engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''unstable-run-metrics.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select ProfileEvents.Values value, ProfileEvents.Names metric, query_id, query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from query_log array join ProfileEvents"}, {"date": "2020-04-14", "time": "05:56:36", "info": "where query_id in (select query_id from unstable_query_runs)"}, {"date": "2020-04-14", "time": "05:56:36", "info": ";"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table unstable_run_metrics_2 engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''unstable-run-metrics-2.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select v, n, query_id, query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from"}, {"date": "2020-04-14", "time": "05:56:36", "info": "(select"}, {"date": "2020-04-14", "time": "05:56:36", "info": "['\\''memory_usage'\\'', '\\''read_bytes'\\'', '\\''written_bytes'\\'', '\\''query_duration_ms'\\''] n,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "[memory_usage, read_bytes, written_bytes, query_duration_ms] v,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "query,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "query_id"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from query_log"}, {"date": "2020-04-14", "time": "05:56:36", "info": "where query_id in (select query_id from unstable_query_runs))"}, {"date": "2020-04-14", "time": "05:56:36", "info": "array join n, v;"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table unstable_run_traces engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''unstable-run-traces.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select"}, {"date": "2020-04-14", "time": "05:56:36", "info": "count() value,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "joinGet(addresses_join, '\\''name'\\'', arrayJoin(trace)) metric,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "unstable_query_runs.query_id,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "any(unstable_query_runs.query) query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from unstable_query_runs"}, {"date": "2020-04-14", "time": "05:56:36", "info": "join trace_log on trace_log.query_id = unstable_query_runs.query_id"}, {"date": "2020-04-14", "time": "05:56:36", "info": "group by unstable_query_runs.query_id, metric"}, {"date": "2020-04-14", "time": "05:56:36", "info": "order by count() desc"}, {"date": "2020-04-14", "time": "05:56:36", "info": ";"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table metric_devation engine File(TSVWithNamesAndTypes,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\''metric-deviation.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select floor((q[3] - q[1])/q[2], 3) d,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "quantilesExact(0, 0.5, 1)(value) q, metric, query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from (select * from unstable_run_metrics"}, {"date": "2020-04-14", "time": "05:56:36", "info": "union all select * from unstable_run_traces"}, {"date": "2020-04-14", "time": "05:56:36", "info": "union all select * from unstable_run_metrics_2) mm"}, {"date": "2020-04-14", "time": "05:56:36", "info": "join queries using query"}, {"date": "2020-04-14", "time": "05:56:36", "info": "group by query, metric"}, {"date": "2020-04-14", "time": "05:56:36", "info": "having d > 0.5"}, {"date": "2020-04-14", "time": "05:56:36", "info": "order by any(rd[3]) desc, query desc, d desc"}, {"date": "2020-04-14", "time": "05:56:36", "info": ";"}, {"date": "2020-04-14", "time": "05:56:36", "info": ""}, {"date": "2020-04-14", "time": "05:56:36", "info": "create table stacks engine File(TSV, '\\''stacks.left.rep'\\'') as"}, {"date": "2020-04-14", "time": "05:56:36", "info": "select"}, {"date": "2020-04-14", "time": "05:56:36", "info": "query,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "arrayStringConcat("}, {"date": "2020-04-14", "time": "05:56:36", "info": "arrayMap(x -> joinGet(addresses_join, '\\''name'\\'', x),"}, {"date": "2020-04-14", "time": "05:56:36", "info": "arrayReverse(trace)"}, {"date": "2020-04-14", "time": "05:56:36", "info": "),"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'\\'';'\\''"}, {"date": "2020-04-14", "time": "05:56:36", "info": ") readable_trace,"}, {"date": "2020-04-14", "time": "05:56:36", "info": "count()"}, {"date": "2020-04-14", "time": "05:56:36", "info": "from trace_log"}, {"date": "2020-04-14", "time": "05:56:36", "info": "join unstable_query_runs using query_id"}, {"date": "2020-04-14", "time": "05:56:36", "info": "group by query, trace"}, {"date": "2020-04-14", "time": "05:56:36", "info": ";"}, {"date": "2020-04-14", "time": "05:56:36", "info": "'"}, {"date": "2020-04-14", "time": "05:56:36", "info": "++ head -2"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ wait"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ IFS='"}, {"date": "2020-04-14", "time": "05:56:43", "info": "'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for version in {right,left}"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut '-d ' -f1 stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sort"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ uniq"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETT'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETT.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTI'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTI.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number_pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number_pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000); ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDate <= \\'\\''2013-07-31\\'\\'' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDat'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDate <= \\'\\''2013-07-31\\'\\'' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDat.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) _ 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000) ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) _ 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase)) ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase)).stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2]) ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2]).stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1 ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'\\''break\\'\\'''"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflo'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'\\''break\\'\\'' ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflo.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'\\''))))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006a'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'\\'')))) ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006a.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FRO'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FRO.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Null;\\n '"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Nul'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Null;\\n ' stacks.right.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Nul.stacks.right.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for version in {right,left}"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut '-d ' -f1 stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sort"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ uniq"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETT'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETT.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTI'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTI.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number_pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number_pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_LZ4 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000); ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'INSERT INTO empty_strings SELECT \\'\\''\\'\\'' FROM zeros(100000000);.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDate <= \\'\\''2013-07-31\\'\\'' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDat'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDate <= \\'\\''2013-07-31\\'\\'' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'\\''2013-07-01\\'\\'' AND EventDat.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) _ 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000) ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) _ 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase)) ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM hits_100m_single WHERE NOT ignore(MD5(SearchPhrase)).stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM hits_100m_single WHERE base64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2])'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2]) ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM numbers(10000000) WHERE NOT ignore([[1], [2]][number % 2 + 2]).stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1 ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM test.hits WHERE NOT ignore(toString(UserAgent)) SETTINGS max_threads = 1.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'\\''break\\'\\'''"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflo'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'\\''break\\'\\'' ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflo.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'\\''))))'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006a'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006ad3dba0\\'\\'')))) ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT count() from zeros_mt(1000000000) where not ignore(cityHash64(materialize(toUUID(\\'\\''61f0c404-5cb3-11e7-907b-a6006a.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT countMerge(v) FROM (SELECT countState() v FROM zeros(1000000000)) FORMAT Null.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT replaceRegexpOne(value, \\'\\'' *$\\'\\'', \\'\\''\\'\\'') FROM whitespaces LIMIT 10000000 FORMAT Null.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FRO'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'\\''Momentum\\'\\'')(Age, Income, ParamPrice, Robotness, RefererHash) FRO.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee 'SELECT uniq(SearchPhrase) FROM hits_10m_single FORMAT Null.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ for query in $(cut -d' ' -f1 \"stacks.$version.rep\" | sort | uniq)"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ echo '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Null;\\n '"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ cut -c-120"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ sed 's/[/]/_/g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ query_file='\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Nul'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -F '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Null;\\n ' stacks.left.rep"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ cut '-d ' -f 2-"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/\\t/ /g'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ tee '\\n SELECT key, min(value)\\n FROM mingroupby_orderbylimit1_111111_tuple\\n group by key format Nul.stacks.left.rep'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ wait"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /root/fg/flamegraph.pl"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ unset IFS"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ sed 's/:/\\t/'"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ grep -H -m2 -i '\\(Exception\\|Error\\):[^:]' ./distributed_aggregation-err.log"}, {"date": "2020-04-14", "time": "05:56:43", "info": ""}, {"date": "2020-04-14", "time": "05:56:43", "info": "real 0m13.800s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "user 0m13.648s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "sys 0m2.580s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /workspace/right/scripts/report.py --report=all-queries"}, {"date": "2020-04-14", "time": "05:56:43", "info": "++ head -2"}, {"date": "2020-04-14", "time": "05:56:43", "info": ""}, {"date": "2020-04-14", "time": "05:56:43", "info": "real 0m0.039s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "user 0m0.036s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "sys 0m0.000s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ /workspace/right/scripts/report.py"}, {"date": "2020-04-14", "time": "05:56:43", "info": ""}, {"date": "2020-04-14", "time": "05:56:43", "info": "real 0m0.028s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "user 0m0.024s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "sys 0m0.000s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ kill"}, {"date": "2020-04-14", "time": "05:56:43", "info": "kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]"}, {"date": "2020-04-14", "time": "05:56:43", "info": "+ :"}, {"date": "2020-04-14", "time": "05:56:43", "info": ""}, {"date": "2020-04-14", "time": "05:56:43", "info": "real 104m13.915s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "user 1095m30.772s"}, {"date": "2020-04-14", "time": "05:56:43", "info": "sys 194m13.696s"}]}
