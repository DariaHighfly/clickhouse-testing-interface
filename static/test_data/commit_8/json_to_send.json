{"commits": {"leftCommit": {"commit": "2c8576798ba0f3e464f9798434985b39dc576466", "merge": "c4758b69 3d4696d4", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Mon Apr 20 23:36:02 2020 +0300", "info": "Merge pull request #10354 from oandrew/avro-nested\nAvro nested fields insert support"}, "rightCommit": {"commit": "ebbeaef71d57f0abf17ba35ebd41a452efc31d0c (pr/merge)", "author": "palasonic1 <39745378+palasonic1@users.noreply.github.com>", "date": "Mon Apr 20 21:14:23 2020 +0000", "info": "fix reading HashTable and HashSet\nReal tested commit is:\nMerge a99a340b0bbff6a151ccac2abbd8b38f00f813bf into 8c2839d3c9fcb671492356b12af3366ff0601c91", "merge": "8c2839d3 a99a340b"}}, "changes": [{"oldTime": 1.3102, "newTime": 0.9662, "relativeDifference": -0.263, "quantiles": [0.025, 0.224, 0.258, 0.262], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.2425, "newTime": 0.3032, "relativeDifference": 0.25, "quantiles": [0.0, 0.012, 0.234, 0.248], "testName": "decimal_aggregates", "query": "SELECT median(d128), medianExact(d128), medianExactWeighted(d128, 2) FROM t"}, {"oldTime": 0.6526, "newTime": 0.8067, "relativeDifference": 0.236, "quantiles": [0.005, 0.111, 0.225, 0.235], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10000)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 1.2849, "newTime": 0.9748, "relativeDifference": -0.242, "quantiles": [0.062, 0.168, 0.223, 0.236], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 1.0875, "newTime": 0.8441, "relativeDifference": -0.224, "quantiles": [0.201, 0.207, 0.218, 0.223], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.1996, "newTime": 0.2426, "relativeDifference": 0.215, "quantiles": [0.131, 0.158, 0.197, 0.204], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 1.3423, "newTime": 1.0711, "relativeDifference": -0.203, "quantiles": [0.022, 0.056, 0.19, 0.198], "testName": "uniq", "query": "SELECT ClientIP AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.7349, "newTime": 0.5926, "relativeDifference": -0.194, "quantiles": [0.016, 0.147, 0.178, 0.19], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table LEFT JOIN (SELECT A FROM join_table) AS right USING A"}, {"oldTime": 0.048, "newTime": 0.0576, "relativeDifference": 0.199, "quantiles": [0.063, 0.069, 0.165, 0.196], "testName": "entropy", "query": "SELECT entropy(ClientIP) FROM test.hits"}, {"oldTime": 0.3015, "newTime": 0.3634, "relativeDifference": 0.205, "quantiles": [0.014, 0.022, 0.043, 0.199], "testName": "right", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(substring(URL, greatest(minus(plus(length(URL), 1), 16), 1)))"}], "unstableQueries": [{"oldTime": 0.0363, "newTime": 0.0333, "relativeDifference": -0.083, "quantiles": [0.084, 0.16, 0.497, 0.538], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         group by key format Null;\\n    "}, {"oldTime": 0.1443, "newTime": 0.1422, "relativeDifference": -0.015, "quantiles": [0.008, 0.02, 0.383, 0.416], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE short IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.3119, "newTime": 0.3158, "relativeDifference": 0.012, "quantiles": [0.012, 0.018, 0.375, 0.381], "testName": "string_join", "query": "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (long) FORMAT Null"}, {"oldTime": 0.0265, "newTime": 0.0255, "relativeDifference": -0.038, "quantiles": [0.005, 0.038, 0.331, 0.361], "testName": "generate_table_function", "query": "SELECT sum(NOT ignore(*)) FROM (SELECT * FROM generateRandom(\\'i Tuple(Int32, Array(Int64))\\', 0, 10, 10) LIMIT 10000000);"}, {"oldTime": 0.2792, "newTime": 0.281, "relativeDifference": 0.006, "quantiles": [0.006, 0.057, 0.312, 0.342], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.0478, "newTime": 0.0486, "relativeDifference": 0.016, "quantiles": [0.012, 0.037, 0.306, 0.329], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 1.0003, "newTime": 1.1479, "relativeDifference": 0.147, "quantiles": [0.147, 0.259, 0.29, 0.297], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.827, "newTime": 0.8178, "relativeDifference": -0.012, "quantiles": [0.002, 0.024, 0.29, 0.295], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.2119, "newTime": 0.2555, "relativeDifference": 0.205, "quantiles": [0.056, 0.206, 0.288, 0.299], "testName": "string_join", "query": "SELECT 1 FROM strings AS l ANY LEFT JOIN strings AS r USING (short) FORMAT Null"}, {"oldTime": 0.8553, "newTime": 0.8774, "relativeDifference": 0.025, "quantiles": [0.001, 0.25, 0.278, 0.283], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.8355, "newTime": 0.8221, "relativeDifference": -0.017, "quantiles": [0.002, 0.015, 0.277, 0.284], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.4612, "newTime": 0.5882, "relativeDifference": 0.275, "quantiles": [0.03, 0.11, 0.273, 0.28], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.643, "newTime": 0.8178, "relativeDifference": 0.271, "quantiles": [0.036, 0.098, 0.271, 0.295], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(1000)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 0.3348, "newTime": 0.4165, "relativeDifference": 0.244, "quantiles": [0.052, 0.236, 0.259, 0.266], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(1000)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.4933, "newTime": 0.395, "relativeDifference": -0.2, "quantiles": [0.076, 0.198, 0.255, 0.28], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 1000000 AS k, count() FROM numbers(    10000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.199, "newTime": 0.2016, "relativeDifference": 0.013, "quantiles": [0.012, 0.04, 0.254, 0.291], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE short IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.2657, "newTime": 0.2137, "relativeDifference": -0.196, "quantiles": [0.091, 0.205, 0.252, 0.263], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_1111111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 0.2353, "newTime": 0.2438, "relativeDifference": 0.036, "quantiles": [0.024, 0.086, 0.251, 0.26], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_1111111_key_value\\n         group by key format Null;\\n    "}, {"oldTime": 0.6015, "newTime": 0.58, "relativeDifference": -0.036, "quantiles": [0.015, 0.039, 0.247, 0.253], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10000)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.2125, "newTime": 0.2093, "relativeDifference": -0.016, "quantiles": [0.009, 0.217, 0.242, 0.246], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE long IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.1969, "newTime": 0.191, "relativeDifference": -0.03, "quantiles": [0.03, 0.108, 0.236, 0.256], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(10000) WHERE NOT ignore(randomPrintableASCII(10000))"}, {"oldTime": 1.2868, "newTime": 1.266, "relativeDifference": -0.017, "quantiles": [0.003, 0.014, 0.232, 0.242], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(1000)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.8571, "newTime": 1.0151, "relativeDifference": 0.184, "quantiles": [0.184, 0.207, 0.229, 0.246], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.7559, "newTime": 0.5905, "relativeDifference": -0.219, "quantiles": [0.005, 0.053, 0.228, 0.232], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.1045, "newTime": 0.1187, "relativeDifference": 0.135, "quantiles": [0.089, 0.143, 0.222, 0.233], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 1.2848, "newTime": 1.0226, "relativeDifference": -0.205, "quantiles": [0.006, 0.204, 0.219, 0.224], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 1.0608, "newTime": 1.0378, "relativeDifference": -0.022, "quantiles": [0.0, 0.017, 0.218, 0.224], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.3215, "newTime": 0.3365, "relativeDifference": 0.046, "quantiles": [0.004, 0.011, 0.217, 0.252], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.7412, "newTime": 0.5903, "relativeDifference": -0.204, "quantiles": [0.009, 0.049, 0.217, 0.223], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(xxHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.0572, "newTime": 0.0494, "relativeDifference": -0.137, "quantiles": [0.054, 0.123, 0.209, 0.251], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.3393, "newTime": 0.2838, "relativeDifference": -0.164, "quantiles": [0.047, 0.082, 0.208, 0.245], "testName": "string_set", "query": "SELECT 1 FROM strings WHERE long IN (SELECT long FROM strings) FORMAT Null"}, {"oldTime": 0.2522, "newTime": 0.2559, "relativeDifference": 0.014, "quantiles": [0.006, 0.015, 0.205, 0.211], "testName": "decimal_aggregates", "query": "SELECT quantile(d128), quantileExact(d128), quantileExactWeighted(d128, 2) FROM t"}, {"oldTime": 1.0656, "newTime": 0.858, "relativeDifference": -0.195, "quantiles": [0.003, 0.074, 0.204, 0.206], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 1.0599, "newTime": 0.8493, "relativeDifference": -0.199, "quantiles": [0.0, 0.193, 0.204, 0.213], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 1.059, "newTime": 1.0353, "relativeDifference": -0.023, "quantiles": [0.004, 0.012, 0.203, 0.212], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.582, "newTime": 0.487, "relativeDifference": -0.164, "quantiles": [0.127, 0.163, 0.202, 0.221], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_50m group by kk format Null"}, {"oldTime": 0.4161, "newTime": 0.3477, "relativeDifference": -0.165, "quantiles": [0.002, 0.028, 0.201, 0.222], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10000)(v) from moving_sum_50m group by k format Null"}, {"oldTime": 0.7944, "newTime": 0.6601, "relativeDifference": -0.17, "quantiles": [0.049, 0.098, 0.198, 0.211], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.2509, "newTime": 0.2929, "relativeDifference": 0.167, "quantiles": [0.003, 0.154, 0.197, 0.211], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d128), quantilesExactWeighted(0.1, 0.9)(d128, 2) FROM t"}, {"oldTime": 0.3285, "newTime": 0.3258, "relativeDifference": -0.009, "quantiles": [0.005, 0.011, 0.195, 0.204], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE URL IN (SELECT URL FROM hits_10m_single WHERE SearchEngineID != 0)"}, {"oldTime": 0.1596, "newTime": 0.191, "relativeDifference": 0.196, "quantiles": [0.025, 0.157, 0.191, 0.199], "testName": "decimal_aggregates", "query": "SELECT uniq(d64), uniqCombined(d64), uniqExact(d64), uniqHLL12(d64) FROM t"}, {"oldTime": 0.7715, "newTime": 0.7688, "relativeDifference": -0.004, "quantiles": [0.003, 0.034, 0.19, 0.197], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(xxHash32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.7713, "newTime": 0.6314, "relativeDifference": -0.182, "quantiles": [0.022, 0.039, 0.189, 0.201], "testName": "group_array_moving_sum", "query": "select k, groupArrayMovingSum(10)(v) from moving_sum_100m group by k format Null"}, {"oldTime": 1.302, "newTime": 1.3083, "relativeDifference": 0.004, "quantiles": [0.004, 0.169, 0.188, 0.2], "testName": "cpu_synthetic", "query": "SELECT SearchEngineID, SearchPhrase, RegionID FROM hits_10m_single GROUP BY SearchEngineID, SearchPhrase, RegionID ORDER BY count() DESC LIMIT 10 SETTINGS max_threads = 1"}, {"oldTime": 1.07, "newTime": 1.0605, "relativeDifference": -0.009, "quantiles": [0.002, 0.008, 0.187, 0.191], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l RIGHT JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.2885, "newTime": 0.2838, "relativeDifference": -0.017, "quantiles": [0.016, 0.136, 0.183, 0.211], "testName": "set_hits", "query": "SELECT count() FROM hits_10m_single WHERE SearchPhrase IN (SELECT SearchPhrase FROM hits_10m_single)"}, {"oldTime": 2.084, "newTime": 2.0623, "relativeDifference": -0.011, "quantiles": [0.001, 0.013, 0.179, 0.183], "testName": "synthetic_hardware_benchmark", "query": "SELECT number % 10000000 AS k, count() FROM numbers(   10000000) GROUP BY k FORMAT Null"}, {"oldTime": 0.7981, "newTime": 0.7998, "relativeDifference": 0.002, "quantiles": [0.002, 0.016, 0.179, 0.199], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.2322, "newTime": 0.2693, "relativeDifference": 0.159, "quantiles": [0.012, 0.143, 0.179, 0.189], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT short FROM strings) FORMAT Null"}, {"oldTime": 0.7985, "newTime": 0.8122, "relativeDifference": 0.017, "quantiles": [0.017, 0.041, 0.176, 0.187], "testName": "entropy", "query": "SELECT entropy(URL) FROM test.hits"}, {"oldTime": 1.0909, "newTime": 0.9187, "relativeDifference": -0.158, "quantiles": [0.008, 0.031, 0.175, 0.198], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 IN(42, 100042, 200042, 300042, 400042)"}, {"oldTime": 0.5958, "newTime": 0.5908, "relativeDifference": -0.009, "quantiles": [0.003, 0.008, 0.175, 0.199], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table LEFT JOIN join_table USING A"}, {"oldTime": 0.8344, "newTime": 0.8091, "relativeDifference": -0.031, "quantiles": [0.023, 0.027, 0.17, 0.182], "testName": "entropy", "query": "SELECT entropy(URL, URLDomain) FROM test.hits"}, {"oldTime": 1.5319, "newTime": 1.7809, "relativeDifference": 0.162, "quantiles": [0.09, 0.151, 0.17, 0.175], "testName": "uniq", "query": "SELECT SearchPhrase AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.128, "newTime": 0.1193, "relativeDifference": -0.068, "quantiles": [0.068, 0.09, 0.168, 0.213], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_NONE (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.6454, "newTime": 0.6754, "relativeDifference": 0.046, "quantiles": [0.006, 0.034, 0.167, 0.185], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.6692, "newTime": 0.7094, "relativeDifference": 0.06, "quantiles": [0.002, 0.059, 0.164, 0.169], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN join_table AS right ON left.A = right.A"}, {"oldTime": 0.9042, "newTime": 0.9217, "relativeDifference": 0.019, "quantiles": [0.0, 0.01, 0.161, 0.162], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 1.0556, "newTime": 0.8732, "relativeDifference": -0.173, "quantiles": [0.022, 0.105, 0.157, 0.185], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"}, {"oldTime": 0.8474, "newTime": 0.9698, "relativeDifference": 0.144, "quantiles": [0.001, 0.007, 0.156, 0.161], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.0953, "newTime": 0.0937, "relativeDifference": -0.017, "quantiles": [0.001, 0.01, 0.153, 0.171], "testName": "inserts_arrays_lowcardinality", "query": "INSERT INTO lot_of_string_arrays_dst SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src"}, {"oldTime": 0.104, "newTime": 0.0916, "relativeDifference": -0.12, "quantiles": [0.0, 0.055, 0.151, 0.182], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.1785, "newTime": 0.1652, "relativeDifference": -0.075, "quantiles": [0.074, 0.111, 0.151, 0.161], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d64), quantilesExactWeighted(0.1, 0.9)(d64, 2) FROM t"}, {"oldTime": 0.117, "newTime": 0.1216, "relativeDifference": 0.039, "quantiles": [0.029, 0.07, 0.149, 0.159], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.5043, "newTime": 0.4827, "relativeDifference": -0.043, "quantiles": [0.035, 0.047, 0.149, 0.165], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(pathFull(URL))"}, {"oldTime": 0.1762, "newTime": 0.1606, "relativeDifference": -0.089, "quantiles": [0.086, 0.113, 0.148, 0.16], "testName": "cpu_synthetic", "query": "SELECT uniqExact(UserID) FROM hits_10m_single SETTINGS max_threads = 1"}, {"oldTime": 0.1267, "newTime": 0.1224, "relativeDifference": -0.034, "quantiles": [0.034, 0.072, 0.143, 0.153], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1829, "newTime": 0.1646, "relativeDifference": -0.101, "quantiles": [0.028, 0.067, 0.143, 0.15], "testName": "decimal_aggregates", "query": "SELECT median(d32), medianExact(d32), medianExactWeighted(d32, 2) FROM t"}, {"oldTime": 0.1509, "newTime": 0.1547, "relativeDifference": 0.025, "quantiles": [0.021, 0.049, 0.142, 0.157], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1623, "newTime": 0.1853, "relativeDifference": 0.141, "quantiles": [0.09, 0.11, 0.142, 0.15], "testName": "decimal_aggregates", "query": "SELECT median(d64), medianExact(d64), medianExactWeighted(d64, 2) FROM t"}, {"oldTime": 0.1552, "newTime": 0.1564, "relativeDifference": 0.007, "quantiles": [0.007, 0.103, 0.138, 0.158], "testName": "array_auc", "query": "SELECT avg(ifNotFinite(arrayAUC(arrayMap(x -> rand(x) / 0x100000000, range(2 + rand() % 100)), arrayMap(x -> rand(x) % 2, range(2 + rand() % 100))), 0)) FROM numbers(100000)"}, {"oldTime": 0.1367, "newTime": 0.1195, "relativeDifference": -0.126, "quantiles": [0.001, 0.023, 0.136, 0.167], "testName": "cpu_synthetic", "query": "SELECT uniqExact(UserID) FROM hits_10m_single"}, {"oldTime": 0.4224, "newTime": 0.4621, "relativeDifference": 0.093, "quantiles": [0.01, 0.093, 0.134, 0.144], "testName": "uniq", "query": "SELECT RegionID AS k, uniqExact(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 0.9845, "newTime": 0.9875, "relativeDifference": 0.003, "quantiles": [0.002, 0.005, 0.134, 0.291], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l INNER JOIN ints r USING i64,i32,i16,i8 WHERE i32 = 200042"}, {"oldTime": 0.1691, "newTime": 0.1879, "relativeDifference": 0.111, "quantiles": [0.056, 0.071, 0.131, 0.141], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1736, "newTime": 0.1588, "relativeDifference": -0.086, "quantiles": [0.084, 0.111, 0.13, 0.138], "testName": "decimal_aggregates", "query": "SELECT quantilesExact(0.1, 0.9)(d32), quantilesExactWeighted(0.1, 0.9)(d32, 2) FROM t"}, {"oldTime": 0.0811, "newTime": 0.0891, "relativeDifference": 0.098, "quantiles": [0.0, 0.05, 0.126, 0.147], "testName": "distributed_aggregation", "query": "select count() from (select sipHash64(zero) from zeros_mt(100000000) union all select sipHash64(zero) from zeros_mt(100000000))"}, {"oldTime": 0.1545, "newTime": 0.1491, "relativeDifference": -0.035, "quantiles": [0.034, 0.058, 0.126, 0.157], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.5826, "newTime": 0.657, "relativeDifference": 0.127, "quantiles": [0.005, 0.058, 0.123, 0.153], "testName": "string_sort", "query": "SELECT Title, URL FROM hits_100m_single ORDER BY Title, URL LIMIT 10"}, {"oldTime": 0.1645, "newTime": 0.1844, "relativeDifference": 0.12, "quantiles": [0.0, 0.094, 0.12, 0.127], "testName": "decimal_aggregates", "query": "SELECT quantile(d64), quantileExact(d64), quantileExactWeighted(d64, 2) FROM t"}, {"oldTime": 0.4555, "newTime": 0.4579, "relativeDifference": 0.005, "quantiles": [0.002, 0.009, 0.117, 0.13], "testName": "bloom_filter", "query": "INSERT INTO test_bf SELECT number AS id, [CAST(id, \\'String\\'), CAST(id + 1, \\'String\\'), CAST(id + 2, \\'String\\')] FROM numbers(1000000)"}, {"oldTime": 0.1231, "newTime": 0.1304, "relativeDifference": 0.059, "quantiles": [0.002, 0.062, 0.116, 0.141], "testName": "read_hits_with_aio", "query": "SELECT count() FROM hits_100m_single where EventDate between toDate(\\'2013-07-10\\') and toDate(\\'2013-07-16\\') and UserID=123 SETTINGS max_threads = 1, min_bytes_to_use_direct_io = 0, max_read_buffer_size = 10485760;"}, {"oldTime": 0.0307, "newTime": 0.0271, "relativeDifference": -0.118, "quantiles": [0.0, 0.019, 0.112, 0.12], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_ZSTD (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.1559, "newTime": 0.1651, "relativeDifference": 0.059, "quantiles": [0.027, 0.065, 0.11, 0.132], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.4936, "newTime": 0.5511, "relativeDifference": 0.116, "quantiles": [0.078, 0.091, 0.108, 0.113], "testName": "general_purpose_hashes", "query": "SELECT count() from numbers(100000000) where not ignore(CRC32(materialize(\\'\\')))"}, {"oldTime": 0.1796, "newTime": 0.163, "relativeDifference": -0.093, "quantiles": [0.014, 0.088, 0.106, 0.113], "testName": "decimal_aggregates", "query": "SELECT quantile(d32), quantileExact(d32), quantileExactWeighted(d32, 2) FROM t"}, {"oldTime": 0.6717, "newTime": 0.6739, "relativeDifference": 0.003, "quantiles": [0.003, 0.009, 0.105, 0.112], "testName": "simple_join_query", "query": "SELECT COUNT() FROM join_table AS left LEFT JOIN (SELECT A FROM join_table) AS right ON left.A = right.A"}, {"oldTime": 1.3104, "newTime": 1.4492, "relativeDifference": 0.105, "quantiles": [0.003, 0.033, 0.104, 0.13], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(URLHierarchy(URL))"}, {"oldTime": 0.0486, "newTime": 0.053, "relativeDifference": 0.09, "quantiles": [0.014, 0.056, 0.104, 0.132], "testName": "int_parsing", "query": "SELECT count() FROM test.hits WHERE NOT ignore(toString(ResolutionHeight)) SETTINGS max_threads = 1"}, {"oldTime": 0.0887, "newTime": 0.0849, "relativeDifference": -0.043, "quantiles": [0.011, 0.046, 0.102, 0.114], "testName": "string_sort", "query": "SELECT PageCharset, MobilePhoneModel FROM hits_100m_single ORDER BY PageCharset, MobilePhoneModel LIMIT 10"}, {"oldTime": 0.1567, "newTime": 0.1571, "relativeDifference": 0.002, "quantiles": [0.002, 0.025, 0.101, 0.138], "testName": "decimal_aggregates", "query": "SELECT uniq(d32), uniqCombined(d32), uniqExact(d32), uniqHLL12(d32) FROM t"}, {"oldTime": 0.5163, "newTime": 0.4563, "relativeDifference": -0.117, "quantiles": [0.033, 0.052, 0.101, 0.105], "testName": "math", "query": "SELECT count() FROM numbers(100000000) WHERE NOT ignore(exp2(toFloat64(number)))"}, {"oldTime": 0.9963, "newTime": 1.0379, "relativeDifference": 0.041, "quantiles": [0.003, 0.028, 0.098, 0.11], "testName": "website", "query": "SELECT SearchPhrase, any(URL), any(Title), count() AS c, uniq(UserID) FROM hits_100m_single WHERE Title LIKE \\'%\u042f\u043d\u0434\u0435\u043a\u0441%\\' AND URL NOT LIKE \\'%.yandex.%\\' AND SearchPhrase != \\'\\' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10"}, {"oldTime": 0.0526, "newTime": 0.0558, "relativeDifference": 0.06, "quantiles": [0.021, 0.038, 0.095, 0.108], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE tryBase64Decode(base64Encode(MobilePhoneModel)) != MobilePhoneModel"}, {"oldTime": 0.027, "newTime": 0.026, "relativeDifference": -0.038, "quantiles": [0.016, 0.037, 0.095, 0.136], "testName": "uniq", "query": "SELECT 1 AS k, uniqUpTo(100)(UserID) FROM hits_100m_single GROUP BY k FORMAT Null"}, {"oldTime": 1.0769, "newTime": 0.9739, "relativeDifference": -0.096, "quantiles": [0.005, 0.015, 0.095, 0.168], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l FULL JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.9527, "newTime": 1.0476, "relativeDifference": 0.099, "quantiles": [0.002, 0.051, 0.094, 0.101], "testName": "url_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(URLPathHierarchy(URL))"}, {"oldTime": 0.055, "newTime": 0.0493, "relativeDifference": -0.104, "quantiles": [0.031, 0.067, 0.093, 0.102], "testName": "array_element", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore([[], []][number % 2 + 2])"}, {"oldTime": 0.3516, "newTime": 0.3752, "relativeDifference": 0.067, "quantiles": [0.01, 0.064, 0.093, 0.117], "testName": "string_set", "query": "SELECT 1 FROM hits_10m_words WHERE word IN (SELECT word FROM hits_10m_words) FORMAT Null"}, {"oldTime": 0.0754, "newTime": 0.0845, "relativeDifference": 0.12, "quantiles": [0.022, 0.063, 0.092, 0.11], "testName": "entropy", "query": "SELECT entropy(ClientIP, RegionID) FROM test.hits"}, {"oldTime": 0.0273, "newTime": 0.0261, "relativeDifference": -0.044, "quantiles": [0.043, 0.047, 0.088, 0.119], "testName": "jit_large_requests", "query": "\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 1,\\n            min_count_to_compile_expression = 1\\n    "}, {"oldTime": 0.0248, "newTime": 0.0255, "relativeDifference": 0.028, "quantiles": [0.024, 0.03, 0.081, 0.1], "testName": "date_time_64", "query": "SELECT count() FROM dt where not ignore(x)"}, {"oldTime": 0.0835, "newTime": 0.0818, "relativeDifference": -0.021, "quantiles": [0.02, 0.029, 0.081, 0.216], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.126, "newTime": 0.1251, "relativeDifference": -0.008, "quantiles": [0.003, 0.012, 0.079, 0.125], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1432, "newTime": 0.142, "relativeDifference": -0.009, "quantiles": [0.006, 0.034, 0.079, 0.105], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_T64 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.6922, "newTime": 0.7736, "relativeDifference": 0.117, "quantiles": [0.028, 0.032, 0.074, 0.101], "testName": "visit_param_extract_raw", "query": "SELECT count() FROM zeros(2000000) WHERE NOT ignore(visitParamExtractRaw(materialize(\\'{\"myparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\",\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}}\\'), \\'myparam\\'))"}, {"oldTime": 0.5827, "newTime": 0.6395, "relativeDifference": 0.097, "quantiles": [0.005, 0.026, 0.073, 0.101], "testName": "json_extract_rapidjson", "query": "SELECT \\'rapidjson-8\\', count() FROM zeros(1000000) WHERE NOT ignore(JSONExtractInt(materialize(\\'{\"sparam\":{\"nested_1\":\"test_string\",\"nested_2\":\"test_2\"}, \"nparam\":8495, \"fparam\":{\"nested_1\":91.15,\"nested_2\":[334, 89.05, 1000.01]}, \"bparam\":false}\\'), \\'nparam\\'))"}, {"oldTime": 0.4167, "newTime": 0.4183, "relativeDifference": 0.003, "quantiles": [0.0, 0.025, 0.073, 0.105], "testName": "string_join", "query": "SELECT 1 FROM hits_10m_words AS l ANY LEFT JOIN hits_10m_words AS r USING (word) FORMAT Null"}, {"oldTime": 0.122, "newTime": 0.1199, "relativeDifference": -0.018, "quantiles": [0.002, 0.013, 0.069, 0.115], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2829, "newTime": 0.3487, "relativeDifference": 0.232, "quantiles": [0.0, 0.009, 0.068, 0.234], "testName": "right", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(right(URL, 16))"}, {"oldTime": 0.0566, "newTime": 0.0597, "relativeDifference": 0.054, "quantiles": [0.015, 0.027, 0.059, 0.125], "testName": "entropy", "query": "SELECT entropy(SearchPhrase) FROM test.hits"}, {"oldTime": 1.2694, "newTime": 1.2877, "relativeDifference": 0.014, "quantiles": [0.001, 0.009, 0.04, 0.247], "testName": "group_array_moving_sum", "query": "select k % 10 kk, groupArrayMovingSum(10)(v) from moving_sum_100m group by kk format Null"}, {"oldTime": 0.2593, "newTime": 0.2632, "relativeDifference": 0.015, "quantiles": [0.003, 0.022, 0.037, 0.116], "testName": "inserts_arrays_lowcardinality", "query": "INSERT INTO lot_of_string_arrays_dst_lowcardinality SELECT rand64() as id, columns(\\'^col\\') FROM lot_of_string_arrays_src"}], "runErrors": [], "skipped": [{"testName": "IPv4", "reason": "Marked as broken (see compare.sh)"}, {"testName": "IPv6", "reason": "Marked as broken (see compare.sh)"}, {"testName": "modulo", "reason": "Marked as broken (see compare.sh)"}, {"testName": "parse_engine_file", "reason": "Marked as broken (see compare.sh)"}, {"testName": "number_formatting_formats", "reason": "Marked as broken (see compare.sh)"}, {"testName": "select_format", "reason": "Marked as broken (see compare.sh)"}, {"testName": "arithmetic", "reason": "Marked as broken (see compare.sh)"}, {"testName": "cryptographic_hashes", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_medium", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_small", "reason": "Marked as broken (see compare.sh)"}, {"testName": "agg_functions_min_max_any", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "columns_hashing", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "date_time", "reason": "Test is tagged as long."}, {"testName": "float_formatting", "reason": "Test is tagged as long."}, {"testName": "float_parsing", "reason": "Test is tagged as long."}, {"testName": "if_to_multiif", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "insert_values_with_expressions", "reason": "clickhouse_driver.errors.ServerException: Code: 107."}, {"testName": "leftpad", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "nyc_taxi", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "set", "reason": "Test is tagged as long."}], "badTests": [{"testName": "joins_in_memory", "unstable": 14.0, "changedPerf": 2.0, "total": 16.0}, {"testName": "group_array_moving_sum", "unstable": 10.0, "changedPerf": 2.0, "total": 12.0}, {"testName": "codecs_int_insert", "unstable": 11.0, "changedPerf": 0.0, "total": 11.0}, {"testName": "decimal_aggregates", "unstable": 10.0, "changedPerf": 1.0, "total": 11.0}, {"testName": "general_purpose_hashes", "unstable": 9.0, "changedPerf": 0.0, "total": 9.0}, {"testName": "string_set", "unstable": 7.0, "changedPerf": 0.0, "total": 7.0}, {"testName": "entropy", "unstable": 4.0, "changedPerf": 1.0, "total": 5.0}, {"testName": "mingroupby-orderbylimit1", "unstable": 5.0, "changedPerf": 0.0, "total": 5.0}, {"testName": "uniq", "unstable": 3.0, "changedPerf": 1.0, "total": 4.0}, {"testName": "simple_join_query", "unstable": 3.0, "changedPerf": 1.0, "total": 4.0}, {"testName": "cpu_synthetic", "unstable": 4.0, "changedPerf": 0.0, "total": 4.0}, {"testName": "url_hits", "unstable": 3.0, "changedPerf": 0.0, "total": 3.0}, {"testName": "string_join", "unstable": 3.0, "changedPerf": 0.0, "total": 3.0}, {"testName": "set_hits", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "string_sort", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "right", "unstable": 1.0, "changedPerf": 1.0, "total": 2.0}, {"testName": "website", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "visit_param_extract_raw", "unstable": 1.0, "changedPerf": 1.0, "total": 2.0}, {"testName": "synthetic_hardware_benchmark", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "inserts_arrays_lowcardinality", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "bloom_filter", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "int_parsing", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "date_time_64", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "base64_hits", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "array_auc", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "random_printable_ascii", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "array_element", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "json_extract_rapidjson", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "if_array_string", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "generate_table_function", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "codecs_float_insert", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "distributed_aggregation", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "read_hits_with_aio", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "jit_large_requests", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "math", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}], "testTimes": [{"testName": "materialized_view_parallel_insert", "wallClockTime": 31.653, "clientTime": 28.496, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 28.496, "avgWallClockTime": 31.652, "shortestQuery": 28.496}, {"testName": "parallel_insert", "wallClockTime": 31.399, "clientTime": 28.26, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 28.26, "avgWallClockTime": 31.399, "shortestQuery": 28.26}, {"testName": "array_fill", "wallClockTime": 138.877, "clientTime": 127.529, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 33.337, "avgWallClockTime": 23.146, "shortestQuery": 10.222}, {"testName": "simple_join_query", "wallClockTime": 92.522, "clientTime": 57.429, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 14.626, "avgWallClockTime": 23.13, "shortestQuery": 13.954}, {"testName": "group_array_moving_sum", "wallClockTime": 240.378, "clientTime": 184.576, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 26.443, "avgWallClockTime": 20.031, "shortestQuery": 7.788}, {"testName": "general_purpose_hashes", "wallClockTime": 1538.051, "clientTime": 1409.717, "total": 78.0, "ignoredQueries": 0.0, "longestQuery": 38.283, "avgWallClockTime": 19.718, "shortestQuery": 3.503}, {"testName": "trim_urls", "wallClockTime": 107.977, "clientTime": 98.695, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 41.921, "avgWallClockTime": 17.996, "shortestQuery": 8.618}, {"testName": "empty_string_serialization", "wallClockTime": 17.734, "clientTime": 16.086, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 16.086, "avgWallClockTime": 17.733, "shortestQuery": 16.086}, {"testName": "prewhere", "wallClockTime": 16.42, "clientTime": 14.974, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.974, "avgWallClockTime": 16.42, "shortestQuery": 14.974}, {"testName": "base64_hits", "wallClockTime": 189.397, "clientTime": 173.474, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 31.287, "avgWallClockTime": 15.783, "shortestQuery": 0.819}, {"testName": "first_significant_subdomain", "wallClockTime": 15.75, "clientTime": 14.321, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.321, "avgWallClockTime": 15.75, "shortestQuery": 14.321}, {"testName": "constant_column_search", "wallClockTime": 423.186, "clientTime": 387.048, "total": 28.0, "ignoredQueries": 0.0, "longestQuery": 35.453, "avgWallClockTime": 15.113, "shortestQuery": 5.203}, {"testName": "string_sort", "wallClockTime": 1145.23, "clientTime": 1049.469, "total": 84.0, "ignoredQueries": 0.0, "longestQuery": 37.111, "avgWallClockTime": 13.633, "shortestQuery": 0.578}, {"testName": "and_function", "wallClockTime": 27.172, "clientTime": 24.781, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 22.834, "avgWallClockTime": 13.586, "shortestQuery": 1.947}, {"testName": "trim_numbers", "wallClockTime": 81.024, "clientTime": 74.23, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 30.488, "avgWallClockTime": 13.504, "shortestQuery": 2.611}, {"testName": "merge_tree_many_partitions_2", "wallClockTime": 12.614, "clientTime": 4.429, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 4.429, "avgWallClockTime": 12.614, "shortestQuery": 4.429}, {"testName": "array_reduce", "wallClockTime": 69.059, "clientTime": 63.146, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 15.276, "avgWallClockTime": 11.509, "shortestQuery": 5.596}, {"testName": "joins_in_memory", "wallClockTime": 382.578, "clientTime": 526.691, "total": 34.0, "ignoredQueries": 10.0, "longestQuery": 25.551, "avgWallClockTime": 11.252, "shortestQuery": 20.079}, {"testName": "constant_column_comparison", "wallClockTime": 231.109, "clientTime": 211.575, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 14.351, "avgWallClockTime": 11.005, "shortestQuery": 4.811}, {"testName": "bloom_filter", "wallClockTime": 10.775, "clientTime": 9.726, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 9.726, "avgWallClockTime": 10.774, "shortestQuery": 9.726}, {"testName": "json_extract_rapidjson", "wallClockTime": 139.351, "clientTime": 127.574, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 18.234, "avgWallClockTime": 10.719, "shortestQuery": 3.544}, {"testName": "url_hits", "wallClockTime": 212.007, "clientTime": 201.987, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 29.476, "avgWallClockTime": 10.6, "shortestQuery": 6.571}, {"testName": "synthetic_hardware_benchmark", "wallClockTime": 254.602, "clientTime": 232.843, "total": 26.0, "ignoredQueries": 0.0, "longestQuery": 58.149, "avgWallClockTime": 9.792, "shortestQuery": 0.873}, {"testName": "string_join", "wallClockTime": 28.726, "clientTime": 21.973, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 9.039, "avgWallClockTime": 9.575, "shortestQuery": 5.197}, {"testName": "general_purpose_hashes_on_UUID", "wallClockTime": 612.398, "clientTime": 561.138, "total": 66.0, "ignoredQueries": 11.0, "longestQuery": 27.505, "avgWallClockTime": 9.278, "shortestQuery": 0.889}, {"testName": "if_array_string", "wallClockTime": 54.358, "clientTime": 49.617, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 21.521, "avgWallClockTime": 9.059, "shortestQuery": 4.174}, {"testName": "column_column_comparison", "wallClockTime": 168.941, "clientTime": 154.74, "total": 19.0, "ignoredQueries": 7.0, "longestQuery": 26.4, "avgWallClockTime": 8.891, "shortestQuery": 6.843}, {"testName": "sum_map", "wallClockTime": 34.901, "clientTime": 29.605, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.596, "avgWallClockTime": 8.725, "shortestQuery": 1.377}, {"testName": "logical_functions_large", "wallClockTime": 85.825, "clientTime": 78.573, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 20.298, "avgWallClockTime": 8.582, "shortestQuery": 3.833}, {"testName": "visit_param_extract_raw", "wallClockTime": 25.268, "clientTime": 23.044, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 16.153, "avgWallClockTime": 8.422, "shortestQuery": 2.032}, {"testName": "uniq", "wallClockTime": 643.232, "clientTime": 589.921, "total": 80.0, "ignoredQueries": 5.0, "longestQuery": 49.189, "avgWallClockTime": 8.04, "shortestQuery": 0.588}, {"testName": "right", "wallClockTime": 15.128, "clientTime": 13.857, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 7.191, "avgWallClockTime": 7.564, "shortestQuery": 6.665}, {"testName": "math", "wallClockTime": 444.186, "clientTime": 406.953, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 19.407, "avgWallClockTime": 7.403, "shortestQuery": 2.257}, {"testName": "cpu_synthetic", "wallClockTime": 341.562, "clientTime": 329.924, "total": 47.0, "ignoredQueries": 7.0, "longestQuery": 43.128, "avgWallClockTime": 7.267, "shortestQuery": 1.095}, {"testName": "round_down", "wallClockTime": 35.355, "clientTime": 32.301, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 25.583, "avgWallClockTime": 7.07, "shortestQuery": 1.292}, {"testName": "website", "wallClockTime": 515.762, "clientTime": 479.436, "total": 73.0, "ignoredQueries": 17.0, "longestQuery": 52.399, "avgWallClockTime": 7.065, "shortestQuery": 0.567}, {"testName": "array_join", "wallClockTime": 42.333, "clientTime": 38.657, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 9.127, "avgWallClockTime": 7.055, "shortestQuery": 2.294}, {"testName": "string_set", "wallClockTime": 49.145, "clientTime": 39.953, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 8.028, "avgWallClockTime": 7.02, "shortestQuery": 3.617}, {"testName": "sort", "wallClockTime": 69.917, "clientTime": 63.03, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 13.483, "avgWallClockTime": 6.991, "shortestQuery": 3.699}, {"testName": "random_printable_ascii", "wallClockTime": 48.933, "clientTime": 44.805, "total": 7.0, "ignoredQueries": 1.0, "longestQuery": 14.941, "avgWallClockTime": 6.99, "shortestQuery": 2.927}, {"testName": "vectorize_aggregation_combinators", "wallClockTime": 34.303, "clientTime": 27.137, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 11.2, "avgWallClockTime": 6.86, "shortestQuery": 0.578}, {"testName": "ngram_distance", "wallClockTime": 109.737, "clientTime": 100.474, "total": 16.0, "ignoredQueries": 0.0, "longestQuery": 10.981, "avgWallClockTime": 6.858, "shortestQuery": 4.016}, {"testName": "collations", "wallClockTime": 13.124, "clientTime": 11.853, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 10.641, "avgWallClockTime": 6.561, "shortestQuery": 1.212}, {"testName": "merge_tree_many_partitions", "wallClockTime": 6.387, "clientTime": 0.025, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.387, "shortestQuery": 0.0}, {"testName": "merge_tree_huge_pk", "wallClockTime": 23.73, "clientTime": 1.765, "total": 4.0, "ignoredQueries": 3.0, "longestQuery": 1.264, "avgWallClockTime": 5.932, "shortestQuery": 1.264}, {"testName": "base64", "wallClockTime": 51.066, "clientTime": 46.634, "total": 9.0, "ignoredQueries": 0.0, "longestQuery": 9.234, "avgWallClockTime": 5.674, "shortestQuery": 2.008}, {"testName": "json_extract_simdjson", "wallClockTime": 72.944, "clientTime": 66.926, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 13.999, "avgWallClockTime": 5.611, "shortestQuery": 2.78}, {"testName": "merge_tree_simple_select", "wallClockTime": 5.524, "clientTime": 0.013, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 5.524, "shortestQuery": 0.0}, {"testName": "read_hits_with_aio", "wallClockTime": 19.979, "clientTime": 18.208, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 6.154, "avgWallClockTime": 4.994, "shortestQuery": 2.798}, {"testName": "inserts_arrays_lowcardinality", "wallClockTime": 9.898, "clientTime": 7.863, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.901, "avgWallClockTime": 4.948, "shortestQuery": 1.962}, {"testName": "order_by_single_column", "wallClockTime": 33.791, "clientTime": 30.878, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 9.661, "avgWallClockTime": 4.827, "shortestQuery": 1.255}, {"testName": "entropy", "wallClockTime": 43.405, "clientTime": 39.618, "total": 9.0, "ignoredQueries": 3.0, "longestQuery": 17.087, "avgWallClockTime": 4.822, "shortestQuery": 0.777}, {"testName": "order_by_read_in_order", "wallClockTime": 23.889, "clientTime": 21.568, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 10.062, "avgWallClockTime": 4.777, "shortestQuery": 1.489}, {"testName": "mingroupby-orderbylimit1", "wallClockTime": 37.29, "clientTime": 32.675, "total": 8.0, "ignoredQueries": 0.0, "longestQuery": 9.412, "avgWallClockTime": 4.661, "shortestQuery": 0.716}, {"testName": "range", "wallClockTime": 9.285, "clientTime": 8.4, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.821, "avgWallClockTime": 4.642, "shortestQuery": 2.578}, {"testName": "codecs_int_insert", "wallClockTime": 94.51, "clientTime": 83.685, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 7.733, "avgWallClockTime": 4.5, "shortestQuery": 1.247}, {"testName": "set_hits", "wallClockTime": 24.67, "clientTime": 22.382, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 7.777, "avgWallClockTime": 4.111, "shortestQuery": 0.98}, {"testName": "scalar", "wallClockTime": 4.059, "clientTime": 1.404, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.404, "avgWallClockTime": 4.059, "shortestQuery": 1.404}, {"testName": "trim_whitespace", "wallClockTime": 23.692, "clientTime": 11.525, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.363, "avgWallClockTime": 3.948, "shortestQuery": 0.927}, {"testName": "array_auc", "wallClockTime": 3.92, "clientTime": 3.468, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 3.468, "avgWallClockTime": 3.92, "shortestQuery": 3.468}, {"testName": "linear_regression", "wallClockTime": 19.321, "clientTime": 17.515, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 8.08, "avgWallClockTime": 3.864, "shortestQuery": 0.736}, {"testName": "least_greatest_hits", "wallClockTime": 11.172, "clientTime": 10.142, "total": 3.0, "ignoredQueries": 1.0, "longestQuery": 6.246, "avgWallClockTime": 3.723, "shortestQuery": 3.638}, {"testName": "functions_geo", "wallClockTime": 20.058, "clientTime": 18.275, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 5.569, "avgWallClockTime": 3.343, "shortestQuery": 1.676}, {"testName": "set_index", "wallClockTime": 16.093, "clientTime": 4.519, "total": 5.0, "ignoredQueries": 2.0, "longestQuery": 2.176, "avgWallClockTime": 3.218, "shortestQuery": 0.648}, {"testName": "decimal_aggregates", "wallClockTime": 62.63, "clientTime": 57.236, "total": 21.0, "ignoredQueries": 6.0, "longestQuery": 6.071, "avgWallClockTime": 2.982, "shortestQuery": 0.863}, {"testName": "if_array_num", "wallClockTime": 17.423, "clientTime": 15.861, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.478, "avgWallClockTime": 2.903, "shortestQuery": 1.793}, {"testName": "bitCount", "wallClockTime": 16.13, "clientTime": 14.68, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.611, "avgWallClockTime": 2.688, "shortestQuery": 1.65}, {"testName": "h3", "wallClockTime": 2.656, "clientTime": 2.329, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.329, "avgWallClockTime": 2.655, "shortestQuery": 2.329}, {"testName": "date_time_64", "wallClockTime": 43.046, "clientTime": 32.196, "total": 18.0, "ignoredQueries": 3.0, "longestQuery": 6.821, "avgWallClockTime": 2.391, "shortestQuery": 0.575}, {"testName": "jit_large_requests", "wallClockTime": 4.386, "clientTime": 1.874, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 1.271, "avgWallClockTime": 2.193, "shortestQuery": 0.603}, {"testName": "empty_string_deserialization", "wallClockTime": 2.181, "clientTime": 0.401, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 2.18, "shortestQuery": 0.0}, {"testName": "distributed_aggregation", "wallClockTime": 7.787, "clientTime": 7.023, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 1.884, "avgWallClockTime": 1.946, "shortestQuery": 1.701}, {"testName": "merge_table_streams", "wallClockTime": 1.764, "clientTime": 1.396, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.396, "avgWallClockTime": 1.764, "shortestQuery": 1.396}, {"testName": "order_by_decimals", "wallClockTime": 8.543, "clientTime": 7.738, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 2.339, "avgWallClockTime": 1.708, "shortestQuery": 0.817}, {"testName": "pre_limit_no_sorting", "wallClockTime": 1.698, "clientTime": 1.43, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.43, "avgWallClockTime": 1.697, "shortestQuery": 1.43}, {"testName": "array_element", "wallClockTime": 4.664, "clientTime": 4.158, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 1.524, "avgWallClockTime": 1.554, "shortestQuery": 1.148}, {"testName": "if_string_hits", "wallClockTime": 6.158, "clientTime": 5.561, "total": 4.0, "ignoredQueries": 2.0, "longestQuery": 3.432, "avgWallClockTime": 1.539, "shortestQuery": 1.325}, {"testName": "basename", "wallClockTime": 2.761, "clientTime": 2.414, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 1.26, "avgWallClockTime": 1.38, "shortestQuery": 1.153}, {"testName": "concat_hits", "wallClockTime": 32.787, "clientTime": 29.953, "total": 26.0, "ignoredQueries": 14.0, "longestQuery": 2.769, "avgWallClockTime": 1.261, "shortestQuery": 1.551}, {"testName": "int_parsing", "wallClockTime": 100.803, "clientTime": 92.248, "total": 83.0, "ignoredQueries": 0.0, "longestQuery": 4.013, "avgWallClockTime": 1.214, "shortestQuery": 0.608}, {"testName": "bit_operations_fixed_string_numbers", "wallClockTime": 1.818, "clientTime": 1.567, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.948, "avgWallClockTime": 0.908, "shortestQuery": 0.618}, {"testName": "information_value", "wallClockTime": 1.814, "clientTime": 1.556, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.968, "avgWallClockTime": 0.907, "shortestQuery": 0.587}, {"testName": "great_circle_dist", "wallClockTime": 1.762, "clientTime": 1.506, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.982, "avgWallClockTime": 0.88, "shortestQuery": 0.982}, {"testName": "joins_in_memory_pmj", "wallClockTime": 20.378, "clientTime": 37.105, "total": 24.0, "ignoredQueries": 8.0, "longestQuery": 2.737, "avgWallClockTime": 0.849, "shortestQuery": 2.049}, {"testName": "codecs_float_insert", "wallClockTime": 11.523, "clientTime": 9.705, "total": 15.0, "ignoredQueries": 5.0, "longestQuery": 0.983, "avgWallClockTime": 0.768, "shortestQuery": 0.611}, {"testName": "jit_small_requests", "wallClockTime": 2.289, "clientTime": 1.922, "total": 3.0, "ignoredQueries": 2.0, "longestQuery": 1.253, "avgWallClockTime": 0.763, "shortestQuery": 1.253}, {"testName": "count", "wallClockTime": 0.758, "clientTime": 0.023, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.758, "shortestQuery": 0.0}, {"testName": "slices_hits", "wallClockTime": 1.438, "clientTime": 1.212, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.949, "avgWallClockTime": 0.718, "shortestQuery": 0.949}, {"testName": "analyze_array_tuples", "wallClockTime": 0.686, "clientTime": 0.513, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.685, "shortestQuery": 0.0}, {"testName": "format_date_time", "wallClockTime": 3.542, "clientTime": 3.157, "total": 6.0, "ignoredQueries": 2.0, "longestQuery": 0.673, "avgWallClockTime": 0.59, "shortestQuery": 0.56}, {"testName": "complex_array_creation", "wallClockTime": 1.164, "clientTime": 0.968, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.582, "shortestQuery": 0.0}, {"testName": "consistent_hashes", "wallClockTime": 3.479, "clientTime": 3.094, "total": 7.0, "ignoredQueries": 5.0, "longestQuery": 1.534, "avgWallClockTime": 0.497, "shortestQuery": 0.993}, {"testName": "date_parsing", "wallClockTime": 0.484, "clientTime": 0.34, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.483, "shortestQuery": 0.0}, {"testName": "cidr", "wallClockTime": 0.895, "clientTime": 0.721, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.447, "shortestQuery": 0.0}, {"testName": "conditional", "wallClockTime": 3.563, "clientTime": 3.163, "total": 8.0, "ignoredQueries": 6.0, "longestQuery": 0.681, "avgWallClockTime": 0.445, "shortestQuery": 0.595}, {"testName": "early_constant_folding", "wallClockTime": 0.432, "clientTime": 0.294, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.432, "shortestQuery": 0.0}, {"testName": "fixed_string16", "wallClockTime": 0.424, "clientTime": 0.284, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.423, "shortestQuery": 0.0}, {"testName": "generate_table_function", "wallClockTime": 7.773, "clientTime": 6.99, "total": 19.0, "ignoredQueries": 16.0, "longestQuery": 1.313, "avgWallClockTime": 0.409, "shortestQuery": 0.649}, {"testName": "bit_operations_fixed_string", "wallClockTime": 1.535, "clientTime": 1.301, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.383, "shortestQuery": 0.0}, {"testName": "codecs_float_select", "wallClockTime": 4.672, "clientTime": 3.305, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.311, "shortestQuery": 0.0}, {"testName": "functions_coding", "wallClockTime": 1.14, "clientTime": 0.943, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.284, "shortestQuery": 0.0}, {"testName": "codecs_int_select", "wallClockTime": 5.834, "clientTime": 4.213, "total": 21.0, "ignoredQueries": 21.0, "longestQuery": 0.0, "avgWallClockTime": 0.277, "shortestQuery": 0.0}, {"testName": "if_string_const", "wallClockTime": 1.007, "clientTime": 0.827, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.251, "shortestQuery": 0.0}, {"testName": "round_methods", "wallClockTime": 2.798, "clientTime": 2.475, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.186, "shortestQuery": 0.0}, {"testName": "bounding_ratio", "wallClockTime": 0.364, "clientTime": 0.237, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.181, "shortestQuery": 0.0}], "slowOnClient": [], "allQueries": 1234, "timePerformance": {"analyze_array_tuples": [0.0007], "and_function": [0.0002, 0.0081], "array_auc": [0.0012], "array_element": [0.0004, -0.0004, -0.0057], "array_fill": [0.006, 0.0044, -0.0196, -0.0632, -0.0062, 0.0074], "array_join": [0.0116, -0.001, 0.0046, -0.0108, -0.0015, -0.0017], "array_reduce": [0.0011, 0.0022, 0.0258, 0.0414, 0.0031, -0.0134], "base64": [0.0006, 0.0053, -0.0013, -0.0025, -0.0059, -0.001, -0.0037, 0.0001, 0.0006], "base64_hits": [0.0013, 0.0066, 0.0177, 0.0263, 0.0051, 0.0035, -0.0244, 0.0101, 0.0032, -0.0004, -0.0397, 0.0635], "basename": [-0.0011, 0.0004], "bitCount": [-0.0009, 0.0012, 0.0023, 0.001, -0.0001, -0.0022], "bit_operations_fixed_string": [-0.0014, -0.0047, -0.0003, -0.0004], "bit_operations_fixed_string_numbers": [0.0004, 0.0003], "bloom_filter": [0.0024], "bounding_ratio": [0.0002, -0.0008], "cidr": [0.0011, -0.0013], "codecs_float_insert": [0.0014, 0.0004, 0.0001, 0.001, -0.0002, 0.0015, -0.0004, 0.0021, 0.0008, -0.0005, -0.0001, -0.0002, 0.0004, 0.0028, -0.0036], "codecs_float_select": [0.0001, 0.0, -0.0008, 0.0001, -0.0004, -0.0004, -0.0005, -0.0001, 0.0001, -0.0003, -0.0002, 0.0003, 0.0003, -0.0008, 0.0005], "codecs_int_insert": [-0.0054, -0.0053, 0.0012, 0.0104, 0.0038, 0.0188, -0.0067, -0.0043, -0.0078, 0.0, -0.0021, -0.0087, 0.0092, -0.0075, 0.0046, -0.0078, 0.0084, -0.0003, -0.0009, -0.0012, -0.0047], "codecs_int_select": [0.0001, 0.0, -0.0001, -0.0007, -0.0004, 0.0, -0.0004, -0.0003, -0.0006, 0.0005, -0.0006, -0.0007, -0.0007, -0.0008, 0.0002, -0.0004, -0.0005, -0.0007, -0.0003, -0.0006, -0.0006], "collations": [0.0101, 0.0011], "column_column_comparison": [0.0003, -0.0027, 0.0017, 0.0001, 0.0037, 0.0024, -0.0002, 0.0133, 0.0137, 0.0, 0.0311, -0.0016, 0.0, 0.0, -0.001, -0.0034, -0.0091, 0.0002, 0.0129], "complex_array_creation": [0.0001, -0.0005], "concat_hits": [0.0007, -0.0005, -0.0002, -0.0007, 0.0005, -0.0003, -0.0004, 0.0019, 0.0015, 0.0024, 0.0011, 0.0017, 0.002, -0.0002, 0.0004, 0.0003, 0.0007, 0.0018, -0.0004, 0.0035, 0.0002, 0.0002, 0.0006, 0.0037, 0.0, 0.0054], "conditional": [0.0, 0.0002, -0.0001, 0.0005, 0.0001, 0.0007, -0.0007, -0.0002], "consistent_hashes": [0.0004, 0.0006, 0.0004, -0.0011, 0.0003, -0.0001, 0.0003], "constant_column_comparison": [0.0133, 0.0014, 0.0098, 0.0057, 0.0042, 0.0091, 0.0086, 0.0024, 0.0037, -0.0045, 0.0009, 0.003, 0.0078, -0.0011, 0.0063, 0.0045, 0.0136, 0.0113, 0.0035, 0.0052, 0.0082], "constant_column_search": [0.0033, 0.003, -0.006, -0.0214, 0.0856, -0.0067, 0.0013, -0.0097, 0.0002, 0.0384, -0.0048, 0.024, 0.0025, 0.0043, 0.0226, 0.0052, -0.0179, -0.0076, 0.0758, -0.0011, 0.0612, 0.0044, 0.0038, -0.0033, -0.006, -0.0099, 0.0016, -0.0071], "count": [0.0], "cpu_synthetic": [0.0027, -0.0011, 0.0067, 0.0063, -0.0227, -0.0025, 0.0005, 0.0155, -0.0039, 0.0008, 0.0005, 0.0011, -0.0013, 0.0062, -0.0062, -0.0024, -0.0223, 0.0043, -0.0003, -0.0011, -0.0031, 0.0004, 0.0017, -0.0015, -0.0029, 0.0022, 0.0035, 0.0005, -0.007, -0.0122, 0.0037, -0.0124, 0.0002, 0.0001, 0.0001, -0.0001, 0.0001, -0.0002, 0.0003, -0.0004, 0.003, 0.0016, 0.0021, -0.0172, -0.0156], "date_parsing": [0.0019], "date_time_64": [0.0007, 0.0, 0.0006, 0.0012, -0.0003, 0.0003, -0.0002, 0.0006, -0.0005, -0.0016, 0.0008, 0.0034, -0.0002, -0.0007, 0.0003, -0.0106, 0.0004, 0.0012], "decimal_aggregates": [-0.0006, 0.0001, -0.0002, 0.0607, -0.0183, 0.023, 0.0002, -0.0001, 0.0001, 0.0037, -0.0166, 0.0199, 0.042, -0.0148, -0.0133, -0.0028, 0.0004, 0.0314, 0.0004, 0.0001, -0.0003], "distributed_aggregation": [0.008, -0.0015, 0.0008, -0.0001], "early_constant_folding": [0.0004], "empty_string_deserialization": [0.0003], "empty_string_serialization": [0.0013], "entropy": [0.0096, 0.0091, -0.0002, 0.0001, 0.0002, 0.0031, 0.0137, -0.0253, -0.0013], "first_significant_subdomain": [0.0226], "fixed_string16": [0.0], "format_date_time": [-0.0005, 0.0004, -0.0009, -0.0001, -0.0003, -0.0002], "functions_coding": [-0.0001, 0.0001, 0.001, -0.0001], "functions_geo": [0.0004, 0.0004, -0.0034, 0.0008, 0.0018, 0.0001], "general_purpose_hashes": [0.0575, 0.0147, -0.0168, 0.0035, 0.0064, 0.0411, 0.0113, -0.0268, 0.0103, 0.0115, 0.0002, 0.0134, -0.0106, 0.0004, -0.0068, -0.0025, 0.005, 0.0181, -0.0015, -0.0026, 0.0118, 0.0214, 0.0067, 0.0335, 0.0014, -0.0119, 0.0157, 0.0032, -0.0014, -0.0017, -0.0018, -0.0009, 0.0029, -0.0053, 0.004, -0.0035, 0.0029, -0.0008, 0.0051, 0.0015, -0.0004, -0.005, 0.0045, 0.0279, 0.0043, -0.0206, -0.0007, -0.0021, 0.0028, -0.0048, 0.0018, 0.0005, -0.0311, 0.0354, 0.03, -0.067, 0.0579, -0.1654, 0.0175, 0.0017, 0.0116, 0.1224, -0.1343, -0.0027, -0.1509, -0.0469, -0.0682, -0.0617, -0.0339, -0.0434, -0.076, -0.0739, -0.068, -0.0769, -0.0689, -0.0727, -0.0773, -0.0651], "general_purpose_hashes_on_UUID": [0.0002, -0.0002, -0.0015, -0.0005, -0.0006, 0.0, -0.0022, 0.0002, -0.0004, -0.0008, -0.0006, -0.0035, -0.0001, -0.0005, -0.0007, 0.0, -0.0002, 0.0001, 0.0012, -0.0013, 0.0001, -0.0003, 0.0074, -0.0091, -0.0023, 0.0061, -0.0289, 0.0198, 0.0766, -0.0428, -0.0031, 0.0018, -0.0165, -0.0163, 0.0134, 0.0017, 0.0005, -0.0196, 0.0163, -0.0042, -0.0015, -0.0048, 0.02, 0.0194, -0.0039, -0.0079, 0.0064, 0.0102, -0.0197, -0.0066, 0.0015, 0.0028, 0.0032, -0.0066, -0.0087, -0.0067, 0.0052, -0.0011, 0.0099, -0.0068, 0.0058, 0.0033, 0.0043, -0.0037, 0.0053, -0.0057], "generate_table_function": [0.0, 0.0003, -0.0006, -0.0002, -0.0001, 0.0, -0.0003, 0.0014, 0.0, 0.0001, -0.0003, 0.0001, -0.0004, -0.0005, -0.001, -0.0003, 0.0002, 0.0002, 0.0001], "great_circle_dist": [-0.0005, -0.0001], "group_array_moving_sum": [0.0183, -0.095, -0.0208, 0.127, -0.344, -0.0215, -0.1399, 0.015, 0.1748, 0.0817, 0.1541, -0.0684], "h3": [0.0007], "if_array_num": [-0.0018, 0.0014, 0.005, 0.003, -0.0017, -0.0036], "if_array_string": [0.0024, 0.0, 0.001, -0.0046, -0.0005, -0.1824], "if_string_const": [0.0006, -0.0002, -0.0001, -0.0003], "if_string_hits": [0.0004, 0.0001, 0.0025, 0.007], "information_value": [0.0, 0.0018], "inserts_arrays_lowcardinality": [-0.0016, 0.0039], "int_parsing": [0.0003, 0.0, -0.0002, 0.0003, -0.0012, -0.0005, -0.0008, 0.0002, -0.0005, -0.0009, 0.0, -0.0003, 0.0006, 0.0007, 0.0001, -0.0002, -0.001, -0.0008, 0.0001, 0.0002, -0.0001, -0.0017, -0.0004, -0.0003, -0.0001, -0.0013, 0.0002, -0.0007, 0.0004, 0.0002, -0.0004, -0.0002, -0.0001, -0.0004, -0.0002, 0.0, -0.0005, 0.0006, 0.0, 0.0003, 0.0005, -0.0001, -0.0003, 0.0003, 0.0004, -0.0002, 0.0, 0.0001, -0.0002, -0.0001, 0.0003, -0.0005, -0.0004, 0.0028, -0.0005, -0.0001, -0.0009, -0.0003, 0.0044, -0.0024, 0.0011, -0.0013, 0.0, -0.0001, 0.0, -0.0002, 0.0, -0.0001, 0.0003, 0.0002, -0.0003, 0.0004, -0.0001, 0.0026, 0.0001, 0.0002, 0.0054, 0.0001, -0.0004, -0.0001, 0.0014, -0.0001, 0.0003], "jit_large_requests": [0.001, -0.0012], "jit_small_requests": [-0.0004, 0.0005, 0.0004], "joins_in_memory": [-0.0003, 0.0003, -0.0005, -0.0005, -0.0001, 0.158, -0.103, -0.1722, -0.3101, -0.0134, -0.0092, -0.2434, 0.003, -0.2076, -0.2106, 0.0221, -0.2622, -0.0237, -0.023, -0.0095, 0.1476], "joins_in_memory_pmj": [0.0, -0.0001, -0.0002, 0.0002, 0.0, -0.0006, -0.0002, -0.0022, 0.0, -0.0033, -0.0009, -0.0009], "json_extract_rapidjson": [0.0027, 0.0497, 0.0326, 0.01, -0.0078, 0.0034, 0.0078, 0.0066, 0.0041, -0.0008, 0.019, 0.0568, -0.008], "json_extract_simdjson": [0.0018, 0.0193, 0.0072, -0.0023, -0.0072, 0.0004, -0.0027, -0.0032, 0.0014, -0.0064, 0.0003, 0.0012, -0.0011], "least_greatest_hits": [-0.0002, -0.0018, -0.0015], "linear_regression": [0.0003, 0.0003, 0.0092, 0.0011, -0.0003], "logical_functions_large": [0.0207, -0.0008, -0.0035, -0.0012, 0.0013, -0.0033, 0.0009, -0.0033, -0.0066, -0.0005], "materialized_view_parallel_insert": [0.0059], "math": [0.0017, 0.0052, 0.0006, -0.0009, 0.002, 0.0036, 0.0013, 0.0047, 0.0012, -0.0011, 0.0, 0.0044, 0.0015, -0.0001, 0.0009, -0.0003, -0.0009, 0.0004, 0.0023, -0.0023, -0.0011, 0.0024, 0.0022, -0.0015, -0.0187, 0.0245, -0.0377, -0.0233, 0.0298, -0.0243, 0.0239, -0.0168, 0.0264, 0.0037, 0.0256, -0.0298, 0.0007, 0.0025, 0.0012, -0.0096, -0.0035, -0.0029, 0.0012, -0.0034, -0.06, -0.003, 0.0035, -0.0031, -0.0023, -0.0021, 0.0004, 0.0001, 0.0021, -0.0001, 0.0021, 0.002, 0.0007, 0.0003, -0.0004, -0.0031], "merge_table_streams": [0.0002], "merge_tree_huge_pk": [0.0002, -0.0004, 0.0002, 0.0001], "merge_tree_many_partitions": [0.0], "merge_tree_many_partitions_2": [0.001], "merge_tree_simple_select": [0.0], "mingroupby-orderbylimit1": [0.0085, -0.052, -0.003, 0.0008, 0.0142, -0.0062, 0.0051, -0.0033], "ngram_distance": [0.0012, 0.0017, -0.0017, 0.0015, 0.0046, -0.0084, -0.0079, -0.0073, -0.0014, 0.0026, 0.0016, 0.0015, 0.0, 0.0012, 0.0002, -0.002], "order_by_decimals": [-0.0009, -0.0007, 0.0011, 0.0001, 0.0001], "order_by_read_in_order": [0.0074, 0.0008, -0.0261, 0.0031, 0.0001], "order_by_single_column": [-0.0002, -0.0003, 0.0006, 0.0001, 0.0022, -0.0025, -0.0024], "parallel_insert": [0.0103], "pre_limit_no_sorting": [-0.0011], "prewhere": [0.0178], "random_printable_ascii": [-0.0059, -0.0025, -0.0002, -0.0046, 0.0141, -0.0033, -0.0108], "range": [0.0171, -0.0011], "read_hits_with_aio": [0.0073, -0.0011, -0.0027, -0.0022], "right": [0.0658, 0.0619], "round_down": [-0.015, -0.0003, -0.0004, 0.0007, -0.0002], "round_methods": [0.0002, 0.0002, -0.0004, -0.0001, -0.0002, -0.0002, -0.0006, -0.0001, -0.0001, -0.0003, -0.0002, -0.0004, -0.0008, 0.0003, -0.0002], "scalar": [-0.0031], "set_hits": [0.0002, -0.0006, -0.0047, -0.0011, -0.0027, 0.005], "set_index": [0.0011, 0.0006, 0.0034, 0.002, 0.0016], "simple_join_query": [0.0022, 0.0402, -0.1423, -0.005], "slices_hits": [0.0002, 0.0005], "sort": [0.0024, 0.0052, 0.0025, 0.0001, 0.0004, 0.0006, -0.0023, 0.0032, -0.0014, -0.0007], "string_join": [0.0016, 0.0039, 0.0436], "string_set": [0.0018, 0.0371, 0.0236, -0.0555, -0.0032, 0.0026, -0.0021], "string_sort": [0.0002, 0.0036, -0.0006, -0.0014, 0.0016, 0.0124, 0.0012, 0.022, -0.0012, 0.0004, 0.0001, -0.054, 0.0016, -0.0155, -0.0006, 0.0001, -0.0038, -0.0028, -0.002, -0.0066, 0.0011, 0.0297, -0.0043, 0.0003, 0.0018, -0.0004, -0.0016, -0.0284, -0.0006, -0.0108, 0.0012, 0.0232, -0.0001, 0.0236, -0.0002, -0.009, 0.0011, 0.0074, 0.0044, 0.0133, -0.026, -0.0201, 0.0002, 0.0086, -0.0004, -0.0091, 0.0008, -0.0015, -0.0011, 0.0098, 0.0, -0.0049, -0.0065, 0.0174, -0.0063, -0.0131, -0.0007, -0.0124, 0.0065, -0.0004, 0.0001, 0.031, 0.0, -0.0036, 0.0009, -0.0265, -0.0021, 0.0414, 0.0744, 0.0349, 0.0014, -0.0062, 0.0032, -0.0308, -0.0077, -0.0042, 0.0041, 0.0063, -0.0067, -0.0151, -0.0084, -0.0226, 0.0015, 0.0174], "sum_map": [0.0006, -0.0312, -0.0009, -0.0185], "synthetic_hardware_benchmark": [0.0006, 0.0006, -0.0026, -0.0011, 0.0047, -0.0006, 0.001, 0.0, 0.0004, 0.0075, 0.0015, 0.0008, 0.0004, 0.0016, 0.0012, 0.0103, 0.0028, 0.0016, -0.0002, -0.0017, 0.0045, -0.0983, -0.0014, -0.0217, -0.0218, 0.0189], "trim_numbers": [0.0025, -0.0063, -0.0052, 0.0078, 0.0197, 0.0012], "trim_urls": [0.0036, 0.0102, 0.0924, -0.0012, 0.0235, -0.0009], "trim_whitespace": [-0.0043, 0.0038, -0.0012, 0.0012, -0.0027, -0.0004], "uniq": [0.0003, -0.0016, -0.0001, -0.0016, -0.001, -0.0008, -0.0007, 0.0017, 0.0029, -0.0114, -0.0024, 0.0001, -0.001, 0.0011, -0.0002, 0.0, 0.0246, 0.0131, 0.0291, -0.005, 0.0257, 0.0177, 0.02, 0.0137, 0.0113, 0.0007, 0.0138, 0.0115, -0.2712, 0.0229, 0.0188, 0.0158, 0.001, -0.0032, 0.0008, 0.0021, -0.0002, 0.0016, 0.003, 0.0053, 0.0042, 0.0397, -0.0004, 0.0007, 0.0015, 0.001, 0.0021, 0.0012, 0.0003, 0.0005, -0.0014, -0.0017, 0.0002, -0.0032, -0.0045, 0.0073, 0.0138, -0.0123, -0.0012, 0.0012, 0.001, 0.0004, 0.002, 0.001, 0.0006, 0.0093, 0.0088, -0.0007, 0.0042, 0.0063, 0.0141, 0.0012, 0.0069, 0.249, 0.0259, 0.0168, -0.0398, 0.0034, 0.001, 0.0042], "url_hits": [0.1388, 0.0949, 0.0038, 0.0013, 0.0047, 0.006, 0.0426, 0.0034, 0.0005, 0.0011, -0.0045, 0.0021, 0.003, 0.0016, -0.0216, 0.0287, 0.0062, 0.0234, 0.0019], "vectorize_aggregation_combinators": [-0.0013, 0.0003, 0.0003, 0.0024, 0.0008], "visit_param_extract_raw": [-0.0002, 0.0814, 0.043], "website": [0.0102, 0.0024, 0.0103, -0.0022, -0.0001, 0.004, -0.0155, -0.0013, 0.0014, -0.0005, 0.0011, 0.0053, -0.0004, 0.0054, 0.0004, 0.0054, 0.0108, -0.0035, -0.003, 0.0, -0.0023, 0.0416, -0.0019, 0.0028, 0.006, 0.0093, 0.0, -0.0005, 0.0001, 0.0023, -0.0055, -0.0017, -0.0006, 0.0004, -0.0002, -0.0467, -0.0085, -0.0003, 0.0006, -0.0371, 0.005, 0.0029, 0.0007, -0.0032, -0.0003, -0.0153, 0.0066, -0.0072, -0.0104, -0.0023, -0.0002, 0.0003, 0.0009, 0.0003, -0.0002, -0.0006, 0.023, 0.0012, 0.0004, 0.0001, 0.0001, 0.0004, 0.0453, 0.0153, 0.0, 0.0001, 0.0, 0.0, -0.0049, -0.0008, -0.0003, 0.0002]}, "reportErrors": []}
