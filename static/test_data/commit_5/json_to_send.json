{"commits": {"leftCommit": {"commit": "d94fc26315a9d200c0ce407b40c2c5e34a88dddd", "merge": "2645dede a0d56997", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Tue Apr 21 02:27:52 2020 +0300", "info": "Merge pull request #10384 from ClickHouse/clang-10-ci\nUse clang-10 in CI"}, "rightCommit": {"commit": "4ecc86becab4570e9bff67075f650e688da2e7d5 (HEAD -> master)", "merge": "d94fc263 da7eeb31", "author": "alexey-milovidov <milovidov@yandex-team.ru>", "date": "Tue Apr 21 02:30:17 2020 +0300", "info": "Merge pull request #9950 from ClickHouse/aku/literal-columns\nCreate unique columns for literals"}}, "changes": [{"oldTime": 0.1783, "newTime": 0.1449, "relativeDifference": -0.188, "quantiles": [0.008, 0.114, 0.169, 0.184], "testName": "website", "query": "SELECT sum(ResolutionWidth), sum(ResolutionWidth + 1), sum(ResolutionWidth + 2), sum(ResolutionWidth + 3), sum(ResolutionWidth + 4), sum(ResolutionWidth + 5), sum(ResolutionWidth + 6), sum(ResolutionWidth + 7), sum(ResolutionWidth + 8), sum(ResolutionWidth + 9), sum(ResolutionWidth + 10), sum(ResolutionWidth + 11), sum(ResolutionWidth + 12), sum(ResolutionWidth + 13), sum(ResolutionWidth + 14), sum(ResolutionWidth + 15), sum(ResolutionWidth + 16), sum(ResolutionWidth + 17), sum(ResolutionWidth + 18), sum(ResolutionWidth + 19), sum(ResolutionWidth + 20), sum(ResolutionWidth + 21), sum(ResolutionWidth + 22), sum(ResolutionWidth + 23), sum(ResolutionWidth + 24), sum(ResolutionWidth + 25), sum(ResolutionWidth + 26), sum(ResolutionWidth + 27), sum(ResolutionWidth + 28), sum(ResolutionWidth + 29), sum(ResolutionWidth + 30), sum(ResolutionWidth + 31), sum(ResolutionWidth + 32), sum(ResolutionWidth + 33), sum(ResolutionWidth + 34), sum(ResolutionWidth + 35), sum(ResolutionWidth + 36), sum(ResolutionWidth + 37), sum(ResolutionWidth + 38), sum(ResolutionWidth + 39), sum(ResolutionWidth + 40), sum(ResolutionWidth + 41), sum(ResolutionWidth + 42), sum(ResolutionWidth + 43), sum(ResolutionWidth + 44), sum(ResolutionWidth + 45), sum(ResolutionWidth + 46), sum(ResolutionWidth + 47), sum(ResolutionWidth + 48), sum(ResolutionWidth + 49), sum(ResolutionWidth + 50), sum(ResolutionWidth + 51), sum(ResolutionWidth + 52), sum(ResolutionWidth + 53), sum(ResolutionWidth + 54), sum(ResolutionWidth + 55), sum(ResolutionWidth + 56), sum(ResolutionWidth + 57), sum(ResolutionWidth + 58), sum(ResolutionWidth + 59), sum(ResolutionWidth + 60), sum(ResolutionWidth + 61), sum(ResolutionWidth + 62), sum(ResolutionWidth + 63), sum(ResolutionWidth + 64), sum(ResolutionWidth + 65), sum(ResolutionWidth + 66), sum(ResolutionWidth + 67), sum(ResolutionWidth + 68), sum(ResolutionWidth + 69), sum(ResolutionWidth + 70), sum(ResolutionWidth + 71), sum(ResolutionWidth + 72), sum(ResolutionWidth + 73), sum(ResolutionWidth + 74), sum(ResolutionWidth + 75), sum(ResolutionWidth + 76), sum(ResolutionWidth + 77), sum(ResolutionWidth + 78), sum(ResolutionWidth + 79), sum(ResolutionWidth + 80), sum(ResolutionWidth + 81), sum(ResolutionWidth + 82), sum(ResolutionWidth + 83), sum(ResolutionWidth + 84), sum(ResolutionWidth + 85), sum(ResolutionWidth + 86), sum(ResolutionWidth + 87), sum(ResolutionWidth + 88), sum(ResolutionWidth + 89) FROM hits_10m_single"}], "unstableQueries": [{"oldTime": 0.0343, "newTime": 0.0329, "relativeDifference": -0.041, "quantiles": [0.039, 0.046, 0.358, 0.467], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 0.061, "newTime": 0.0468, "relativeDifference": -0.233, "quantiles": [0.024, 0.214, 0.275, 0.277], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.079, "newTime": 0.0748, "relativeDifference": -0.054, "quantiles": [0.004, 0.041, 0.197, 0.299], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.5883, "newTime": 0.5103, "relativeDifference": -0.133, "quantiles": [0.012, 0.154, 0.165, 0.172], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(metroHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.594, "newTime": 0.5788, "relativeDifference": -0.026, "quantiles": [0.025, 0.079, 0.157, 0.159], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.5809, "newTime": 0.5735, "relativeDifference": -0.013, "quantiles": [0.012, 0.117, 0.151, 0.154], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(farmHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.9177, "newTime": 0.9502, "relativeDifference": 0.035, "quantiles": [0.035, 0.084, 0.134, 0.152], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"}, {"oldTime": 0.1825, "newTime": 0.1833, "relativeDifference": 0.004, "quantiles": [0.003, 0.068, 0.131, 0.164], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1118, "newTime": 0.1245, "relativeDifference": 0.113, "quantiles": [0.004, 0.058, 0.129, 0.147], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1121, "newTime": 0.1007, "relativeDifference": -0.102, "quantiles": [0.059, 0.094, 0.128, 0.139], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.6752, "newTime": 0.7621, "relativeDifference": 0.128, "quantiles": [0.025, 0.039, 0.128, 0.147], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash2_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.0989, "newTime": 0.1047, "relativeDifference": 0.058, "quantiles": [0.009, 0.033, 0.125, 0.132], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.0994, "newTime": 0.1094, "relativeDifference": 0.1, "quantiles": [0.024, 0.088, 0.125, 0.159], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.6847, "newTime": 0.6277, "relativeDifference": -0.084, "quantiles": [0.001, 0.007, 0.119, 0.125], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(cityHash64(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.1456, "newTime": 0.1512, "relativeDifference": 0.038, "quantiles": [0.011, 0.057, 0.118, 0.132], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1303, "newTime": 0.1329, "relativeDifference": 0.019, "quantiles": [0.019, 0.07, 0.113, 0.121], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_T64 (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.7286, "newTime": 0.7899, "relativeDifference": 0.084, "quantiles": [0.021, 0.053, 0.112, 0.115], "testName": "general_purpose_hashes", "query": "SELECT count() from zeros(1000000) where not ignore(murmurHash3_32(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\')))"}, {"oldTime": 0.248, "newTime": 0.2491, "relativeDifference": 0.004, "quantiles": [0.0, 0.023, 0.11, 0.136], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15, \\'Momentum\\')(Age, Income, ParamPrice, Robotness, RefererHash) FROM hits_100m_single FORMAT Null"}, {"oldTime": 0.0413, "newTime": 0.0386, "relativeDifference": -0.066, "quantiles": [0.025, 0.06, 0.108, 0.124], "testName": "base64_hits", "query": "SELECT count() FROM hits_100m_single WHERE NOT ignore(base64Encode(MobilePhoneModel))"}, {"oldTime": 0.0958, "newTime": 0.0933, "relativeDifference": -0.027, "quantiles": [0.002, 0.015, 0.102, 0.115], "testName": "string_sort", "query": "SELECT MobilePhoneModel, PageCharset FROM hits_100m_single ORDER BY MobilePhoneModel, PageCharset LIMIT 10"}, {"oldTime": 0.1161, "newTime": 0.1043, "relativeDifference": -0.102, "quantiles": [0.004, 0.041, 0.102, 0.116], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1953, "newTime": 0.1723, "relativeDifference": -0.118, "quantiles": [0.054, 0.073, 0.101, 0.108], "testName": "math", "query": "SELECT count() FROM numbers(10000000) WHERE NOT ignore(cbrt(toFloat64(number)))"}, {"oldTime": 0.1272, "newTime": 0.1272, "relativeDifference": 0.0, "quantiles": [0.0, 0.036, 0.101, 0.117], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1615, "newTime": 0.181, "relativeDifference": 0.12, "quantiles": [0.004, 0.041, 0.098, 0.104], "testName": "sort", "query": "SELECT sum(key) FROM (SELECT * FROM rand_1k_10m_32 ORDER BY key)"}, {"oldTime": 0.1105, "newTime": 0.1069, "relativeDifference": -0.033, "quantiles": [0.009, 0.047, 0.097, 0.108], "testName": "trim_whitespace", "query": "SELECT replaceRegexpAll(value, \\'^ *| *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.0507, "newTime": 0.0495, "relativeDifference": -0.024, "quantiles": [0.007, 0.016, 0.093, 0.101], "testName": "collations", "query": "SELECT Title FROM test.hits ORDER BY Title DESC LIMIT 1000, 10"}, {"oldTime": 0.0316, "newTime": 0.0348, "relativeDifference": 0.101, "quantiles": [0.029, 0.046, 0.092, 0.105], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15)(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null"}, {"oldTime": 0.9232, "newTime": 0.8192, "relativeDifference": -0.113, "quantiles": [0.031, 0.055, 0.092, 0.111], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.9176, "newTime": 0.8157, "relativeDifference": -0.112, "quantiles": [0.039, 0.062, 0.09, 0.103], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r ON l.i64 = r.i64 WHERE i32 = 200042"}, {"oldTime": 0.0441, "newTime": 0.0439, "relativeDifference": -0.005, "quantiles": [0.003, 0.023, 0.086, 0.102], "testName": "jit_large_requests", "query": "\\n        SELECT\\n            COUNT()\\n        FROM\\n            jit_test\\n        WHERE\\n            NOT ignore(a / b + c / d + e / f + g / h + i / j)\\n        SETTINGS\\n            compile_expressions = 0;\\n    "}, {"oldTime": 0.076, "newTime": 0.0802, "relativeDifference": 0.055, "quantiles": [0.001, 0.007, 0.084, 0.109], "testName": "distributed_aggregation", "query": "select count() from (select sipHash64(zero) from zeros_mt(100000000) union all select sipHash64(zero) from zeros_mt(100000000))"}, {"oldTime": 0.1108, "newTime": 0.1119, "relativeDifference": 0.009, "quantiles": [0.003, 0.011, 0.078, 0.106], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_NONE (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0528, "newTime": 0.0489, "relativeDifference": -0.074, "quantiles": [0.002, 0.022, 0.063, 0.107], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(100000)) settings max_rows_to_read=1, read_overflow_mode=\\'break\\'"}], "runErrors": [], "skipped": [{"testName": "IPv4", "reason": "Marked as broken (see compare.sh)"}, {"testName": "IPv6", "reason": "Marked as broken (see compare.sh)"}, {"testName": "modulo", "reason": "Marked as broken (see compare.sh)"}, {"testName": "parse_engine_file", "reason": "Marked as broken (see compare.sh)"}, {"testName": "number_formatting_formats", "reason": "Marked as broken (see compare.sh)"}, {"testName": "select_format", "reason": "Marked as broken (see compare.sh)"}, {"testName": "arithmetic", "reason": "Marked as broken (see compare.sh)"}, {"testName": "cryptographic_hashes", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_medium", "reason": "Marked as broken (see compare.sh)"}, {"testName": "logical_functions_small", "reason": "Marked as broken (see compare.sh)"}, {"testName": "agg_functions_min_max_any", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "columns_hashing", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "date_time", "reason": "Test is tagged as long."}, {"testName": "float_formatting", "reason": "Test is tagged as long."}, {"testName": "float_parsing", "reason": "Test is tagged as long."}, {"testName": "if_to_multiif", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "insert_values_with_expressions", "reason": "clickhouse_driver.errors.ServerException: Code: 107."}, {"testName": "leftpad", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "nyc_taxi", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "set", "reason": "Test is tagged as long."}], "badTests": [{"testName": "codecs_int_insert", "unstable": 9.0, "changedPerf": 0.0, "total": 9.0}, {"testName": "general_purpose_hashes", "unstable": 6.0, "changedPerf": 0.0, "total": 6.0}, {"testName": "website", "unstable": 1.0, "changedPerf": 1.0, "total": 2.0}, {"testName": "joins_in_memory", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "mingroupby-orderbylimit1", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "linear_regression", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "math", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "sort", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "if_array_string", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "cpu_synthetic", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "base64_hits", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "collations", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "string_sort", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "set_index", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "trim_whitespace", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "distributed_aggregation", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "jit_large_requests", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}], "testTimes": [{"testName": "parallel_insert", "wallClockTime": 28.967, "clientTime": 25.948, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 25.948, "avgWallClockTime": 28.966, "shortestQuery": 25.948}, {"testName": "materialized_view_parallel_insert", "wallClockTime": 28.703, "clientTime": 25.747, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 25.747, "avgWallClockTime": 28.702, "shortestQuery": 25.747}, {"testName": "simple_join_query", "wallClockTime": 80.316, "clientTime": 52.278, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.223, "avgWallClockTime": 20.079, "shortestQuery": 12.818}, {"testName": "general_purpose_hashes", "wallClockTime": 1460.875, "clientTime": 1338.505, "total": 78.0, "ignoredQueries": 0.0, "longestQuery": 37.377, "avgWallClockTime": 18.729, "shortestQuery": 3.526}, {"testName": "empty_string_serialization", "wallClockTime": 17.792, "clientTime": 16.067, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 16.067, "avgWallClockTime": 17.791, "shortestQuery": 16.067}, {"testName": "trim_urls", "wallClockTime": 106.228, "clientTime": 97.272, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 41.383, "avgWallClockTime": 17.704, "shortestQuery": 8.182}, {"testName": "array_fill", "wallClockTime": 104.734, "clientTime": 95.767, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 26.59, "avgWallClockTime": 17.455, "shortestQuery": 7.304}, {"testName": "group_array_moving_sum", "wallClockTime": 202.945, "clientTime": 150.107, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 20.415, "avgWallClockTime": 16.912, "shortestQuery": 6.806}, {"testName": "prewhere", "wallClockTime": 16.362, "clientTime": 14.887, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.887, "avgWallClockTime": 16.361, "shortestQuery": 14.887}, {"testName": "first_significant_subdomain", "wallClockTime": 15.824, "clientTime": 14.395, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.395, "avgWallClockTime": 15.824, "shortestQuery": 14.395}, {"testName": "constant_column_search", "wallClockTime": 403.616, "clientTime": 369.355, "total": 28.0, "ignoredQueries": 0.0, "longestQuery": 34.223, "avgWallClockTime": 14.414, "shortestQuery": 5.095}, {"testName": "string_sort", "wallClockTime": 1109.965, "clientTime": 1017.082, "total": 84.0, "ignoredQueries": 0.0, "longestQuery": 35.242, "avgWallClockTime": 13.213, "shortestQuery": 0.607}, {"testName": "trim_numbers", "wallClockTime": 79.279, "clientTime": 72.528, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 29.421, "avgWallClockTime": 13.213, "shortestQuery": 2.57}, {"testName": "and_function", "wallClockTime": 25.838, "clientTime": 23.613, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 21.683, "avgWallClockTime": 12.918, "shortestQuery": 1.93}, {"testName": "merge_tree_many_partitions_2", "wallClockTime": 12.033, "clientTime": 4.357, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 4.357, "avgWallClockTime": 12.032, "shortestQuery": 4.357}, {"testName": "constant_column_comparison", "wallClockTime": 220.414, "clientTime": 201.928, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 14.434, "avgWallClockTime": 10.495, "shortestQuery": 3.855}, {"testName": "json_extract_rapidjson", "wallClockTime": 134.781, "clientTime": 123.479, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 18.217, "avgWallClockTime": 10.367, "shortestQuery": 3.531}, {"testName": "joins_in_memory", "wallClockTime": 339.911, "clientTime": 470.454, "total": 34.0, "ignoredQueries": 10.0, "longestQuery": 22.822, "avgWallClockTime": 9.997, "shortestQuery": 17.833}, {"testName": "array_reduce", "wallClockTime": 59.29, "clientTime": 54.253, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 14.096, "avgWallClockTime": 9.881, "shortestQuery": 3.877}, {"testName": "bloom_filter", "wallClockTime": 9.842, "clientTime": 8.865, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 8.865, "avgWallClockTime": 9.842, "shortestQuery": 8.865}, {"testName": "url_hits", "wallClockTime": 195.024, "clientTime": 186.0, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 22.676, "avgWallClockTime": 9.751, "shortestQuery": 5.905}, {"testName": "general_purpose_hashes_on_UUID", "wallClockTime": 621.144, "clientTime": 569.335, "total": 66.0, "ignoredQueries": 11.0, "longestQuery": 27.838, "avgWallClockTime": 9.411, "shortestQuery": 0.887}, {"testName": "base64_hits", "wallClockTime": 109.464, "clientTime": 100.146, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 17.478, "avgWallClockTime": 9.121, "shortestQuery": 0.904}, {"testName": "if_array_string", "wallClockTime": 53.079, "clientTime": 48.286, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 20.482, "avgWallClockTime": 8.846, "shortestQuery": 4.098}, {"testName": "sum_map", "wallClockTime": 35.043, "clientTime": 29.97, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.673, "avgWallClockTime": 8.76, "shortestQuery": 1.4}, {"testName": "string_join", "wallClockTime": 26.067, "clientTime": 19.757, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 8.302, "avgWallClockTime": 8.688, "shortestQuery": 4.406}, {"testName": "logical_functions_large", "wallClockTime": 85.856, "clientTime": 78.56, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 20.609, "avgWallClockTime": 8.585, "shortestQuery": 3.821}, {"testName": "synthetic_hardware_benchmark", "wallClockTime": 213.183, "clientTime": 194.903, "total": 26.0, "ignoredQueries": 0.0, "longestQuery": 38.019, "avgWallClockTime": 8.199, "shortestQuery": 0.903}, {"testName": "visit_param_extract_raw", "wallClockTime": 23.798, "clientTime": 21.654, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 15.219, "avgWallClockTime": 7.932, "shortestQuery": 2.076}, {"testName": "column_column_comparison", "wallClockTime": 140.92, "clientTime": 129.042, "total": 19.0, "ignoredQueries": 7.0, "longestQuery": 26.127, "avgWallClockTime": 7.416, "shortestQuery": 5.289}, {"testName": "math", "wallClockTime": 443.229, "clientTime": 406.241, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 19.264, "avgWallClockTime": 7.387, "shortestQuery": 2.221}, {"testName": "round_down", "wallClockTime": 35.451, "clientTime": 32.345, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 25.599, "avgWallClockTime": 7.09, "shortestQuery": 1.264}, {"testName": "right", "wallClockTime": 14.023, "clientTime": 12.784, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 6.738, "avgWallClockTime": 7.011, "shortestQuery": 6.046}, {"testName": "random_printable_ascii", "wallClockTime": 48.724, "clientTime": 44.435, "total": 7.0, "ignoredQueries": 1.0, "longestQuery": 15.094, "avgWallClockTime": 6.96, "shortestQuery": 2.933}, {"testName": "array_join", "wallClockTime": 41.707, "clientTime": 38.113, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 9.02, "avgWallClockTime": 6.951, "shortestQuery": 2.271}, {"testName": "sort", "wallClockTime": 69.226, "clientTime": 62.466, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 13.231, "avgWallClockTime": 6.922, "shortestQuery": 3.781}, {"testName": "cpu_synthetic", "wallClockTime": 322.89, "clientTime": 309.038, "total": 47.0, "ignoredQueries": 7.0, "longestQuery": 43.16, "avgWallClockTime": 6.87, "shortestQuery": 1.035}, {"testName": "ngram_distance", "wallClockTime": 109.638, "clientTime": 100.378, "total": 16.0, "ignoredQueries": 0.0, "longestQuery": 11.102, "avgWallClockTime": 6.852, "shortestQuery": 3.979}, {"testName": "vectorize_aggregation_combinators", "wallClockTime": 33.969, "clientTime": 27.38, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 11.429, "avgWallClockTime": 6.793, "shortestQuery": 0.578}, {"testName": "collations", "wallClockTime": 13.218, "clientTime": 12.012, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 10.863, "avgWallClockTime": 6.609, "shortestQuery": 1.148}, {"testName": "merge_tree_many_partitions", "wallClockTime": 6.458, "clientTime": 0.078, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.458, "shortestQuery": 0.0}, {"testName": "merge_tree_simple_select", "wallClockTime": 6.44, "clientTime": 0.014, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.44, "shortestQuery": 0.0}, {"testName": "uniq", "wallClockTime": 510.361, "clientTime": 467.325, "total": 80.0, "ignoredQueries": 6.0, "longestQuery": 43.559, "avgWallClockTime": 6.379, "shortestQuery": 0.885}, {"testName": "string_set", "wallClockTime": 42.98, "clientTime": 35.271, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 7.843, "avgWallClockTime": 6.139, "shortestQuery": 3.093}, {"testName": "inserts_arrays_lowcardinality", "wallClockTime": 11.345, "clientTime": 7.39, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.678, "avgWallClockTime": 5.672, "shortestQuery": 1.711}, {"testName": "base64", "wallClockTime": 50.096, "clientTime": 45.763, "total": 9.0, "ignoredQueries": 0.0, "longestQuery": 8.906, "avgWallClockTime": 5.566, "shortestQuery": 1.973}, {"testName": "json_extract_simdjson", "wallClockTime": 71.902, "clientTime": 65.914, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 12.643, "avgWallClockTime": 5.53, "shortestQuery": 2.803}, {"testName": "website", "wallClockTime": 382.72, "clientTime": 356.186, "total": 73.0, "ignoredQueries": 18.0, "longestQuery": 37.765, "avgWallClockTime": 5.242, "shortestQuery": 0.693}, {"testName": "merge_tree_huge_pk", "wallClockTime": 20.155, "clientTime": 1.718, "total": 4.0, "ignoredQueries": 3.0, "longestQuery": 1.252, "avgWallClockTime": 5.038, "shortestQuery": 1.252}, {"testName": "read_hits_with_aio", "wallClockTime": 19.526, "clientTime": 17.802, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 5.868, "avgWallClockTime": 4.881, "shortestQuery": 2.687}, {"testName": "range", "wallClockTime": 9.611, "clientTime": 8.711, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 6.11, "avgWallClockTime": 4.805, "shortestQuery": 2.601}, {"testName": "order_by_single_column", "wallClockTime": 33.612, "clientTime": 30.777, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 9.62, "avgWallClockTime": 4.801, "shortestQuery": 1.273}, {"testName": "mingroupby-orderbylimit1", "wallClockTime": 34.974, "clientTime": 30.651, "total": 8.0, "ignoredQueries": 1.0, "longestQuery": 9.455, "avgWallClockTime": 4.371, "shortestQuery": 0.871}, {"testName": "codecs_int_insert", "wallClockTime": 90.054, "clientTime": 79.924, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 7.628, "avgWallClockTime": 4.288, "shortestQuery": 1.21}, {"testName": "entropy", "wallClockTime": 37.554, "clientTime": 34.323, "total": 9.0, "ignoredQueries": 3.0, "longestQuery": 14.524, "avgWallClockTime": 4.172, "shortestQuery": 0.746}, {"testName": "scalar", "wallClockTime": 4.059, "clientTime": 1.384, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.384, "avgWallClockTime": 4.059, "shortestQuery": 1.384}, {"testName": "trim_whitespace", "wallClockTime": 23.769, "clientTime": 11.797, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.434, "avgWallClockTime": 3.961, "shortestQuery": 0.961}, {"testName": "order_by_read_in_order", "wallClockTime": 19.58, "clientTime": 17.631, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 8.929, "avgWallClockTime": 3.915, "shortestQuery": 1.365}, {"testName": "linear_regression", "wallClockTime": 19.49, "clientTime": 17.69, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 8.29, "avgWallClockTime": 3.897, "shortestQuery": 0.762}, {"testName": "set_hits", "wallClockTime": 23.016, "clientTime": 20.983, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 7.16, "avgWallClockTime": 3.836, "shortestQuery": 0.992}, {"testName": "array_auc", "wallClockTime": 3.618, "clientTime": 3.203, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 3.203, "avgWallClockTime": 3.618, "shortestQuery": 3.203}, {"testName": "functions_geo", "wallClockTime": 20.185, "clientTime": 18.409, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 5.543, "avgWallClockTime": 3.364, "shortestQuery": 1.687}, {"testName": "set_index", "wallClockTime": 15.854, "clientTime": 4.623, "total": 5.0, "ignoredQueries": 2.0, "longestQuery": 2.231, "avgWallClockTime": 3.17, "shortestQuery": 0.676}, {"testName": "if_array_num", "wallClockTime": 17.496, "clientTime": 15.928, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.487, "avgWallClockTime": 2.916, "shortestQuery": 1.835}, {"testName": "bitCount", "wallClockTime": 16.453, "clientTime": 14.99, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.711, "avgWallClockTime": 2.742, "shortestQuery": 1.661}, {"testName": "decimal_aggregates", "wallClockTime": 56.957, "clientTime": 52.001, "total": 21.0, "ignoredQueries": 6.0, "longestQuery": 5.416, "avgWallClockTime": 2.712, "shortestQuery": 0.861}, {"testName": "h3", "wallClockTime": 2.646, "clientTime": 2.332, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.332, "avgWallClockTime": 2.645, "shortestQuery": 2.332}, {"testName": "date_time_64", "wallClockTime": 42.134, "clientTime": 31.31, "total": 18.0, "ignoredQueries": 4.0, "longestQuery": 6.8, "avgWallClockTime": 2.34, "shortestQuery": 0.566}, {"testName": "least_greatest_hits", "wallClockTime": 6.718, "clientTime": 6.038, "total": 3.0, "ignoredQueries": 1.0, "longestQuery": 3.622, "avgWallClockTime": 2.239, "shortestQuery": 2.175}, {"testName": "empty_string_deserialization", "wallClockTime": 1.992, "clientTime": 0.379, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 1.991, "shortestQuery": 0.0}, {"testName": "distributed_aggregation", "wallClockTime": 7.699, "clientTime": 6.933, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 1.771, "avgWallClockTime": 1.924, "shortestQuery": 1.709}, {"testName": "jit_large_requests", "wallClockTime": 3.478, "clientTime": 1.501, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.952, "avgWallClockTime": 1.738, "shortestQuery": 0.952}, {"testName": "merge_table_streams", "wallClockTime": 1.713, "clientTime": 1.365, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.365, "avgWallClockTime": 1.713, "shortestQuery": 1.365}, {"testName": "order_by_decimals", "wallClockTime": 8.506, "clientTime": 7.692, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 2.305, "avgWallClockTime": 1.701, "shortestQuery": 0.806}, {"testName": "pre_limit_no_sorting", "wallClockTime": 1.632, "clientTime": 1.389, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.389, "avgWallClockTime": 1.631, "shortestQuery": 1.389}, {"testName": "array_element", "wallClockTime": 4.565, "clientTime": 4.086, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 1.481, "avgWallClockTime": 1.521, "shortestQuery": 1.149}, {"testName": "int_parsing", "wallClockTime": 101.351, "clientTime": 92.772, "total": 83.0, "ignoredQueries": 0.0, "longestQuery": 4.033, "avgWallClockTime": 1.221, "shortestQuery": 0.613}, {"testName": "basename", "wallClockTime": 2.171, "clientTime": 1.882, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 1.027, "avgWallClockTime": 1.085, "shortestQuery": 0.854}, {"testName": "if_string_hits", "wallClockTime": 4.249, "clientTime": 3.8, "total": 4.0, "ignoredQueries": 2.0, "longestQuery": 2.048, "avgWallClockTime": 1.062, "shortestQuery": 1.049}, {"testName": "concat_hits", "wallClockTime": 23.74, "clientTime": 21.679, "total": 26.0, "ignoredQueries": 14.0, "longestQuery": 1.777, "avgWallClockTime": 0.913, "shortestQuery": 1.179}, {"testName": "bit_operations_fixed_string_numbers", "wallClockTime": 1.823, "clientTime": 1.569, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.945, "avgWallClockTime": 0.911, "shortestQuery": 0.623}, {"testName": "joins_in_memory_pmj", "wallClockTime": 20.971, "clientTime": 38.186, "total": 24.0, "ignoredQueries": 8.0, "longestQuery": 2.738, "avgWallClockTime": 0.873, "shortestQuery": 2.124}, {"testName": "great_circle_dist", "wallClockTime": 1.739, "clientTime": 1.496, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.96, "avgWallClockTime": 0.869, "shortestQuery": 0.96}, {"testName": "information_value", "wallClockTime": 1.721, "clientTime": 1.474, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.919, "avgWallClockTime": 0.86, "shortestQuery": 0.919}, {"testName": "jit_small_requests", "wallClockTime": 2.333, "clientTime": 1.962, "total": 3.0, "ignoredQueries": 2.0, "longestQuery": 1.268, "avgWallClockTime": 0.777, "shortestQuery": 1.268}, {"testName": "codecs_float_insert", "wallClockTime": 11.236, "clientTime": 9.372, "total": 15.0, "ignoredQueries": 5.0, "longestQuery": 0.964, "avgWallClockTime": 0.749, "shortestQuery": 0.574}, {"testName": "count", "wallClockTime": 0.72, "clientTime": 0.016, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.72, "shortestQuery": 0.0}, {"testName": "slices_hits", "wallClockTime": 1.441, "clientTime": 1.218, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.962, "avgWallClockTime": 0.72, "shortestQuery": 0.962}, {"testName": "analyze_array_tuples", "wallClockTime": 0.643, "clientTime": 0.487, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.643, "shortestQuery": 0.0}, {"testName": "format_date_time", "wallClockTime": 3.503, "clientTime": 3.122, "total": 6.0, "ignoredQueries": 3.0, "longestQuery": 0.672, "avgWallClockTime": 0.583, "shortestQuery": 0.641}, {"testName": "complex_array_creation", "wallClockTime": 1.156, "clientTime": 0.961, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.578, "shortestQuery": 0.0}, {"testName": "consistent_hashes", "wallClockTime": 3.433, "clientTime": 3.051, "total": 7.0, "ignoredQueries": 5.0, "longestQuery": 1.485, "avgWallClockTime": 0.49, "shortestQuery": 0.991}, {"testName": "date_parsing", "wallClockTime": 0.473, "clientTime": 0.333, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.472, "shortestQuery": 0.0}, {"testName": "conditional", "wallClockTime": 3.594, "clientTime": 3.193, "total": 8.0, "ignoredQueries": 6.0, "longestQuery": 0.7, "avgWallClockTime": 0.449, "shortestQuery": 0.605}, {"testName": "early_constant_folding", "wallClockTime": 0.418, "clientTime": 0.283, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.418, "shortestQuery": 0.0}, {"testName": "fixed_string16", "wallClockTime": 0.398, "clientTime": 0.269, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.398, "shortestQuery": 0.0}, {"testName": "cidr", "wallClockTime": 0.742, "clientTime": 0.578, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.37, "shortestQuery": 0.0}, {"testName": "generate_table_function", "wallClockTime": 6.822, "clientTime": 6.122, "total": 19.0, "ignoredQueries": 17.0, "longestQuery": 1.286, "avgWallClockTime": 0.359, "shortestQuery": 0.645}, {"testName": "bit_operations_fixed_string", "wallClockTime": 1.303, "clientTime": 1.089, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.325, "shortestQuery": 0.0}, {"testName": "codecs_float_select", "wallClockTime": 4.659, "clientTime": 3.343, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.31, "shortestQuery": 0.0}, {"testName": "codecs_int_select", "wallClockTime": 5.75, "clientTime": 4.228, "total": 21.0, "ignoredQueries": 21.0, "longestQuery": 0.0, "avgWallClockTime": 0.273, "shortestQuery": 0.0}, {"testName": "functions_coding", "wallClockTime": 1.059, "clientTime": 0.873, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.264, "shortestQuery": 0.0}, {"testName": "if_string_const", "wallClockTime": 1.01, "clientTime": 0.83, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.252, "shortestQuery": 0.0}, {"testName": "round_methods", "wallClockTime": 2.773, "clientTime": 2.441, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.184, "shortestQuery": 0.0}, {"testName": "bounding_ratio", "wallClockTime": 0.348, "clientTime": 0.224, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.173, "shortestQuery": 0.0}], "slowOnClient": [], "allQueries": 1234, "timePerformance": {"analyze_array_tuples": {"difference": [-0.0009], "newTime": [0.021]}, "and_function": {"difference": [0.0015, -0.068], "newTime": [0.0879, 0.9519]}, "array_auc": {"difference": [0.0003], "newTime": [0.1473]}, "array_element": {"difference": [-0.002, -0.0007, -0.0041], "newTime": [0.0653, 0.0675, 0.0488]}, "array_fill": {"difference": [0.0005, -0.0095, -0.0158, -0.0127, -0.0429, -0.0167], "newTime": [0.4368, 0.3251, 0.3714, 1.2007, 0.9241, 1.0437]}, "array_join": {"difference": [0.0162, -0.0017, 0.0032, 0.0014, 0.0025, 0.0086], "newTime": [0.4099, 0.4112, 0.1046, 0.3125, 0.1972, 0.3085]}, "array_reduce": {"difference": [-0.0088, -0.0131, -0.0064, -0.0093, 0.0192, 0.0318], "newTime": [0.1716, 0.2042, 0.4052, 0.597, 0.4338, 0.6543]}, "base64": {"difference": [0.0002, -0.0006, -0.0001, 0.0034, 0.0034, 0.0014, 0.0025, 0.0024, 0.0025], "newTime": [0.0899, 0.1886, 0.1304, 0.2022, 0.4061, 0.234, 0.1998, 0.4025, 0.233]}, "base64_hits": {"difference": [-0.0027, -0.001, 0.0355, -0.003, -0.0015, -0.0002, -0.0039, -0.0004, -0.0009, -0.0018, -0.0118, -0.0161], "newTime": [0.0386, 0.0836, 0.4717, 0.4559, 0.0546, 0.1394, 0.7697, 0.7858, 0.052, 0.1332, 0.7605, 0.7864]}, "basename": {"difference": [0.001, 0.0008], "newTime": [0.0386, 0.0469]}, "bitCount": {"difference": [0.0027, -0.0018, -0.0023, -0.0026, -0.0033, 0.0015], "newTime": [0.0767, 0.1459, 0.0964, 0.1674, 0.097, 0.0941]}, "bit_operations_fixed_string": {"difference": [0.0002, 0.0, -0.0006, -0.0001], "newTime": [0.0121, 0.0108, 0.012, 0.012]}, "bit_operations_fixed_string_numbers": {"difference": [0.0009, -0.0003], "newTime": [0.0431, 0.028]}, "bloom_filter": {"difference": [-0.0032], "newTime": [0.4]}, "bounding_ratio": {"difference": [0.0, 0.0003], "newTime": [0.0051, 0.0053]}, "cidr": {"difference": [-0.0003, 0.0006], "newTime": [0.0096, 0.0147]}, "codecs_float_insert": {"difference": [0.0002, 0.0009, -0.001, 0.0007, -0.0004, 0.0012, -0.0003, -0.0006, -0.0004, -0.0001, -0.0002, -0.0006, -0.0009, -0.0003, 0.0001], "newTime": [0.0427, 0.0429, 0.039, 0.0301, 0.0422, 0.0297, 0.0295, 0.0156, 0.0152, 0.0287, 0.0139, 0.0256, 0.0175, 0.017, 0.0298]}, "codecs_float_select": {"difference": [-0.0002, 0.0, 0.0, -0.0001, -0.0001, -0.0002, -0.0005, -0.0001, 0.0001, 0.0, -0.0002, -0.0004, 0.0002, -0.0002, 0.0], "newTime": [0.0158, 0.0129, 0.006, 0.0045, 0.0126, 0.016, 0.0141, 0.0043, 0.0044, 0.013, 0.008, 0.0127, 0.0048, 0.0046, 0.0126]}, "codecs_int_insert": {"difference": [0.0, -0.0001, -0.0029, 0.0036, -0.0015, 0.0008, -0.007, -0.0118, -0.0081, 0.0057, 0.0127, -0.0059, 0.0056, 0.001, 0.01, -0.0142, 0.0005, 0.011, 0.0011, 0.0026, 0.0003], "newTime": [0.1272, 0.219, 0.2124, 0.2112, 0.1365, 0.1833, 0.3433, 0.1043, 0.2451, 0.2593, 0.1245, 0.1081, 0.1512, 0.1596, 0.1094, 0.0468, 0.1787, 0.1795, 0.1119, 0.1329, 0.2708]}, "codecs_int_select": {"difference": [-0.0002, -0.0002, -0.0003, -0.0008, -0.0002, 0.0002, -0.0003, 0.0001, 0.0, -0.0005, -0.0002, -0.0008, -0.0005, -0.0005, 0.0002, -0.0001, -0.0009, 0.0005, -0.0001, -0.0005, -0.0001], "newTime": [0.0044, 0.0113, 0.0096, 0.0111, 0.0046, 0.0108, 0.0155, 0.0046, 0.0159, 0.0143, 0.0044, 0.0042, 0.0081, 0.0046, 0.0051, 0.0057, 0.0082, 0.0115, 0.0044, 0.0105, 0.0158]}, "collations": {"difference": [-0.0106, -0.0012], "newTime": [0.4808, 0.0495]}, "column_column_comparison": {"difference": [-0.0001, -0.0031, -0.0015, 0.0006, 0.0049, -0.0127, 0.0002, 0.005, 0.0012, -0.0001, 0.004, 0.0067, 0.0001, 0.0001, -0.004, 0.0084, -0.0066, -0.0002, 0.0009], "newTime": [0.001, 0.6081, 0.239, 0.0018, 0.2572, 0.9055, 0.0014, 0.2745, 0.2572, 0.001, 0.6301, 0.2638, 0.0012, 0.0013, 0.6639, 0.2608, 1.1834, 0.0012, 0.3093]}, "complex_array_creation": {"difference": [-0.0001, 0.0], "newTime": [0.0222, 0.0205]}, "concat_hits": {"difference": [-0.0003, 0.0, -0.0001, 0.0001, -0.0007, 0.0005, -0.0004, 0.0033, -0.0017, 0.0008, 0.0015, 0.0005, 0.0035, -0.0008, 0.0006, 0.0003, 0.0002, 0.0004, -0.0007, -0.0027, 0.0002, 0.0012, 0.0008, 0.0003, 0.0026, 0.0038], "newTime": [0.0156, 0.0147, 0.0123, 0.0107, 0.0154, 0.0172, 0.0117, 0.0552, 0.0689, 0.0567, 0.0642, 0.0649, 0.0803, 0.0151, 0.0151, 0.0132, 0.0108, 0.0538, 0.0164, 0.0695, 0.0126, 0.0181, 0.0573, 0.066, 0.0638, 0.0815]}, "conditional": {"difference": [-0.0002, -0.001, 0.0, -0.0002, -0.0002, -0.0013, -0.0002, 0.0002], "newTime": [0.015, 0.026, 0.0086, 0.0132, 0.0195, 0.0309, 0.012, 0.0162]}, "consistent_hashes": {"difference": [0.0, -0.0007, -0.0003, -0.0005, -0.0007, 0.0001, -0.0005], "newTime": [0.0044, 0.0671, 0.0449, 0.0053, 0.0051, 0.005, 0.0047]}, "constant_column_comparison": {"difference": [0.0163, 0.0108, 0.008, 0.0068, 0.0035, 0.0116, 0.0018, 0.0051, 0.0018, 0.0001, -0.0002, -0.0054, 0.0033, 0.0021, -0.0036, 0.0234, 0.0094, 0.007, 0.0054, 0.0041, 0.0091], "newTime": [0.4722, 0.5014, 0.5025, 0.3924, 0.4532, 0.4566, 0.496, 0.558, 0.5508, 0.1755, 0.2102, 0.2096, 0.1946, 0.2278, 0.2269, 0.546, 0.6176, 0.6196, 0.5333, 0.614, 0.661]}, "constant_column_search": {"difference": [0.001, -0.0027, -0.0038, -0.0086, 0.015, -0.0113, -0.001, -0.0089, 0.0028, -0.0051, 0.0045, 0.0188, 0.001, -0.0046, -0.001, 0.0044, 0.0019, 0.0039, 0.0159, -0.0012, 0.0268, -0.0015, -0.0055, -0.0047, 0.0099, 0.0003, 0.0076, -0.0102], "newTime": [0.2327, 0.2308, 0.8928, 1.0369, 1.5567, 1.0739, 0.4675, 0.5657, 0.5304, 0.8635, 0.5987, 0.9984, 0.4236, 0.3214, 0.3449, 0.5005, 0.3692, 0.4717, 1.1621, 0.3727, 1.0947, 0.426, 0.4683, 0.4405, 0.3326, 0.2534, 0.3375, 0.3909]}, "count": {"difference": [0.0], "newTime": [0.0006]}, "cpu_synthetic": {"difference": [-0.0027, -0.0062, -0.0089, -0.0045, -0.0007, -0.0001, -0.0008, -0.0004, -0.0071, -0.0001, -0.0002, -0.0006, 0.0013, 0.0037, 0.0015, 0.0009, -0.0101, -0.006, -0.0091, 0.0022, -0.0031, -0.0161, 0.0005, -0.0013, -0.0005, -0.0018, 0.0059, 0.0024, 0.0031, -0.0002, 0.0019, 0.0058, -0.0003, 0.0004, -0.0002, 0.0003, -0.0001, 0.0001, -0.0002, -0.0023, -0.0025, -0.0019, 0.0057, -0.0007, -0.0005], "newTime": [0.174, 0.2612, 0.4742, 1.0578, 0.9066, 0.046, 0.0655, 0.2708, 0.3378, 0.0666, 0.0788, 0.1223, 0.4313, 0.2558, 0.2608, 0.2768, 1.9511, 0.124, 1.1194, 0.0966, 0.1616, 0.449, 0.627, 0.1621, 0.1977, 0.3253, 0.8511, 0.0546, 0.4381, 0.4381, 0.4786, 0.1047, 0.0175, 0.0218, 0.0182, 0.0244, 0.0195, 0.0173, 0.0167, 0.0686, 0.0706, 0.0702, 0.1167, 0.1206, 0.1508]}, "date_parsing": {"difference": [0.0008], "newTime": [0.0139]}, "date_time_64": {"difference": [-0.0005, -0.0002, -0.0008, 0.0002, 0.0001, -0.0004, -0.0011, 0.0045, 0.0, -0.001, 0.001, 0.0086, -0.0006, -0.0008, -0.0008, 0.0037, -0.0002, -0.0009], "newTime": [0.0196, 0.0335, 0.0494, 0.0212, 0.0251, 0.0256, 0.1172, 0.1371, 0.0634, 0.0644, 0.0701, 0.2211, 0.0183, 0.0331, 0.1582, 0.3131, 0.0193, 0.034]}, "decimal_aggregates": {"difference": [0.0004, -0.0005, -0.0004, -0.0036, -0.0024, -0.0004, 0.0004, -0.0003, -0.0004, 0.0015, 0.0004, -0.0015, -0.0029, -0.0015, -0.002, 0.0009, -0.0019, -0.004, -0.0007, -0.0001, -0.0002], "newTime": [0.0058, 0.0025, 0.0029, 0.2378, 0.1536, 0.1586, 0.0085, 0.0041, 0.0049, 0.248, 0.1551, 0.1596, 0.2397, 0.1496, 0.1534, 0.1624, 0.1536, 0.1552, 0.0866, 0.0386, 0.0678]}, "distributed_aggregation": {"difference": [0.0042, 0.0006, -0.0001, 0.0003], "newTime": [0.0802, 0.0766, 0.0755, 0.0762]}, "early_constant_folding": {"difference": [0.0001], "newTime": [0.0122]}, "empty_string_deserialization": {"difference": [0.0001], "newTime": [0.017]}, "empty_string_serialization": {"difference": [-0.0044], "newTime": [0.7349]}, "entropy": {"difference": [0.0002, -0.0001, -0.0005, 0.0005, 0.0002, 0.0003, -0.017, -0.0254, -0.0016], "newTime": [0.0497, 0.0738, 0.0164, 0.0092, 0.0059, 0.056, 0.6478, 0.6418, 0.0323]}, "first_significant_subdomain": {"difference": [0.002], "newTime": [0.6567]}, "fixed_string16": {"difference": [-0.0001], "newTime": [0.0114]}, "format_date_time": {"difference": [-0.0009, 0.0001, -0.0003, 0.0001, 0.0, -0.0008], "newTime": [0.0245, 0.018, 0.0297, 0.0288, 0.0081, 0.0288]}, "functions_coding": {"difference": [-0.0001, 0.0003, 0.0, 0.0003], "newTime": [0.0075, 0.0128, 0.0083, 0.0103]}, "functions_geo": {"difference": [0.0, 0.0011, -0.0096, 0.0012, 0.0011, -0.0002], "newTime": [0.0762, 0.0828, 0.2473, 0.1485, 0.1287, 0.1486]}, "general_purpose_hashes": {"difference": [0.0469, -0.0743, 0.0334, -0.0179, -0.0152, 0.0062, 0.0035, 0.0274, 0.0001, -0.0008, 0.0048, 0.0478, -0.0003, -0.0291, -0.0019, -0.0111, 0.015, -0.0346, -0.0081, -0.0103, 0.0074, 0.0433, 0.0066, -0.0181, -0.0025, -0.0568, 0.0136, 0.0016, 0.01, -0.0008, -0.0076, 0.0003, -0.0042, -0.0014, 0.0007, -0.0004, 0.0029, -0.0029, -0.0043, 0.0006, 0.0001, 0.0058, -0.0032, -0.0143, 0.0116, -0.0006, 0.0033, -0.0011, 0.0011, 0.0031, 0.006, 0.0013, -0.0557, -0.057, -0.0074, -0.0274, 0.0109, -0.078, 0.0869, -0.0152, -0.0169, 0.0613, -0.0198, 0.0097, 0.0004, -0.0054, 0.0054, -0.0067, 0.0167, 0.0173, -0.0074, 0.0181, -0.0237, -0.0009, 0.0068, -0.011, 0.0001, -0.0043], "newTime": [0.5316, 1.4143, 0.5868, 1.0129, 0.5566, 1.0593, 0.3838, 1.3454, 0.3629, 1.3145, 0.7458, 1.254, 0.5357, 1.1686, 0.5826, 1.1573, 0.7975, 1.611, 0.6465, 1.4292, 0.8341, 1.6987, 0.5537, 1.1902, 0.692, 1.2801, 0.2196, 0.547, 0.2367, 0.399, 0.224, 0.4016, 0.1683, 0.5136, 0.159, 0.4876, 0.2947, 0.4609, 0.2224, 0.4506, 0.2409, 0.4488, 0.3244, 0.6507, 0.2723, 0.5383, 0.3228, 0.6281, 0.2237, 0.4478, 0.2823, 0.4965, 1.1137, 0.6277, 0.5735, 1.2769, 1.3051, 0.5103, 0.7621, 0.5788, 0.5867, 0.7899, 0.5496, 0.6001, 0.5324, 1.3453, 1.2152, 1.2286, 1.3992, 1.392, 1.2354, 1.2362, 1.2519, 1.2594, 1.2321, 1.2444, 1.2468, 1.2456]}, "general_purpose_hashes_on_UUID": {"difference": [0.0, 0.0002, -0.0002, -0.0001, 0.0002, -0.0004, -0.0005, 0.0007, -0.0002, 0.0005, -0.0007, -0.0003, 0.0006, 0.0002, -0.0015, -0.0001, -0.0022, -0.0013, 0.0002, 0.0001, 0.0004, -0.0007, -0.0314, -0.0278, -0.0285, -0.0268, -0.0091, -0.0014, -0.0025, 0.0003, 0.005, 0.0074, -0.0015, -0.0167, 0.0283, -0.002, 0.0249, -0.0148, 0.0031, -0.0074, 0.003, 0.0017, 0.0059, 0.0027, 0.0002, -0.0027, 0.0018, -0.0027, 0.0079, -0.0055, 0.0018, 0.0017, -0.0016, 0.0054, 0.0032, 0.0005, 0.0, 0.0091, -0.0008, -0.0018, 0.0035, 0.0072, -0.008, -0.0001, -0.0084, -0.0036], "newTime": [0.0398, 0.0409, 0.0471, 0.0469, 0.0427, 0.0417, 0.0408, 0.044, 0.0437, 0.0431, 0.0423, 0.0179, 0.0184, 0.0206, 0.0202, 0.0189, 0.0206, 0.0187, 0.0197, 0.0195, 0.0191, 0.019, 0.6038, 0.4252, 0.6584, 0.4948, 1.2581, 1.0918, 1.2232, 1.0407, 0.8774, 0.7163, 0.8285, 0.6761, 0.7499, 0.5765, 1.0326, 0.8563, 0.9967, 0.8246, 0.8685, 0.7089, 0.8665, 0.7057, 0.2668, 0.1801, 0.2686, 0.1987, 0.4706, 0.3974, 0.4513, 0.3946, 0.3223, 0.2758, 0.321, 0.2674, 0.284, 0.2351, 0.3916, 0.3334, 0.3848, 0.3352, 0.3199, 0.2578, 0.3395, 0.2901]}, "generate_table_function": {"difference": [0.0002, 0.0, 0.0, -0.0001, -0.0004, -0.0008, 0.0001, -0.0002, 0.0011, 0.0, 0.0002, 0.0003, 0.0003, 0.0002, -0.0002, -0.0001, 0.0004, -0.0002, 0.0], "newTime": [0.0064, 0.009, 0.0165, 0.0058, 0.0081, 0.0233, 0.017, 0.0282, 0.0588, 0.0051, 0.0044, 0.0067, 0.0157, 0.0139, 0.0159, 0.006, 0.007, 0.0103, 0.0105]}, "great_circle_dist": {"difference": [-0.0003, 0.0005], "newTime": [0.0429, 0.0241]}, "group_array_moving_sum": {"difference": [0.0024, 0.0077, -0.0214, 0.003, -0.0056, -0.025, 0.0151, 0.0023, -0.0014, -0.0126, 0.0009, 0.0077], "newTime": [0.9194, 0.4239, 0.9186, 0.4269, 0.8998, 0.4186, 0.6133, 0.3107, 0.6402, 0.3144, 0.621, 0.3223]}, "h3": {"difference": [0.0016], "newTime": [0.1049]}, "if_array_num": {"difference": [-0.0009, 0.0031, 0.0011, -0.0026, 0.0055, 0.0019], "newTime": [0.0826, 0.0894, 0.115, 0.1249, 0.1519, 0.1589]}, "if_array_string": {"difference": [0.0052, -0.0022, 0.0022, -0.004, 0.0034, 0.0325], "newTime": [0.1893, 0.2634, 0.2199, 0.2557, 0.3375, 0.9502]}, "if_string_const": {"difference": [-0.0007, -0.0002, 0.0003, 0.0003], "newTime": [0.0091, 0.0094, 0.0105, 0.0078]}, "if_string_hits": {"difference": [-0.0012, 0.0003, -0.0019, -0.0034], "newTime": [0.0123, 0.0178, 0.0462, 0.0905]}, "information_value": {"difference": [0.0004, -0.0017], "newTime": [0.0418, 0.024]}, "inserts_arrays_lowcardinality": {"difference": [-0.0002, -0.0035], "newTime": [0.0766, 0.2561]}, "int_parsing": {"difference": [0.0, -0.0003, 0.0001, -0.0001, -0.0001, 0.0024, -0.0005, -0.0005, 0.0002, -0.0007, -0.0002, -0.0017, -0.0005, 0.0, -0.0002, 0.0056, -0.0003, -0.001, -0.0002, 0.0007, 0.0002, -0.0015, -0.0004, -0.0002, 0.0008, -0.002, -0.0003, 0.0003, 0.0002, 0.0, -0.0001, 0.0001, 0.0003, -0.0001, -0.0002, 0.0001, -0.0001, 0.0005, 0.0009, -0.0002, 0.0005, 0.0008, -0.0001, 0.0001, -0.0004, -0.0004, -0.0008, 0.0, 0.0, 0.0002, 0.0003, 0.0063, 0.0, 0.0004, 0.0022, -0.0003, -0.0002, 0.0001, -0.0003, 0.0014, 0.0, 0.0, 0.0, -0.0001, -0.0004, -0.0005, -0.0002, 0.0004, -0.0003, 0.0004, -0.0002, 0.0, 0.0003, -0.0005, 0.0001, -0.0002, -0.0024, -0.0017, -0.0005, 0.0016, -0.0006, 0.0001, 0.0001], "newTime": [0.0284, 0.0359, 0.0343, 0.0779, 0.0514, 0.0511, 0.0633, 0.0276, 0.034, 0.0566, 0.0564, 0.0588, 0.0694, 0.0769, 0.035, 0.1164, 0.0639, 0.0617, 0.0339, 0.0318, 0.0336, 0.0841, 0.0296, 0.0277, 0.0446, 0.0684, 0.0325, 0.0465, 0.0362, 0.0282, 0.0277, 0.0311, 0.0302, 0.0337, 0.0277, 0.0286, 0.0289, 0.0327, 0.0287, 0.0514, 0.0601, 0.0306, 0.0737, 0.029, 0.0282, 0.0378, 0.0358, 0.0296, 0.0379, 0.0336, 0.0557, 0.1762, 0.0309, 0.0619, 0.0764, 0.061, 0.0354, 0.0347, 0.0509, 0.0501, 0.081, 0.0814, 0.0338, 0.0357, 0.0518, 0.0608, 0.0323, 0.0321, 0.0314, 0.0469, 0.0295, 0.0286, 0.0422, 0.1828, 0.0376, 0.0398, 0.1463, 0.1356, 0.0503, 0.0561, 0.0585, 0.0284, 0.0338]}, "jit_large_requests": {"difference": [-0.0002, -0.0001], "newTime": [0.0439, 0.0236]}, "jit_small_requests": {"difference": [0.0002, 0.0006, -0.0002], "newTime": [0.0172, 0.0579, 0.0128]}, "joins_in_memory": {"difference": [-0.0004, 0.0003, 0.0001, 0.0, 0.0004, 0.0309, 0.0407, 0.0271, 0.0259, -0.0071, -0.0047, -0.0044, 0.0182, -0.1019, -0.104, -0.093, -0.0814, -0.0572, -0.0592, -0.0623, -0.0824], "newTime": [0.0023, 0.003, 0.0027, 0.0042, 0.0027, 0.8467, 0.8399, 0.8764, 1.011, 0.8494, 0.8345, 0.8624, 1.0038, 0.8157, 0.8192, 0.8508, 0.9962, 0.7893, 0.7894, 0.8088, 0.9243]}, "joins_in_memory_pmj": {"difference": [-0.0001, 0.0001, -0.0001, -0.0002, -0.0007, 0.0016, 0.0004, 0.0046, 0.0011, 0.0009, -0.0005, 0.0004], "newTime": [0.0037, 0.0038, 0.0038, 0.0051, 0.0975, 0.0981, 0.1062, 0.1261, 0.0974, 0.0967, 0.1049, 0.1245]}, "json_extract_rapidjson": {"difference": [0.0035, 0.0005, -0.0027, -0.0046, 0.0165, 0.0052, 0.0026, 0.0028, -0.0018, -0.0024, 0.0317, 0.0403, 0.003], "newTime": [0.1664, 0.8332, 0.5737, 0.59, 0.5667, 0.1653, 0.1611, 0.1621, 0.1614, 0.5522, 0.5831, 0.5812, 0.554]}, "json_extract_simdjson": {"difference": [0.0077, -0.0324, -0.0069, -0.0037, -0.002, 0.0038, -0.0047, 0.0027, 0.0016, -0.0037, -0.014, 0.0051, -0.0006], "newTime": [0.1332, 0.5538, 0.2501, 0.2814, 0.2443, 0.1304, 0.1243, 0.1292, 0.1314, 0.2439, 0.2535, 0.2428, 0.2396]}, "least_greatest_hits": {"difference": [-0.0044, -0.0071, 0.0038], "newTime": [0.0093, 0.159, 0.0991]}, "linear_regression": {"difference": [0.0015, 0.0032, 0.0011, -0.0086, -0.0006], "newTime": [0.0351, 0.0348, 0.2491, 0.3675, 0.0955]}, "logical_functions_large": {"difference": [0.0245, 0.0027, 0.003, 0.0027, 0.0191, 0.0006, -0.003, -0.0014, -0.0032, 0.0026], "newTime": [0.2593, 0.189, 0.9396, 0.2213, 0.4062, 0.3376, 0.3542, 0.3718, 0.3366, 0.1743]}, "materialized_view_parallel_insert": {"difference": [-0.0166], "newTime": [1.1631]}, "math": {"difference": [-0.0017, -0.0019, -0.0027, -0.0137, -0.0184, -0.023, 0.0017, -0.0002, -0.0044, 0.0007, 0.0003, -0.0002, -0.0004, -0.0002, -0.0013, 0.0007, -0.0011, 0.0006, -0.0016, -0.0047, 0.0004, 0.001, -0.0084, 0.0015, -0.0223, 0.0259, -0.0204, -0.0318, -0.0224, -0.0235, 0.0284, -0.0138, 0.031, -0.0006, 0.0219, -0.0309, 0.0, -0.0034, -0.0022, 0.004, 0.0348, 0.0071, 0.0043, -0.0003, -0.0193, -0.0002, -0.0005, -0.0004, 0.0133, -0.0016, 0.0048, 0.0017, 0.0012, -0.004, 0.0016, -0.0028, 0.0015, -0.0035, 0.0019, 0.0006], "newTime": [0.0991, 0.1037, 0.0999, 0.1735, 0.1783, 0.1723, 0.1544, 0.1589, 0.1563, 0.1455, 0.1469, 0.1466, 0.1948, 0.1974, 0.1932, 0.1584, 0.1598, 0.1611, 0.3339, 0.3381, 0.337, 0.1108, 0.1161, 0.1149, 0.4908, 0.5708, 0.5557, 0.5483, 0.6286, 0.6213, 0.3664, 0.4159, 0.4414, 0.363, 0.4703, 0.4114, 0.238, 0.1611, 0.2285, 0.4003, 0.5148, 0.473, 0.3909, 0.4201, 0.46, 0.233, 0.1608, 0.2215, 0.8665, 0.8763, 0.826, 0.2082, 0.1536, 0.1981, 0.2037, 0.2654, 0.2638, 0.214, 0.1624, 0.2066]}, "merge_table_streams": {"difference": [0.0], "newTime": [0.0621]}, "merge_tree_huge_pk": {"difference": [0.0001, 0.0024, -0.0005, -0.0001], "newTime": [0.0024, 0.057, 0.0097, 0.0046]}, "merge_tree_many_partitions": {"difference": [-0.0001], "newTime": [0.0011]}, "merge_tree_many_partitions_2": {"difference": [-0.0019], "newTime": [0.195]}, "merge_tree_simple_select": {"difference": [0.0], "newTime": [0.0006]}, "mingroupby-orderbylimit1": {"difference": [0.0063, 0.0048, 0.0017, -0.0014, -0.0114, 0.0029, 0.0057, 0.0035], "newTime": [0.2008, 0.2007, 0.0216, 0.0329, 0.1007, 0.306, 0.0907, 0.4322]}, "ngram_distance": {"difference": [-0.0007, 0.0001, 0.0009, 0.0011, -0.0017, -0.0003, -0.0004, -0.0002, -0.0004, 0.0029, -0.002, 0.0015, -0.001, -0.0016, 0.003, -0.0008], "newTime": [0.1806, 0.1823, 0.181, 0.1978, 0.2513, 0.199, 0.2003, 0.2034, 0.3495, 0.3634, 0.3621, 0.3298, 0.3508, 0.5029, 0.3501, 0.3481]}, "order_by_decimals": {"difference": [0.0002, 0.0003, 0.0011, 0.0005, -0.0003], "newTime": [0.1046, 0.0695, 0.0676, 0.0715, 0.0362]}, "order_by_read_in_order": {"difference": [0.0023, -0.0046, -0.0004, -0.0034, -0.0047], "newTime": [0.1329, 0.1235, 0.3988, 0.0673, 0.0603]}, "order_by_single_column": {"difference": [-0.002, -0.0026, 0.0001, 0.0001, -0.0007, 0.0025, 0.0048], "newTime": [0.1052, 0.0556, 0.1222, 0.1366, 0.1823, 0.3534, 0.4391]}, "parallel_insert": {"difference": [-0.0043], "newTime": [1.1805]}, "pre_limit_no_sorting": {"difference": [0.0017], "newTime": [0.0634]}, "prewhere": {"difference": [0.0033], "newTime": [0.6757]}, "random_printable_ascii": {"difference": [-0.0011, 0.0033, 0.0012, 0.0092, 0.014, 0.004, 0.0149], "newTime": [0.1867, 0.2032, 0.02, 0.1381, 0.6595, 0.1463, 0.6942]}, "range": {"difference": [0.004, -0.0009], "newTime": [0.2805, 0.118]}, "read_hits_with_aio": {"difference": [-0.0017, 0.0007, 0.0006, -0.0017], "newTime": [0.1229, 0.1699, 0.2658, 0.249]}, "right": {"difference": [0.0114, 0.0084], "newTime": [0.2824, 0.3109]}, "round_down": {"difference": [-0.0204, 0.0013, 0.0013, 0.002, -0.0001], "newTime": [1.1486, 0.0613, 0.0986, 0.0919, 0.0572]}, "round_methods": {"difference": [-0.0003, 0.0, 0.0001, -0.0004, -0.0001, 0.0, -0.0002, -0.0001, 0.0001, 0.0001, -0.0003, 0.0006, -0.0001, 0.0002, -0.0003], "newTime": [0.014, 0.0033, 0.004, 0.014, 0.0033, 0.0035, 0.0149, 0.0031, 0.004, 0.0162, 0.0028, 0.0046, 0.0134, 0.0031, 0.0035]}, "scalar": {"difference": [0.0025], "newTime": [0.0639]}, "set_hits": {"difference": [0.0, -0.0007, 0.0026, -0.0001, 0.0053, -0.0055], "newTime": [0.0687, 0.0442, 0.2801, 0.0912, 0.3282, 0.1396]}, "set_index": {"difference": [0.0, 0.0005, 0.0033, -0.0007, -0.0039], "newTime": [0.0167, 0.0064, 0.1023, 0.0293, 0.0489]}, "simple_join_query": {"difference": [-0.0094, -0.0032, 0.0114, -0.0078], "newTime": [0.5973, 0.5964, 0.588, 0.5912]}, "slices_hits": {"difference": [-0.0003, -0.0009], "newTime": [0.0112, 0.0431]}, "sort": {"difference": [0.0146, 0.0188, 0.0191, 0.0135, 0.0195, 0.0157, 0.0121, 0.0361, 0.0376, 0.0149], "newTime": [0.2199, 0.2413, 0.2906, 0.179, 0.181, 0.2368, 0.2197, 0.5638, 0.6191, 0.1822]}, "string_join": {"difference": [0.0042, -0.0042, 0.0006], "newTime": [0.38, 0.316, 0.2004]}, "string_set": {"difference": [-0.002, -0.0036, -0.0095, 0.0005, 0.0045, 0.0074, 0.0012], "newTime": [0.2786, 0.2087, 0.3495, 0.2592, 0.1654, 0.1954, 0.1401]}, "string_sort": {"difference": [-0.0002, -0.0012, 0.0005, -0.0013, -0.0025, 0.0075, 0.0047, 0.0296, -0.0014, 0.0045, 0.0021, 0.0015, -0.0038, -0.0043, -0.0016, 0.0052, -0.0069, -0.0008, -0.0006, 0.0073, -0.0016, -0.0038, -0.0031, -0.0074, 0.0018, 0.0314, 0.0038, -0.0119, -0.0001, -0.0132, -0.0003, -0.0072, 0.0014, -0.0459, 0.0005, -0.0174, 0.0043, 0.0138, -0.0195, 0.0136, 0.0127, -0.0025, 0.0005, 0.01, -0.0013, -0.0098, -0.0001, 0.0024, -0.0036, -0.0052, -0.0002, -0.0116, -0.0014, -0.013, 0.0035, 0.0145, -0.0006, 0.0061, -0.007, 0.0146, -0.0019, -0.0224, -0.0038, -0.0152, 0.0041, 0.0164, 0.0033, 0.0017, 0.0014, -0.0093, 0.0007, -0.0185, 0.0036, -0.0005, 0.0005, -0.004, -0.001, -0.0086, 0.0049, -0.0333, -0.0033, -0.0207, -0.0005, 0.0022], "newTime": [0.027, 0.1446, 0.0282, 0.146, 0.0933, 0.4477, 0.2174, 1.0889, 0.1088, 0.5743, 0.2525, 1.003, 0.2708, 0.9798, 0.0434, 0.2382, 0.0865, 0.4676, 0.0428, 0.2413, 0.2247, 1.0979, 0.1132, 0.675, 0.2655, 1.0847, 0.2892, 1.0404, 0.1573, 0.7954, 0.2031, 0.9876, 0.218, 1.0601, 0.1636, 0.7924, 0.2481, 1.0851, 0.4576, 1.6069, 0.4644, 1.4592, 0.0554, 0.2914, 0.1067, 0.4826, 0.1261, 0.6179, 0.2457, 0.9583, 0.0555, 0.2827, 0.2845, 1.0374, 0.3001, 1.0472, 0.1941, 0.7539, 0.2346, 0.9612, 0.2522, 1.0, 0.4747, 1.5802, 0.2761, 1.0586, 0.1957, 0.7956, 0.5468, 1.4778, 0.2159, 0.6975, 0.2592, 0.8709, 0.2754, 0.9395, 0.4726, 1.3919, 0.2976, 0.9789, 0.5396, 1.3695, 0.2228, 0.7029]}, "sum_map": {"difference": [-0.0045, -0.0465, -0.0004, 0.0162], "newTime": [0.0603, 0.5878, 0.0622, 0.619]}, "synthetic_hardware_benchmark": {"difference": [0.0008, -0.001, -0.0015, 0.0005, -0.0022, 0.0024, 0.0005, -0.0031, 0.0015, 0.0625, -0.0016, 0.001, 0.0019, 0.0033, 0.004, 0.0258, -0.0122, -0.0024, 0.0001, -0.0006, 0.0023, 0.0022, 0.0004, -0.0031, 0.0153, -0.0247], "newTime": [0.0518, 0.0396, 0.06, 0.0427, 0.1693, 0.1525, 0.1387, 0.1579, 0.1504, 0.7441, 0.1023, 0.0905, 0.0854, 0.0991, 0.0936, 0.446, 0.2931, 0.3423, 0.2039, 0.0978, 0.1735, 0.3705, 0.4877, 1.6876, 0.8538, 1.7129]}, "trim_numbers": {"difference": [-0.0004, -0.0003, 0.0386, -0.0103, 0.0447, -0.001], "newTime": [0.1184, 0.1171, 1.3498, 0.5098, 1.1089, 0.1273]}, "trim_urls": {"difference": [-0.0107, -0.0006, 0.0014, 0.0067, -0.0089, 0.0009], "newTime": [0.3726, 0.3888, 1.8849, 0.5494, 0.8365, 0.3739]}, "trim_whitespace": {"difference": [-0.0036, 0.0004, 0.0008, -0.0002, -0.0014, 0.0002], "newTime": [0.1069, 0.064, 0.0436, 0.1093, 0.101, 0.1045]}, "uniq": {"difference": [0.0003, -0.0009, 0.0009, 0.0011, 0.0005, 0.0006, 0.0011, -0.0019, -0.0034, -0.0045, 0.0025, 0.0008, 0.0001, 0.0003, 0.0003, 0.0003, -0.0065, -0.0024, -0.0063, -0.0025, 0.0008, -0.0055, -0.0042, -0.0129, -0.0018, -0.0071, 0.0063, 0.0029, -0.0187, -0.0074, -0.0033, -0.0025, 0.0007, -0.0008, 0.0008, 0.0007, 0.001, 0.0013, 0.002, -0.0046, -0.0045, -0.0025, 0.0006, -0.0003, -0.0001, -0.0004, -0.0007, -0.0008, -0.0017, -0.0015, -0.0003, 0.0009, 0.0036, 0.0018, 0.0041, -0.0086, -0.0092, 0.0088, -0.0002, 0.0, -0.0002, -0.0006, 0.0001, -0.0002, -0.0069, 0.0002, -0.0033, -0.0025, -0.006, -0.0017, -0.0081, -0.0039, -0.0056, 0.004, -0.0055, 0.0007, -0.0017, 0.0003, -0.0019, -0.0006], "newTime": [0.0196, 0.0691, 0.0468, 0.0479, 0.0495, 0.0529, 0.0583, 0.0699, 0.0936, 1.9719, 0.0467, 0.0196, 0.0192, 0.0193, 0.0197, 0.0195, 0.2617, 0.4156, 0.3882, 0.3857, 0.3865, 0.3833, 0.386, 0.3824, 0.3856, 0.4975, 0.4277, 0.3332, 1.0061, 0.3995, 0.3007, 0.3044, 0.0578, 0.1761, 0.1106, 0.1186, 0.135, 0.1478, 0.1562, 0.1629, 0.1876, 0.3807, 0.1131, 0.0573, 0.0692, 0.0596, 0.0571, 0.0566, 0.0405, 0.2241, 0.0777, 0.0892, 0.1055, 0.1234, 0.1482, 0.1877, 0.2597, 1.8188, 0.0856, 0.0403, 0.0406, 0.0403, 0.0398, 0.0398, 0.2741, 0.3482, 0.3442, 0.3481, 0.3424, 0.3446, 0.342, 0.3504, 0.3572, 1.3094, 0.3558, 0.296, 0.5277, 0.3154, 0.284, 0.2851]}, "url_hits": {"difference": [-0.0196, -0.0296, 0.0104, 0.0056, 0.001, 0.0155, 0.0123, -0.0006, 0.0025, 0.0064, 0.0129, 0.0002, -0.0007, 0.0062, 0.0048, 0.0068, -0.0075, 0.0129, -0.0013], "newTime": [1.0169, 0.7443, 0.3549, 0.3318, 0.3927, 0.4411, 0.411, 0.3219, 0.3629, 0.4387, 0.4677, 0.3851, 0.2995, 0.3187, 0.4555, 0.271, 0.3737, 0.4056, 0.3129]}, "vectorize_aggregation_combinators": {"difference": [-0.0146, -0.0003, -0.0001, -0.0038, -0.0042], "newTime": [0.5085, 0.0316, 0.0262, 0.3444, 0.3165]}, "visit_param_extract_raw": {"difference": [0.0008, 0.0133, 0.0043], "newTime": [0.0948, 0.6955, 0.1979]}, "website": {"difference": [-0.0127, -0.0018, -0.0052, -0.0023, 0.0004, 0.0107, 0.0086, 0.0, 0.0002, -0.0002, -0.0001, -0.0012, -0.0003, -0.0033, -0.0006, -0.0014, -0.0011, -0.0015, -0.0012, -0.0005, 0.0005, 0.006, 0.001, 0.0064, 0.0014, -0.0029, 0.0017, -0.0002, -0.002, -0.0084, 0.0005, -0.0042, 0.0001, -0.0027, -0.0002, -0.0038, -0.0014, 0.0007, -0.0001, -0.0157, -0.0129, 0.0033, -0.0022, -0.003, 0.0026, -0.0315, -0.0004, -0.005, -0.0047, -0.0023, 0.0013, 0.0, 0.006, -0.0002, 0.0012, -0.0019, -0.0072, 0.0012, -0.0001, 0.0, -0.0001, 0.0002, -0.0289, -0.0334, 0.0005, 0.0002, 0.0, -0.0004, 0.0017, 0.0, -0.0023, -0.0006], "newTime": [0.4446, 0.2065, 1.3637, 0.1641, 0.0062, 0.4798, 0.3538, 0.0461, 0.0848, 0.0229, 0.0763, 0.2018, 0.0377, 0.1756, 0.0322, 0.2706, 0.3517, 0.0535, 0.098, 0.0988, 0.0766, 0.763, 0.1243, 0.3123, 0.2649, 0.3415, 0.0561, 0.0318, 0.0448, 0.1554, 0.1948, 0.0748, 0.0248, 0.0903, 0.0318, 1.3466, 0.1552, 0.0111, 0.0126, 0.6011, 1.0153, 0.0616, 0.0966, 0.4117, 0.0466, 1.6941, 0.1955, 0.3985, 0.2352, 0.0621, 0.0096, 0.0008, 0.2792, 0.0007, 0.0071, 0.0173, 0.4554, 0.0847, 0.0108, 0.0048, 0.0162, 0.0066, 0.9103, 0.1449, 0.0191, 0.0066, 0.0029, 0.0102, 0.1273, 0.0414, 0.0689, 0.0417]}}, "reportErrors": []}
