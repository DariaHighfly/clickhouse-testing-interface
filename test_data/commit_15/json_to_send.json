{"commits": {"leftCommit": {"commit": "848e4a0541630aef09cd7fb4926c89b7bdd0c060", "author": "Alexey Milovidov <milovidov@yandex-team.ru>", "date": "Mon Apr 20 11:15:43 2020 +0300", "info": "Added a test for #2219"}, "rightCommit": {"commit": "ffcef46ac56fe7b57cd43171a75de06ad37114e4 (pr/merge)", "merge": "b58fa8585c b29bddac12", "author": "tavplubix <tavplubix@gmail.com>", "date": "Mon Apr 20 12:53:37 2020 +0000", "info": "Merge branch 'master' into database_atomic\nReal tested commit is:\nMerge b29bddac12fe2defa35e551b54f1940dc89ab2b5 into b58fa8585cda86978d63a15514b755bd92897f89"}}, "changes": [{"oldTime": 16.8371, "newTime": 13.4643, "relativeDifference": -0.201, "quantiles": [0.169, 0.183, 0.195, 0.198], "testName": "number_formatting_formats", "query": "INSERT INTO table_MySQLWire SELECT number FROM numbers(100000000)"}, {"oldTime": 0.2312, "newTime": 0.2774, "relativeDifference": 0.199, "quantiles": [0.079, 0.149, 0.19, 0.193], "testName": "logical_functions_large", "query": "SELECT count() FROM\\n        (SELECT materialize(0) AS x1, materialize(0) AS x2, materialize(0) AS x3, materialize(0) AS x4, materialize(0) AS x5, materialize(0) AS x6, materialize(0) AS x7, materialize(0) AS x8, materialize(0) AS x9, materialize(0) AS x10 FROM zeros(150000000))\\n    WHERE NOT ignore(and(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10))"}], "unstableQueries": [{"oldTime": 0.1935, "newTime": 0.2602, "relativeDifference": 0.344, "quantiles": [0.0, 0.018, 0.373, 0.382], "testName": "logical_functions_small", "query": "SELECT count() FROM test_logical_functions._2_1_UInt8 WHERE NOT ignore(xor(x1,x2))"}, {"oldTime": 0.0329, "newTime": 0.0332, "relativeDifference": 0.009, "quantiles": [0.008, 0.013, 0.369, 0.471], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, min(value)\\n         FROM mingroupby_orderbylimit1_111111_tuple\\n         group by key format Null;\\n    "}, {"oldTime": 0.1419, "newTime": 0.133, "relativeDifference": -0.063, "quantiles": [0.01, 0.065, 0.358, 0.451], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA1(toString(1000000000+number))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.3209, "newTime": 0.226, "relativeDifference": -0.296, "quantiles": [0.001, 0.154, 0.358, 0.404], "testName": "number_formatting_formats", "query": "INSERT INTO table_Null SELECT number FROM numbers(100000000)"}, {"oldTime": 0.1461, "newTime": 0.1254, "relativeDifference": -0.142, "quantiles": [0.017, 0.055, 0.315, 0.375], "testName": "cryptographic_hashes", "query": "SELECT ignore(halfMD5(materialize(\\'\\'))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.133, "newTime": 0.1461, "relativeDifference": 0.098, "quantiles": [0.036, 0.098, 0.31, 0.393], "testName": "cryptographic_hashes", "query": "SELECT ignore(MD5(materialize(\\'\\'))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.2693, "newTime": 0.1938, "relativeDifference": -0.281, "quantiles": [0.187, 0.231, 0.271, 0.281], "testName": "logical_functions_small", "query": "SELECT count() FROM test_logical_functions._2_0_UInt8 WHERE NOT ignore(and(x1,x2))"}, {"oldTime": 0.0696, "newTime": 0.0696, "relativeDifference": 0.0, "quantiles": [0.0, 0.005, 0.245, 0.508], "testName": "set_hits", "query": "SELECT count() FROM hits_100m_single WHERE UserID IN (SELECT UserID FROM hits_100m_single WHERE AdvEngineID != 0)"}, {"oldTime": 0.2, "newTime": 0.1686, "relativeDifference": -0.158, "quantiles": [0.087, 0.126, 0.241, 0.288], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA224(toString(1000000000+number))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.2596, "newTime": 0.2719, "relativeDifference": 0.047, "quantiles": [0.001, 0.041, 0.218, 0.24], "testName": "logical_functions_medium", "query": "SELECT count() FROM test_logical_functions._4_1_Nullable_Mixed WHERE NOT ignore(xor(x1,x2,x3,x4))"}, {"oldTime": 0.1751, "newTime": 0.1983, "relativeDifference": 0.132, "quantiles": [0.002, 0.059, 0.202, 0.22], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA256(toString(1000000000+number))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.1772, "newTime": 0.1904, "relativeDifference": 0.074, "quantiles": [0.074, 0.115, 0.195, 0.233], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA224(materialize(\\'\\'))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.1919, "newTime": 0.1551, "relativeDifference": -0.192, "quantiles": [0.049, 0.107, 0.193, 0.21], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA256(materialize(\\'\\'))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.0584, "newTime": 0.0614, "relativeDifference": 0.051, "quantiles": [0.042, 0.053, 0.191, 0.251], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_DoubleDelta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1355, "newTime": 0.1479, "relativeDifference": 0.091, "quantiles": [0.0, 0.091, 0.18, 0.255], "testName": "cryptographic_hashes", "query": "SELECT ignore(MD5(toString(1000000000+number))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.8995, "newTime": 0.9187, "relativeDifference": 0.021, "quantiles": [0.021, 0.065, 0.171, 0.231], "testName": "if_array_string", "query": "SELECT count() FROM zeros(10000000) WHERE NOT ignore(rand() % 2 ? materialize([\\'https://github.com/ClickHouse/ClickHouse/pull/1070\\', \\'https://www.google.ru/search?newwindow=1&site=&source=hp&q=zookeeper+wire+protocol+exists&oq=zookeeper+wire+protocol+exists&gs_l=psy-ab.3...330.6300.0.6687.33.28.0.0.0.0.386.4838.0j5j9j5.19.0....0...1.1.64.psy-ab..14.17.4448.0..0j35i39k1j0i131k1j0i22i30k1j0i19k1j33i21k1.r_3uFoNOrSU\\']) : emptyArrayString())"}, {"oldTime": 0.1335, "newTime": 0.1382, "relativeDifference": 0.035, "quantiles": [0.007, 0.07, 0.171, 0.269], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA1(materialize(\\'\\'))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.1093, "newTime": 0.1217, "relativeDifference": 0.113, "quantiles": [0.009, 0.074, 0.17, 0.178], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_NONE (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.8132, "newTime": 0.7704, "relativeDifference": -0.053, "quantiles": [0.047, 0.067, 0.162, 0.193], "testName": "number_formatting_formats", "query": "INSERT INTO table_Native SELECT number FROM numbers(100000000)"}, {"oldTime": 0.2407, "newTime": 0.2349, "relativeDifference": -0.025, "quantiles": [0.003, 0.012, 0.153, 0.188], "testName": "logical_functions_medium", "query": "SELECT count() FROM test_logical_functions._4_1_UInt8 WHERE NOT ignore(xor(x1,x2,x3,x4))"}, {"oldTime": 0.1152, "newTime": 0.1243, "relativeDifference": 0.078, "quantiles": [0.05, 0.086, 0.152, 0.171], "testName": "codecs_int_insert", "query": "INSERT INTO codec_seq_UInt64_Delta (n) SELECT number FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.184, "newTime": 0.1629, "relativeDifference": -0.115, "quantiles": [0.036, 0.107, 0.149, 0.16], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_T64 (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2756, "newTime": 0.267, "relativeDifference": -0.032, "quantiles": [0.004, 0.028, 0.149, 0.156], "testName": "logical_functions_small", "query": "SELECT count() FROM test_logical_functions._2_1_UInt8 WHERE NOT ignore(and(x1,x2))"}, {"oldTime": 0.1435, "newTime": 0.1386, "relativeDifference": -0.035, "quantiles": [0.027, 0.036, 0.138, 0.355], "testName": "cryptographic_hashes", "query": "SELECT ignore(halfMD5(toString(1000000000+number))) FROM numbers_mt(10000000) FORMAT Null"}, {"oldTime": 0.1171, "newTime": 0.1051, "relativeDifference": -0.103, "quantiles": [0.009, 0.094, 0.134, 0.145], "testName": "mingroupby-orderbylimit1", "query": "\\n         SELECT key, value\\n         FROM mingroupby_orderbylimit1_111111_key_value\\n         order by key, value limit 1 by key format Null;\\n     "}, {"oldTime": 0.0265, "newTime": 0.0256, "relativeDifference": -0.034, "quantiles": [0.006, 0.045, 0.125, 0.144], "testName": "codecs_float_insert", "query": "INSERT INTO codec_seq_Float64_Gorilla (n) SELECT number/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.0476, "newTime": 0.0476, "relativeDifference": 0.0, "quantiles": [0.001, 0.044, 0.125, 0.16], "testName": "trim_whitespace", "query": "SELECT replaceRegexpOne(value, \\'^ *\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.1186, "newTime": 0.1254, "relativeDifference": 0.057, "quantiles": [0.007, 0.06, 0.123, 0.143], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_LZ4 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.3289, "newTime": 0.2856, "relativeDifference": -0.132, "quantiles": [0.06, 0.093, 0.122, 0.125], "testName": "logical_functions_medium", "query": "SELECT count() FROM (SELECT materialize(toNullable(1)) AS x1, materialize(toNullable(1)) AS x2, materialize(toNullable(1)) AS x3 FROM zeros(20000000)) WHERE NOT ignore(and(x1,x2,x3))"}, {"oldTime": 0.0823, "newTime": 0.0756, "relativeDifference": -0.082, "quantiles": [0.009, 0.016, 0.122, 0.17], "testName": "website", "query": "SELECT URL, count() AS PageViews FROM hits_100m_single WHERE CounterID = 34 AND EventDate >= \\'2013-07-01\\' AND EventDate <= \\'2013-07-31\\' AND NOT DontCountHits AND NOT Refresh AND notEmpty(URL) GROUP BY URL ORDER BY PageViews DESC LIMIT 10"}, {"oldTime": 0.3975, "newTime": 0.4041, "relativeDifference": 0.016, "quantiles": [0.012, 0.04, 0.114, 0.138], "testName": "select_format", "query": "INSERT INTO table_RowBinary SELECT * FROM test.hits LIMIT 100000"}, {"oldTime": 0.1018, "newTime": 0.104, "relativeDifference": 0.021, "quantiles": [0.018, 0.055, 0.109, 0.131], "testName": "cpu_synthetic", "query": "SELECT quantilesExactIf(0.5, 0.9)(SendTiming, SendTiming > 0) FROM hits_100m_single"}, {"oldTime": 0.1621, "newTime": 0.1585, "relativeDifference": -0.023, "quantiles": [0.022, 0.051, 0.108, 0.117], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA1(materialize(\\'\\'))) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0736, "newTime": 0.0762, "relativeDifference": 0.035, "quantiles": [0.012, 0.051, 0.106, 0.123], "testName": "trim_whitespace", "query": "SELECT replaceRegexpOne(value, \\' *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.3204, "newTime": 0.2889, "relativeDifference": -0.099, "quantiles": [0.025, 0.052, 0.098, 0.231], "testName": "logical_functions_medium", "query": "SELECT count() FROM test_logical_functions._4_1_Mixed WHERE NOT ignore(xor(x1,x2,x3,x4))"}, {"oldTime": 0.1357, "newTime": 0.1331, "relativeDifference": -0.02, "quantiles": [0.001, 0.018, 0.095, 0.11], "testName": "random_printable_ascii", "query": "SELECT count() FROM zeros(1000000) WHERE NOT ignore(randomPrintableASCII(100))"}, {"oldTime": 0.0337, "newTime": 0.0328, "relativeDifference": -0.027, "quantiles": [0.024, 0.029, 0.095, 0.13], "testName": "entropy", "query": "SELECT entropy(URLDomain) FROM test.hits"}, {"oldTime": 0.9315, "newTime": 0.8204, "relativeDifference": -0.12, "quantiles": [0.046, 0.052, 0.091, 0.102], "testName": "joins_in_memory", "query": "SELECT COUNT() FROM ints l LEFT JOIN ints r USING i64 WHERE i32 = 200042"}, {"oldTime": 0.065, "newTime": 0.0565, "relativeDifference": -0.131, "quantiles": [0.006, 0.031, 0.088, 0.114], "testName": "parse_engine_file", "query": "SELECT * FROM table_TabSeparated FORMAT Null"}, {"oldTime": 0.0291, "newTime": 0.029, "relativeDifference": -0.004, "quantiles": [0.001, 0.023, 0.088, 0.105], "testName": "codecs_float_insert", "query": "INSERT INTO codec_rnd_Float64_ZSTD (n) SELECT (intHash64(number) - 4294967295)/pi() FROM system.numbers LIMIT 1000000 SETTINGS max_threads=1"}, {"oldTime": 0.1065, "newTime": 0.1014, "relativeDifference": -0.048, "quantiles": [0.025, 0.057, 0.087, 0.119], "testName": "trim_whitespace", "query": "SELECT replaceRegexpAll(value, \\'^ *| *$\\', \\'\\') FROM whitespaces LIMIT 10000000 FORMAT Null"}, {"oldTime": 0.1764, "newTime": 0.1896, "relativeDifference": 0.074, "quantiles": [0.008, 0.033, 0.085, 0.106], "testName": "cryptographic_hashes", "query": "SELECT ignore(MD5(materialize(\\'\\'))) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.0593, "newTime": 0.0608, "relativeDifference": 0.025, "quantiles": [0.0, 0.021, 0.083, 0.102], "testName": "website", "query": "SELECT UserID, SearchPhrase, count() FROM hits_10m_single GROUP BY UserID, SearchPhrase LIMIT 10"}, {"oldTime": 0.5535, "newTime": 0.5119, "relativeDifference": -0.076, "quantiles": [0.009, 0.036, 0.083, 0.1], "testName": "cryptographic_hashes", "query": "SELECT ignore(SHA224(materialize(\\'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sollicitudin nisi ac erat mollis dapibus. Maecenas leo purus, bibendum eu erat eget, iaculis molestie tortor. Phasellus maximus odio nec mauris ultrices dictum. Morbi efficitur nisl eget congue mollis. Vestibulum pharetra diam vitae urna interdum, eget ultricies justo sollicitudin. Nunc sit amet purus id leo tempus dignissim. Donec ac lacus ut orci tempus scelerisque quis ultricies nibh. Nullam lobortis, erat ac ullamcorper interdum, odio nisl elementum quam, ut malesuada massa nunc eget quam. Nam suscipit neque quis sapien ultricies imperdiet. Maecenas augue libero, finibus tristique sagittis et, semper nec arcu. Morbi non tortor ultrices, sollicitudin justo sed, accumsan ligula. Nullam at ipsum in nibh auctor ullamcorper. Nullam laoreet neque id lorem condimentum tincidunt. Nullam vel orci nibh. Ut sit amet sem faucibus, fringilla orci at, lacinia enim. Mauris imperdiet ex id scelerisque eleifend. Ut tincidunt massa nibh, viverra pharetra metus\\'))) FROM zeros_mt(1000000) FORMAT Null"}, {"oldTime": 0.0338, "newTime": 0.0359, "relativeDifference": 0.062, "quantiles": [0.047, 0.06, 0.082, 0.106], "testName": "linear_regression", "query": "SELECT stochasticLinearRegressionState(0.0001, 0, 15)(Age, Income, ParamPrice, Robotness, RefererHash) FROM test.hits FORMAT Null"}, {"oldTime": 0.1391, "newTime": 0.1431, "relativeDifference": 0.028, "quantiles": [0.008, 0.035, 0.082, 0.126], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_NONE (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.1403, "newTime": 0.133, "relativeDifference": -0.053, "quantiles": [0.009, 0.023, 0.08, 0.107], "testName": "order_by_read_in_order", "query": "SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate LIMIT 100"}, {"oldTime": 0.2314, "newTime": 0.2322, "relativeDifference": 0.003, "quantiles": [0.003, 0.031, 0.08, 0.103], "testName": "arithmetic", "query": "SELECT count() FROM nums WHERE NOT ignore(\\n        intDivOrZero(i8, i8),\\n        intDivOrZero(i8, i8 + 1),\\n        intDivOrZero(i8, i8 + 2),\\n        intDivOrZero(i8, i8 + 3),\\n        intDivOrZero(i8, i8 + 4),\\n        intDivOrZero(i8, i8 + 5),\\n        intDivOrZero(i8, i8 + 6),\\n        intDivOrZero(i8, i8 + 7)\\n        )"}, {"oldTime": 0.1773, "newTime": 0.1799, "relativeDifference": 0.014, "quantiles": [0.008, 0.025, 0.079, 0.11], "testName": "cryptographic_hashes", "query": "SELECT ignore(MD5(toString(1000000000+number))) FROM numbers(1000000) FORMAT Null"}, {"oldTime": 0.1413, "newTime": 0.1433, "relativeDifference": 0.014, "quantiles": [0.002, 0.014, 0.078, 0.119], "testName": "codecs_int_insert", "query": "INSERT INTO codec_mon_UInt64_Delta (n) SELECT number*512+(intHash64(number)%512) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.2723, "newTime": 0.2508, "relativeDifference": -0.079, "quantiles": [0.022, 0.043, 0.075, 0.246], "testName": "logical_functions_small", "query": "SELECT count() FROM test_logical_functions._2_0_UInt8 WHERE NOT ignore(or(x1,x2))"}, {"oldTime": 0.1571, "newTime": 0.1585, "relativeDifference": 0.008, "quantiles": [0.008, 0.026, 0.075, 0.119], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_T64 (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0308, "newTime": 0.0286, "relativeDifference": -0.072, "quantiles": [0.029, 0.047, 0.071, 0.177], "testName": "set_index", "query": "SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(100000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = \\'break\\'"}, {"oldTime": 0.1189, "newTime": 0.1167, "relativeDifference": -0.019, "quantiles": [0.005, 0.015, 0.066, 0.105], "testName": "codecs_int_insert", "query": "INSERT INTO codec_rnd_UInt64_Delta (n) SELECT intHash64(number) FROM system.numbers LIMIT 10000000 SETTINGS max_threads=1"}, {"oldTime": 0.0793, "newTime": 0.0741, "relativeDifference": -0.066, "quantiles": [0.012, 0.036, 0.052, 0.101], "testName": "parse_engine_file", "query": "SELECT * FROM table_Native FORMAT Null"}, {"oldTime": 0.2576, "newTime": 0.2548, "relativeDifference": -0.011, "quantiles": [0.003, 0.012, 0.046, 0.127], "testName": "logical_functions_small", "query": "SELECT count() FROM test_logical_functions._2_1_UInt8 WHERE NOT ignore(or(x1,x2))"}], "runErrors": [{"testName": "./README.md-err.log", "error": "xml.etree.ElementTree.ParseError: not well-formed (invalid token): line 1, column 1"}], "skipped": [{"testName": "agg_functions_min_max_any", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "columns_hashing", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "date_time", "reason": "Test is tagged as long."}, {"testName": "float_formatting", "reason": "Test is tagged as long."}, {"testName": "float_parsing", "reason": "Test is tagged as long."}, {"testName": "if_to_multiif", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "insert_values_with_expressions", "reason": "clickhouse_driver.errors.ServerException: Code: 107."}, {"testName": "leftpad", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "nyc_taxi", "reason": "clickhouse_driver.errors.ServerException: Code: 60."}, {"testName": "set", "reason": "Test is tagged as long."}], "badTests": [{"testName": "cryptographic_hashes", "unstable": 14.0, "changedPerf": 0.0, "total": 14.0}, {"testName": "codecs_int_insert", "unstable": 9.0, "changedPerf": 0.0, "total": 9.0}, {"testName": "logical_functions_small", "unstable": 5.0, "changedPerf": 0.0, "total": 5.0}, {"testName": "logical_functions_medium", "unstable": 4.0, "changedPerf": 0.0, "total": 4.0}, {"testName": "trim_whitespace", "unstable": 3.0, "changedPerf": 0.0, "total": 3.0}, {"testName": "number_formatting_formats", "unstable": 2.0, "changedPerf": 1.0, "total": 3.0}, {"testName": "website", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "mingroupby-orderbylimit1", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "codecs_float_insert", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "parse_engine_file", "unstable": 2.0, "changedPerf": 0.0, "total": 2.0}, {"testName": "set_hits", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "entropy", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "if_array_string", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "select_format", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "cpu_synthetic", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "arithmetic", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "set_index", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "joins_in_memory", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "random_printable_ascii", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "logical_functions_large", "unstable": 0.0, "changedPerf": 1.0, "total": 1.0}, {"testName": "linear_regression", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}, {"testName": "order_by_read_in_order", "unstable": 1.0, "changedPerf": 0.0, "total": 1.0}], "testTimes": [{"testName": "number_formatting_formats", "wallClockTime": 1307.222, "clientTime": 1162.389, "total": 14.0, "ignoredQueries": 0.0, "longestQuery": 332.89, "avgWallClockTime": 93.373, "shortestQuery": 6.041}, {"testName": "select_format", "wallClockTime": 740.476, "clientTime": 678.794, "total": 22.0, "ignoredQueries": 0.0, "longestQuery": 79.868, "avgWallClockTime": 33.658, "shortestQuery": 5.913}, {"testName": "parallel_insert", "wallClockTime": 29.607, "clientTime": 26.556, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 26.556, "avgWallClockTime": 29.607, "shortestQuery": 26.556}, {"testName": "materialized_view_parallel_insert", "wallClockTime": 29.204, "clientTime": 26.193, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 26.193, "avgWallClockTime": 29.204, "shortestQuery": 26.193}, {"testName": "simple_join_query", "wallClockTime": 80.48, "clientTime": 51.998, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.155, "avgWallClockTime": 20.12, "shortestQuery": 12.883}, {"testName": "general_purpose_hashes", "wallClockTime": 1461.275, "clientTime": 1338.886, "total": 78.0, "ignoredQueries": 0.0, "longestQuery": 37.831, "avgWallClockTime": 18.734, "shortestQuery": 3.624}, {"testName": "trim_urls", "wallClockTime": 109.06, "clientTime": 99.912, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 43.8, "avgWallClockTime": 18.176, "shortestQuery": 8.261}, {"testName": "empty_string_serialization", "wallClockTime": 18.127, "clientTime": 16.486, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 16.486, "avgWallClockTime": 18.127, "shortestQuery": 16.486}, {"testName": "array_fill", "wallClockTime": 105.573, "clientTime": 96.625, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 26.643, "avgWallClockTime": 17.595, "shortestQuery": 7.498}, {"testName": "group_array_moving_sum", "wallClockTime": 206.941, "clientTime": 153.396, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 20.973, "avgWallClockTime": 17.245, "shortestQuery": 6.839}, {"testName": "prewhere", "wallClockTime": 16.481, "clientTime": 14.98, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.98, "avgWallClockTime": 16.481, "shortestQuery": 14.98}, {"testName": "first_significant_subdomain", "wallClockTime": 15.778, "clientTime": 14.355, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 14.355, "avgWallClockTime": 15.777, "shortestQuery": 14.355}, {"testName": "constant_column_search", "wallClockTime": 414.247, "clientTime": 378.913, "total": 28.0, "ignoredQueries": 0.0, "longestQuery": 35.973, "avgWallClockTime": 14.794, "shortestQuery": 5.039}, {"testName": "arithmetic", "wallClockTime": 827.869, "clientTime": 740.318, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 20.611, "avgWallClockTime": 13.797, "shortestQuery": 4.056}, {"testName": "and_function", "wallClockTime": 27.067, "clientTime": 24.754, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 22.84, "avgWallClockTime": 13.533, "shortestQuery": 1.913}, {"testName": "trim_numbers", "wallClockTime": 80.24, "clientTime": 73.562, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 29.945, "avgWallClockTime": 13.373, "shortestQuery": 2.576}, {"testName": "string_sort", "wallClockTime": 1122.302, "clientTime": 1028.419, "total": 84.0, "ignoredQueries": 0.0, "longestQuery": 35.28, "avgWallClockTime": 13.36, "shortestQuery": 0.592}, {"testName": "merge_tree_many_partitions_2", "wallClockTime": 12.001, "clientTime": 4.366, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 4.366, "avgWallClockTime": 12.001, "shortestQuery": 4.366}, {"testName": "constant_column_comparison", "wallClockTime": 222.5, "clientTime": 203.952, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 14.472, "avgWallClockTime": 10.595, "shortestQuery": 3.846}, {"testName": "parse_engine_file", "wallClockTime": 146.414, "clientTime": 115.826, "total": 14.0, "ignoredQueries": 0.0, "longestQuery": 17.817, "avgWallClockTime": 10.458, "shortestQuery": 1.362}, {"testName": "json_extract_rapidjson", "wallClockTime": 134.203, "clientTime": 123.002, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 17.998, "avgWallClockTime": 10.323, "shortestQuery": 3.496}, {"testName": "joins_in_memory", "wallClockTime": 338.116, "clientTime": 468.564, "total": 34.0, "ignoredQueries": 10.0, "longestQuery": 23.12, "avgWallClockTime": 9.944, "shortestQuery": 17.601}, {"testName": "bloom_filter", "wallClockTime": 9.888, "clientTime": 8.895, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 8.895, "avgWallClockTime": 9.887, "shortestQuery": 8.895}, {"testName": "url_hits", "wallClockTime": 196.084, "clientTime": 186.56, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 22.731, "avgWallClockTime": 9.804, "shortestQuery": 5.89}, {"testName": "array_reduce", "wallClockTime": 58.183, "clientTime": 53.172, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 13.729, "avgWallClockTime": 9.697, "shortestQuery": 3.939}, {"testName": "general_purpose_hashes_on_UUID", "wallClockTime": 614.642, "clientTime": 563.866, "total": 66.0, "ignoredQueries": 11.0, "longestQuery": 28.314, "avgWallClockTime": 9.312, "shortestQuery": 0.862}, {"testName": "base64_hits", "wallClockTime": 110.143, "clientTime": 100.807, "total": 12.0, "ignoredQueries": 0.0, "longestQuery": 17.79, "avgWallClockTime": 9.178, "shortestQuery": 0.857}, {"testName": "if_array_string", "wallClockTime": 53.94, "clientTime": 48.626, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 20.559, "avgWallClockTime": 8.989, "shortestQuery": 4.169}, {"testName": "string_join", "wallClockTime": 26.312, "clientTime": 19.781, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 8.283, "avgWallClockTime": 8.77, "shortestQuery": 4.407}, {"testName": "sum_map", "wallClockTime": 34.792, "clientTime": 29.755, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 13.565, "avgWallClockTime": 8.697, "shortestQuery": 1.383}, {"testName": "logical_functions_large", "wallClockTime": 85.516, "clientTime": 78.268, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 20.389, "avgWallClockTime": 8.551, "shortestQuery": 3.802}, {"testName": "synthetic_hardware_benchmark", "wallClockTime": 211.339, "clientTime": 193.14, "total": 26.0, "ignoredQueries": 0.0, "longestQuery": 37.811, "avgWallClockTime": 8.128, "shortestQuery": 0.907}, {"testName": "visit_param_extract_raw", "wallClockTime": 23.905, "clientTime": 21.814, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 15.313, "avgWallClockTime": 7.968, "shortestQuery": 2.071}, {"testName": "column_column_comparison", "wallClockTime": 141.798, "clientTime": 129.871, "total": 19.0, "ignoredQueries": 7.0, "longestQuery": 26.66, "avgWallClockTime": 7.463, "shortestQuery": 5.239}, {"testName": "math", "wallClockTime": 445.058, "clientTime": 407.983, "total": 60.0, "ignoredQueries": 0.0, "longestQuery": 19.448, "avgWallClockTime": 7.417, "shortestQuery": 2.277}, {"testName": "round_down", "wallClockTime": 35.97, "clientTime": 32.865, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 26.044, "avgWallClockTime": 7.194, "shortestQuery": 1.315}, {"testName": "array_join", "wallClockTime": 42.971, "clientTime": 39.314, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 9.052, "avgWallClockTime": 7.161, "shortestQuery": 2.281}, {"testName": "random_printable_ascii", "wallClockTime": 49.37, "clientTime": 45.193, "total": 7.0, "ignoredQueries": 1.0, "longestQuery": 15.204, "avgWallClockTime": 7.052, "shortestQuery": 2.893}, {"testName": "right", "wallClockTime": 14.104, "clientTime": 12.852, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 6.687, "avgWallClockTime": 7.052, "shortestQuery": 6.164}, {"testName": "cpu_synthetic", "wallClockTime": 323.578, "clientTime": 309.474, "total": 47.0, "ignoredQueries": 7.0, "longestQuery": 42.479, "avgWallClockTime": 6.884, "shortestQuery": 1.064}, {"testName": "ngram_distance", "wallClockTime": 109.76, "clientTime": 100.517, "total": 16.0, "ignoredQueries": 0.0, "longestQuery": 11.048, "avgWallClockTime": 6.86, "shortestQuery": 4.078}, {"testName": "logical_functions_medium", "wallClockTime": 137.212, "clientTime": 114.823, "total": 20.0, "ignoredQueries": 0.0, "longestQuery": 8.349, "avgWallClockTime": 6.86, "shortestQuery": 3.736}, {"testName": "vectorize_aggregation_combinators", "wallClockTime": 33.67, "clientTime": 27.093, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 11.185, "avgWallClockTime": 6.733, "shortestQuery": 0.583}, {"testName": "sort", "wallClockTime": 67.317, "clientTime": 60.664, "total": 10.0, "ignoredQueries": 0.0, "longestQuery": 12.933, "avgWallClockTime": 6.731, "shortestQuery": 3.598}, {"testName": "collations", "wallClockTime": 13.382, "clientTime": 12.159, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 11.002, "avgWallClockTime": 6.69, "shortestQuery": 1.157}, {"testName": "uniq", "wallClockTime": 513.219, "clientTime": 470.121, "total": 80.0, "ignoredQueries": 6.0, "longestQuery": 44.296, "avgWallClockTime": 6.415, "shortestQuery": 0.885}, {"testName": "merge_tree_many_partitions", "wallClockTime": 6.276, "clientTime": 0.026, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.276, "shortestQuery": 0.0}, {"testName": "string_set", "wallClockTime": 43.342, "clientTime": 35.545, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 7.683, "avgWallClockTime": 6.191, "shortestQuery": 3.173}, {"testName": "merge_tree_simple_select", "wallClockTime": 6.037, "clientTime": 0.013, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 6.037, "shortestQuery": 0.0}, {"testName": "modulo", "wallClockTime": 17.304, "clientTime": 15.769, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 8.959, "avgWallClockTime": 5.768, "shortestQuery": 3.399}, {"testName": "logical_functions_small", "wallClockTime": 95.749, "clientTime": 83.403, "total": 17.0, "ignoredQueries": 0.0, "longestQuery": 7.771, "avgWallClockTime": 5.632, "shortestQuery": 2.874}, {"testName": "inserts_arrays_lowcardinality", "wallClockTime": 11.148, "clientTime": 7.365, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.696, "avgWallClockTime": 5.573, "shortestQuery": 1.669}, {"testName": "base64", "wallClockTime": 50.012, "clientTime": 45.73, "total": 9.0, "ignoredQueries": 0.0, "longestQuery": 8.87, "avgWallClockTime": 5.556, "shortestQuery": 2.002}, {"testName": "merge_tree_huge_pk", "wallClockTime": 22.18, "clientTime": 1.798, "total": 4.0, "ignoredQueries": 3.0, "longestQuery": 1.298, "avgWallClockTime": 5.545, "shortestQuery": 1.298}, {"testName": "json_extract_simdjson", "wallClockTime": 71.249, "clientTime": 65.356, "total": 13.0, "ignoredQueries": 0.0, "longestQuery": 12.451, "avgWallClockTime": 5.48, "shortestQuery": 2.804}, {"testName": "website", "wallClockTime": 381.715, "clientTime": 355.128, "total": 73.0, "ignoredQueries": 18.0, "longestQuery": 37.505, "avgWallClockTime": 5.228, "shortestQuery": 0.687}, {"testName": "read_hits_with_aio", "wallClockTime": 19.699, "clientTime": 17.94, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 5.904, "avgWallClockTime": 4.924, "shortestQuery": 2.76}, {"testName": "order_by_single_column", "wallClockTime": 33.756, "clientTime": 30.868, "total": 7.0, "ignoredQueries": 0.0, "longestQuery": 9.769, "avgWallClockTime": 4.822, "shortestQuery": 1.224}, {"testName": "cryptographic_hashes", "wallClockTime": 201.898, "clientTime": 184.869, "total": 42.0, "ignoredQueries": 6.0, "longestQuery": 11.555, "avgWallClockTime": 4.807, "shortestQuery": 0.639}, {"testName": "range", "wallClockTime": 8.934, "clientTime": 8.085, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 5.535, "avgWallClockTime": 4.467, "shortestQuery": 2.549}, {"testName": "codecs_int_insert", "wallClockTime": 92.16, "clientTime": 82.018, "total": 21.0, "ignoredQueries": 0.0, "longestQuery": 7.688, "avgWallClockTime": 4.388, "shortestQuery": 1.286}, {"testName": "mingroupby-orderbylimit1", "wallClockTime": 34.968, "clientTime": 30.58, "total": 8.0, "ignoredQueries": 1.0, "longestQuery": 9.328, "avgWallClockTime": 4.37, "shortestQuery": 0.847}, {"testName": "entropy", "wallClockTime": 37.625, "clientTime": 34.378, "total": 9.0, "ignoredQueries": 3.0, "longestQuery": 14.529, "avgWallClockTime": 4.18, "shortestQuery": 0.756}, {"testName": "order_by_read_in_order", "wallClockTime": 20.251, "clientTime": 18.235, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 9.237, "avgWallClockTime": 4.05, "shortestQuery": 1.388}, {"testName": "trim_whitespace", "wallClockTime": 24.181, "clientTime": 12.114, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 2.463, "avgWallClockTime": 4.03, "shortestQuery": 1.068}, {"testName": "set_hits", "wallClockTime": 23.723, "clientTime": 21.569, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 7.212, "avgWallClockTime": 3.953, "shortestQuery": 0.983}, {"testName": "scalar", "wallClockTime": 3.952, "clientTime": 1.317, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.317, "avgWallClockTime": 3.951, "shortestQuery": 1.317}, {"testName": "linear_regression", "wallClockTime": 19.187, "clientTime": 17.396, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 8.295, "avgWallClockTime": 3.837, "shortestQuery": 0.746}, {"testName": "array_auc", "wallClockTime": 3.628, "clientTime": 3.226, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 3.226, "avgWallClockTime": 3.628, "shortestQuery": 3.226}, {"testName": "functions_geo", "wallClockTime": 20.302, "clientTime": 18.509, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 5.687, "avgWallClockTime": 3.383, "shortestQuery": 1.69}, {"testName": "set_index", "wallClockTime": 15.977, "clientTime": 4.794, "total": 5.0, "ignoredQueries": 2.0, "longestQuery": 2.268, "avgWallClockTime": 3.195, "shortestQuery": 0.696}, {"testName": "if_array_num", "wallClockTime": 17.747, "clientTime": 16.143, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.504, "avgWallClockTime": 2.957, "shortestQuery": 1.844}, {"testName": "decimal_aggregates", "wallClockTime": 57.527, "clientTime": 52.5, "total": 21.0, "ignoredQueries": 6.0, "longestQuery": 5.432, "avgWallClockTime": 2.739, "shortestQuery": 0.888}, {"testName": "bitCount", "wallClockTime": 16.248, "clientTime": 14.817, "total": 6.0, "ignoredQueries": 0.0, "longestQuery": 3.664, "avgWallClockTime": 2.707, "shortestQuery": 1.625}, {"testName": "h3", "wallClockTime": 2.619, "clientTime": 2.304, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 2.304, "avgWallClockTime": 2.618, "shortestQuery": 2.304}, {"testName": "date_time_64", "wallClockTime": 42.722, "clientTime": 32.039, "total": 18.0, "ignoredQueries": 4.0, "longestQuery": 7.027, "avgWallClockTime": 2.373, "shortestQuery": 0.591}, {"testName": "least_greatest_hits", "wallClockTime": 6.679, "clientTime": 6.034, "total": 3.0, "ignoredQueries": 1.0, "longestQuery": 3.666, "avgWallClockTime": 2.226, "shortestQuery": 2.144}, {"testName": "empty_string_deserialization", "wallClockTime": 2.05, "clientTime": 0.388, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 2.049, "shortestQuery": 0.0}, {"testName": "distributed_aggregation", "wallClockTime": 7.56, "clientTime": 6.805, "total": 4.0, "ignoredQueries": 0.0, "longestQuery": 1.783, "avgWallClockTime": 1.889, "shortestQuery": 1.662}, {"testName": "jit_large_requests", "wallClockTime": 3.578, "clientTime": 1.494, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.956, "avgWallClockTime": 1.789, "shortestQuery": 0.956}, {"testName": "merge_table_streams", "wallClockTime": 1.668, "clientTime": 1.399, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.399, "avgWallClockTime": 1.667, "shortestQuery": 1.399}, {"testName": "order_by_decimals", "wallClockTime": 8.249, "clientTime": 7.469, "total": 5.0, "ignoredQueries": 0.0, "longestQuery": 2.256, "avgWallClockTime": 1.649, "shortestQuery": 0.808}, {"testName": "pre_limit_no_sorting", "wallClockTime": 1.626, "clientTime": 1.384, "total": 1.0, "ignoredQueries": 0.0, "longestQuery": 1.384, "avgWallClockTime": 1.626, "shortestQuery": 1.384}, {"testName": "array_element", "wallClockTime": 4.818, "clientTime": 4.332, "total": 3.0, "ignoredQueries": 0.0, "longestQuery": 1.648, "avgWallClockTime": 1.605, "shortestQuery": 1.046}, {"testName": "int_parsing", "wallClockTime": 100.808, "clientTime": 92.297, "total": 83.0, "ignoredQueries": 0.0, "longestQuery": 4.033, "avgWallClockTime": 1.214, "shortestQuery": 0.61}, {"testName": "basename", "wallClockTime": 2.211, "clientTime": 1.913, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 1.031, "avgWallClockTime": 1.105, "shortestQuery": 0.882}, {"testName": "if_string_hits", "wallClockTime": 4.162, "clientTime": 3.722, "total": 4.0, "ignoredQueries": 2.0, "longestQuery": 1.976, "avgWallClockTime": 1.04, "shortestQuery": 1.032}, {"testName": "bit_operations_fixed_string_numbers", "wallClockTime": 1.791, "clientTime": 1.545, "total": 2.0, "ignoredQueries": 0.0, "longestQuery": 0.933, "avgWallClockTime": 0.895, "shortestQuery": 0.611}, {"testName": "great_circle_dist", "wallClockTime": 1.778, "clientTime": 1.538, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.998, "avgWallClockTime": 0.888, "shortestQuery": 0.998}, {"testName": "information_value", "wallClockTime": 1.722, "clientTime": 1.478, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.938, "avgWallClockTime": 0.861, "shortestQuery": 0.938}, {"testName": "joins_in_memory_pmj", "wallClockTime": 20.561, "clientTime": 37.492, "total": 24.0, "ignoredQueries": 8.0, "longestQuery": 2.755, "avgWallClockTime": 0.856, "shortestQuery": 2.069}, {"testName": "jit_small_requests", "wallClockTime": 2.385, "clientTime": 1.928, "total": 3.0, "ignoredQueries": 2.0, "longestQuery": 1.259, "avgWallClockTime": 0.794, "shortestQuery": 1.259}, {"testName": "IPv6", "wallClockTime": 1.555, "clientTime": 1.183, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.818, "avgWallClockTime": 0.777, "shortestQuery": 0.818}, {"testName": "codecs_float_insert", "wallClockTime": 11.214, "clientTime": 9.38, "total": 15.0, "ignoredQueries": 5.0, "longestQuery": 0.976, "avgWallClockTime": 0.747, "shortestQuery": 0.593}, {"testName": "slices_hits", "wallClockTime": 1.458, "clientTime": 1.236, "total": 2.0, "ignoredQueries": 1.0, "longestQuery": 0.971, "avgWallClockTime": 0.728, "shortestQuery": 0.971}, {"testName": "count", "wallClockTime": 0.7, "clientTime": 0.014, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.699, "shortestQuery": 0.0}, {"testName": "format_date_time", "wallClockTime": 3.471, "clientTime": 3.085, "total": 6.0, "ignoredQueries": 3.0, "longestQuery": 0.644, "avgWallClockTime": 0.578, "shortestQuery": 0.628}, {"testName": "complex_array_creation", "wallClockTime": 1.139, "clientTime": 0.939, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.569, "shortestQuery": 0.0}, {"testName": "consistent_hashes", "wallClockTime": 3.471, "clientTime": 3.082, "total": 7.0, "ignoredQueries": 5.0, "longestQuery": 1.515, "avgWallClockTime": 0.495, "shortestQuery": 0.998}, {"testName": "date_parsing", "wallClockTime": 0.489, "clientTime": 0.345, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.488, "shortestQuery": 0.0}, {"testName": "conditional", "wallClockTime": 3.677, "clientTime": 3.28, "total": 8.0, "ignoredQueries": 6.0, "longestQuery": 0.714, "avgWallClockTime": 0.459, "shortestQuery": 0.631}, {"testName": "fixed_string16", "wallClockTime": 0.409, "clientTime": 0.269, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.409, "shortestQuery": 0.0}, {"testName": "early_constant_folding", "wallClockTime": 0.404, "clientTime": 0.268, "total": 1.0, "ignoredQueries": 1.0, "longestQuery": 0.0, "avgWallClockTime": 0.404, "shortestQuery": 0.0}, {"testName": "generate_table_function", "wallClockTime": 6.934, "clientTime": 6.258, "total": 19.0, "ignoredQueries": 17.0, "longestQuery": 1.362, "avgWallClockTime": 0.364, "shortestQuery": 0.7}, {"testName": "cidr", "wallClockTime": 0.721, "clientTime": 0.559, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.36, "shortestQuery": 0.0}, {"testName": "IPv4", "wallClockTime": 1.411, "clientTime": 1.104, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.352, "shortestQuery": 0.0}, {"testName": "bit_operations_fixed_string", "wallClockTime": 1.404, "clientTime": 1.183, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.351, "shortestQuery": 0.0}, {"testName": "codecs_float_select", "wallClockTime": 4.669, "clientTime": 3.308, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.311, "shortestQuery": 0.0}, {"testName": "codecs_int_select", "wallClockTime": 5.64, "clientTime": 4.158, "total": 21.0, "ignoredQueries": 21.0, "longestQuery": 0.0, "avgWallClockTime": 0.268, "shortestQuery": 0.0}, {"testName": "functions_coding", "wallClockTime": 1.052, "clientTime": 0.865, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.263, "shortestQuery": 0.0}, {"testName": "if_string_const", "wallClockTime": 1.015, "clientTime": 0.836, "total": 4.0, "ignoredQueries": 4.0, "longestQuery": 0.0, "avgWallClockTime": 0.253, "shortestQuery": 0.0}, {"testName": "round_methods", "wallClockTime": 2.74, "clientTime": 2.422, "total": 15.0, "ignoredQueries": 15.0, "longestQuery": 0.0, "avgWallClockTime": 0.182, "shortestQuery": 0.0}, {"testName": "bounding_ratio", "wallClockTime": 0.346, "clientTime": 0.224, "total": 2.0, "ignoredQueries": 2.0, "longestQuery": 0.0, "avgWallClockTime": 0.172, "shortestQuery": 0.0}], "slowOnClient": [], "allQueries": 1405, "timePerformance": {"IPv4": {"difference": [0.0, 0.0001, 0.0, 0.0002], "newTime": [0.0153, 0.0155, 0.0088, 0.0104]}, "IPv6": {"difference": [-0.0002, 0.0], "newTime": [0.037, 0.0162]}, "and_function": {"difference": [-0.0013, 0.0133], "newTime": [0.0856, 1.0136]}, "arithmetic": {"difference": [-0.0143, 0.0374, 0.0092, -0.0453, -0.0259, 0.0067, 0.0239, -0.004, 0.0472, -0.0158, 0.0023, 0.0021, 0.0243, -0.0059, -0.0194, 0.0008, -0.0038, -0.0133, 0.008, -0.0082, -0.0277, -0.0781, 0.0214, 0.0232, -0.0417, 0.0019, -0.0019, 0.0202, -0.0209, -0.0006, 0.0236, -0.008, -0.0137, -0.0128, -0.019, -0.0068, 0.0033, 0.0349, -0.0077, 0.0083, -0.0254, -0.0394, 0.0152, 0.0026, 0.0304, 0.0011, 0.0037, 0.0644, 0.0016, 0.0079, 0.0114, -0.0564, 0.0267, -0.062, -0.0028, 0.0086, -0.0133, 0.0213, 0.0085, 0.0044], "newTime": [0.6421, 0.8612, 0.4295, 0.6209, 0.8085, 0.3349, 0.4385, 0.6429, 0.8187, 0.3458, 0.5372, 0.8247, 0.312, 0.6438, 0.8716, 0.2322, 0.279, 0.5794, 0.8593, 0.1834, 0.649, 0.7716, 0.4081, 0.6662, 0.7617, 0.2003, 0.4078, 0.653, 0.7535, 0.2081, 0.767, 0.9267, 0.3482, 0.676, 0.8471, 0.1973, 0.312, 0.6942, 0.7931, 0.2023, 0.6425, 0.8141, 0.4068, 0.6703, 0.8288, 0.1895, 0.4188, 0.6693, 0.7916, 0.208, 0.6669, 0.7543, 0.4127, 0.586, 0.7673, 0.1996, 0.3934, 0.6249, 0.8029, 0.2104]}, "array_auc": {"difference": [-0.002], "newTime": [0.1456]}, "array_element": {"difference": [-0.0009, 0.0013, -0.0005], "newTime": [0.07, 0.0681, 0.0463]}, "array_fill": {"difference": [0.0077, 0.0003, 0.0004, 0.0051, 0.0123, -0.0105], "newTime": [0.4462, 0.3413, 0.3695, 1.2094, 0.9708, 1.0502]}, "array_join": {"difference": [0.0066, 0.0028, -0.0012, 0.0009, -0.0052, -0.0054], "newTime": [0.4195, 0.4129, 0.1015, 0.3132, 0.1989, 0.3098]}, "array_reduce": {"difference": [-0.0015, -0.0018, 0.0222, 0.0297, -0.0063, -0.0196], "newTime": [0.1781, 0.2144, 0.397, 0.6134, 0.406, 0.61]}, "base64": {"difference": [-0.001, -0.0021, 0.0024, 0.0028, -0.0052, -0.0061, -0.0015, -0.0103, -0.0039], "newTime": [0.0907, 0.1879, 0.1337, 0.2029, 0.4016, 0.2276, 0.1957, 0.3958, 0.2294]}, "base64_hits": {"difference": [0.0006, -0.0005, 0.0165, 0.0108, 0.0005, 0.0009, 0.0076, -0.0161, 0.0022, -0.0009, 0.0141, -0.0266], "newTime": [0.0382, 0.0825, 0.4539, 0.4553, 0.0546, 0.1381, 0.7831, 0.7828, 0.054, 0.1389, 0.7858, 0.7998]}, "basename": {"difference": [-0.0011, -0.0022], "newTime": [0.039, 0.0457]}, "bitCount": {"difference": [0.0014, 0.0018, -0.0001, 0.0007, -0.0001, -0.0007], "newTime": [0.0738, 0.1455, 0.0963, 0.1672, 0.0972, 0.0924]}, "bit_operations_fixed_string": {"difference": [-0.0004, -0.0002, 0.0003, -0.0001], "newTime": [0.0125, 0.0109, 0.0134, 0.0123]}, "bit_operations_fixed_string_numbers": {"difference": [0.0003, -0.0004], "newTime": [0.0422, 0.0274]}, "bloom_filter": {"difference": [-0.0034], "newTime": [0.4013]}, "bounding_ratio": {"difference": [-0.0004, 0.0009], "newTime": [0.0042, 0.0058]}, "cidr": {"difference": [-0.0001, -0.0009], "newTime": [0.0097, 0.0143]}, "codecs_float_insert": {"difference": [-0.0006, -0.0007, 0.001, 0.0001, -0.0004, -0.0002, -0.0003, 0.0001, 0.0009, -0.0001, -0.0031, -0.0009, 0.0001, -0.0005, -0.0008], "newTime": [0.0434, 0.0417, 0.0392, 0.0298, 0.0415, 0.0289, 0.0299, 0.0158, 0.0172, 0.029, 0.0139, 0.0256, 0.0171, 0.0162, 0.0286]}, "codecs_float_select": {"difference": [-0.0004, -0.0008, 0.0001, -0.0004, -0.0009, -0.0002, -0.0007, 0.0001, 0.0, -0.0004, -0.0003, -0.0003, -0.0001, -0.0001, -0.0003], "newTime": [0.016, 0.0128, 0.0059, 0.0043, 0.0123, 0.0161, 0.0141, 0.0047, 0.0045, 0.0124, 0.008, 0.013, 0.0045, 0.0044, 0.0124]}, "codecs_int_insert": {"difference": [0.002, -0.0118, -0.0114, -0.0074, 0.004, -0.0211, 0.0135, -0.0022, 0.0015, 0.0027, 0.0068, 0.0124, 0.0014, -0.0048, 0.0091, 0.003, 0.0052, 0.0013, 0.0072, 0.0011, -0.0012], "newTime": [0.1433, 0.2257, 0.2176, 0.2135, 0.1431, 0.1629, 0.3516, 0.1167, 0.2508, 0.2627, 0.1254, 0.1217, 0.1585, 0.1647, 0.1243, 0.0614, 0.1843, 0.1825, 0.1224, 0.1451, 0.2645]}, "codecs_int_select": {"difference": [-0.0011, -0.0001, -0.0003, -0.0005, 0.0001, -0.0004, -0.0001, 0.0002, -0.0001, -0.0004, -0.0004, -0.0003, -0.0004, -0.0005, -0.0006, -0.0002, 0.0002, -0.0006, -0.0006, -0.0003, -0.0005], "newTime": [0.004, 0.0114, 0.0097, 0.0107, 0.0044, 0.0107, 0.0156, 0.0048, 0.0158, 0.0142, 0.0042, 0.0042, 0.0083, 0.0048, 0.0042, 0.0056, 0.0086, 0.0108, 0.0044, 0.0106, 0.0148]}, "collations": {"difference": [0.0061, -0.0015], "newTime": [0.4906, 0.0506]}, "column_column_comparison": {"difference": [-0.0001, 0.0086, -0.0016, 0.0002, 0.0014, -0.002, -0.0001, 0.002, 0.0031, -0.0005, -0.0047, -0.004, 0.0, 0.0002, 0.0047, 0.0013, 0.0125, -0.0005, -0.0055], "newTime": [0.0012, 0.6149, 0.2372, 0.0013, 0.254, 0.916, 0.0014, 0.2735, 0.2634, 0.0011, 0.6231, 0.2654, 0.0011, 0.0015, 0.6658, 0.2579, 1.2171, 0.0011, 0.3048]}, "complex_array_creation": {"difference": [0.0001, -0.0003], "newTime": [0.022, 0.0198]}, "conditional": {"difference": [0.0009, 0.0004, -0.0001, 0.0, 0.0007, -0.0003, -0.0001, 0.0001], "newTime": [0.0157, 0.0279, 0.0086, 0.0146, 0.0202, 0.0317, 0.0115, 0.0165]}, "consistent_hashes": {"difference": [-0.0001, 0.0001, 0.0009, 0.0002, 0.0001, -0.0001, 0.0], "newTime": [0.0042, 0.069, 0.0457, 0.0058, 0.0051, 0.005, 0.0049]}, "constant_column_comparison": {"difference": [0.0235, 0.0232, 0.0205, 0.0076, 0.0059, 0.0108, 0.0105, 0.0106, 0.0092, 0.0046, 0.0013, 0.0021, 0.004, 0.0035, 0.0007, 0.0282, 0.0193, 0.0248, 0.0086, 0.0103, 0.0131], "newTime": [0.4847, 0.5092, 0.515, 0.3931, 0.4578, 0.4571, 0.5045, 0.5624, 0.5629, 0.1774, 0.218, 0.2195, 0.1967, 0.2342, 0.2372, 0.5604, 0.6272, 0.6322, 0.5433, 0.6141, 0.6641]}, "constant_column_search": {"difference": [-0.0038, 0.0053, -0.0155, 0.0105, 0.0055, -0.0167, -0.0025, -0.0025, 0.0054, -0.0075, -0.0193, 0.0207, 0.0029, -0.0094, -0.0099, -0.0142, -0.0019, -0.0078, 0.0056, 0.0054, 0.0045, 0.0031, -0.0015, 0.002, -0.0076, 0.0061, -0.0033, 0.0037], "newTime": [0.2249, 0.2381, 0.8947, 1.042, 1.6332, 1.0796, 0.4742, 0.5912, 0.5509, 0.8759, 0.6074, 1.0334, 0.4299, 0.315, 0.3373, 0.502, 0.3722, 0.4639, 1.26, 0.3867, 1.1504, 0.449, 0.486, 0.4511, 0.3265, 0.2545, 0.324, 0.3991]}, "count": {"difference": [-0.0002], "newTime": [0.0005]}, "cpu_synthetic": {"difference": [0.0013, 0.0066, 0.0012, 0.014, -0.053, 0.0008, -0.0007, -0.007, 0.0076, -0.0003, 0.0012, -0.0006, -0.0031, -0.0031, -0.0003, -0.0012, -0.0175, 0.0024, -0.0151, 0.0002, -0.0049, 0.0003, 0.0035, 0.001, 0.0022, 0.0016, -0.0023, -0.0003, -0.0062, -0.0028, -0.005, 0.0022, 0.0002, 0.0002, -0.0003, 0.0, 0.0, -0.0001, 0.0006, -0.0009, -0.0004, 0.0003, 0.0004, -0.0012, -0.0014], "newTime": [0.1726, 0.2744, 0.4856, 1.0832, 0.9046, 0.0483, 0.0661, 0.2707, 0.3462, 0.0659, 0.0807, 0.1213, 0.4329, 0.255, 0.2653, 0.2795, 1.9114, 0.1218, 1.1151, 0.0951, 0.1608, 0.4603, 0.6235, 0.1605, 0.2029, 0.3335, 0.8386, 0.0508, 0.4344, 0.4292, 0.4705, 0.104, 0.0177, 0.0213, 0.0179, 0.024, 0.0189, 0.0173, 0.0174, 0.0687, 0.0709, 0.0702, 0.1165, 0.1218, 0.1506]}, "cryptographic_hashes": {"difference": [0.0132, 0.0131, -0.0014, -0.0112, 0.0026, 0.0124, -0.0036, 0.0047, 0.0046, 0.0071, 0.0077, -0.0089, -0.0006, 0.0132, -0.0045, -0.0416, 0.0068, -0.0314, 0.0069, -0.0368, 0.0088, -0.0052, -0.0095, 0.0232, -0.0051, -0.0207, -0.0161, 0.0028, -0.0029, -0.0049, 0.0001, -0.0002, -0.0003, -0.0011, -0.0002, -0.0001, -0.0002, 0.0, -0.0015, -0.0042, 0.0001, -0.0002], "newTime": [0.1896, 0.1461, 0.3255, 0.3733, 0.1799, 0.1479, 0.1585, 0.1382, 0.2429, 0.3222, 0.1709, 0.133, 0.2952, 0.1904, 0.4765, 0.5119, 0.3065, 0.1686, 0.3034, 0.1551, 0.4928, 0.5199, 0.2859, 0.1983, 0.1743, 0.1254, 0.3147, 0.3728, 0.1775, 0.1386, 0.0212, 0.0107, 0.0927, 0.1529, 0.029, 0.0148, 0.0211, 0.0105, 0.0911, 0.152, 0.0289, 0.0143]}, "date_parsing": {"difference": [-0.001], "newTime": [0.014]}, "date_time_64": {"difference": [-0.0029, 0.0004, -0.0004, -0.0028, -0.0001, -0.0009, -0.0001, -0.0005, -0.0005, 0.0002, 0.0018, -0.0019, -0.0022, 0.0002, 0.0031, 0.0032, -0.002, 0.0004], "newTime": [0.0188, 0.0338, 0.0508, 0.0204, 0.0261, 0.0259, 0.1212, 0.138, 0.0604, 0.0705, 0.0676, 0.2232, 0.0182, 0.0359, 0.1599, 0.3203, 0.0192, 0.0357]}, "decimal_aggregates": {"difference": [-0.0008, -0.0002, 0.0, 0.0024, 0.0037, -0.0038, 0.0, 0.0002, 0.0003, 0.0038, -0.0004, 0.0013, -0.0022, 0.0003, 0.0047, -0.0028, -0.0041, -0.0086, -0.0006, -0.0012, 0.001], "newTime": [0.0054, 0.0025, 0.0029, 0.244, 0.1601, 0.1584, 0.0086, 0.0044, 0.005, 0.2512, 0.1552, 0.1574, 0.2449, 0.1505, 0.1577, 0.1607, 0.1549, 0.157, 0.0846, 0.0391, 0.0684]}, "distributed_aggregation": {"difference": [0.0033, -0.001, 0.0016, -0.0002], "newTime": [0.08, 0.0745, 0.076, 0.0736]}, "early_constant_folding": {"difference": [0.0002], "newTime": [0.0122]}, "empty_string_deserialization": {"difference": [0.0001], "newTime": [0.0169]}, "empty_string_serialization": {"difference": [-0.0011], "newTime": [0.7596]}, "entropy": {"difference": [0.0002, 0.0003, -0.0007, 0.0007, 0.0, -0.0001, -0.0139, -0.0028, -0.0009], "newTime": [0.0503, 0.0753, 0.0167, 0.0091, 0.0059, 0.0559, 0.6402, 0.6609, 0.0328]}, "first_significant_subdomain": {"difference": [0.0188], "newTime": [0.6585]}, "fixed_string16": {"difference": [-0.0006], "newTime": [0.0117]}, "format_date_time": {"difference": [0.0005, -0.0009, 0.0003, 0.0004, -0.0003, -0.0006], "newTime": [0.025, 0.0177, 0.0285, 0.0282, 0.0085, 0.0285]}, "functions_coding": {"difference": [0.0001, -0.0002, 0.0003, 0.0001], "newTime": [0.0073, 0.0118, 0.0083, 0.0106]}, "functions_geo": {"difference": [-0.0015, -0.0008, 0.0121, 0.0, -0.0013, -0.0003], "newTime": [0.0759, 0.0821, 0.2642, 0.1483, 0.1258, 0.1473]}, "general_purpose_hashes": {"difference": [-0.0346, 0.0053, -0.0626, -0.0067, 0.0103, -0.0078, -0.0041, 0.003, 0.0035, -0.0559, 0.0083, -0.0131, 0.0017, 0.0161, -0.0187, -0.0001, -0.0015, -0.0037, -0.0019, 0.0082, -0.0048, -0.0287, -0.0102, 0.0006, -0.013, 0.0089, -0.0184, 0.0098, -0.0248, 0.0036, -0.0024, -0.0037, -0.0021, -0.0012, -0.0011, -0.0148, -0.0041, -0.0099, -0.0055, -0.006, 0.0012, 0.001, -0.0023, -0.0073, -0.0096, 0.0022, -0.0064, -0.003, -0.0042, -0.0044, 0.0046, -0.0043, -0.0117, 0.0046, -0.0026, -0.0127, 0.0089, -0.0051, -0.0042, -0.0006, 0.0054, -0.0062, -0.0079, -0.003, -0.0071, -0.0186, 0.0001, 0.0054, 0.0057, -0.0164, -0.0111, -0.015, -0.0121, 0.0004, -0.0134, -0.0125, -0.0265, -0.0065], "newTime": [0.5159, 1.4635, 0.5492, 1.0189, 0.5473, 1.0418, 0.3819, 1.3117, 0.3747, 1.3168, 0.7443, 1.2231, 0.5386, 1.177, 0.5666, 1.1445, 0.7923, 1.6513, 0.6556, 1.4226, 0.8353, 1.704, 0.5591, 1.1899, 0.6789, 1.3022, 0.2098, 0.5688, 0.2308, 0.4038, 0.2243, 0.4135, 0.1694, 0.512, 0.1627, 0.5062, 0.2916, 0.4675, 0.2169, 0.4626, 0.2381, 0.4427, 0.3398, 0.6647, 0.2561, 0.5505, 0.331, 0.651, 0.2308, 0.4668, 0.2881, 0.5031, 1.1395, 0.5951, 0.5022, 1.257, 1.2885, 0.5135, 0.6985, 0.5657, 0.6021, 0.7584, 0.6184, 0.603, 0.5226, 1.3384, 1.2015, 1.2416, 1.3988, 1.378, 1.2247, 1.1979, 1.2285, 1.2457, 1.213, 1.2359, 1.2276, 1.248]}, "general_purpose_hashes_on_UUID": {"difference": [-0.0005, 0.0001, 0.0015, -0.0005, 0.0004, -0.0001, 0.0001, -0.0001, 0.0, -0.0001, 0.0009, 0.0005, 0.0001, 0.0001, 0.0002, 0.0001, 0.0001, -0.0006, -0.0006, 0.0008, 0.0, -0.0022, 0.0014, 0.0046, 0.0009, 0.008, 0.0016, -0.0111, -0.0632, -0.0888, 0.0107, -0.0029, 0.0085, -0.0266, -0.0098, -0.0293, 0.0066, 0.0085, -0.0031, 0.0129, -0.0214, -0.0255, -0.0108, -0.0196, 0.0012, -0.0059, 0.0048, -0.0033, 0.0073, -0.0004, -0.0154, -0.0235, 0.0026, 0.0141, -0.0031, -0.0009, -0.0067, -0.0033, -0.0041, 0.0085, 0.0031, 0.0024, -0.0057, -0.011, 0.0003, 0.0043], "newTime": [0.0387, 0.0396, 0.0478, 0.0454, 0.0425, 0.0417, 0.0414, 0.0437, 0.0437, 0.0429, 0.0431, 0.0201, 0.018, 0.0201, 0.0206, 0.0188, 0.0185, 0.018, 0.0192, 0.0201, 0.0186, 0.0182, 0.5971, 0.4342, 0.6161, 0.4564, 1.2428, 1.07, 1.2597, 1.0819, 0.859, 0.71, 0.8039, 0.6149, 0.7218, 0.5652, 1.0402, 0.8628, 1.0022, 0.852, 0.8515, 0.7, 0.8587, 0.6951, 0.2445, 0.1861, 0.2699, 0.1945, 0.4566, 0.3862, 0.4567, 0.402, 0.3275, 0.2868, 0.3023, 0.2374, 0.2864, 0.225, 0.3793, 0.3283, 0.3792, 0.3247, 0.3157, 0.2657, 0.3475, 0.289]}, "generate_table_function": {"difference": [-0.0001, -0.0006, 0.0004, -0.0004, -0.0003, 0.0, -0.0003, -0.0016, 0.0021, 0.0, 0.0002, -0.0001, -0.0003, 0.0, -0.0001, 0.0001, -0.0001, 0.0001, 0.0001], "newTime": [0.0061, 0.0088, 0.0169, 0.0057, 0.0087, 0.0222, 0.0167, 0.0288, 0.0635, 0.005, 0.0046, 0.0064, 0.0153, 0.0139, 0.0159, 0.006, 0.0066, 0.0107, 0.0105]}, "great_circle_dist": {"difference": [0.0002, 0.0009], "newTime": [0.0446, 0.0245]}, "group_array_moving_sum": {"difference": [0.0221, -0.0014, -0.0071, -0.0071, -0.0002, -0.0042, -0.0183, -0.0054, -0.0054, -0.0015, -0.0007, -0.0028], "newTime": [0.9648, 0.4251, 0.9602, 0.438, 0.949, 0.4534, 0.6056, 0.3119, 0.6211, 0.3163, 0.6233, 0.3191]}, "h3": {"difference": [0.0001], "newTime": [0.1043]}, "if_array_num": {"difference": [0.0005, 0.001, 0.0035, -0.0015, 0.0056, 0.0014], "newTime": [0.0821, 0.091, 0.1178, 0.1262, 0.1549, 0.1591]}, "if_array_string": {"difference": [-0.0051, 0.0052, 0.0023, 0.0054, 0.003, 0.0192], "newTime": [0.1871, 0.2664, 0.2202, 0.2601, 0.3424, 0.9187]}, "if_string_const": {"difference": [-0.0003, -0.0005, -0.0005, 0.0001], "newTime": [0.0092, 0.0094, 0.0099, 0.0079]}, "if_string_hits": {"difference": [-0.0003, 0.001, 0.0, -0.0029], "newTime": [0.0136, 0.0182, 0.0463, 0.0882]}, "information_value": {"difference": [0.0015, -0.0003], "newTime": [0.0423, 0.0238]}, "inserts_arrays_lowcardinality": {"difference": [-0.0013, 0.0006], "newTime": [0.0749, 0.2576]}, "int_parsing": {"difference": [0.0, -0.0003, 0.0001, 0.0004, 0.0004, 0.0007, 0.0009, 0.0004, 0.0, 0.0021, 0.0001, -0.0001, 0.0, 0.0003, -0.0001, 0.0008, -0.0003, -0.001, -0.0003, -0.0002, -0.0001, -0.0008, 0.0002, 0.0002, 0.0, 0.0002, 0.0001, 0.0003, 0.0, 0.0003, 0.0001, 0.0003, 0.0002, 0.0011, 0.0001, -0.0002, 0.0, 0.0, -0.0002, -0.0006, -0.0002, -0.0003, -0.0002, 0.0, 0.0002, 0.0003, 0.0001, 0.0003, -0.0004, 0.0, 0.0005, -0.0056, 0.0003, 0.0003, -0.0009, -0.0003, 0.0002, 0.0, 0.0039, 0.0001, -0.0003, -0.0001, -0.0001, 0.0, 0.0013, 0.0019, 0.0005, 0.0001, 0.0001, 0.0003, 0.0003, -0.0001, -0.0004, 0.0038, -0.0002, 0.0001, 0.0072, 0.0022, 0.0013, -0.0013, -0.0015, -0.0001, 0.0], "newTime": [0.0277, 0.0357, 0.0349, 0.0768, 0.0509, 0.0494, 0.0646, 0.0282, 0.0336, 0.0574, 0.0562, 0.0595, 0.0703, 0.0758, 0.0357, 0.1163, 0.0639, 0.0616, 0.0335, 0.0311, 0.0329, 0.0869, 0.0297, 0.0281, 0.0439, 0.0697, 0.0324, 0.0464, 0.0349, 0.0291, 0.0276, 0.0313, 0.0303, 0.0356, 0.0279, 0.029, 0.0288, 0.0319, 0.0276, 0.0503, 0.0577, 0.0298, 0.0728, 0.0287, 0.0288, 0.038, 0.0357, 0.0301, 0.0384, 0.0327, 0.0559, 0.1704, 0.0305, 0.0612, 0.0736, 0.0601, 0.0358, 0.0345, 0.0527, 0.0494, 0.0808, 0.081, 0.0334, 0.0348, 0.0527, 0.0611, 0.0323, 0.0317, 0.0313, 0.047, 0.0299, 0.0285, 0.0412, 0.1845, 0.0365, 0.0399, 0.1456, 0.1398, 0.0521, 0.0523, 0.0572, 0.0282, 0.0328]}, "jit_large_requests": {"difference": [0.001, 0.0011], "newTime": [0.0445, 0.0236]}, "jit_small_requests": {"difference": [-0.0006, 0.0001, -0.0001], "newTime": [0.0165, 0.0573, 0.0123]}, "joins_in_memory": {"difference": [-0.0004, -0.0004, -0.0002, 0.0, -0.0001, -0.003, -0.0376, -0.0374, 0.0072, -0.0302, -0.0466, -0.0103, -0.0488, -0.0916, -0.1111, -0.0842, -0.0879, -0.0297, -0.0371, -0.0122, -0.0367], "newTime": [0.0022, 0.0022, 0.0024, 0.0042, 0.002, 0.8013, 0.7782, 0.7966, 0.9654, 0.8178, 0.8118, 0.8463, 0.9464, 0.841, 0.8204, 0.8676, 1.012, 0.8245, 0.7919, 0.8463, 0.9787]}, "joins_in_memory_pmj": {"difference": [-0.0001, 0.0005, 0.0, -0.0004, 0.0027, -0.0003, 0.004, 0.0011, 0.0013, 0.0029, 0.004, 0.0001], "newTime": [0.0032, 0.0037, 0.0035, 0.0046, 0.0965, 0.0936, 0.1051, 0.1243, 0.0949, 0.0963, 0.1056, 0.1246]}, "json_extract_rapidjson": {"difference": [-0.0015, 0.0153, 0.0118, -0.0045, 0.0191, 0.0027, 0.0014, 0.0045, 0.0028, 0.0078, 0.0018, 0.0073, 0.0091], "newTime": [0.1647, 0.8294, 0.5643, 0.5886, 0.5669, 0.1616, 0.1591, 0.1629, 0.1643, 0.5628, 0.5746, 0.5696, 0.552]}, "json_extract_simdjson": {"difference": [-0.0003, -0.002, -0.0036, -0.0099, -0.0078, -0.0032, 0.0031, -0.0017, 0.0019, -0.002, 0.0015, -0.0128, -0.0036], "newTime": [0.1297, 0.5554, 0.2434, 0.2742, 0.2439, 0.1272, 0.128, 0.1265, 0.1303, 0.2364, 0.2597, 0.2335, 0.2363]}, "least_greatest_hits": {"difference": [-0.0005, -0.0101, -0.0014], "newTime": [0.0093, 0.1598, 0.0945]}, "linear_regression": {"difference": [0.0008, 0.0021, -0.0002, -0.0026, 0.0005], "newTime": [0.0344, 0.0359, 0.2463, 0.3728, 0.0953]}, "logical_functions_large": {"difference": [0.0462, -0.0032, -0.0112, -0.0012, 0.0003, -0.0087, 0.0002, 0.0014, -0.0042, -0.0001], "newTime": [0.2774, 0.1837, 0.9283, 0.2233, 0.389, 0.3354, 0.3583, 0.3707, 0.3354, 0.1725]}, "logical_functions_medium": {"difference": [-0.0001, -0.0008, -0.0001, 0.0017, -0.0021, -0.0001, 0.0062, 0.0008, 0.0075, 0.0002, -0.0433, -0.0258, 0.0018, -0.0041, -0.0032, 0.0087, -0.0315, 0.0123, -0.0012, -0.0058], "newTime": [0.1954, 0.2338, 0.2546, 0.1689, 0.1942, 0.1947, 0.3388, 0.169, 0.253, 0.2492, 0.2856, 0.2501, 0.2861, 0.3061, 0.3234, 0.3109, 0.2889, 0.2719, 0.3813, 0.2349]}, "logical_functions_small": {"difference": [-0.0005, 0.002, 0.0018, -0.0001, -0.0025, 0.0026, 0.0013, 0.0035, 0.0012, 0.001, 0.0023, -0.0024, -0.0755, -0.0215, -0.0086, -0.0028, 0.0667], "newTime": [0.16, 0.1587, 0.1317, 0.1331, 0.2732, 0.2783, 0.1933, 0.2009, 0.3413, 0.2494, 0.2498, 0.1492, 0.1938, 0.2508, 0.267, 0.2548, 0.2602]}, "materialized_view_parallel_insert": {"difference": [0.0028], "newTime": [1.1907]}, "math": {"difference": [-0.0007, -0.0002, 0.0015, 0.0031, -0.0018, 0.0005, -0.0009, 0.0, 0.0002, 0.001, 0.0008, -0.0007, 0.0017, -0.0003, 0.0006, 0.0029, 0.0003, 0.0041, 0.0008, -0.0018, -0.0003, 0.0012, 0.0004, 0.0001, 0.0206, 0.0182, -0.0003, 0.0332, -0.0256, 0.0004, -0.0257, 0.0423, -0.0172, 0.003, -0.0033, -0.0084, -0.0012, 0.0007, 0.0028, -0.0367, 0.0428, -0.0327, 0.0065, 0.0336, -0.0288, -0.0015, 0.0012, 0.0013, 0.0103, -0.0124, 0.0048, -0.0005, 0.0018, -0.0013, -0.0006, 0.0022, -0.0008, 0.0013, 0.0002, 0.0013], "newTime": [0.103, 0.105, 0.1027, 0.1892, 0.1978, 0.196, 0.1542, 0.1643, 0.1603, 0.143, 0.1501, 0.1482, 0.1964, 0.2005, 0.1921, 0.1591, 0.1641, 0.1623, 0.3341, 0.3435, 0.3357, 0.112, 0.1199, 0.1212, 0.5121, 0.5902, 0.5497, 0.5788, 0.6089, 0.6176, 0.3437, 0.4601, 0.4176, 0.3699, 0.4362, 0.4425, 0.2368, 0.1666, 0.2319, 0.3953, 0.5182, 0.4705, 0.3683, 0.4374, 0.4428, 0.2291, 0.1637, 0.2246, 0.8825, 0.8767, 0.8266, 0.2064, 0.1559, 0.1983, 0.2057, 0.2666, 0.2633, 0.2168, 0.1617, 0.2084]}, "merge_table_streams": {"difference": [-0.0008], "newTime": [0.0632]}, "merge_tree_huge_pk": {"difference": [0.0001, 0.0048, -0.0001, -0.0001], "newTime": [0.0027, 0.0603, 0.0101, 0.0049]}, "merge_tree_many_partitions": {"difference": [0.0001], "newTime": [0.0012]}, "merge_tree_many_partitions_2": {"difference": [-0.0007], "newTime": [0.1975]}, "merge_tree_simple_select": {"difference": [0.0], "newTime": [0.0006]}, "mingroupby-orderbylimit1": {"difference": [0.0038, 0.001, 0.0004, 0.0003, -0.012, 0.0003, -0.0007, -0.0068], "newTime": [0.2029, 0.1995, 0.02, 0.0332, 0.1051, 0.3001, 0.091, 0.4205]}, "modulo": {"difference": [-0.0042, 0.0215, -0.0025], "newTime": [0.1527, 0.4168, 0.1518]}, "ngram_distance": {"difference": [-0.0071, -0.0068, -0.0071, -0.0006, 0.0028, 0.0008, 0.0004, 0.0004, -0.0007, 0.0017, 0.0028, -0.0001, 0.0009, 0.0006, 0.0011, 0.0027], "newTime": [0.1819, 0.1811, 0.1816, 0.198, 0.2562, 0.1938, 0.1944, 0.1945, 0.3499, 0.3704, 0.3641, 0.3331, 0.3517, 0.5018, 0.3498, 0.3523]}, "number_formatting_formats": {"difference": [0.0509, 0.0905, -0.0505, 0.0437, -3.3728, -0.0428, -0.0949, -0.0869, -0.0565, 0.0103, 0.0155, -0.0091, 0.0526, 0.2061], "newTime": [2.0486, 5.149, 3.2853, 3.7012, 13.4643, 0.7704, 0.226, 4.2171, 3.5838, 1.6407, 2.7446, 1.9545, 2.4368, 5.9885]}, "order_by_decimals": {"difference": [0.0016, -0.0003, -0.0007, 0.0009, -0.0007], "newTime": [0.103, 0.0676, 0.0639, 0.0668, 0.0359]}, "order_by_read_in_order": {"difference": [0.004, -0.0073, -0.0252, 0.0019, -0.0009], "newTime": [0.1384, 0.133, 0.4052, 0.0716, 0.0621]}, "order_by_single_column": {"difference": [-0.0024, -0.0012, 0.001, 0.0017, 0.0016, 0.0041, -0.0031], "newTime": [0.1012, 0.0541, 0.1222, 0.1387, 0.1821, 0.3591, 0.4402]}, "parallel_insert": {"difference": [0.0026], "newTime": [1.2077]}, "parse_engine_file": {"difference": [-0.0125, 0.0046, 0.0032, 0.0133, 0.0014, 0.0026, -0.0109, -0.0052, -0.0111, 0.008, -0.0085, 0.0203, 0.0052, -0.0048], "newTime": [0.5341, 0.1458, 0.5817, 0.5275, 0.5248, 0.4264, 0.8061, 0.0741, 0.2836, 0.1369, 0.0565, 0.418, 0.3943, 0.3631]}, "pre_limit_no_sorting": {"difference": [0.0002], "newTime": [0.0602]}, "prewhere": {"difference": [-0.0085], "newTime": [0.6754]}, "random_printable_ascii": {"difference": [-0.0038, 0.0099, -0.0003, -0.0026, 0.0159, 0.0029, 0.0179], "newTime": [0.1874, 0.2113, 0.0188, 0.1331, 0.6826, 0.1453, 0.7036]}, "range": {"difference": [0.0024, -0.0018], "newTime": [0.2531, 0.1149]}, "read_hits_with_aio": {"difference": [-0.0008, 0.0016, 0.0044, -0.0012], "newTime": [0.1253, 0.1707, 0.273, 0.2499]}, "right": {"difference": [0.0012, -0.0035], "newTime": [0.2796, 0.3026]}, "round_down": {"difference": [-0.0388, -0.0006, 0.0025, 0.0006, 0.0006], "newTime": [1.1652, 0.0609, 0.0979, 0.0922, 0.0588]}, "round_methods": {"difference": [0.0, 0.0, -0.0003, -0.0001, 0.0, 0.0002, -0.0006, 0.0001, -0.0001, -0.0004, 0.0001, -0.0001, 0.0002, 0.0003, -0.0001], "newTime": [0.0144, 0.003, 0.0036, 0.0146, 0.0029, 0.0039, 0.0147, 0.0033, 0.0035, 0.0158, 0.0031, 0.0039, 0.0134, 0.0031, 0.0034]}, "scalar": {"difference": [-0.0025], "newTime": [0.058]}, "select_format": {"difference": [0.0058, -0.0159, 0.0204, 0.0171, 0.0123, 0.0177, 0.0054, -0.2323, -0.0031, 0.0141, 0.0269, -0.0134, 0.0015, 0.0219, 0.0098, 0.0066, 0.002, 0.0052, 0.0001, 0.0033, 0.0027, 0.0374], "newTime": [0.7883, 0.6262, 1.0934, 0.7964, 0.5974, 0.7699, 0.6593, 1.8086, 0.2743, 0.879, 3.6292, 3.6171, 3.6251, 3.6335, 3.5723, 0.4041, 0.6847, 0.5322, 0.4996, 0.5158, 0.6079, 1.1564]}, "set_hits": {"difference": [0.0, 0.0002, 0.0036, 0.0016, -0.0024, 0.0026], "newTime": [0.0696, 0.0443, 0.2845, 0.093, 0.3266, 0.1465]}, "set_index": {"difference": [0.0002, -0.0001, -0.0111, -0.0022, -0.0037], "newTime": [0.0187, 0.0059, 0.0975, 0.0286, 0.0514]}, "simple_join_query": {"difference": [0.0045, -0.0079, -0.0068, -0.008], "newTime": [0.5904, 0.5896, 0.5869, 0.5886]}, "slices_hits": {"difference": [-0.0002, -0.0001], "newTime": [0.0115, 0.0438]}, "sort": {"difference": [0.0032, 0.0007, -0.0037, 0.0054, 0.0006, 0.003, 0.0006, 0.0, -0.0041, -0.0007], "newTime": [0.2091, 0.2222, 0.2745, 0.1692, 0.1638, 0.2227, 0.2076, 0.5312, 0.5863, 0.1665]}, "string_join": {"difference": [-0.0007, -0.0046, -0.0036], "newTime": [0.3756, 0.322, 0.2013]}, "string_set": {"difference": [-0.0049, -0.0003, 0.01, 0.0033, -0.0023, -0.003, -0.0063], "newTime": [0.2766, 0.2152, 0.3582, 0.2625, 0.1577, 0.1958, 0.1415]}, "string_sort": {"difference": [0.0006, -0.0021, 0.0002, -0.0023, -0.0027, 0.0049, 0.0068, 0.0043, 0.0009, 0.0078, 0.0007, 0.0145, 0.0006, 0.0299, 0.001, -0.003, -0.0058, 0.0059, 0.0009, 0.0036, 0.0044, -0.0165, -0.0002, -0.0079, -0.0022, -0.0167, 0.0021, 0.0194, -0.0022, -0.0005, 0.0001, -0.0097, 0.0041, 0.0194, 0.0009, -0.0162, -0.0022, 0.0187, -0.006, 0.0175, -0.004, 0.0428, 0.0001, 0.0114, 0.0002, 0.0064, -0.0072, 0.0189, 0.0025, 0.0332, -0.0003, -0.0104, 0.0019, -0.0075, -0.0005, 0.0051, -0.0022, 0.0088, 0.0008, -0.0053, -0.001, 0.0027, 0.0039, 0.0482, 0.0054, 0.0112, -0.0003, -0.0311, 0.0025, -0.0063, 0.004, 0.0012, -0.0063, -0.0058, 0.0007, 0.0441, -0.0058, -0.0036, 0.0003, 0.0184, 0.013, -0.0031, -0.0012, 0.0045], "newTime": [0.027, 0.1452, 0.027, 0.1448, 0.0923, 0.4438, 0.2253, 1.0793, 0.1094, 0.5761, 0.2475, 1.0291, 0.2818, 1.0308, 0.0439, 0.2312, 0.0857, 0.4658, 0.0439, 0.2324, 0.2325, 1.1176, 0.1165, 0.6752, 0.2603, 1.0706, 0.2887, 1.0706, 0.1576, 0.8198, 0.2057, 1.0122, 0.2223, 1.0715, 0.159, 0.842, 0.2457, 1.0947, 0.4736, 1.6024, 0.4763, 1.5209, 0.0547, 0.294, 0.1083, 0.5006, 0.1238, 0.6231, 0.25, 1.0155, 0.0552, 0.2849, 0.2852, 1.0386, 0.3039, 1.0449, 0.189, 0.7901, 0.2391, 0.9684, 0.2525, 1.024, 0.5, 1.6044, 0.2805, 1.1041, 0.1989, 0.7748, 0.5491, 1.4983, 0.2193, 0.7216, 0.2568, 0.8981, 0.2821, 0.9863, 0.4649, 1.3745, 0.2854, 1.0037, 0.5578, 1.4038, 0.2203, 0.714]}, "sum_map": {"difference": [0.0012, 0.0084, -0.0023, 0.0035], "newTime": [0.0625, 0.6131, 0.0621, 0.6092]}, "synthetic_hardware_benchmark": {"difference": [0.001, 0.0001, -0.0006, 0.0002, 0.0021, 0.0018, -0.0066, -0.002, 0.0005, -0.0514, 0.0008, 0.0009, -0.0018, 0.0008, 0.0001, -0.0231, -0.0019, -0.0012, 0.0008, 0.0005, -0.0032, -0.007, -0.0018, -0.0131, -0.0082, 0.0141], "newTime": [0.0525, 0.0406, 0.0585, 0.0413, 0.1743, 0.1493, 0.1349, 0.1608, 0.1476, 0.6871, 0.1014, 0.0898, 0.0825, 0.0966, 0.0924, 0.4215, 0.3113, 0.3361, 0.2086, 0.1004, 0.1728, 0.3666, 0.4729, 1.7012, 0.8429, 1.6625]}, "trim_numbers": {"difference": [0.0, -0.0036, -0.0124, 0.0047, 0.0208, -0.0013], "newTime": [0.1178, 0.1162, 1.3662, 0.5332, 1.0947, 0.1323]}, "trim_urls": {"difference": [0.0036, 0.0096, 0.0131, -0.0042, -0.0048, 0.0006], "newTime": [0.3888, 0.3836, 1.9929, 0.5568, 0.8386, 0.3795]}, "trim_whitespace": {"difference": [-0.0051, 0.0026, 0.0, -0.0013, 0.0022, 0.0012], "newTime": [0.1014, 0.0762, 0.0476, 0.1113, 0.1024, 0.1076]}, "uniq": {"difference": [-0.0003, 0.0006, 0.0, 0.001, 0.0009, 0.0003, 0.0, 0.0008, 0.0009, 0.0251, -0.0007, -0.0002, -0.0008, -0.0004, -0.0004, -0.0007, -0.0005, -0.0012, 0.0083, 0.0054, -0.0018, -0.002, 0.0063, 0.0055, -0.0008, 0.003, -0.0013, -0.002, -0.1035, -0.0154, -0.0047, -0.0055, 0.0001, 0.0007, 0.0004, -0.0004, 0.0023, -0.0002, 0.0002, 0.0016, -0.0017, -0.0009, 0.0006, -0.0005, -0.0007, -0.0005, -0.0026, 0.001, -0.0002, 0.0007, -0.0001, 0.0001, -0.0001, -0.0008, -0.0003, 0.0011, 0.0004, 0.0276, -0.0001, 0.0003, 0.0003, -0.0001, 0.0002, -0.0007, -0.0011, -0.0033, 0.002, 0.0008, -0.0008, -0.0034, -0.0008, 0.0022, 0.0032, 0.0169, 0.0031, 0.0006, -0.0063, -0.0027, -0.0011, -0.0012], "newTime": [0.0199, 0.0702, 0.0458, 0.0499, 0.051, 0.0533, 0.0577, 0.0714, 0.0942, 2.0109, 0.0426, 0.0197, 0.0194, 0.0196, 0.0193, 0.0194, 0.2662, 0.4131, 0.3925, 0.3861, 0.3811, 0.3831, 0.3901, 0.3956, 0.3896, 0.5049, 0.4343, 0.3298, 1.0002, 0.4021, 0.2975, 0.3036, 0.0574, 0.175, 0.1094, 0.1212, 0.1334, 0.1443, 0.1531, 0.1653, 0.1889, 0.3856, 0.1163, 0.0592, 0.0691, 0.0613, 0.0575, 0.0598, 0.0416, 0.2253, 0.0805, 0.0915, 0.1052, 0.1217, 0.1487, 0.1904, 0.2598, 1.8506, 0.0853, 0.0405, 0.0413, 0.0401, 0.0404, 0.0403, 0.2747, 0.3474, 0.3425, 0.3442, 0.3526, 0.3433, 0.3434, 0.3502, 0.3573, 1.3306, 0.359, 0.31, 0.5193, 0.3151, 0.2858, 0.2907]}, "url_hits": {"difference": [0.0471, 0.012, 0.0012, 0.0005, -0.0032, -0.0022, 0.0, 0.0075, -0.0057, -0.0067, -0.0019, 0.0059, 0.0021, 0.0002, -0.0165, 0.0029, -0.0013, 0.0071, -0.0078], "newTime": [1.0499, 0.8022, 0.3486, 0.3301, 0.3946, 0.4278, 0.398, 0.324, 0.3612, 0.4319, 0.4515, 0.396, 0.3116, 0.3229, 0.4329, 0.2687, 0.3719, 0.3962, 0.3114]}, "vectorize_aggregation_combinators": {"difference": [-0.0068, 0.0012, 0.0001, 0.0024, -0.0025], "newTime": [0.5054, 0.0317, 0.0262, 0.3449, 0.3162]}, "visit_param_extract_raw": {"difference": [0.0009, -0.0056, 0.0019], "newTime": [0.0943, 0.6948, 0.2017]}, "website": {"difference": [-0.0026, -0.0009, 0.0065, 0.0003, 0.0, -0.0181, 0.0016, -0.0004, -0.0004, -0.0001, -0.0008, 0.0008, -0.0004, 0.0014, 0.0001, 0.0015, -0.0047, -0.0019, -0.0001, 0.0004, -0.0016, 0.0152, 0.0008, 0.0031, -0.0027, -0.0014, -0.0017, -0.0008, -0.0005, -0.0052, 0.0011, -0.0067, 0.0012, 0.0012, 0.0, 0.0256, 0.0003, 0.0004, -0.0002, 0.0003, -0.02, 0.0015, -0.0035, 0.0052, -0.0009, 0.0092, -0.0012, -0.0008, -0.0028, 0.0008, -0.0008, 0.0, -0.0055, 0.0, -0.0002, -0.0042, -0.002, -0.0015, 0.0001, 0.0001, 0.0002, 0.0007, -0.0008, 0.0017, -0.0001, 0.0002, -0.0004, -0.0002, 0.0008, 0.0012, 0.0, 0.0002], "newTime": [0.4493, 0.2078, 1.3706, 0.1626, 0.0061, 0.4588, 0.3742, 0.0467, 0.0839, 0.0231, 0.0775, 0.2011, 0.0362, 0.1754, 0.0325, 0.2733, 0.3451, 0.0538, 0.0986, 0.1002, 0.0775, 0.7668, 0.1272, 0.3188, 0.2564, 0.3394, 0.0522, 0.0303, 0.0438, 0.1589, 0.1928, 0.0756, 0.0251, 0.0912, 0.0312, 1.3726, 0.1575, 0.0103, 0.0121, 0.5721, 0.9734, 0.0608, 0.098, 0.4128, 0.0451, 1.7075, 0.1994, 0.4009, 0.2367, 0.0627, 0.0081, 0.0007, 0.2665, 0.0007, 0.006, 0.0182, 0.4551, 0.0812, 0.0105, 0.0047, 0.0165, 0.0073, 0.9363, 0.1756, 0.0195, 0.0066, 0.0025, 0.0093, 0.1286, 0.0436, 0.0704, 0.0418]}}, "reportErrors": []}
